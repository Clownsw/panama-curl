// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class icmp_error_info {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sin_family"),
                Constants$root.C_SHORT$LAYOUT.withName("sin_port"),
                MemoryLayout.structLayout(
                    MemoryLayout.unionLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_CHAR$LAYOUT.withName("s_b1"),
                            Constants$root.C_CHAR$LAYOUT.withName("s_b2"),
                            Constants$root.C_CHAR$LAYOUT.withName("s_b3"),
                            Constants$root.C_CHAR$LAYOUT.withName("s_b4")
                        ).withName("S_un_b"),
                        MemoryLayout.structLayout(
                            Constants$root.C_SHORT$LAYOUT.withName("s_w1"),
                            Constants$root.C_SHORT$LAYOUT.withName("s_w2")
                        ).withName("S_un_w"),
                        Constants$root.C_LONG$LAYOUT.withName("S_addr")
                    ).withName("S_un")
                ).withName("sin_addr"),
                MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("sin_zero")
            ).withName("Ipv4"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("sin6_family"),
                Constants$root.C_SHORT$LAYOUT.withName("sin6_port"),
                Constants$root.C_LONG$LAYOUT.withName("sin6_flowinfo"),
                MemoryLayout.structLayout(
                    MemoryLayout.unionLayout(
                        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("Byte"),
                        MemoryLayout.sequenceLayout(8, Constants$root.C_SHORT$LAYOUT).withName("Word")
                    ).withName("u")
                ).withName("sin6_addr"),
                MemoryLayout.unionLayout(
                    Constants$root.C_LONG$LAYOUT.withName("sin6_scope_id"),
                    MemoryLayout.structLayout(
                        MemoryLayout.unionLayout(
                            MemoryLayout.structLayout(
                                MemoryLayout.structLayout(
                                    MemoryLayout.paddingLayout(28).withName("Zone"),
                                    MemoryLayout.paddingLayout(4).withName("Level")
                                )
                            ).withName("$anon$0"),
                            Constants$root.C_LONG$LAYOUT.withName("Value")
                        ).withName("$anon$0")
                    ).withName("sin6_scope_struct")
                ).withName("$anon$0")
            ).withName("Ipv6"),
            Constants$root.C_SHORT$LAYOUT.withName("si_family")
        ).withName("srcaddress"),
        Constants$root.C_LONG$LAYOUT.withName("protocol"),
        Constants$root.C_CHAR$LAYOUT.withName("type"),
        Constants$root.C_CHAR$LAYOUT.withName("code"),
        MemoryLayout.paddingLayout(16)
    ).withName("icmp_error_info");
    public static MemoryLayout $LAYOUT() {
        return icmp_error_info.$struct$LAYOUT;
    }
    public static MemorySegment srcaddress$slice(MemorySegment seg) {
        return seg.asSlice(0, 28);
    }
    static final VarHandle protocol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("protocol"));
    public static VarHandle protocol$VH() {
        return icmp_error_info.protocol$VH;
    }
    public static int protocol$get(MemorySegment seg) {
        return (int)icmp_error_info.protocol$VH.get(seg);
    }
    public static void protocol$set( MemorySegment seg, int x) {
        icmp_error_info.protocol$VH.set(seg, x);
    }
    public static int protocol$get(MemorySegment seg, long index) {
        return (int)icmp_error_info.protocol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void protocol$set(MemorySegment seg, long index, int x) {
        icmp_error_info.protocol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return icmp_error_info.type$VH;
    }
    public static byte type$get(MemorySegment seg) {
        return (byte)icmp_error_info.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, byte x) {
        icmp_error_info.type$VH.set(seg, x);
    }
    public static byte type$get(MemorySegment seg, long index) {
        return (byte)icmp_error_info.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, byte x) {
        icmp_error_info.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle code$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("code"));
    public static VarHandle code$VH() {
        return icmp_error_info.code$VH;
    }
    public static byte code$get(MemorySegment seg) {
        return (byte)icmp_error_info.code$VH.get(seg);
    }
    public static void code$set( MemorySegment seg, byte x) {
        icmp_error_info.code$VH.set(seg, x);
    }
    public static byte code$get(MemorySegment seg, long index) {
        return (byte)icmp_error_info.code$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void code$set(MemorySegment seg, long index, byte x) {
        icmp_error_info.code$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


