// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface LPLOOKUPSERVICE_COMPLETION_ROUTINE {

    void apply(int dwError, int dwBytes, java.lang.foreign.MemoryAddress lpOverlapped);
    static MemorySegment allocate(LPLOOKUPSERVICE_COMPLETION_ROUTINE fi, MemorySession session) {
        return RuntimeHelper.upcallStub(LPLOOKUPSERVICE_COMPLETION_ROUTINE.class, fi, constants$1375.LPLOOKUPSERVICE_COMPLETION_ROUTINE$FUNC, session);
    }
    static LPLOOKUPSERVICE_COMPLETION_ROUTINE ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (int _dwError, int _dwBytes, java.lang.foreign.MemoryAddress _lpOverlapped) -> {
            try {
                constants$1375.LPLOOKUPSERVICE_COMPLETION_ROUTINE$MH.invokeExact((Addressable)symbol, _dwError, _dwBytes, (java.lang.foreign.Addressable)_lpOverlapped);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


