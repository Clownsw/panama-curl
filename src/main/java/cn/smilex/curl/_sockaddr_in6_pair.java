// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _sockaddr_in6_pair {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("SourceAddress"),
        Constants$root.C_POINTER$LAYOUT.withName("DestinationAddress")
    ).withName("_sockaddr_in6_pair");
    public static MemoryLayout $LAYOUT() {
        return _sockaddr_in6_pair.$struct$LAYOUT;
    }
    static final VarHandle SourceAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SourceAddress"));
    public static VarHandle SourceAddress$VH() {
        return _sockaddr_in6_pair.SourceAddress$VH;
    }
    public static MemoryAddress SourceAddress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_sockaddr_in6_pair.SourceAddress$VH.get(seg);
    }
    public static void SourceAddress$set( MemorySegment seg, MemoryAddress x) {
        _sockaddr_in6_pair.SourceAddress$VH.set(seg, x);
    }
    public static MemoryAddress SourceAddress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_sockaddr_in6_pair.SourceAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SourceAddress$set(MemorySegment seg, long index, MemoryAddress x) {
        _sockaddr_in6_pair.SourceAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DestinationAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DestinationAddress"));
    public static VarHandle DestinationAddress$VH() {
        return _sockaddr_in6_pair.DestinationAddress$VH;
    }
    public static MemoryAddress DestinationAddress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_sockaddr_in6_pair.DestinationAddress$VH.get(seg);
    }
    public static void DestinationAddress$set( MemorySegment seg, MemoryAddress x) {
        _sockaddr_in6_pair.DestinationAddress$VH.set(seg, x);
    }
    public static MemoryAddress DestinationAddress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_sockaddr_in6_pair.DestinationAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DestinationAddress$set(MemorySegment seg, long index, MemoryAddress x) {
        _sockaddr_in6_pair.DestinationAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


