// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface curl_prereq_callback {

    int apply(java.lang.foreign.MemoryAddress clientp, java.lang.foreign.MemoryAddress conn_primary_ip, java.lang.foreign.MemoryAddress conn_local_ip, int conn_primary_port, int conn_local_port);
    static MemorySegment allocate(curl_prereq_callback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(curl_prereq_callback.class, fi, constants$1388.curl_prereq_callback$FUNC, session);
    }
    static curl_prereq_callback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _clientp, java.lang.foreign.MemoryAddress _conn_primary_ip, java.lang.foreign.MemoryAddress _conn_local_ip, int _conn_primary_port, int _conn_local_port) -> {
            try {
                return (int)constants$1388.curl_prereq_callback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_clientp, (java.lang.foreign.Addressable)_conn_primary_ip, (java.lang.foreign.Addressable)_conn_local_ip, _conn_primary_port, _conn_local_port);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


