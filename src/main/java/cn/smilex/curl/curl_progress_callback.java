// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface curl_progress_callback {

    int apply(java.lang.foreign.MemoryAddress clientp, double dltotal, double dlnow, double ultotal, double ulnow);
    static MemorySegment allocate(curl_progress_callback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(curl_progress_callback.class, fi, constants$1381.curl_progress_callback$FUNC, session);
    }
    static curl_progress_callback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _clientp, double _dltotal, double _dlnow, double _ultotal, double _ulnow) -> {
            try {
                return (int)constants$1381.curl_progress_callback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_clientp, _dltotal, _dlnow, _ultotal, _ulnow);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


