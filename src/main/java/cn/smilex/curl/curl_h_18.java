// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class curl_h_18 extends curl_h_17 {

    public static OfAddress LPSCROLLINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCSCROLLINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetScrollInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$576.SetScrollInfo$MH,"SetScrollInfo");
    }
    public static int SetScrollInfo ( Addressable hwnd,  int nBar,  Addressable lpsi,  int redraw) {
        var mh$ = SetScrollInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, nBar, lpsi, redraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScrollInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$576.GetScrollInfo$MH,"GetScrollInfo");
    }
    public static int GetScrollInfo ( Addressable hwnd,  int nBar,  Addressable lpsi) {
        var mh$ = GetScrollInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, nBar, lpsi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPMDICREATESTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMDICREATESTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMDICREATESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCLIENTCREATESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DefFrameProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$576.DefFrameProcA$MH,"DefFrameProcA");
    }
    public static long DefFrameProcA ( Addressable hWnd,  Addressable hWndMDIClient,  int uMsg,  long wParam,  long lParam) {
        var mh$ = DefFrameProcA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, hWndMDIClient, uMsg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefFrameProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$576.DefFrameProcW$MH,"DefFrameProcW");
    }
    public static long DefFrameProcW ( Addressable hWnd,  Addressable hWndMDIClient,  int uMsg,  long wParam,  long lParam) {
        var mh$ = DefFrameProcW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, hWndMDIClient, uMsg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefMDIChildProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$576.DefMDIChildProcA$MH,"DefMDIChildProcA");
    }
    public static long DefMDIChildProcA ( Addressable hWnd,  int uMsg,  long wParam,  long lParam) {
        var mh$ = DefMDIChildProcA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, uMsg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefMDIChildProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$577.DefMDIChildProcW$MH,"DefMDIChildProcW");
    }
    public static long DefMDIChildProcW ( Addressable hWnd,  int uMsg,  long wParam,  long lParam) {
        var mh$ = DefMDIChildProcW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, uMsg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateMDISysAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$577.TranslateMDISysAccel$MH,"TranslateMDISysAccel");
    }
    public static int TranslateMDISysAccel ( Addressable hWndClient,  Addressable lpMsg) {
        var mh$ = TranslateMDISysAccel$MH();
        try {
            return (int)mh$.invokeExact(hWndClient, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ArrangeIconicWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$577.ArrangeIconicWindows$MH,"ArrangeIconicWindows");
    }
    public static int ArrangeIconicWindows ( Addressable hWnd) {
        var mh$ = ArrangeIconicWindows$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMDIWindowA$MH() {
        return RuntimeHelper.requireNonNull(constants$577.CreateMDIWindowA$MH,"CreateMDIWindowA");
    }
    public static MemoryAddress CreateMDIWindowA ( Addressable lpClassName,  Addressable lpWindowName,  int dwStyle,  int X,  int Y,  int nWidth,  int nHeight,  Addressable hWndParent,  Addressable hInstance,  long lParam) {
        var mh$ = CreateMDIWindowA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hInstance, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMDIWindowW$MH() {
        return RuntimeHelper.requireNonNull(constants$577.CreateMDIWindowW$MH,"CreateMDIWindowW");
    }
    public static MemoryAddress CreateMDIWindowW ( Addressable lpClassName,  Addressable lpWindowName,  int dwStyle,  int X,  int Y,  int nWidth,  int nHeight,  Addressable hWndParent,  Addressable hInstance,  long lParam) {
        var mh$ = CreateMDIWindowW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hInstance, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TileWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$577.TileWindows$MH,"TileWindows");
    }
    public static short TileWindows ( Addressable hwndParent,  int wHow,  Addressable lpRect,  int cKids,  Addressable lpKids) {
        var mh$ = TileWindows$MH();
        try {
            return (short)mh$.invokeExact(hwndParent, wHow, lpRect, cKids, lpKids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CascadeWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$578.CascadeWindows$MH,"CascadeWindows");
    }
    public static short CascadeWindows ( Addressable hwndParent,  int wHow,  Addressable lpRect,  int cKids,  Addressable lpKids) {
        var mh$ = CascadeWindows$MH();
        try {
            return (short)mh$.invokeExact(hwndParent, wHow, lpRect, cKids, lpKids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMULTIKEYHELPA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMULTIKEYHELPA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMULTIKEYHELPW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMULTIKEYHELPW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMULTIKEYHELP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMULTIKEYHELP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHELPWININFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHELPWININFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHELPWININFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHELPWININFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHELPWININFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHELPWININFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WinHelpA$MH() {
        return RuntimeHelper.requireNonNull(constants$578.WinHelpA$MH,"WinHelpA");
    }
    public static int WinHelpA ( Addressable hWndMain,  Addressable lpszHelp,  int uCommand,  long dwData) {
        var mh$ = WinHelpA$MH();
        try {
            return (int)mh$.invokeExact(hWndMain, lpszHelp, uCommand, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WinHelpW$MH() {
        return RuntimeHelper.requireNonNull(constants$578.WinHelpW$MH,"WinHelpW");
    }
    public static int WinHelpW ( Addressable hWndMain,  Addressable lpszHelp,  int uCommand,  long dwData) {
        var mh$ = WinHelpW$MH();
        try {
            return (int)mh$.invokeExact(hWndMain, lpszHelp, uCommand, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGuiResources$MH() {
        return RuntimeHelper.requireNonNull(constants$578.GetGuiResources$MH,"GetGuiResources");
    }
    public static int GetGuiResources ( Addressable hProcess,  int uiFlags) {
        var mh$ = GetGuiResources$MH();
        try {
            return (int)mh$.invokeExact(hProcess, uiFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTOUCHPREDICTIONPARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static int HANDEDNESS_LEFT() {
        return (int)0L;
    }
    public static int HANDEDNESS_RIGHT() {
        return (int)1L;
    }
    public static OfAddress PHANDEDNESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNONCLIENTMETRICSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNONCLIENTMETRICSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNONCLIENTMETRICSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNONCLIENTMETRICSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNONCLIENTMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNONCLIENTMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMINIMIZEDMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMINIMIZEDMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PICONMETRICSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPICONMETRICSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PICONMETRICSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPICONMETRICSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PICONMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPICONMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPANIMATIONINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERIALKEYSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERIALKEYSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERIALKEYS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHIGHCONTRASTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHIGHCONTRASTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHIGHCONTRAST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIDEOPARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPVIDEOPARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChangeDisplaySettingsA$MH() {
        return RuntimeHelper.requireNonNull(constants$578.ChangeDisplaySettingsA$MH,"ChangeDisplaySettingsA");
    }
    public static int ChangeDisplaySettingsA ( Addressable lpDevMode,  int dwFlags) {
        var mh$ = ChangeDisplaySettingsA$MH();
        try {
            return (int)mh$.invokeExact(lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeDisplaySettingsW$MH() {
        return RuntimeHelper.requireNonNull(constants$578.ChangeDisplaySettingsW$MH,"ChangeDisplaySettingsW");
    }
    public static int ChangeDisplaySettingsW ( Addressable lpDevMode,  int dwFlags) {
        var mh$ = ChangeDisplaySettingsW$MH();
        try {
            return (int)mh$.invokeExact(lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeDisplaySettingsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$579.ChangeDisplaySettingsExA$MH,"ChangeDisplaySettingsExA");
    }
    public static int ChangeDisplaySettingsExA ( Addressable lpszDeviceName,  Addressable lpDevMode,  Addressable hwnd,  int dwflags,  Addressable lParam) {
        var mh$ = ChangeDisplaySettingsExA$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, lpDevMode, hwnd, dwflags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeDisplaySettingsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$579.ChangeDisplaySettingsExW$MH,"ChangeDisplaySettingsExW");
    }
    public static int ChangeDisplaySettingsExW ( Addressable lpszDeviceName,  Addressable lpDevMode,  Addressable hwnd,  int dwflags,  Addressable lParam) {
        var mh$ = ChangeDisplaySettingsExW$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, lpDevMode, hwnd, dwflags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsA$MH() {
        return RuntimeHelper.requireNonNull(constants$579.EnumDisplaySettingsA$MH,"EnumDisplaySettingsA");
    }
    public static int EnumDisplaySettingsA ( Addressable lpszDeviceName,  int iModeNum,  Addressable lpDevMode) {
        var mh$ = EnumDisplaySettingsA$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsW$MH() {
        return RuntimeHelper.requireNonNull(constants$579.EnumDisplaySettingsW$MH,"EnumDisplaySettingsW");
    }
    public static int EnumDisplaySettingsW ( Addressable lpszDeviceName,  int iModeNum,  Addressable lpDevMode) {
        var mh$ = EnumDisplaySettingsW$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$579.EnumDisplaySettingsExA$MH,"EnumDisplaySettingsExA");
    }
    public static int EnumDisplaySettingsExA ( Addressable lpszDeviceName,  int iModeNum,  Addressable lpDevMode,  int dwFlags) {
        var mh$ = EnumDisplaySettingsExA$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$579.EnumDisplaySettingsExW$MH,"EnumDisplaySettingsExW");
    }
    public static int EnumDisplaySettingsExW ( Addressable lpszDeviceName,  int iModeNum,  Addressable lpDevMode,  int dwFlags) {
        var mh$ = EnumDisplaySettingsExW$MH();
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplayDevicesA$MH() {
        return RuntimeHelper.requireNonNull(constants$580.EnumDisplayDevicesA$MH,"EnumDisplayDevicesA");
    }
    public static int EnumDisplayDevicesA ( Addressable lpDevice,  int iDevNum,  Addressable lpDisplayDevice,  int dwFlags) {
        var mh$ = EnumDisplayDevicesA$MH();
        try {
            return (int)mh$.invokeExact(lpDevice, iDevNum, lpDisplayDevice, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplayDevicesW$MH() {
        return RuntimeHelper.requireNonNull(constants$580.EnumDisplayDevicesW$MH,"EnumDisplayDevicesW");
    }
    public static int EnumDisplayDevicesW ( Addressable lpDevice,  int iDevNum,  Addressable lpDisplayDevice,  int dwFlags) {
        var mh$ = EnumDisplayDevicesW$MH();
        try {
            return (int)mh$.invokeExact(lpDevice, iDevNum, lpDisplayDevice, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDisplayConfigBufferSizes$MH() {
        return RuntimeHelper.requireNonNull(constants$580.GetDisplayConfigBufferSizes$MH,"GetDisplayConfigBufferSizes");
    }
    public static int GetDisplayConfigBufferSizes ( int flags,  Addressable numPathArrayElements,  Addressable numModeInfoArrayElements) {
        var mh$ = GetDisplayConfigBufferSizes$MH();
        try {
            return (int)mh$.invokeExact(flags, numPathArrayElements, numModeInfoArrayElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDisplayConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$580.SetDisplayConfig$MH,"SetDisplayConfig");
    }
    public static int SetDisplayConfig ( int numPathArrayElements,  Addressable pathArray,  int numModeInfoArrayElements,  Addressable modeInfoArray,  int flags) {
        var mh$ = SetDisplayConfig$MH();
        try {
            return (int)mh$.invokeExact(numPathArrayElements, pathArray, numModeInfoArrayElements, modeInfoArray, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDisplayConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$580.QueryDisplayConfig$MH,"QueryDisplayConfig");
    }
    public static int QueryDisplayConfig ( int flags,  Addressable numPathArrayElements,  Addressable pathArray,  Addressable numModeInfoArrayElements,  Addressable modeInfoArray,  Addressable currentTopologyId) {
        var mh$ = QueryDisplayConfig$MH();
        try {
            return (int)mh$.invokeExact(flags, numPathArrayElements, pathArray, numModeInfoArrayElements, modeInfoArray, currentTopologyId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisplayConfigGetDeviceInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$580.DisplayConfigGetDeviceInfo$MH,"DisplayConfigGetDeviceInfo");
    }
    public static int DisplayConfigGetDeviceInfo ( Addressable requestPacket) {
        var mh$ = DisplayConfigGetDeviceInfo$MH();
        try {
            return (int)mh$.invokeExact(requestPacket);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisplayConfigSetDeviceInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$581.DisplayConfigSetDeviceInfo$MH,"DisplayConfigSetDeviceInfo");
    }
    public static int DisplayConfigSetDeviceInfo ( Addressable setPacket) {
        var mh$ = DisplayConfigSetDeviceInfo$MH();
        try {
            return (int)mh$.invokeExact(setPacket);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemParametersInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$581.SystemParametersInfoA$MH,"SystemParametersInfoA");
    }
    public static int SystemParametersInfoA ( int uiAction,  int uiParam,  Addressable pvParam,  int fWinIni) {
        var mh$ = SystemParametersInfoA$MH();
        try {
            return (int)mh$.invokeExact(uiAction, uiParam, pvParam, fWinIni);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemParametersInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$581.SystemParametersInfoW$MH,"SystemParametersInfoW");
    }
    public static int SystemParametersInfoW ( int uiAction,  int uiParam,  Addressable pvParam,  int fWinIni) {
        var mh$ = SystemParametersInfoW$MH();
        try {
            return (int)mh$.invokeExact(uiAction, uiParam, pvParam, fWinIni);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemParametersInfoForDpi$MH() {
        return RuntimeHelper.requireNonNull(constants$581.SystemParametersInfoForDpi$MH,"SystemParametersInfoForDpi");
    }
    public static int SystemParametersInfoForDpi ( int uiAction,  int uiParam,  Addressable pvParam,  int fWinIni,  int dpi) {
        var mh$ = SystemParametersInfoForDpi$MH();
        try {
            return (int)mh$.invokeExact(uiAction, uiParam, pvParam, fWinIni, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPFILTERKEYS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTICKYKEYS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEKEYS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPACCESSTIMEOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOUNDSENTRYA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOUNDSENTRYW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOUNDSENTRY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SoundSentry$MH() {
        return RuntimeHelper.requireNonNull(constants$581.SoundSentry$MH,"SoundSentry");
    }
    public static int SoundSentry () {
        var mh$ = SoundSentry$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPTOGGLEKEYS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAUDIODESCRIPTION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetDebugErrorLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$581.SetDebugErrorLevel$MH,"SetDebugErrorLevel");
    }
    public static void SetDebugErrorLevel ( int dwLevel) {
        var mh$ = SetDebugErrorLevel$MH();
        try {
            mh$.invokeExact(dwLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLastErrorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$582.SetLastErrorEx$MH,"SetLastErrorEx");
    }
    public static void SetLastErrorEx ( int dwErrCode,  int dwType) {
        var mh$ = SetLastErrorEx$MH();
        try {
            mh$.invokeExact(dwErrCode, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InternalGetWindowText$MH() {
        return RuntimeHelper.requireNonNull(constants$582.InternalGetWindowText$MH,"InternalGetWindowText");
    }
    public static int InternalGetWindowText ( Addressable hWnd,  Addressable pString,  int cchMaxCount) {
        var mh$ = InternalGetWindowText$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pString, cchMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelShutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$582.CancelShutdown$MH,"CancelShutdown");
    }
    public static int CancelShutdown () {
        var mh$ = CancelShutdown$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MonitorFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$582.MonitorFromPoint$MH,"MonitorFromPoint");
    }
    public static MemoryAddress MonitorFromPoint ( MemorySegment pt,  int dwFlags) {
        var mh$ = MonitorFromPoint$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pt, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MonitorFromRect$MH() {
        return RuntimeHelper.requireNonNull(constants$582.MonitorFromRect$MH,"MonitorFromRect");
    }
    public static MemoryAddress MonitorFromRect ( Addressable lprc,  int dwFlags) {
        var mh$ = MonitorFromRect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lprc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MonitorFromWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$582.MonitorFromWindow$MH,"MonitorFromWindow");
    }
    public static MemoryAddress MonitorFromWindow ( Addressable hwnd,  int dwFlags) {
        var mh$ = MonitorFromWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hwnd, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPMONITORINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITORINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITORINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITORINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMonitorInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$583.GetMonitorInfoA$MH,"GetMonitorInfoA");
    }
    public static int GetMonitorInfoA ( Addressable hMonitor,  Addressable lpmi) {
        var mh$ = GetMonitorInfoA$MH();
        try {
            return (int)mh$.invokeExact(hMonitor, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$583.GetMonitorInfoW$MH,"GetMonitorInfoW");
    }
    public static int GetMonitorInfoW ( Addressable hMonitor,  Addressable lpmi) {
        var mh$ = GetMonitorInfoW$MH();
        try {
            return (int)mh$.invokeExact(hMonitor, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplayMonitors$MH() {
        return RuntimeHelper.requireNonNull(constants$583.EnumDisplayMonitors$MH,"EnumDisplayMonitors");
    }
    public static int EnumDisplayMonitors ( Addressable hdc,  Addressable lprcClip,  Addressable lpfnEnum,  long dwData) {
        var mh$ = EnumDisplayMonitors$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprcClip, lpfnEnum, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyWinEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$583.NotifyWinEvent$MH,"NotifyWinEvent");
    }
    public static void NotifyWinEvent ( int event,  Addressable hwnd,  int idObject,  int idChild) {
        var mh$ = NotifyWinEvent$MH();
        try {
            mh$.invokeExact(event, hwnd, idObject, idChild);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWinEventHook$MH() {
        return RuntimeHelper.requireNonNull(constants$584.SetWinEventHook$MH,"SetWinEventHook");
    }
    public static MemoryAddress SetWinEventHook ( int eventMin,  int eventMax,  Addressable hmodWinEventProc,  Addressable pfnWinEventProc,  int idProcess,  int idThread,  int dwFlags) {
        var mh$ = SetWinEventHook$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(eventMin, eventMax, hmodWinEventProc, pfnWinEventProc, idProcess, idThread, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWinEventHookInstalled$MH() {
        return RuntimeHelper.requireNonNull(constants$584.IsWinEventHookInstalled$MH,"IsWinEventHookInstalled");
    }
    public static int IsWinEventHookInstalled ( int event) {
        var mh$ = IsWinEventHookInstalled$MH();
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhookWinEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$584.UnhookWinEvent$MH,"UnhookWinEvent");
    }
    public static int UnhookWinEvent ( Addressable hWinEventHook) {
        var mh$ = UnhookWinEvent$MH();
        try {
            return (int)mh$.invokeExact(hWinEventHook);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PGUITHREADINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGUITHREADINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetGUIThreadInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$584.GetGUIThreadInfo$MH,"GetGUIThreadInfo");
    }
    public static int GetGUIThreadInfo ( int idThread,  Addressable pgui) {
        var mh$ = GetGUIThreadInfo$MH();
        try {
            return (int)mh$.invokeExact(idThread, pgui);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BlockInput$MH() {
        return RuntimeHelper.requireNonNull(constants$585.BlockInput$MH,"BlockInput");
    }
    public static int BlockInput ( int fBlockIt) {
        var mh$ = BlockInput$MH();
        try {
            return (int)mh$.invokeExact(fBlockIt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDPIAware$MH() {
        return RuntimeHelper.requireNonNull(constants$585.SetProcessDPIAware$MH,"SetProcessDPIAware");
    }
    public static int SetProcessDPIAware () {
        var mh$ = SetProcessDPIAware$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessDPIAware$MH() {
        return RuntimeHelper.requireNonNull(constants$585.IsProcessDPIAware$MH,"IsProcessDPIAware");
    }
    public static int IsProcessDPIAware () {
        var mh$ = IsProcessDPIAware$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$585.SetThreadDpiAwarenessContext$MH,"SetThreadDpiAwarenessContext");
    }
    public static MemoryAddress SetThreadDpiAwarenessContext ( Addressable dpiContext) {
        var mh$ = SetThreadDpiAwarenessContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dpiContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$585.GetThreadDpiAwarenessContext$MH,"GetThreadDpiAwarenessContext");
    }
    public static MemoryAddress GetThreadDpiAwarenessContext () {
        var mh$ = GetThreadDpiAwarenessContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$585.GetWindowDpiAwarenessContext$MH,"GetWindowDpiAwarenessContext");
    }
    public static MemoryAddress GetWindowDpiAwarenessContext ( Addressable hwnd) {
        var mh$ = GetWindowDpiAwarenessContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAwarenessFromDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$586.GetAwarenessFromDpiAwarenessContext$MH,"GetAwarenessFromDpiAwarenessContext");
    }
    public static int GetAwarenessFromDpiAwarenessContext ( Addressable value) {
        var mh$ = GetAwarenessFromDpiAwarenessContext$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiFromDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$586.GetDpiFromDpiAwarenessContext$MH,"GetDpiFromDpiAwarenessContext");
    }
    public static int GetDpiFromDpiAwarenessContext ( Addressable value) {
        var mh$ = GetDpiFromDpiAwarenessContext$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreDpiAwarenessContextsEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$586.AreDpiAwarenessContextsEqual$MH,"AreDpiAwarenessContextsEqual");
    }
    public static int AreDpiAwarenessContextsEqual ( Addressable dpiContextA,  Addressable dpiContextB) {
        var mh$ = AreDpiAwarenessContextsEqual$MH();
        try {
            return (int)mh$.invokeExact(dpiContextA, dpiContextB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$586.IsValidDpiAwarenessContext$MH,"IsValidDpiAwarenessContext");
    }
    public static int IsValidDpiAwarenessContext ( Addressable value) {
        var mh$ = IsValidDpiAwarenessContext$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiForWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$586.GetDpiForWindow$MH,"GetDpiForWindow");
    }
    public static int GetDpiForWindow ( Addressable hwnd) {
        var mh$ = GetDpiForWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiForSystem$MH() {
        return RuntimeHelper.requireNonNull(constants$586.GetDpiForSystem$MH,"GetDpiForSystem");
    }
    public static int GetDpiForSystem () {
        var mh$ = GetDpiForSystem$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDpiForProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$587.GetSystemDpiForProcess$MH,"GetSystemDpiForProcess");
    }
    public static int GetSystemDpiForProcess ( Addressable hProcess) {
        var mh$ = GetSystemDpiForProcess$MH();
        try {
            return (int)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableNonClientDpiScaling$MH() {
        return RuntimeHelper.requireNonNull(constants$587.EnableNonClientDpiScaling$MH,"EnableNonClientDpiScaling");
    }
    public static int EnableNonClientDpiScaling ( Addressable hwnd) {
        var mh$ = EnableNonClientDpiScaling$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InheritWindowMonitor$MH() {
        return RuntimeHelper.requireNonNull(constants$587.InheritWindowMonitor$MH,"InheritWindowMonitor");
    }
    public static int InheritWindowMonitor ( Addressable hwnd,  Addressable hwndInherit) {
        var mh$ = InheritWindowMonitor$MH();
        try {
            return (int)mh$.invokeExact(hwnd, hwndInherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$587.SetProcessDpiAwarenessContext$MH,"SetProcessDpiAwarenessContext");
    }
    public static int SetProcessDpiAwarenessContext ( Addressable value) {
        var mh$ = SetProcessDpiAwarenessContext$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiAwarenessContextForProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$587.GetDpiAwarenessContextForProcess$MH,"GetDpiAwarenessContextForProcess");
    }
    public static MemoryAddress GetDpiAwarenessContextForProcess ( Addressable hProcess) {
        var mh$ = GetDpiAwarenessContextForProcess$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDpiHostingBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$587.SetThreadDpiHostingBehavior$MH,"SetThreadDpiHostingBehavior");
    }
    public static int SetThreadDpiHostingBehavior ( int value) {
        var mh$ = SetThreadDpiHostingBehavior$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDpiHostingBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$588.GetThreadDpiHostingBehavior$MH,"GetThreadDpiHostingBehavior");
    }
    public static int GetThreadDpiHostingBehavior () {
        var mh$ = GetThreadDpiHostingBehavior$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDpiHostingBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$588.GetWindowDpiHostingBehavior$MH,"GetWindowDpiHostingBehavior");
    }
    public static int GetWindowDpiHostingBehavior ( Addressable hwnd) {
        var mh$ = GetWindowDpiHostingBehavior$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowModuleFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$588.GetWindowModuleFileNameA$MH,"GetWindowModuleFileNameA");
    }
    public static int GetWindowModuleFileNameA ( Addressable hwnd,  Addressable pszFileName,  int cchFileNameMax) {
        var mh$ = GetWindowModuleFileNameA$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pszFileName, cchFileNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowModuleFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$588.GetWindowModuleFileNameW$MH,"GetWindowModuleFileNameW");
    }
    public static int GetWindowModuleFileNameW ( Addressable hwnd,  Addressable pszFileName,  int cchFileNameMax) {
        var mh$ = GetWindowModuleFileNameW$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pszFileName, cchFileNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCURSORINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCURSORINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$588.GetCursorInfo$MH,"GetCursorInfo");
    }
    public static int GetCursorInfo ( Addressable pci) {
        var mh$ = GetCursorInfo$MH();
        try {
            return (int)mh$.invokeExact(pci);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWINDOWINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWINDOWINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetWindowInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$588.GetWindowInfo$MH,"GetWindowInfo");
    }
    public static int GetWindowInfo ( Addressable hwnd,  Addressable pwi) {
        var mh$ = GetWindowInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTITLEBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTITLEBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetTitleBarInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$589.GetTitleBarInfo$MH,"GetTitleBarInfo");
    }
    public static int GetTitleBarInfo ( Addressable hwnd,  Addressable pti) {
        var mh$ = GetTitleBarInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pti);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTITLEBARINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTITLEBARINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMENUBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMenuBarInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$589.GetMenuBarInfo$MH,"GetMenuBarInfo");
    }
    public static int GetMenuBarInfo ( Addressable hwnd,  int idObject,  int idItem,  Addressable pmbi) {
        var mh$ = GetMenuBarInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, idObject, idItem, pmbi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSCROLLBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCROLLBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetScrollBarInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$589.GetScrollBarInfo$MH,"GetScrollBarInfo");
    }
    public static int GetScrollBarInfo ( Addressable hwnd,  int idObject,  Addressable psbi) {
        var mh$ = GetScrollBarInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd, idObject, psbi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCOMBOBOXINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOMBOBOXINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetComboBoxInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$589.GetComboBoxInfo$MH,"GetComboBoxInfo");
    }
    public static int GetComboBoxInfo ( Addressable hwndCombo,  Addressable pcbi) {
        var mh$ = GetComboBoxInfo$MH();
        try {
            return (int)mh$.invokeExact(hwndCombo, pcbi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAncestor$MH() {
        return RuntimeHelper.requireNonNull(constants$589.GetAncestor$MH,"GetAncestor");
    }
    public static MemoryAddress GetAncestor ( Addressable hwnd,  int gaFlags) {
        var mh$ = GetAncestor$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hwnd, gaFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealChildWindowFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$589.RealChildWindowFromPoint$MH,"RealChildWindowFromPoint");
    }
    public static MemoryAddress RealChildWindowFromPoint ( Addressable hwndParent,  MemorySegment ptParentClientCoords) {
        var mh$ = RealChildWindowFromPoint$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hwndParent, ptParentClientCoords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealGetWindowClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$590.RealGetWindowClassA$MH,"RealGetWindowClassA");
    }
    public static int RealGetWindowClassA ( Addressable hwnd,  Addressable ptszClassName,  int cchClassNameMax) {
        var mh$ = RealGetWindowClassA$MH();
        try {
            return (int)mh$.invokeExact(hwnd, ptszClassName, cchClassNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealGetWindowClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$590.RealGetWindowClassW$MH,"RealGetWindowClassW");
    }
    public static int RealGetWindowClassW ( Addressable hwnd,  Addressable ptszClassName,  int cchClassNameMax) {
        var mh$ = RealGetWindowClassW$MH();
        try {
            return (int)mh$.invokeExact(hwnd, ptszClassName, cchClassNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PALTTABINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPALTTABINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetAltTabInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$590.GetAltTabInfoA$MH,"GetAltTabInfoA");
    }
    public static int GetAltTabInfoA ( Addressable hwnd,  int iItem,  Addressable pati,  Addressable pszItemText,  int cchItemText) {
        var mh$ = GetAltTabInfoA$MH();
        try {
            return (int)mh$.invokeExact(hwnd, iItem, pati, pszItemText, cchItemText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAltTabInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$590.GetAltTabInfoW$MH,"GetAltTabInfoW");
    }
    public static int GetAltTabInfoW ( Addressable hwnd,  int iItem,  Addressable pati,  Addressable pszItemText,  int cchItemText) {
        var mh$ = GetAltTabInfoW$MH();
        try {
            return (int)mh$.invokeExact(hwnd, iItem, pati, pszItemText, cchItemText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetListBoxInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$590.GetListBoxInfo$MH,"GetListBoxInfo");
    }
    public static int GetListBoxInfo ( Addressable hwnd) {
        var mh$ = GetListBoxInfo$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockWorkStation$MH() {
        return RuntimeHelper.requireNonNull(constants$590.LockWorkStation$MH,"LockWorkStation");
    }
    public static int LockWorkStation () {
        var mh$ = LockWorkStation$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UserHandleGrantAccess$MH() {
        return RuntimeHelper.requireNonNull(constants$591.UserHandleGrantAccess$MH,"UserHandleGrantAccess");
    }
    public static int UserHandleGrantAccess ( Addressable hUserHandle,  Addressable hJob,  int bGrant) {
        var mh$ = UserHandleGrantAccess$MH();
        try {
            return (int)mh$.invokeExact(hUserHandle, hJob, bGrant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HRAWINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRAWINPUTHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWINPUTHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRAWMOUSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWMOUSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRAWKEYBOARD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWKEYBOARD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRAWHID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWHID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRAWINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWINPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetRawInputData$MH() {
        return RuntimeHelper.requireNonNull(constants$591.GetRawInputData$MH,"GetRawInputData");
    }
    public static int GetRawInputData ( Addressable hRawInput,  int uiCommand,  Addressable pData,  Addressable pcbSize,  int cbSizeHeader) {
        var mh$ = GetRawInputData$MH();
        try {
            return (int)mh$.invokeExact(hRawInput, uiCommand, pData, pcbSize, cbSizeHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRID_DEVICE_INFO_MOUSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRID_DEVICE_INFO_KEYBOARD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRID_DEVICE_INFO_HID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRID_DEVICE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRID_DEVICE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetRawInputDeviceInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$591.GetRawInputDeviceInfoA$MH,"GetRawInputDeviceInfoA");
    }
    public static int GetRawInputDeviceInfoA ( Addressable hDevice,  int uiCommand,  Addressable pData,  Addressable pcbSize) {
        var mh$ = GetRawInputDeviceInfoA$MH();
        try {
            return (int)mh$.invokeExact(hDevice, uiCommand, pData, pcbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRawInputDeviceInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$591.GetRawInputDeviceInfoW$MH,"GetRawInputDeviceInfoW");
    }
    public static int GetRawInputDeviceInfoW ( Addressable hDevice,  int uiCommand,  Addressable pData,  Addressable pcbSize) {
        var mh$ = GetRawInputDeviceInfoW$MH();
        try {
            return (int)mh$.invokeExact(hDevice, uiCommand, pData, pcbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRawInputBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$591.GetRawInputBuffer$MH,"GetRawInputBuffer");
    }
    public static int GetRawInputBuffer ( Addressable pData,  Addressable pcbSize,  int cbSizeHeader) {
        var mh$ = GetRawInputBuffer$MH();
        try {
            return (int)mh$.invokeExact(pData, pcbSize, cbSizeHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRAWINPUTDEVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWINPUTDEVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRAWINPUTDEVICE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterRawInputDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$591.RegisterRawInputDevices$MH,"RegisterRawInputDevices");
    }
    public static int RegisterRawInputDevices ( Addressable pRawInputDevices,  int uiNumDevices,  int cbSize) {
        var mh$ = RegisterRawInputDevices$MH();
        try {
            return (int)mh$.invokeExact(pRawInputDevices, uiNumDevices, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRegisteredRawInputDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$592.GetRegisteredRawInputDevices$MH,"GetRegisteredRawInputDevices");
    }
    public static int GetRegisteredRawInputDevices ( Addressable pRawInputDevices,  Addressable puiNumDevices,  int cbSize) {
        var mh$ = GetRegisteredRawInputDevices$MH();
        try {
            return (int)mh$.invokeExact(pRawInputDevices, puiNumDevices, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRAWINPUTDEVICELIST = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetRawInputDeviceList$MH() {
        return RuntimeHelper.requireNonNull(constants$592.GetRawInputDeviceList$MH,"GetRawInputDeviceList");
    }
    public static int GetRawInputDeviceList ( Addressable pRawInputDeviceList,  Addressable puiNumDevices,  int cbSize) {
        var mh$ = GetRawInputDeviceList$MH();
        try {
            return (int)mh$.invokeExact(pRawInputDeviceList, puiNumDevices, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefRawInputProc$MH() {
        return RuntimeHelper.requireNonNull(constants$592.DefRawInputProc$MH,"DefRawInputProc");
    }
    public static long DefRawInputProc ( Addressable paRawInput,  int nInput,  int cbSizeHeader) {
        var mh$ = DefRawInputProc$MH();
        try {
            return (long)mh$.invokeExact(paRawInput, nInput, cbSizeHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int POINTER_DEVICE_TYPE_INTEGRATED_PEN() {
        return (int)1L;
    }
    public static int POINTER_DEVICE_TYPE_EXTERNAL_PEN() {
        return (int)2L;
    }
    public static int POINTER_DEVICE_TYPE_TOUCH() {
        return (int)3L;
    }
    public static int POINTER_DEVICE_TYPE_TOUCH_PAD() {
        return (int)4L;
    }
    public static int POINTER_DEVICE_TYPE_MAX() {
        return (int)-1L;
    }
    public static int POINTER_DEVICE_CURSOR_TYPE_UNKNOWN() {
        return (int)0L;
    }
    public static int POINTER_DEVICE_CURSOR_TYPE_TIP() {
        return (int)1L;
    }
    public static int POINTER_DEVICE_CURSOR_TYPE_ERASER() {
        return (int)2L;
    }
    public static int POINTER_DEVICE_CURSOR_TYPE_MAX() {
        return (int)-1L;
    }
    public static MethodHandle GetPointerDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$592.GetPointerDevices$MH,"GetPointerDevices");
    }
    public static int GetPointerDevices ( Addressable deviceCount,  Addressable pointerDevices) {
        var mh$ = GetPointerDevices$MH();
        try {
            return (int)mh$.invokeExact(deviceCount, pointerDevices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$592.GetPointerDevice$MH,"GetPointerDevice");
    }
    public static int GetPointerDevice ( Addressable device,  Addressable pointerDevice) {
        var mh$ = GetPointerDevice$MH();
        try {
            return (int)mh$.invokeExact(device, pointerDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDeviceProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$592.GetPointerDeviceProperties$MH,"GetPointerDeviceProperties");
    }
    public static int GetPointerDeviceProperties ( Addressable device,  Addressable propertyCount,  Addressable pointerProperties) {
        var mh$ = GetPointerDeviceProperties$MH();
        try {
            return (int)mh$.invokeExact(device, propertyCount, pointerProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterPointerDeviceNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$593.RegisterPointerDeviceNotifications$MH,"RegisterPointerDeviceNotifications");
    }
    public static int RegisterPointerDeviceNotifications ( Addressable window,  int notifyRange) {
        var mh$ = RegisterPointerDeviceNotifications$MH();
        try {
            return (int)mh$.invokeExact(window, notifyRange);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDeviceRects$MH() {
        return RuntimeHelper.requireNonNull(constants$593.GetPointerDeviceRects$MH,"GetPointerDeviceRects");
    }
    public static int GetPointerDeviceRects ( Addressable device,  Addressable pointerDeviceRect,  Addressable displayRect) {
        var mh$ = GetPointerDeviceRects$MH();
        try {
            return (int)mh$.invokeExact(device, pointerDeviceRect, displayRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDeviceCursors$MH() {
        return RuntimeHelper.requireNonNull(constants$593.GetPointerDeviceCursors$MH,"GetPointerDeviceCursors");
    }
    public static int GetPointerDeviceCursors ( Addressable device,  Addressable cursorCount,  Addressable deviceCursors) {
        var mh$ = GetPointerDeviceCursors$MH();
        try {
            return (int)mh$.invokeExact(device, cursorCount, deviceCursors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRawPointerDeviceData$MH() {
        return RuntimeHelper.requireNonNull(constants$593.GetRawPointerDeviceData$MH,"GetRawPointerDeviceData");
    }
    public static int GetRawPointerDeviceData ( int pointerId,  int historyCount,  int propertiesCount,  Addressable pProperties,  Addressable pValues) {
        var mh$ = GetRawPointerDeviceData$MH();
        try {
            return (int)mh$.invokeExact(pointerId, historyCount, propertiesCount, pProperties, pValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeWindowMessageFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$593.ChangeWindowMessageFilter$MH,"ChangeWindowMessageFilter");
    }
    public static int ChangeWindowMessageFilter ( int message,  int dwFlag) {
        var mh$ = ChangeWindowMessageFilter$MH();
        try {
            return (int)mh$.invokeExact(message, dwFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCHANGEFILTERSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChangeWindowMessageFilterEx$MH() {
        return RuntimeHelper.requireNonNull(constants$593.ChangeWindowMessageFilterEx$MH,"ChangeWindowMessageFilterEx");
    }
    public static int ChangeWindowMessageFilterEx ( Addressable hwnd,  int message,  int action,  Addressable pChangeFilterStruct) {
        var mh$ = ChangeWindowMessageFilterEx$MH();
        try {
            return (int)mh$.invokeExact(hwnd, message, action, pChangeFilterStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HGESTUREINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGESTUREINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCGESTUREINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGESTURENOTIFYSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetGestureInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$594.GetGestureInfo$MH,"GetGestureInfo");
    }
    public static int GetGestureInfo ( Addressable hGestureInfo,  Addressable pGestureInfo) {
        var mh$ = GetGestureInfo$MH();
        try {
            return (int)mh$.invokeExact(hGestureInfo, pGestureInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGestureExtraArgs$MH() {
        return RuntimeHelper.requireNonNull(constants$594.GetGestureExtraArgs$MH,"GetGestureExtraArgs");
    }
    public static int GetGestureExtraArgs ( Addressable hGestureInfo,  int cbExtraArgs,  Addressable pExtraArgs) {
        var mh$ = GetGestureExtraArgs$MH();
        try {
            return (int)mh$.invokeExact(hGestureInfo, cbExtraArgs, pExtraArgs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseGestureInfoHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$594.CloseGestureInfoHandle$MH,"CloseGestureInfoHandle");
    }
    public static int CloseGestureInfoHandle ( Addressable hGestureInfo) {
        var mh$ = CloseGestureInfoHandle$MH();
        try {
            return (int)mh$.invokeExact(hGestureInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PGESTURECONFIG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetGestureConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$594.SetGestureConfig$MH,"SetGestureConfig");
    }
    public static int SetGestureConfig ( Addressable hwnd,  int dwReserved,  int cIDs,  Addressable pGestureConfig,  int cbSize) {
        var mh$ = SetGestureConfig$MH();
        try {
            return (int)mh$.invokeExact(hwnd, dwReserved, cIDs, pGestureConfig, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGestureConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$594.GetGestureConfig$MH,"GetGestureConfig");
    }
    public static int GetGestureConfig ( Addressable hwnd,  int dwReserved,  int dwFlags,  Addressable pcIDs,  Addressable pGestureConfig,  int cbSize) {
        var mh$ = GetGestureConfig$MH();
        try {
            return (int)mh$.invokeExact(hwnd, dwReserved, dwFlags, pcIDs, pGestureConfig, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShutdownBlockReasonCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$594.ShutdownBlockReasonCreate$MH,"ShutdownBlockReasonCreate");
    }
    public static int ShutdownBlockReasonCreate ( Addressable hWnd,  Addressable pwszReason) {
        var mh$ = ShutdownBlockReasonCreate$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pwszReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShutdownBlockReasonQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$595.ShutdownBlockReasonQuery$MH,"ShutdownBlockReasonQuery");
    }
    public static int ShutdownBlockReasonQuery ( Addressable hWnd,  Addressable pwszBuff,  Addressable pcchBuff) {
        var mh$ = ShutdownBlockReasonQuery$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pwszBuff, pcchBuff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShutdownBlockReasonDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$595.ShutdownBlockReasonDestroy$MH,"ShutdownBlockReasonDestroy");
    }
    public static int ShutdownBlockReasonDestroy ( Addressable hWnd) {
        var mh$ = ShutdownBlockReasonDestroy$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int IMDT_UNAVAILABLE() {
        return (int)0L;
    }
    public static int IMDT_KEYBOARD() {
        return (int)1L;
    }
    public static int IMDT_MOUSE() {
        return (int)2L;
    }
    public static int IMDT_TOUCH() {
        return (int)4L;
    }
    public static int IMDT_PEN() {
        return (int)8L;
    }
    public static int IMDT_TOUCHPAD() {
        return (int)16L;
    }
    public static int IMO_UNAVAILABLE() {
        return (int)0L;
    }
    public static int IMO_HARDWARE() {
        return (int)1L;
    }
    public static int IMO_INJECTED() {
        return (int)2L;
    }
    public static int IMO_SYSTEM() {
        return (int)4L;
    }
    public static MethodHandle GetCurrentInputMessageSource$MH() {
        return RuntimeHelper.requireNonNull(constants$595.GetCurrentInputMessageSource$MH,"GetCurrentInputMessageSource");
    }
    public static int GetCurrentInputMessageSource ( Addressable inputMessageSource) {
        var mh$ = GetCurrentInputMessageSource$MH();
        try {
            return (int)mh$.invokeExact(inputMessageSource);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCIMSSM$MH() {
        return RuntimeHelper.requireNonNull(constants$595.GetCIMSSM$MH,"GetCIMSSM");
    }
    public static int GetCIMSSM ( Addressable inputMessageSource) {
        var mh$ = GetCIMSSM$MH();
        try {
            return (int)mh$.invokeExact(inputMessageSource);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int AR_ENABLED() {
        return (int)0L;
    }
    public static int AR_DISABLED() {
        return (int)1L;
    }
    public static int AR_SUPPRESSED() {
        return (int)2L;
    }
    public static int AR_REMOTESESSION() {
        return (int)4L;
    }
    public static int AR_MULTIMON() {
        return (int)8L;
    }
    public static int AR_NOSENSOR() {
        return (int)16L;
    }
    public static int AR_NOT_SUPPORTED() {
        return (int)32L;
    }
    public static int AR_DOCKED() {
        return (int)64L;
    }
    public static int AR_LAPTOP() {
        return (int)128L;
    }
    public static OfAddress PAR_STATE = Constants$root.C_POINTER$LAYOUT;
    public static int ORIENTATION_PREFERENCE_NONE() {
        return (int)0L;
    }
    public static int ORIENTATION_PREFERENCE_LANDSCAPE() {
        return (int)1L;
    }
    public static int ORIENTATION_PREFERENCE_PORTRAIT() {
        return (int)2L;
    }
    public static int ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED() {
        return (int)4L;
    }
    public static int ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED() {
        return (int)8L;
    }
    public static MethodHandle GetAutoRotationState$MH() {
        return RuntimeHelper.requireNonNull(constants$595.GetAutoRotationState$MH,"GetAutoRotationState");
    }
    public static int GetAutoRotationState ( Addressable pState) {
        var mh$ = GetAutoRotationState$MH();
        try {
            return (int)mh$.invokeExact(pState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDisplayAutoRotationPreferences$MH() {
        return RuntimeHelper.requireNonNull(constants$595.GetDisplayAutoRotationPreferences$MH,"GetDisplayAutoRotationPreferences");
    }
    public static int GetDisplayAutoRotationPreferences ( Addressable pOrientation) {
        var mh$ = GetDisplayAutoRotationPreferences$MH();
        try {
            return (int)mh$.invokeExact(pOrientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDisplayAutoRotationPreferencesByProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$596.GetDisplayAutoRotationPreferencesByProcessId$MH,"GetDisplayAutoRotationPreferencesByProcessId");
    }
    public static int GetDisplayAutoRotationPreferencesByProcessId ( int dwProcessId,  Addressable pOrientation,  Addressable fRotateScreen) {
        var mh$ = GetDisplayAutoRotationPreferencesByProcessId$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId, pOrientation, fRotateScreen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDisplayAutoRotationPreferences$MH() {
        return RuntimeHelper.requireNonNull(constants$596.SetDisplayAutoRotationPreferences$MH,"SetDisplayAutoRotationPreferences");
    }
    public static int SetDisplayAutoRotationPreferences ( int orientation) {
        var mh$ = SetDisplayAutoRotationPreferences$MH();
        try {
            return (int)mh$.invokeExact(orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsImmersiveProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$596.IsImmersiveProcess$MH,"IsImmersiveProcess");
    }
    public static int IsImmersiveProcess ( Addressable hProcess) {
        var mh$ = IsImmersiveProcess$MH();
        try {
            return (int)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessRestrictionExemption$MH() {
        return RuntimeHelper.requireNonNull(constants$596.SetProcessRestrictionExemption$MH,"SetProcessRestrictionExemption");
    }
    public static int SetProcessRestrictionExemption ( int fEnableExemption) {
        var mh$ = SetProcessRestrictionExemption$MH();
        try {
            return (int)mh$.invokeExact(fEnableExemption);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDateFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$596.GetDateFormatA$MH,"GetDateFormatA");
    }
    public static int GetDateFormatA ( int Locale,  int dwFlags,  Addressable lpDate,  Addressable lpFormat,  Addressable lpDateStr,  int cchDate) {
        var mh$ = GetDateFormatA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDateFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$596.GetDateFormatW$MH,"GetDateFormatW");
    }
    public static int GetDateFormatW ( int Locale,  int dwFlags,  Addressable lpDate,  Addressable lpFormat,  Addressable lpDateStr,  int cchDate) {
        var mh$ = GetDateFormatW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$597.GetTimeFormatA$MH,"GetTimeFormatA");
    }
    public static int GetTimeFormatA ( int Locale,  int dwFlags,  Addressable lpTime,  Addressable lpFormat,  Addressable lpTimeStr,  int cchTime) {
        var mh$ = GetTimeFormatA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$597.GetTimeFormatW$MH,"GetTimeFormatW");
    }
    public static int GetTimeFormatW ( int Locale,  int dwFlags,  Addressable lpTime,  Addressable lpFormat,  Addressable lpTimeStr,  int cchTime) {
        var mh$ = GetTimeFormatW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$597.GetTimeFormatEx$MH,"GetTimeFormatEx");
    }
    public static int GetTimeFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpTime,  Addressable lpFormat,  Addressable lpTimeStr,  int cchTime) {
        var mh$ = GetTimeFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDateFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$597.GetDateFormatEx$MH,"GetDateFormatEx");
    }
    public static int GetDateFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpDate,  Addressable lpFormat,  Addressable lpDateStr,  int cchDate,  Addressable lpCalendar) {
        var mh$ = GetDateFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpDate, lpFormat, lpDateStr, cchDate, lpCalendar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDurationFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$597.GetDurationFormatEx$MH,"GetDurationFormatEx");
    }
    public static int GetDurationFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpDuration,  long ullDuration,  Addressable lpFormat,  Addressable lpDurationStr,  int cchDuration) {
        var mh$ = GetDurationFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCPINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfInt GEOID = Constants$root.C_LONG$LAYOUT;
    public static OfAddress LPCPINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNUMBERFMTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNUMBERFMTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNUMBERFMT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCURRENCYFMTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCURRENCYFMTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCURRENCYFMT = Constants$root.C_POINTER$LAYOUT;
    public static int COMPARE_STRING() {
        return (int)1L;
    }
    public static OfAddress LPNLSVERSIONINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNLSVERSIONINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static int GEO_NATION() {
        return (int)1L;
    }
    public static int GEO_LATITUDE() {
        return (int)2L;
    }
    public static int GEO_LONGITUDE() {
        return (int)3L;
    }
    public static int GEO_ISO2() {
        return (int)4L;
    }
    public static int GEO_ISO3() {
        return (int)5L;
    }
    public static int GEO_RFC1766() {
        return (int)6L;
    }
    public static int GEO_LCID() {
        return (int)7L;
    }
    public static int GEO_FRIENDLYNAME() {
        return (int)8L;
    }
    public static int GEO_OFFICIALNAME() {
        return (int)9L;
    }
    public static int GEO_TIMEZONES() {
        return (int)10L;
    }
    public static int GEO_OFFICIALLANGUAGES() {
        return (int)11L;
    }
    public static int GEO_ISO_UN_NUMBER() {
        return (int)12L;
    }
    public static int GEO_PARENT() {
        return (int)13L;
    }
    public static int GEO_DIALINGCODE() {
        return (int)14L;
    }
    public static int GEO_CURRENCYCODE() {
        return (int)15L;
    }
    public static int GEO_CURRENCYSYMBOL() {
        return (int)16L;
    }
    public static int GEO_NAME() {
        return (int)17L;
    }
    public static int GEO_ID() {
        return (int)18L;
    }
    public static int GEOCLASS_NATION() {
        return (int)16L;
    }
    public static int GEOCLASS_REGION() {
        return (int)14L;
    }
    public static int GEOCLASS_ALL() {
        return (int)0L;
    }
    public static int NormalizationOther() {
        return (int)0L;
    }
    public static int NormalizationC() {
        return (int)1L;
    }
    public static int NormalizationD() {
        return (int)2L;
    }
    public static int NormalizationKC() {
        return (int)5L;
    }
    public static int NormalizationKD() {
        return (int)6L;
    }
    public static OfAddress PFILEMUIINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CompareStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$605.CompareStringEx$MH,"CompareStringEx");
    }
    public static int CompareStringEx ( Addressable lpLocaleName,  int dwCmpFlags,  Addressable lpString1,  int cchCount1,  Addressable lpString2,  int cchCount2,  Addressable lpVersionInformation,  Addressable lpReserved,  long lParam) {
        var mh$ = CompareStringEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2, lpVersionInformation, lpReserved, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareStringOrdinal$MH() {
        return RuntimeHelper.requireNonNull(constants$605.CompareStringOrdinal$MH,"CompareStringOrdinal");
    }
    public static int CompareStringOrdinal ( Addressable lpString1,  int cchCount1,  Addressable lpString2,  int cchCount2,  int bIgnoreCase) {
        var mh$ = CompareStringOrdinal$MH();
        try {
            return (int)mh$.invokeExact(lpString1, cchCount1, lpString2, cchCount2, bIgnoreCase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$605.CompareStringW$MH,"CompareStringW");
    }
    public static int CompareStringW ( int Locale,  int dwCmpFlags,  Addressable lpString1,  int cchCount1,  Addressable lpString2,  int cchCount2) {
        var mh$ = CompareStringW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FoldStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$605.FoldStringW$MH,"FoldStringW");
    }
    public static int FoldStringW ( int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest) {
        var mh$ = FoldStringW$MH();
        try {
            return (int)mh$.invokeExact(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeExW$MH() {
        return RuntimeHelper.requireNonNull(constants$605.GetStringTypeExW$MH,"GetStringTypeExW");
    }
    public static int GetStringTypeExW ( int Locale,  int dwInfoType,  Addressable lpSrcStr,  int cchSrc,  Addressable lpCharType) {
        var mh$ = GetStringTypeExW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$606.GetStringTypeW$MH,"GetStringTypeW");
    }
    public static int GetStringTypeW ( int dwInfoType,  Addressable lpSrcStr,  int cchSrc,  Addressable lpCharType) {
        var mh$ = GetStringTypeW$MH();
        try {
            return (int)mh$.invokeExact(dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MultiByteToWideChar$MH() {
        return RuntimeHelper.requireNonNull(constants$606.MultiByteToWideChar$MH,"MultiByteToWideChar");
    }
    public static int MultiByteToWideChar ( int CodePage,  int dwFlags,  Addressable lpMultiByteStr,  int cbMultiByte,  Addressable lpWideCharStr,  int cchWideChar) {
        var mh$ = MultiByteToWideChar$MH();
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, cchWideChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WideCharToMultiByte$MH() {
        return RuntimeHelper.requireNonNull(constants$606.WideCharToMultiByte$MH,"WideCharToMultiByte");
    }
    public static int WideCharToMultiByte ( int CodePage,  int dwFlags,  Addressable lpWideCharStr,  int cchWideChar,  Addressable lpMultiByteStr,  int cbMultiByte,  Addressable lpDefaultChar,  Addressable lpUsedDefaultChar) {
        var mh$ = WideCharToMultiByte$MH();
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidCodePage$MH() {
        return RuntimeHelper.requireNonNull(constants$606.IsValidCodePage$MH,"IsValidCodePage");
    }
    public static int IsValidCodePage ( int CodePage) {
        var mh$ = IsValidCodePage$MH();
        try {
            return (int)mh$.invokeExact(CodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetACP$MH() {
        return RuntimeHelper.requireNonNull(constants$606.GetACP$MH,"GetACP");
    }
    public static int GetACP () {
        var mh$ = GetACP$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOEMCP$MH() {
        return RuntimeHelper.requireNonNull(constants$606.GetOEMCP$MH,"GetOEMCP");
    }
    public static int GetOEMCP () {
        var mh$ = GetOEMCP$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCPInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$607.GetCPInfo$MH,"GetCPInfo");
    }
    public static int GetCPInfo ( int CodePage,  Addressable lpCPInfo) {
        var mh$ = GetCPInfo$MH();
        try {
            return (int)mh$.invokeExact(CodePage, lpCPInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCPInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$607.GetCPInfoExA$MH,"GetCPInfoExA");
    }
    public static int GetCPInfoExA ( int CodePage,  int dwFlags,  Addressable lpCPInfoEx) {
        var mh$ = GetCPInfoExA$MH();
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpCPInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCPInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$607.GetCPInfoExW$MH,"GetCPInfoExW");
    }
    public static int GetCPInfoExW ( int CodePage,  int dwFlags,  Addressable lpCPInfoEx) {
        var mh$ = GetCPInfoExW$MH();
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpCPInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$607.CompareStringA$MH,"CompareStringA");
    }
    public static int CompareStringA ( int Locale,  int dwCmpFlags,  Addressable lpString1,  int cchCount1,  Addressable lpString2,  int cchCount2) {
        var mh$ = CompareStringA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNLSString$MH() {
        return RuntimeHelper.requireNonNull(constants$607.FindNLSString$MH,"FindNLSString");
    }
    public static int FindNLSString ( int Locale,  int dwFindNLSStringFlags,  Addressable lpStringSource,  int cchSource,  Addressable lpStringValue,  int cchValue,  Addressable pcchFound) {
        var mh$ = FindNLSString$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCMapStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$607.LCMapStringW$MH,"LCMapStringW");
    }
    public static int LCMapStringW ( int Locale,  int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest) {
        var mh$ = LCMapStringW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCMapStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$608.LCMapStringA$MH,"LCMapStringA");
    }
    public static int LCMapStringA ( int Locale,  int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest) {
        var mh$ = LCMapStringA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocaleInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$608.GetLocaleInfoW$MH,"GetLocaleInfoW");
    }
    public static int GetLocaleInfoW ( int Locale,  int LCType,  Addressable lpLCData,  int cchData) {
        var mh$ = GetLocaleInfoW$MH();
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData, cchData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocaleInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$608.GetLocaleInfoA$MH,"GetLocaleInfoA");
    }
    public static int GetLocaleInfoA ( int Locale,  int LCType,  Addressable lpLCData,  int cchData) {
        var mh$ = GetLocaleInfoA$MH();
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData, cchData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLocaleInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$608.SetLocaleInfoA$MH,"SetLocaleInfoA");
    }
    public static int SetLocaleInfoA ( int Locale,  int LCType,  Addressable lpLCData) {
        var mh$ = SetLocaleInfoA$MH();
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLocaleInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$608.SetLocaleInfoW$MH,"SetLocaleInfoW");
    }
    public static int SetLocaleInfoW ( int Locale,  int LCType,  Addressable lpLCData) {
        var mh$ = SetLocaleInfoW$MH();
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCalendarInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$608.GetCalendarInfoA$MH,"GetCalendarInfoA");
    }
    public static int GetCalendarInfoA ( int Locale,  int Calendar,  int CalType,  Addressable lpCalData,  int cchData,  Addressable lpValue) {
        var mh$ = GetCalendarInfoA$MH();
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData, cchData, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCalendarInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$609.GetCalendarInfoW$MH,"GetCalendarInfoW");
    }
    public static int GetCalendarInfoW ( int Locale,  int Calendar,  int CalType,  Addressable lpCalData,  int cchData,  Addressable lpValue) {
        var mh$ = GetCalendarInfoW$MH();
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData, cchData, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCalendarInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$609.SetCalendarInfoA$MH,"SetCalendarInfoA");
    }
    public static int SetCalendarInfoA ( int Locale,  int Calendar,  int CalType,  Addressable lpCalData) {
        var mh$ = SetCalendarInfoA$MH();
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCalendarInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$609.SetCalendarInfoW$MH,"SetCalendarInfoW");
    }
    public static int SetCalendarInfoW ( int Locale,  int Calendar,  int CalType,  Addressable lpCalData) {
        var mh$ = SetCalendarInfoW$MH();
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadStringByReference$MH() {
        return RuntimeHelper.requireNonNull(constants$609.LoadStringByReference$MH,"LoadStringByReference");
    }
    public static int LoadStringByReference ( int Flags,  Addressable Language,  Addressable SourceString,  Addressable Buffer,  int cchBuffer,  Addressable Directory,  Addressable pcchBufferOut) {
        var mh$ = LoadStringByReference$MH();
        try {
            return (int)mh$.invokeExact(Flags, Language, SourceString, Buffer, cchBuffer, Directory, pcchBufferOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDBCSLeadByte$MH() {
        return RuntimeHelper.requireNonNull(constants$609.IsDBCSLeadByte$MH,"IsDBCSLeadByte");
    }
    public static int IsDBCSLeadByte ( byte TestChar) {
        var mh$ = IsDBCSLeadByte$MH();
        try {
            return (int)mh$.invokeExact(TestChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDBCSLeadByteEx$MH() {
        return RuntimeHelper.requireNonNull(constants$609.IsDBCSLeadByteEx$MH,"IsDBCSLeadByteEx");
    }
    public static int IsDBCSLeadByteEx ( int CodePage,  byte TestChar) {
        var mh$ = IsDBCSLeadByteEx$MH();
        try {
            return (int)mh$.invokeExact(CodePage, TestChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocaleNameToLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$610.LocaleNameToLCID$MH,"LocaleNameToLCID");
    }
    public static int LocaleNameToLCID ( Addressable lpName,  int dwFlags) {
        var mh$ = LocaleNameToLCID$MH();
        try {
            return (int)mh$.invokeExact(lpName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCIDToLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$610.LCIDToLocaleName$MH,"LCIDToLocaleName");
    }
    public static int LCIDToLocaleName ( int Locale,  Addressable lpName,  int cchName,  int dwFlags) {
        var mh$ = LCIDToLocaleName$MH();
        try {
            return (int)mh$.invokeExact(Locale, lpName, cchName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDurationFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$610.GetDurationFormat$MH,"GetDurationFormat");
    }
    public static int GetDurationFormat ( int Locale,  int dwFlags,  Addressable lpDuration,  long ullDuration,  Addressable lpFormat,  Addressable lpDurationStr,  int cchDuration) {
        var mh$ = GetDurationFormat$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$610.GetNumberFormatA$MH,"GetNumberFormatA");
    }
    public static int GetNumberFormatA ( int Locale,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpNumberStr,  int cchNumber) {
        var mh$ = GetNumberFormatA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$610.GetNumberFormatW$MH,"GetNumberFormatW");
    }
    public static int GetNumberFormatW ( int Locale,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpNumberStr,  int cchNumber) {
        var mh$ = GetNumberFormatW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrencyFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$610.GetCurrencyFormatA$MH,"GetCurrencyFormatA");
    }
    public static int GetCurrencyFormatA ( int Locale,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpCurrencyStr,  int cchCurrency) {
        var mh$ = GetCurrencyFormatA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrencyFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$611.GetCurrencyFormatW$MH,"GetCurrencyFormatW");
    }
    public static int GetCurrencyFormatW ( int Locale,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpCurrencyStr,  int cchCurrency) {
        var mh$ = GetCurrencyFormatW$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$611.EnumCalendarInfoA$MH,"EnumCalendarInfoA");
    }
    public static int EnumCalendarInfoA ( Addressable lpCalInfoEnumProc,  int Locale,  int Calendar,  int CalType) {
        var mh$ = EnumCalendarInfoA$MH();
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProc, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$611.EnumCalendarInfoW$MH,"EnumCalendarInfoW");
    }
    public static int EnumCalendarInfoW ( Addressable lpCalInfoEnumProc,  int Locale,  int Calendar,  int CalType) {
        var mh$ = EnumCalendarInfoW$MH();
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProc, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$611.EnumCalendarInfoExA$MH,"EnumCalendarInfoExA");
    }
    public static int EnumCalendarInfoExA ( Addressable lpCalInfoEnumProcEx,  int Locale,  int Calendar,  int CalType) {
        var mh$ = EnumCalendarInfoExA$MH();
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProcEx, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$611.EnumCalendarInfoExW$MH,"EnumCalendarInfoExW");
    }
    public static int EnumCalendarInfoExW ( Addressable lpCalInfoEnumProcEx,  int Locale,  int Calendar,  int CalType) {
        var mh$ = EnumCalendarInfoExW$MH();
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProcEx, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumTimeFormatsA$MH() {
        return RuntimeHelper.requireNonNull(constants$611.EnumTimeFormatsA$MH,"EnumTimeFormatsA");
    }
    public static int EnumTimeFormatsA ( Addressable lpTimeFmtEnumProc,  int Locale,  int dwFlags) {
        var mh$ = EnumTimeFormatsA$MH();
        try {
            return (int)mh$.invokeExact(lpTimeFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumTimeFormatsW$MH() {
        return RuntimeHelper.requireNonNull(constants$612.EnumTimeFormatsW$MH,"EnumTimeFormatsW");
    }
    public static int EnumTimeFormatsW ( Addressable lpTimeFmtEnumProc,  int Locale,  int dwFlags) {
        var mh$ = EnumTimeFormatsW$MH();
        try {
            return (int)mh$.invokeExact(lpTimeFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsA$MH() {
        return RuntimeHelper.requireNonNull(constants$612.EnumDateFormatsA$MH,"EnumDateFormatsA");
    }
    public static int EnumDateFormatsA ( Addressable lpDateFmtEnumProc,  int Locale,  int dwFlags) {
        var mh$ = EnumDateFormatsA$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsW$MH() {
        return RuntimeHelper.requireNonNull(constants$612.EnumDateFormatsW$MH,"EnumDateFormatsW");
    }
    public static int EnumDateFormatsW ( Addressable lpDateFmtEnumProc,  int Locale,  int dwFlags) {
        var mh$ = EnumDateFormatsW$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$612.EnumDateFormatsExA$MH,"EnumDateFormatsExA");
    }
    public static int EnumDateFormatsExA ( Addressable lpDateFmtEnumProcEx,  int Locale,  int dwFlags) {
        var mh$ = EnumDateFormatsExA$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProcEx, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$612.EnumDateFormatsExW$MH,"EnumDateFormatsExW");
    }
    public static int EnumDateFormatsExW ( Addressable lpDateFmtEnumProcEx,  int Locale,  int dwFlags) {
        var mh$ = EnumDateFormatsExW$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProcEx, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidLanguageGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$612.IsValidLanguageGroup$MH,"IsValidLanguageGroup");
    }
    public static int IsValidLanguageGroup ( int LanguageGroup,  int dwFlags) {
        var mh$ = IsValidLanguageGroup$MH();
        try {
            return (int)mh$.invokeExact(LanguageGroup, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNLSVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$613.GetNLSVersion$MH,"GetNLSVersion");
    }
    public static int GetNLSVersion ( int Function,  int Locale,  Addressable lpVersionInformation) {
        var mh$ = GetNLSVersion$MH();
        try {
            return (int)mh$.invokeExact(Function, Locale, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$613.IsValidLocale$MH,"IsValidLocale");
    }
    public static int IsValidLocale ( int Locale,  int dwFlags) {
        var mh$ = IsValidLocale$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$613.GetGeoInfoA$MH,"GetGeoInfoA");
    }
    public static int GetGeoInfoA ( int Location,  int GeoType,  Addressable lpGeoData,  int cchData,  short LangId) {
        var mh$ = GetGeoInfoA$MH();
        try {
            return (int)mh$.invokeExact(Location, GeoType, lpGeoData, cchData, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$613.GetGeoInfoW$MH,"GetGeoInfoW");
    }
    public static int GetGeoInfoW ( int Location,  int GeoType,  Addressable lpGeoData,  int cchData,  short LangId) {
        var mh$ = GetGeoInfoW$MH();
        try {
            return (int)mh$.invokeExact(Location, GeoType, lpGeoData, cchData, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$613.GetGeoInfoEx$MH,"GetGeoInfoEx");
    }
    public static int GetGeoInfoEx ( Addressable location,  int geoType,  Addressable geoData,  int geoDataCount) {
        var mh$ = GetGeoInfoEx$MH();
        try {
            return (int)mh$.invokeExact(location, geoType, geoData, geoDataCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$613.EnumSystemGeoID$MH,"EnumSystemGeoID");
    }
    public static int EnumSystemGeoID ( int GeoClass,  int ParentGeoId,  Addressable lpGeoEnumProc) {
        var mh$ = EnumSystemGeoID$MH();
        try {
            return (int)mh$.invokeExact(GeoClass, ParentGeoId, lpGeoEnumProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemGeoNames$MH() {
        return RuntimeHelper.requireNonNull(constants$614.EnumSystemGeoNames$MH,"EnumSystemGeoNames");
    }
    public static int EnumSystemGeoNames ( int geoClass,  Addressable geoEnumProc,  long data) {
        var mh$ = EnumSystemGeoNames$MH();
        try {
            return (int)mh$.invokeExact(geoClass, geoEnumProc, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetUserGeoID$MH,"GetUserGeoID");
    }
    public static int GetUserGeoID ( int GeoClass) {
        var mh$ = GetUserGeoID$MH();
        try {
            return (int)mh$.invokeExact(GeoClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultGeoName$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetUserDefaultGeoName$MH,"GetUserDefaultGeoName");
    }
    public static int GetUserDefaultGeoName ( Addressable geoName,  int geoNameCount) {
        var mh$ = GetUserDefaultGeoName$MH();
        try {
            return (int)mh$.invokeExact(geoName, geoNameCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$614.SetUserGeoID$MH,"SetUserGeoID");
    }
    public static int SetUserGeoID ( int GeoId) {
        var mh$ = SetUserGeoID$MH();
        try {
            return (int)mh$.invokeExact(GeoId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserGeoName$MH() {
        return RuntimeHelper.requireNonNull(constants$614.SetUserGeoName$MH,"SetUserGeoName");
    }
    public static int SetUserGeoName ( Addressable geoName) {
        var mh$ = SetUserGeoName$MH();
        try {
            return (int)mh$.invokeExact(geoName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertDefaultLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$614.ConvertDefaultLocale$MH,"ConvertDefaultLocale");
    }
    public static int ConvertDefaultLocale ( int Locale) {
        var mh$ = ConvertDefaultLocale$MH();
        try {
            return (int)mh$.invokeExact(Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$615.GetSystemDefaultUILanguage$MH,"GetSystemDefaultUILanguage");
    }
    public static short GetSystemDefaultUILanguage () {
        var mh$ = GetSystemDefaultUILanguage$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$615.GetThreadLocale$MH,"GetThreadLocale");
    }
    public static int GetThreadLocale () {
        var mh$ = GetThreadLocale$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$615.SetThreadLocale$MH,"SetThreadLocale");
    }
    public static int SetThreadLocale ( int Locale) {
        var mh$ = SetThreadLocale$MH();
        try {
            return (int)mh$.invokeExact(Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$615.GetUserDefaultUILanguage$MH,"GetUserDefaultUILanguage");
    }
    public static short GetUserDefaultUILanguage () {
        var mh$ = GetUserDefaultUILanguage$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLangID$MH() {
        return RuntimeHelper.requireNonNull(constants$615.GetUserDefaultLangID$MH,"GetUserDefaultLangID");
    }
    public static short GetUserDefaultLangID () {
        var mh$ = GetUserDefaultLangID$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLangID$MH() {
        return RuntimeHelper.requireNonNull(constants$615.GetSystemDefaultLangID$MH,"GetSystemDefaultLangID");
    }
    public static short GetSystemDefaultLangID () {
        var mh$ = GetSystemDefaultLangID$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$616.GetSystemDefaultLCID$MH,"GetSystemDefaultLCID");
    }
    public static int GetSystemDefaultLCID () {
        var mh$ = GetSystemDefaultLCID$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$616.GetUserDefaultLCID$MH,"GetUserDefaultLCID");
    }
    public static int GetUserDefaultLCID () {
        var mh$ = GetUserDefaultLCID$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$616.SetThreadUILanguage$MH,"SetThreadUILanguage");
    }
    public static short SetThreadUILanguage ( short LangId) {
        var mh$ = SetThreadUILanguage$MH();
        try {
            return (short)mh$.invokeExact(LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$616.GetThreadUILanguage$MH,"GetThreadUILanguage");
    }
    public static short GetThreadUILanguage () {
        var mh$ = GetThreadUILanguage$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$616.GetProcessPreferredUILanguages$MH,"GetProcessPreferredUILanguages");
    }
    public static int GetProcessPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = GetProcessPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$616.SetProcessPreferredUILanguages$MH,"SetProcessPreferredUILanguages");
    }
    public static int SetProcessPreferredUILanguages ( int dwFlags,  Addressable pwszLanguagesBuffer,  Addressable pulNumLanguages) {
        var mh$ = SetProcessPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$617.GetUserPreferredUILanguages$MH,"GetUserPreferredUILanguages");
    }
    public static int GetUserPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = GetUserPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$617.GetSystemPreferredUILanguages$MH,"GetSystemPreferredUILanguages");
    }
    public static int GetSystemPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = GetSystemPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$617.GetThreadPreferredUILanguages$MH,"GetThreadPreferredUILanguages");
    }
    public static int GetThreadPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = GetThreadPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$617.SetThreadPreferredUILanguages$MH,"SetThreadPreferredUILanguages");
    }
    public static int SetThreadPreferredUILanguages ( int dwFlags,  Addressable pwszLanguagesBuffer,  Addressable pulNumLanguages) {
        var mh$ = SetThreadPreferredUILanguages$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileMUIInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$617.GetFileMUIInfo$MH,"GetFileMUIInfo");
    }
    public static int GetFileMUIInfo ( int dwFlags,  Addressable pcwszFilePath,  Addressable pFileMUIInfo,  Addressable pcbFileMUIInfo) {
        var mh$ = GetFileMUIInfo$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pcwszFilePath, pFileMUIInfo, pcbFileMUIInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileMUIPath$MH() {
        return RuntimeHelper.requireNonNull(constants$617.GetFileMUIPath$MH,"GetFileMUIPath");
    }
    public static int GetFileMUIPath ( int dwFlags,  Addressable pcwszFilePath,  Addressable pwszLanguage,  Addressable pcchLanguage,  Addressable pwszFileMUIPath,  Addressable pcchFileMUIPath,  Addressable pululEnumerator) {
        var mh$ = GetFileMUIPath$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pcwszFilePath, pwszLanguage, pcchLanguage, pwszFileMUIPath, pcchFileMUIPath, pululEnumerator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUILanguageInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$618.GetUILanguageInfo$MH,"GetUILanguageInfo");
    }
    public static int GetUILanguageInfo ( int dwFlags,  Addressable pwmszLanguage,  Addressable pwszFallbackLanguages,  Addressable pcchFallbackLanguages,  Addressable pAttributes) {
        var mh$ = GetUILanguageInfo$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pwmszLanguage, pwszFallbackLanguages, pcchFallbackLanguages, pAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HSAVEDUILANGUAGES = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetThreadPreferredUILanguages2$MH() {
        return RuntimeHelper.requireNonNull(constants$618.SetThreadPreferredUILanguages2$MH,"SetThreadPreferredUILanguages2");
    }
    public static int SetThreadPreferredUILanguages2 ( int flags,  Addressable languages,  Addressable numLanguagesSet,  Addressable snapshot) {
        var mh$ = SetThreadPreferredUILanguages2$MH();
        try {
            return (int)mh$.invokeExact(flags, languages, numLanguagesSet, snapshot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RestoreThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$618.RestoreThreadPreferredUILanguages$MH,"RestoreThreadPreferredUILanguages");
    }
    public static void RestoreThreadPreferredUILanguages ( Addressable snapshot) {
        var mh$ = RestoreThreadPreferredUILanguages$MH();
        try {
            mh$.invokeExact(snapshot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyUILanguageChange$MH() {
        return RuntimeHelper.requireNonNull(constants$618.NotifyUILanguageChange$MH,"NotifyUILanguageChange");
    }
    public static int NotifyUILanguageChange ( int dwFlags,  Addressable pcwstrNewLanguage,  Addressable pcwstrPreviousLanguage,  int dwReserved,  Addressable pdwStatusRtrn) {
        var mh$ = NotifyUILanguageChange$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pcwstrNewLanguage, pcwstrPreviousLanguage, dwReserved, pdwStatusRtrn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeExA$MH() {
        return RuntimeHelper.requireNonNull(constants$618.GetStringTypeExA$MH,"GetStringTypeExA");
    }
    public static int GetStringTypeExA ( int Locale,  int dwInfoType,  Addressable lpSrcStr,  int cchSrc,  Addressable lpCharType) {
        var mh$ = GetStringTypeExA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$618.GetStringTypeA$MH,"GetStringTypeA");
    }
    public static int GetStringTypeA ( int Locale,  int dwInfoType,  Addressable lpSrcStr,  int cchSrc,  Addressable lpCharType) {
        var mh$ = GetStringTypeA$MH();
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FoldStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$619.FoldStringA$MH,"FoldStringA");
    }
    public static int FoldStringA ( int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest) {
        var mh$ = FoldStringA$MH();
        try {
            return (int)mh$.invokeExact(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesA$MH() {
        return RuntimeHelper.requireNonNull(constants$619.EnumSystemLocalesA$MH,"EnumSystemLocalesA");
    }
    public static int EnumSystemLocalesA ( Addressable lpLocaleEnumProc,  int dwFlags) {
        var mh$ = EnumSystemLocalesA$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesW$MH() {
        return RuntimeHelper.requireNonNull(constants$619.EnumSystemLocalesW$MH,"EnumSystemLocalesW");
    }
    public static int EnumSystemLocalesW ( Addressable lpLocaleEnumProc,  int dwFlags) {
        var mh$ = EnumSystemLocalesW$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLanguageGroupsA$MH() {
        return RuntimeHelper.requireNonNull(constants$619.EnumSystemLanguageGroupsA$MH,"EnumSystemLanguageGroupsA");
    }
    public static int EnumSystemLanguageGroupsA ( Addressable lpLanguageGroupEnumProc,  int dwFlags,  long lParam) {
        var mh$ = EnumSystemLanguageGroupsA$MH();
        try {
            return (int)mh$.invokeExact(lpLanguageGroupEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLanguageGroupsW$MH() {
        return RuntimeHelper.requireNonNull(constants$619.EnumSystemLanguageGroupsW$MH,"EnumSystemLanguageGroupsW");
    }
    public static int EnumSystemLanguageGroupsW ( Addressable lpLanguageGroupEnumProc,  int dwFlags,  long lParam) {
        var mh$ = EnumSystemLanguageGroupsW$MH();
        try {
            return (int)mh$.invokeExact(lpLanguageGroupEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumLanguageGroupLocalesA$MH() {
        return RuntimeHelper.requireNonNull(constants$619.EnumLanguageGroupLocalesA$MH,"EnumLanguageGroupLocalesA");
    }
    public static int EnumLanguageGroupLocalesA ( Addressable lpLangGroupLocaleEnumProc,  int LanguageGroup,  int dwFlags,  long lParam) {
        var mh$ = EnumLanguageGroupLocalesA$MH();
        try {
            return (int)mh$.invokeExact(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumLanguageGroupLocalesW$MH() {
        return RuntimeHelper.requireNonNull(constants$620.EnumLanguageGroupLocalesW$MH,"EnumLanguageGroupLocalesW");
    }
    public static int EnumLanguageGroupLocalesW ( Addressable lpLangGroupLocaleEnumProc,  int LanguageGroup,  int dwFlags,  long lParam) {
        var mh$ = EnumLanguageGroupLocalesW$MH();
        try {
            return (int)mh$.invokeExact(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumUILanguagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$620.EnumUILanguagesA$MH,"EnumUILanguagesA");
    }
    public static int EnumUILanguagesA ( Addressable lpUILanguageEnumProc,  int dwFlags,  long lParam) {
        var mh$ = EnumUILanguagesA$MH();
        try {
            return (int)mh$.invokeExact(lpUILanguageEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumUILanguagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$620.EnumUILanguagesW$MH,"EnumUILanguagesW");
    }
    public static int EnumUILanguagesW ( Addressable lpUILanguageEnumProc,  int dwFlags,  long lParam) {
        var mh$ = EnumUILanguagesW$MH();
        try {
            return (int)mh$.invokeExact(lpUILanguageEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemCodePagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$620.EnumSystemCodePagesA$MH,"EnumSystemCodePagesA");
    }
    public static int EnumSystemCodePagesA ( Addressable lpCodePageEnumProc,  int dwFlags) {
        var mh$ = EnumSystemCodePagesA$MH();
        try {
            return (int)mh$.invokeExact(lpCodePageEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemCodePagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$620.EnumSystemCodePagesW$MH,"EnumSystemCodePagesW");
    }
    public static int EnumSystemCodePagesW ( Addressable lpCodePageEnumProc,  int dwFlags) {
        var mh$ = EnumSystemCodePagesW$MH();
        try {
            return (int)mh$.invokeExact(lpCodePageEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToAscii$MH() {
        return RuntimeHelper.requireNonNull(constants$620.IdnToAscii$MH,"IdnToAscii");
    }
    public static int IdnToAscii ( int dwFlags,  Addressable lpUnicodeCharStr,  int cchUnicodeChar,  Addressable lpASCIICharStr,  int cchASCIIChar) {
        var mh$ = IdnToAscii$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpASCIICharStr, cchASCIIChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$621.IdnToUnicode$MH,"IdnToUnicode");
    }
    public static int IdnToUnicode ( int dwFlags,  Addressable lpASCIICharStr,  int cchASCIIChar,  Addressable lpUnicodeCharStr,  int cchUnicodeChar) {
        var mh$ = IdnToUnicode$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpASCIICharStr, cchASCIIChar, lpUnicodeCharStr, cchUnicodeChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToNameprepUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$621.IdnToNameprepUnicode$MH,"IdnToNameprepUnicode");
    }
    public static int IdnToNameprepUnicode ( int dwFlags,  Addressable lpUnicodeCharStr,  int cchUnicodeChar,  Addressable lpNameprepCharStr,  int cchNameprepChar) {
        var mh$ = IdnToNameprepUnicode$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpNameprepCharStr, cchNameprepChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NormalizeString$MH() {
        return RuntimeHelper.requireNonNull(constants$621.NormalizeString$MH,"NormalizeString");
    }
    public static int NormalizeString ( int NormForm,  Addressable lpSrcString,  int cwSrcLength,  Addressable lpDstString,  int cwDstLength) {
        var mh$ = NormalizeString$MH();
        try {
            return (int)mh$.invokeExact(NormForm, lpSrcString, cwSrcLength, lpDstString, cwDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsNormalizedString$MH() {
        return RuntimeHelper.requireNonNull(constants$621.IsNormalizedString$MH,"IsNormalizedString");
    }
    public static int IsNormalizedString ( int NormForm,  Addressable lpString,  int cwLength) {
        var mh$ = IsNormalizedString$MH();
        try {
            return (int)mh$.invokeExact(NormForm, lpString, cwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerifyScripts$MH() {
        return RuntimeHelper.requireNonNull(constants$621.VerifyScripts$MH,"VerifyScripts");
    }
    public static int VerifyScripts ( int dwFlags,  Addressable lpLocaleScripts,  int cchLocaleScripts,  Addressable lpTestScripts,  int cchTestScripts) {
        var mh$ = VerifyScripts$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpLocaleScripts, cchLocaleScripts, lpTestScripts, cchTestScripts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringScripts$MH() {
        return RuntimeHelper.requireNonNull(constants$621.GetStringScripts$MH,"GetStringScripts");
    }
    public static int GetStringScripts ( int dwFlags,  Addressable lpString,  int cchString,  Addressable lpScripts,  int cchScripts) {
        var mh$ = GetStringScripts$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpString, cchString, lpScripts, cchScripts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocaleInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$622.GetLocaleInfoEx$MH,"GetLocaleInfoEx");
    }
    public static int GetLocaleInfoEx ( Addressable lpLocaleName,  int LCType,  Addressable lpLCData,  int cchData) {
        var mh$ = GetLocaleInfoEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, LCType, lpLCData, cchData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCalendarInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$622.GetCalendarInfoEx$MH,"GetCalendarInfoEx");
    }
    public static int GetCalendarInfoEx ( Addressable lpLocaleName,  int Calendar,  Addressable lpReserved,  int CalType,  Addressable lpCalData,  int cchData,  Addressable lpValue) {
        var mh$ = GetCalendarInfoEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, Calendar, lpReserved, CalType, lpCalData, cchData, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$622.GetNumberFormatEx$MH,"GetNumberFormatEx");
    }
    public static int GetNumberFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpNumberStr,  int cchNumber) {
        var mh$ = GetNumberFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrencyFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$622.GetCurrencyFormatEx$MH,"GetCurrencyFormatEx");
    }
    public static int GetCurrencyFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpCurrencyStr,  int cchCurrency) {
        var mh$ = GetCurrencyFormatEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$622.GetUserDefaultLocaleName$MH,"GetUserDefaultLocaleName");
    }
    public static int GetUserDefaultLocaleName ( Addressable lpLocaleName,  int cchLocaleName) {
        var mh$ = GetUserDefaultLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$622.GetSystemDefaultLocaleName$MH,"GetSystemDefaultLocaleName");
    }
    public static int GetSystemDefaultLocaleName ( Addressable lpLocaleName,  int cchLocaleName) {
        var mh$ = GetSystemDefaultLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsNLSDefinedString$MH() {
        return RuntimeHelper.requireNonNull(constants$623.IsNLSDefinedString$MH,"IsNLSDefinedString");
    }
    public static int IsNLSDefinedString ( int Function,  int dwFlags,  Addressable lpVersionInformation,  Addressable lpString,  int cchStr) {
        var mh$ = IsNLSDefinedString$MH();
        try {
            return (int)mh$.invokeExact(Function, dwFlags, lpVersionInformation, lpString, cchStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNLSVersionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$623.GetNLSVersionEx$MH,"GetNLSVersionEx");
    }
    public static int GetNLSVersionEx ( int function,  Addressable lpLocaleName,  Addressable lpVersionInformation) {
        var mh$ = GetNLSVersionEx$MH();
        try {
            return (int)mh$.invokeExact(function, lpLocaleName, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidNLSVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$623.IsValidNLSVersion$MH,"IsValidNLSVersion");
    }
    public static int IsValidNLSVersion ( int function,  Addressable lpLocaleName,  Addressable lpVersionInformation) {
        var mh$ = IsValidNLSVersion$MH();
        try {
            return (int)mh$.invokeExact(function, lpLocaleName, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNLSStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$623.FindNLSStringEx$MH,"FindNLSStringEx");
    }
    public static int FindNLSStringEx ( Addressable lpLocaleName,  int dwFindNLSStringFlags,  Addressable lpStringSource,  int cchSource,  Addressable lpStringValue,  int cchValue,  Addressable pcchFound,  Addressable lpVersionInformation,  Addressable lpReserved,  long sortHandle) {
        var mh$ = FindNLSStringEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound, lpVersionInformation, lpReserved, sortHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCMapStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$623.LCMapStringEx$MH,"LCMapStringEx");
    }
    public static int LCMapStringEx ( Addressable lpLocaleName,  int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest,  Addressable lpVersionInformation,  Addressable lpReserved,  long sortHandle) {
        var mh$ = LCMapStringEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest, lpVersionInformation, lpReserved, sortHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$623.IsValidLocaleName$MH,"IsValidLocaleName");
    }
    public static int IsValidLocaleName ( Addressable lpLocaleName) {
        var mh$ = IsValidLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoExEx$MH() {
        return RuntimeHelper.requireNonNull(constants$624.EnumCalendarInfoExEx$MH,"EnumCalendarInfoExEx");
    }
    public static int EnumCalendarInfoExEx ( Addressable pCalInfoEnumProcExEx,  Addressable lpLocaleName,  int Calendar,  Addressable lpReserved,  int CalType,  long lParam) {
        var mh$ = EnumCalendarInfoExEx$MH();
        try {
            return (int)mh$.invokeExact(pCalInfoEnumProcExEx, lpLocaleName, Calendar, lpReserved, CalType, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsExEx$MH() {
        return RuntimeHelper.requireNonNull(constants$624.EnumDateFormatsExEx$MH,"EnumDateFormatsExEx");
    }
    public static int EnumDateFormatsExEx ( Addressable lpDateFmtEnumProcExEx,  Addressable lpLocaleName,  int dwFlags,  long lParam) {
        var mh$ = EnumDateFormatsExEx$MH();
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProcExEx, lpLocaleName, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumTimeFormatsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$625.EnumTimeFormatsEx$MH,"EnumTimeFormatsEx");
    }
    public static int EnumTimeFormatsEx ( Addressable lpTimeFmtEnumProcEx,  Addressable lpLocaleName,  int dwFlags,  long lParam) {
        var mh$ = EnumTimeFormatsEx$MH();
        try {
            return (int)mh$.invokeExact(lpTimeFmtEnumProcEx, lpLocaleName, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesEx$MH() {
        return RuntimeHelper.requireNonNull(constants$625.EnumSystemLocalesEx$MH,"EnumSystemLocalesEx");
    }
    public static int EnumSystemLocalesEx ( Addressable lpLocaleEnumProcEx,  int dwFlags,  long lParam,  Addressable lpReserved) {
        var mh$ = EnumSystemLocalesEx$MH();
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProcEx, dwFlags, lParam, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResolveLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$626.ResolveLocaleName$MH,"ResolveLocaleName");
    }
    public static int ResolveLocaleName ( Addressable lpNameToResolve,  Addressable lpLocaleName,  int cchLocaleName) {
        var mh$ = ResolveLocaleName$MH();
        try {
            return (int)mh$.invokeExact(lpNameToResolve, lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCOORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSMALL_RECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKEY_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOUSE_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWINDOW_BUFFER_SIZE_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMENU_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFOCUS_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINPUT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHAR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONSOLE_FONT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPCON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AllocConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$626.AllocConsole$MH,"AllocConsole");
    }
    public static int AllocConsole () {
        var mh$ = AllocConsole$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$626.FreeConsole$MH,"FreeConsole");
    }
    public static int FreeConsole () {
        var mh$ = FreeConsole$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AttachConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$626.AttachConsole$MH,"AttachConsole");
    }
    public static int AttachConsole ( int dwProcessId) {
        var mh$ = AttachConsole$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCP$MH() {
        return RuntimeHelper.requireNonNull(constants$626.GetConsoleCP$MH,"GetConsoleCP");
    }
    public static int GetConsoleCP () {
        var mh$ = GetConsoleCP$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOutputCP$MH() {
        return RuntimeHelper.requireNonNull(constants$626.GetConsoleOutputCP$MH,"GetConsoleOutputCP");
    }
    public static int GetConsoleOutputCP () {
        var mh$ = GetConsoleOutputCP$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$627.GetConsoleMode$MH,"GetConsoleMode");
    }
    public static int GetConsoleMode ( Addressable hConsoleHandle,  Addressable lpMode) {
        var mh$ = GetConsoleMode$MH();
        try {
            return (int)mh$.invokeExact(hConsoleHandle, lpMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$627.SetConsoleMode$MH,"SetConsoleMode");
    }
    public static int SetConsoleMode ( Addressable hConsoleHandle,  int dwMode) {
        var mh$ = SetConsoleMode$MH();
        try {
            return (int)mh$.invokeExact(hConsoleHandle, dwMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberOfConsoleInputEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$627.GetNumberOfConsoleInputEvents$MH,"GetNumberOfConsoleInputEvents");
    }
    public static int GetNumberOfConsoleInputEvents ( Addressable hConsoleInput,  Addressable lpNumberOfEvents) {
        var mh$ = GetNumberOfConsoleInputEvents$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpNumberOfEvents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$627.ReadConsoleInputA$MH,"ReadConsoleInputA");
    }
    public static int ReadConsoleInputA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = ReadConsoleInputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$627.ReadConsoleInputW$MH,"ReadConsoleInputW");
    }
    public static int ReadConsoleInputW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = ReadConsoleInputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$627.PeekConsoleInputA$MH,"PeekConsoleInputA");
    }
    public static int PeekConsoleInputA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = PeekConsoleInputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.PeekConsoleInputW$MH,"PeekConsoleInputW");
    }
    public static int PeekConsoleInputW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = PeekConsoleInputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_READCONSOLE_CONTROL = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ReadConsoleA$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ReadConsoleA$MH,"ReadConsoleA");
    }
    public static int ReadConsoleA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nNumberOfCharsToRead,  Addressable lpNumberOfCharsRead,  Addressable pInputControl) {
        var mh$ = ReadConsoleA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ReadConsoleW$MH,"ReadConsoleW");
    }
    public static int ReadConsoleW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nNumberOfCharsToRead,  Addressable lpNumberOfCharsRead,  Addressable pInputControl) {
        var mh$ = ReadConsoleW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleA$MH() {
        return RuntimeHelper.requireNonNull(constants$628.WriteConsoleA$MH,"WriteConsoleA");
    }
    public static int WriteConsoleA ( Addressable hConsoleOutput,  Addressable lpBuffer,  int nNumberOfCharsToWrite,  Addressable lpNumberOfCharsWritten,  Addressable lpReserved) {
        var mh$ = WriteConsoleA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.WriteConsoleW$MH,"WriteConsoleW");
    }
    public static int WriteConsoleW ( Addressable hConsoleOutput,  Addressable lpBuffer,  int nNumberOfCharsToWrite,  Addressable lpNumberOfCharsWritten,  Addressable lpReserved) {
        var mh$ = WriteConsoleW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCtrlHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$629.SetConsoleCtrlHandler$MH,"SetConsoleCtrlHandler");
    }
    public static int SetConsoleCtrlHandler ( Addressable HandlerRoutine,  int Add) {
        var mh$ = SetConsoleCtrlHandler$MH();
        try {
            return (int)mh$.invokeExact(HandlerRoutine, Add);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$629.CreatePseudoConsole$MH,"CreatePseudoConsole");
    }
    public static int CreatePseudoConsole ( MemorySegment size,  Addressable hInput,  Addressable hOutput,  int dwFlags,  Addressable phPC) {
        var mh$ = CreatePseudoConsole$MH();
        try {
            return (int)mh$.invokeExact(size, hInput, hOutput, dwFlags, phPC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResizePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ResizePseudoConsole$MH,"ResizePseudoConsole");
    }
    public static int ResizePseudoConsole ( Addressable hPC,  MemorySegment size) {
        var mh$ = ResizePseudoConsole$MH();
        try {
            return (int)mh$.invokeExact(hPC, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClosePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ClosePseudoConsole$MH,"ClosePseudoConsole");
    }
    public static void ClosePseudoConsole ( Addressable hPC) {
        var mh$ = ClosePseudoConsole$MH();
        try {
            mh$.invokeExact(hPC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$629.FillConsoleOutputCharacterA$MH,"FillConsoleOutputCharacterA");
    }
    public static int FillConsoleOutputCharacterA ( Addressable hConsoleOutput,  byte cCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = FillConsoleOutputCharacterA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$630.FillConsoleOutputCharacterW$MH,"FillConsoleOutputCharacterW");
    }
    public static int FillConsoleOutputCharacterW ( Addressable hConsoleOutput,  short cCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = FillConsoleOutputCharacterW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$630.FillConsoleOutputAttribute$MH,"FillConsoleOutputAttribute");
    }
    public static int FillConsoleOutputAttribute ( Addressable hConsoleOutput,  short wAttribute,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfAttrsWritten) {
        var mh$ = FillConsoleOutputAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, wAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenerateConsoleCtrlEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$630.GenerateConsoleCtrlEvent$MH,"GenerateConsoleCtrlEvent");
    }
    public static int GenerateConsoleCtrlEvent ( int dwCtrlEvent,  int dwProcessGroupId) {
        var mh$ = GenerateConsoleCtrlEvent$MH();
        try {
            return (int)mh$.invokeExact(dwCtrlEvent, dwProcessGroupId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateConsoleScreenBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$630.CreateConsoleScreenBuffer$MH,"CreateConsoleScreenBuffer");
    }
    public static MemoryAddress CreateConsoleScreenBuffer ( int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwFlags,  Addressable lpScreenBufferData) {
        var mh$ = CreateConsoleScreenBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlags, lpScreenBufferData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleActiveScreenBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$630.SetConsoleActiveScreenBuffer$MH,"SetConsoleActiveScreenBuffer");
    }
    public static int SetConsoleActiveScreenBuffer ( Addressable hConsoleOutput) {
        var mh$ = SetConsoleActiveScreenBuffer$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushConsoleInputBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$630.FlushConsoleInputBuffer$MH,"FlushConsoleInputBuffer");
    }
    public static int FlushConsoleInputBuffer ( Addressable hConsoleInput) {
        var mh$ = FlushConsoleInputBuffer$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCP$MH() {
        return RuntimeHelper.requireNonNull(constants$631.SetConsoleCP$MH,"SetConsoleCP");
    }
    public static int SetConsoleCP ( int wCodePageID) {
        var mh$ = SetConsoleCP$MH();
        try {
            return (int)mh$.invokeExact(wCodePageID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleOutputCP$MH() {
        return RuntimeHelper.requireNonNull(constants$631.SetConsoleOutputCP$MH,"SetConsoleOutputCP");
    }
    public static int SetConsoleOutputCP ( int wCodePageID) {
        var mh$ = SetConsoleOutputCP$MH();
        try {
            return (int)mh$.invokeExact(wCodePageID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_CURSOR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$631.GetConsoleCursorInfo$MH,"GetConsoleCursorInfo");
    }
    public static int GetConsoleCursorInfo ( Addressable hConsoleOutput,  Addressable lpConsoleCursorInfo) {
        var mh$ = GetConsoleCursorInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleCursorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$631.SetConsoleCursorInfo$MH,"SetConsoleCursorInfo");
    }
    public static int SetConsoleCursorInfo ( Addressable hConsoleOutput,  Addressable lpConsoleCursorInfo) {
        var mh$ = SetConsoleCursorInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleCursorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_SCREEN_BUFFER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleScreenBufferInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$631.GetConsoleScreenBufferInfo$MH,"GetConsoleScreenBufferInfo");
    }
    public static int GetConsoleScreenBufferInfo ( Addressable hConsoleOutput,  Addressable lpConsoleScreenBufferInfo) {
        var mh$ = GetConsoleScreenBufferInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_SCREEN_BUFFER_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleScreenBufferInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$631.GetConsoleScreenBufferInfoEx$MH,"GetConsoleScreenBufferInfoEx");
    }
    public static int GetConsoleScreenBufferInfoEx ( Addressable hConsoleOutput,  Addressable lpConsoleScreenBufferInfoEx) {
        var mh$ = GetConsoleScreenBufferInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleScreenBufferInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$632.SetConsoleScreenBufferInfoEx$MH,"SetConsoleScreenBufferInfoEx");
    }
    public static int SetConsoleScreenBufferInfoEx ( Addressable hConsoleOutput,  Addressable lpConsoleScreenBufferInfoEx) {
        var mh$ = SetConsoleScreenBufferInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleScreenBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$632.SetConsoleScreenBufferSize$MH,"SetConsoleScreenBufferSize");
    }
    public static int SetConsoleScreenBufferSize ( Addressable hConsoleOutput,  MemorySegment dwSize) {
        var mh$ = SetConsoleScreenBufferSize$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCursorPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$632.SetConsoleCursorPosition$MH,"SetConsoleCursorPosition");
    }
    public static int SetConsoleCursorPosition ( Addressable hConsoleOutput,  MemorySegment dwCursorPosition) {
        var mh$ = SetConsoleCursorPosition$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwCursorPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLargestConsoleWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$632.GetLargestConsoleWindowSize$MH,"GetLargestConsoleWindowSize");
    }
    public static MemorySegment GetLargestConsoleWindowSize ( SegmentAllocator allocator,  Addressable hConsoleOutput) {
        var mh$ = GetLargestConsoleWindowSize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, hConsoleOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTextAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$632.SetConsoleTextAttribute$MH,"SetConsoleTextAttribute");
    }
    public static int SetConsoleTextAttribute ( Addressable hConsoleOutput,  short wAttributes) {
        var mh$ = SetConsoleTextAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, wAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleWindowInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$632.SetConsoleWindowInfo$MH,"SetConsoleWindowInfo");
    }
    public static int SetConsoleWindowInfo ( Addressable hConsoleOutput,  int bAbsolute,  Addressable lpConsoleWindow) {
        var mh$ = SetConsoleWindowInfo$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bAbsolute, lpConsoleWindow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$633.WriteConsoleOutputCharacterA$MH,"WriteConsoleOutputCharacterA");
    }
    public static int WriteConsoleOutputCharacterA ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = WriteConsoleOutputCharacterA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$633.WriteConsoleOutputCharacterW$MH,"WriteConsoleOutputCharacterW");
    }
    public static int WriteConsoleOutputCharacterW ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = WriteConsoleOutputCharacterW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$633.WriteConsoleOutputAttribute$MH,"WriteConsoleOutputAttribute");
    }
    public static int WriteConsoleOutputAttribute ( Addressable hConsoleOutput,  Addressable lpAttribute,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfAttrsWritten) {
        var mh$ = WriteConsoleOutputAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ReadConsoleOutputCharacterA$MH,"ReadConsoleOutputCharacterA");
    }
    public static int ReadConsoleOutputCharacterA ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwReadCoord,  Addressable lpNumberOfCharsRead) {
        var mh$ = ReadConsoleOutputCharacterA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ReadConsoleOutputCharacterW$MH,"ReadConsoleOutputCharacterW");
    }
    public static int ReadConsoleOutputCharacterW ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwReadCoord,  Addressable lpNumberOfCharsRead) {
        var mh$ = ReadConsoleOutputCharacterW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ReadConsoleOutputAttribute$MH,"ReadConsoleOutputAttribute");
    }
    public static int ReadConsoleOutputAttribute ( Addressable hConsoleOutput,  Addressable lpAttribute,  int nLength,  MemorySegment dwReadCoord,  Addressable lpNumberOfAttrsRead) {
        var mh$ = ReadConsoleOutputAttribute$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpAttribute, nLength, dwReadCoord, lpNumberOfAttrsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$634.WriteConsoleInputA$MH,"WriteConsoleInputA");
    }
    public static int WriteConsoleInputA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsWritten) {
        var mh$ = WriteConsoleInputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$634.WriteConsoleInputW$MH,"WriteConsoleInputW");
    }
    public static int WriteConsoleInputW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsWritten) {
        var mh$ = WriteConsoleInputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollConsoleScreenBufferA$MH() {
        return RuntimeHelper.requireNonNull(constants$634.ScrollConsoleScreenBufferA$MH,"ScrollConsoleScreenBufferA");
    }
    public static int ScrollConsoleScreenBufferA ( Addressable hConsoleOutput,  Addressable lpScrollRectangle,  Addressable lpClipRectangle,  MemorySegment dwDestinationOrigin,  Addressable lpFill) {
        var mh$ = ScrollConsoleScreenBufferA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollConsoleScreenBufferW$MH() {
        return RuntimeHelper.requireNonNull(constants$634.ScrollConsoleScreenBufferW$MH,"ScrollConsoleScreenBufferW");
    }
    public static int ScrollConsoleScreenBufferW ( Addressable hConsoleOutput,  Addressable lpScrollRectangle,  Addressable lpClipRectangle,  MemorySegment dwDestinationOrigin,  Addressable lpFill) {
        var mh$ = ScrollConsoleScreenBufferW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputA$MH() {
        return RuntimeHelper.requireNonNull(constants$634.WriteConsoleOutputA$MH,"WriteConsoleOutputA");
    }
    public static int WriteConsoleOutputA ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpWriteRegion) {
        var mh$ = WriteConsoleOutputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputW$MH() {
        return RuntimeHelper.requireNonNull(constants$634.WriteConsoleOutputW$MH,"WriteConsoleOutputW");
    }
    public static int WriteConsoleOutputW ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpWriteRegion) {
        var mh$ = WriteConsoleOutputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputA$MH() {
        return RuntimeHelper.requireNonNull(constants$635.ReadConsoleOutputA$MH,"ReadConsoleOutputA");
    }
    public static int ReadConsoleOutputA ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpReadRegion) {
        var mh$ = ReadConsoleOutputA$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputW$MH() {
        return RuntimeHelper.requireNonNull(constants$635.ReadConsoleOutputW$MH,"ReadConsoleOutputW");
    }
    public static int ReadConsoleOutputW ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpReadRegion) {
        var mh$ = ReadConsoleOutputW$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$635.GetConsoleTitleA$MH,"GetConsoleTitleA");
    }
    public static int GetConsoleTitleA ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = GetConsoleTitleA$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$635.GetConsoleTitleW$MH,"GetConsoleTitleW");
    }
    public static int GetConsoleTitleW ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = GetConsoleTitleW$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOriginalTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$635.GetConsoleOriginalTitleA$MH,"GetConsoleOriginalTitleA");
    }
    public static int GetConsoleOriginalTitleA ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = GetConsoleOriginalTitleA$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOriginalTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$635.GetConsoleOriginalTitleW$MH,"GetConsoleOriginalTitleW");
    }
    public static int GetConsoleOriginalTitleW ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = GetConsoleOriginalTitleW$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$636.SetConsoleTitleA$MH,"SetConsoleTitleA");
    }
    public static int SetConsoleTitleA ( Addressable lpConsoleTitle) {
        var mh$ = SetConsoleTitleA$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$636.SetConsoleTitleW$MH,"SetConsoleTitleW");
    }
    public static int SetConsoleTitleW ( Addressable lpConsoleTitle) {
        var mh$ = SetConsoleTitleW$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleTitle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberOfConsoleMouseButtons$MH() {
        return RuntimeHelper.requireNonNull(constants$636.GetNumberOfConsoleMouseButtons$MH,"GetNumberOfConsoleMouseButtons");
    }
    public static int GetNumberOfConsoleMouseButtons ( Addressable lpNumberOfMouseButtons) {
        var mh$ = GetNumberOfConsoleMouseButtons$MH();
        try {
            return (int)mh$.invokeExact(lpNumberOfMouseButtons);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleFontSize$MH() {
        return RuntimeHelper.requireNonNull(constants$636.GetConsoleFontSize$MH,"GetConsoleFontSize");
    }
    public static MemorySegment GetConsoleFontSize ( SegmentAllocator allocator,  Addressable hConsoleOutput,  int nFont) {
        var mh$ = GetConsoleFontSize$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, hConsoleOutput, nFont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentConsoleFont$MH() {
        return RuntimeHelper.requireNonNull(constants$636.GetCurrentConsoleFont$MH,"GetCurrentConsoleFont");
    }
    public static int GetCurrentConsoleFont ( Addressable hConsoleOutput,  int bMaximumWindow,  Addressable lpConsoleCurrentFont) {
        var mh$ = GetCurrentConsoleFont$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_FONT_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetCurrentConsoleFontEx$MH() {
        return RuntimeHelper.requireNonNull(constants$636.GetCurrentConsoleFontEx$MH,"GetCurrentConsoleFontEx");
    }
    public static int GetCurrentConsoleFontEx ( Addressable hConsoleOutput,  int bMaximumWindow,  Addressable lpConsoleCurrentFontEx) {
        var mh$ = GetCurrentConsoleFontEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCurrentConsoleFontEx$MH() {
        return RuntimeHelper.requireNonNull(constants$637.SetCurrentConsoleFontEx$MH,"SetCurrentConsoleFontEx");
    }
    public static int SetCurrentConsoleFontEx ( Addressable hConsoleOutput,  int bMaximumWindow,  Addressable lpConsoleCurrentFontEx) {
        var mh$ = SetCurrentConsoleFontEx$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_SELECTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleSelectionInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$637.GetConsoleSelectionInfo$MH,"GetConsoleSelectionInfo");
    }
    public static int GetConsoleSelectionInfo ( Addressable lpConsoleSelectionInfo) {
        var mh$ = GetConsoleSelectionInfo$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleSelectionInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_HISTORY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleHistoryInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$637.GetConsoleHistoryInfo$MH,"GetConsoleHistoryInfo");
    }
    public static int GetConsoleHistoryInfo ( Addressable lpConsoleHistoryInfo) {
        var mh$ = GetConsoleHistoryInfo$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleHistoryInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleHistoryInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$637.SetConsoleHistoryInfo$MH,"SetConsoleHistoryInfo");
    }
    public static int SetConsoleHistoryInfo ( Addressable lpConsoleHistoryInfo) {
        var mh$ = SetConsoleHistoryInfo$MH();
        try {
            return (int)mh$.invokeExact(lpConsoleHistoryInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$637.GetConsoleDisplayMode$MH,"GetConsoleDisplayMode");
    }
    public static int GetConsoleDisplayMode ( Addressable lpModeFlags) {
        var mh$ = GetConsoleDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(lpModeFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$637.SetConsoleDisplayMode$MH,"SetConsoleDisplayMode");
    }
    public static int SetConsoleDisplayMode ( Addressable hConsoleOutput,  int dwFlags,  Addressable lpNewScreenBufferDimensions) {
        var mh$ = SetConsoleDisplayMode$MH();
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwFlags, lpNewScreenBufferDimensions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$638.GetConsoleWindow$MH,"GetConsoleWindow");
    }
    public static MemoryAddress GetConsoleWindow () {
        var mh$ = GetConsoleWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddConsoleAliasA$MH() {
        return RuntimeHelper.requireNonNull(constants$638.AddConsoleAliasA$MH,"AddConsoleAliasA");
    }
    public static int AddConsoleAliasA ( Addressable Source,  Addressable Target,  Addressable ExeName) {
        var mh$ = AddConsoleAliasA$MH();
        try {
            return (int)mh$.invokeExact(Source, Target, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddConsoleAliasW$MH() {
        return RuntimeHelper.requireNonNull(constants$638.AddConsoleAliasW$MH,"AddConsoleAliasW");
    }
    public static int AddConsoleAliasW ( Addressable Source,  Addressable Target,  Addressable ExeName) {
        var mh$ = AddConsoleAliasW$MH();
        try {
            return (int)mh$.invokeExact(Source, Target, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasA$MH() {
        return RuntimeHelper.requireNonNull(constants$638.GetConsoleAliasA$MH,"GetConsoleAliasA");
    }
    public static int GetConsoleAliasA ( Addressable Source,  Addressable TargetBuffer,  int TargetBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleAliasA$MH();
        try {
            return (int)mh$.invokeExact(Source, TargetBuffer, TargetBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasW$MH() {
        return RuntimeHelper.requireNonNull(constants$638.GetConsoleAliasW$MH,"GetConsoleAliasW");
    }
    public static int GetConsoleAliasW ( Addressable Source,  Addressable TargetBuffer,  int TargetBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleAliasW$MH();
        try {
            return (int)mh$.invokeExact(Source, TargetBuffer, TargetBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$638.GetConsoleAliasesLengthA$MH,"GetConsoleAliasesLengthA");
    }
    public static int GetConsoleAliasesLengthA ( Addressable ExeName) {
        var mh$ = GetConsoleAliasesLengthA$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$639.GetConsoleAliasesLengthW$MH,"GetConsoleAliasesLengthW");
    }
    public static int GetConsoleAliasesLengthW ( Addressable ExeName) {
        var mh$ = GetConsoleAliasesLengthW$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$639.GetConsoleAliasExesLengthA$MH,"GetConsoleAliasExesLengthA");
    }
    public static int GetConsoleAliasExesLengthA () {
        var mh$ = GetConsoleAliasExesLengthA$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$639.GetConsoleAliasExesLengthW$MH,"GetConsoleAliasExesLengthW");
    }
    public static int GetConsoleAliasExesLengthW () {
        var mh$ = GetConsoleAliasExesLengthW$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesA$MH() {
        return RuntimeHelper.requireNonNull(constants$639.GetConsoleAliasesA$MH,"GetConsoleAliasesA");
    }
    public static int GetConsoleAliasesA ( Addressable AliasBuffer,  int AliasBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleAliasesA$MH();
        try {
            return (int)mh$.invokeExact(AliasBuffer, AliasBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesW$MH() {
        return RuntimeHelper.requireNonNull(constants$639.GetConsoleAliasesW$MH,"GetConsoleAliasesW");
    }
    public static int GetConsoleAliasesW ( Addressable AliasBuffer,  int AliasBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleAliasesW$MH();
        try {
            return (int)mh$.invokeExact(AliasBuffer, AliasBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesA$MH() {
        return RuntimeHelper.requireNonNull(constants$639.GetConsoleAliasExesA$MH,"GetConsoleAliasExesA");
    }
    public static int GetConsoleAliasExesA ( Addressable ExeNameBuffer,  int ExeNameBufferLength) {
        var mh$ = GetConsoleAliasExesA$MH();
        try {
            return (int)mh$.invokeExact(ExeNameBuffer, ExeNameBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesW$MH() {
        return RuntimeHelper.requireNonNull(constants$640.GetConsoleAliasExesW$MH,"GetConsoleAliasExesW");
    }
    public static int GetConsoleAliasExesW ( Addressable ExeNameBuffer,  int ExeNameBufferLength) {
        var mh$ = GetConsoleAliasExesW$MH();
        try {
            return (int)mh$.invokeExact(ExeNameBuffer, ExeNameBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpungeConsoleCommandHistoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$640.ExpungeConsoleCommandHistoryA$MH,"ExpungeConsoleCommandHistoryA");
    }
    public static void ExpungeConsoleCommandHistoryA ( Addressable ExeName) {
        var mh$ = ExpungeConsoleCommandHistoryA$MH();
        try {
            mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpungeConsoleCommandHistoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$640.ExpungeConsoleCommandHistoryW$MH,"ExpungeConsoleCommandHistoryW");
    }
    public static void ExpungeConsoleCommandHistoryW ( Addressable ExeName) {
        var mh$ = ExpungeConsoleCommandHistoryW$MH();
        try {
            mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleNumberOfCommandsA$MH() {
        return RuntimeHelper.requireNonNull(constants$640.SetConsoleNumberOfCommandsA$MH,"SetConsoleNumberOfCommandsA");
    }
    public static int SetConsoleNumberOfCommandsA ( int Number,  Addressable ExeName) {
        var mh$ = SetConsoleNumberOfCommandsA$MH();
        try {
            return (int)mh$.invokeExact(Number, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleNumberOfCommandsW$MH() {
        return RuntimeHelper.requireNonNull(constants$640.SetConsoleNumberOfCommandsW$MH,"SetConsoleNumberOfCommandsW");
    }
    public static int SetConsoleNumberOfCommandsW ( int Number,  Addressable ExeName) {
        var mh$ = SetConsoleNumberOfCommandsW$MH();
        try {
            return (int)mh$.invokeExact(Number, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$640.GetConsoleCommandHistoryLengthA$MH,"GetConsoleCommandHistoryLengthA");
    }
    public static int GetConsoleCommandHistoryLengthA ( Addressable ExeName) {
        var mh$ = GetConsoleCommandHistoryLengthA$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$641.GetConsoleCommandHistoryLengthW$MH,"GetConsoleCommandHistoryLengthW");
    }
    public static int GetConsoleCommandHistoryLengthW ( Addressable ExeName) {
        var mh$ = GetConsoleCommandHistoryLengthW$MH();
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$641.GetConsoleCommandHistoryA$MH,"GetConsoleCommandHistoryA");
    }
    public static int GetConsoleCommandHistoryA ( Addressable Commands,  int CommandBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleCommandHistoryA$MH();
        try {
            return (int)mh$.invokeExact(Commands, CommandBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$641.GetConsoleCommandHistoryW$MH,"GetConsoleCommandHistoryW");
    }
    public static int GetConsoleCommandHistoryW ( Addressable Commands,  int CommandBufferLength,  Addressable ExeName) {
        var mh$ = GetConsoleCommandHistoryW$MH();
        try {
            return (int)mh$.invokeExact(Commands, CommandBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleProcessList$MH() {
        return RuntimeHelper.requireNonNull(constants$641.GetConsoleProcessList$MH,"GetConsoleProcessList");
    }
    public static int GetConsoleProcessList ( Addressable lpdwProcessList,  int dwProcessCount) {
        var mh$ = GetConsoleProcessList$MH();
        try {
            return (int)mh$.invokeExact(lpdwProcessList, dwProcessCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerFindFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$641.VerFindFileA$MH,"VerFindFileA");
    }
    public static int VerFindFileA ( int uFlags,  Addressable szFileName,  Addressable szWinDir,  Addressable szAppDir,  Addressable szCurDir,  Addressable puCurDirLen,  Addressable szDestDir,  Addressable puDestDirLen) {
        var mh$ = VerFindFileA$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerFindFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$641.VerFindFileW$MH,"VerFindFileW");
    }
    public static int VerFindFileW ( int uFlags,  Addressable szFileName,  Addressable szWinDir,  Addressable szAppDir,  Addressable szCurDir,  Addressable puCurDirLen,  Addressable szDestDir,  Addressable puDestDirLen) {
        var mh$ = VerFindFileW$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerInstallFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$642.VerInstallFileA$MH,"VerInstallFileA");
    }
    public static int VerInstallFileA ( int uFlags,  Addressable szSrcFileName,  Addressable szDestFileName,  Addressable szSrcDir,  Addressable szDestDir,  Addressable szCurDir,  Addressable szTmpFile,  Addressable puTmpFileLen) {
        var mh$ = VerInstallFileA$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerInstallFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$642.VerInstallFileW$MH,"VerInstallFileW");
    }
    public static int VerInstallFileW ( int uFlags,  Addressable szSrcFileName,  Addressable szDestFileName,  Addressable szSrcDir,  Addressable szDestDir,  Addressable szCurDir,  Addressable szTmpFile,  Addressable puTmpFileLen) {
        var mh$ = VerInstallFileW$MH();
        try {
            return (int)mh$.invokeExact(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeA$MH() {
        return RuntimeHelper.requireNonNull(constants$642.GetFileVersionInfoSizeA$MH,"GetFileVersionInfoSizeA");
    }
    public static int GetFileVersionInfoSizeA ( Addressable lptstrFilename,  Addressable lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeA$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeW$MH() {
        return RuntimeHelper.requireNonNull(constants$642.GetFileVersionInfoSizeW$MH,"GetFileVersionInfoSizeW");
    }
    public static int GetFileVersionInfoSizeW ( Addressable lptstrFilename,  Addressable lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeW$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$642.GetFileVersionInfoA$MH,"GetFileVersionInfoA");
    }
    public static int GetFileVersionInfoA ( Addressable lptstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = GetFileVersionInfoA$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$642.GetFileVersionInfoW$MH,"GetFileVersionInfoW");
    }
    public static int GetFileVersionInfoW ( Addressable lptstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = GetFileVersionInfoW$MH();
        try {
            return (int)mh$.invokeExact(lptstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeExA$MH() {
        return RuntimeHelper.requireNonNull(constants$643.GetFileVersionInfoSizeExA$MH,"GetFileVersionInfoSizeExA");
    }
    public static int GetFileVersionInfoSizeExA ( int dwFlags,  Addressable lpwstrFilename,  Addressable lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeExA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeExW$MH() {
        return RuntimeHelper.requireNonNull(constants$643.GetFileVersionInfoSizeExW$MH,"GetFileVersionInfoSizeExW");
    }
    public static int GetFileVersionInfoSizeExW ( int dwFlags,  Addressable lpwstrFilename,  Addressable lpdwHandle) {
        var mh$ = GetFileVersionInfoSizeExW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$643.GetFileVersionInfoExA$MH,"GetFileVersionInfoExA");
    }
    public static int GetFileVersionInfoExA ( int dwFlags,  Addressable lpwstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = GetFileVersionInfoExA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$643.GetFileVersionInfoExW$MH,"GetFileVersionInfoExW");
    }
    public static int GetFileVersionInfoExW ( int dwFlags,  Addressable lpwstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = GetFileVersionInfoExW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerLanguageNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$643.VerLanguageNameA$MH,"VerLanguageNameA");
    }
    public static int VerLanguageNameA ( int wLang,  Addressable szLang,  int cchLang) {
        var mh$ = VerLanguageNameA$MH();
        try {
            return (int)mh$.invokeExact(wLang, szLang, cchLang);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerLanguageNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$643.VerLanguageNameW$MH,"VerLanguageNameW");
    }
    public static int VerLanguageNameW ( int wLang,  Addressable szLang,  int cchLang) {
        var mh$ = VerLanguageNameW$MH();
        try {
            return (int)mh$.invokeExact(wLang, szLang, cchLang);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerQueryValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$644.VerQueryValueA$MH,"VerQueryValueA");
    }
    public static int VerQueryValueA ( Addressable pBlock,  Addressable lpSubBlock,  Addressable lplpBuffer,  Addressable puLen) {
        var mh$ = VerQueryValueA$MH();
        try {
            return (int)mh$.invokeExact(pBlock, lpSubBlock, lplpBuffer, puLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerQueryValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$644.VerQueryValueW$MH,"VerQueryValueW");
    }
    public static int VerQueryValueW ( Addressable pBlock,  Addressable lpSubBlock,  Addressable lplpBuffer,  Addressable puLen) {
        var mh$ = VerQueryValueW$MH();
        try {
            return (int)mh$.invokeExact(pBlock, lpSubBlock, lplpBuffer, puLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt LSTATUS = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PVALCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPVALUEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPVALUEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPVALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROVIDER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVALENTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVALENTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVALENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegCloseKey$MH() {
        return RuntimeHelper.requireNonNull(constants$645.RegCloseKey$MH,"RegCloseKey");
    }
    public static int RegCloseKey ( Addressable hKey) {
        var mh$ = RegCloseKey$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOverridePredefKey$MH() {
        return RuntimeHelper.requireNonNull(constants$645.RegOverridePredefKey$MH,"RegOverridePredefKey");
    }
    public static int RegOverridePredefKey ( Addressable hKey,  Addressable hNewHKey) {
        var mh$ = RegOverridePredefKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, hNewHKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenUserClassesRoot$MH() {
        return RuntimeHelper.requireNonNull(constants$645.RegOpenUserClassesRoot$MH,"RegOpenUserClassesRoot");
    }
    public static int RegOpenUserClassesRoot ( Addressable hToken,  int dwOptions,  int samDesired,  Addressable phkResult) {
        var mh$ = RegOpenUserClassesRoot$MH();
        try {
            return (int)mh$.invokeExact(hToken, dwOptions, samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenCurrentUser$MH() {
        return RuntimeHelper.requireNonNull(constants$645.RegOpenCurrentUser$MH,"RegOpenCurrentUser");
    }
    public static int RegOpenCurrentUser ( int samDesired,  Addressable phkResult) {
        var mh$ = RegOpenCurrentUser$MH();
        try {
            return (int)mh$.invokeExact(samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDisablePredefinedCache$MH() {
        return RuntimeHelper.requireNonNull(constants$645.RegDisablePredefinedCache$MH,"RegDisablePredefinedCache");
    }
    public static int RegDisablePredefinedCache () {
        var mh$ = RegDisablePredefinedCache$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDisablePredefinedCacheEx$MH() {
        return RuntimeHelper.requireNonNull(constants$645.RegDisablePredefinedCacheEx$MH,"RegDisablePredefinedCacheEx");
    }
    public static int RegDisablePredefinedCacheEx () {
        var mh$ = RegDisablePredefinedCacheEx$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryA$MH() {
        return RuntimeHelper.requireNonNull(constants$646.RegConnectRegistryA$MH,"RegConnectRegistryA");
    }
    public static int RegConnectRegistryA ( Addressable lpMachineName,  Addressable hKey,  Addressable phkResult) {
        var mh$ = RegConnectRegistryA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryW$MH() {
        return RuntimeHelper.requireNonNull(constants$646.RegConnectRegistryW$MH,"RegConnectRegistryW");
    }
    public static int RegConnectRegistryW ( Addressable lpMachineName,  Addressable hKey,  Addressable phkResult) {
        var mh$ = RegConnectRegistryW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryExA$MH() {
        return RuntimeHelper.requireNonNull(constants$646.RegConnectRegistryExA$MH,"RegConnectRegistryExA");
    }
    public static int RegConnectRegistryExA ( Addressable lpMachineName,  Addressable hKey,  int Flags,  Addressable phkResult) {
        var mh$ = RegConnectRegistryExA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, Flags, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryExW$MH() {
        return RuntimeHelper.requireNonNull(constants$646.RegConnectRegistryExW$MH,"RegConnectRegistryExW");
    }
    public static int RegConnectRegistryExW ( Addressable lpMachineName,  Addressable hKey,  int Flags,  Addressable phkResult) {
        var mh$ = RegConnectRegistryExW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, Flags, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$646.RegCreateKeyA$MH,"RegCreateKeyA");
    }
    public static int RegCreateKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RegCreateKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$646.RegCreateKeyW$MH,"RegCreateKeyW");
    }
    public static int RegCreateKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RegCreateKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$647.RegCreateKeyExA$MH,"RegCreateKeyExA");
    }
    public static int RegCreateKeyExA ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition) {
        var mh$ = RegCreateKeyExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$647.RegCreateKeyExW$MH,"RegCreateKeyExW");
    }
    public static int RegCreateKeyExW ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition) {
        var mh$ = RegCreateKeyExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$647.RegCreateKeyTransactedA$MH,"RegCreateKeyTransactedA");
    }
    public static int RegCreateKeyTransactedA ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RegCreateKeyTransactedA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$647.RegCreateKeyTransactedW$MH,"RegCreateKeyTransactedW");
    }
    public static int RegCreateKeyTransactedW ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RegCreateKeyTransactedW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$647.RegDeleteKeyA$MH,"RegDeleteKeyA");
    }
    public static int RegDeleteKeyA ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegDeleteKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$647.RegDeleteKeyW$MH,"RegDeleteKeyW");
    }
    public static int RegDeleteKeyW ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegDeleteKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$648.RegDeleteKeyExA$MH,"RegDeleteKeyExA");
    }
    public static int RegDeleteKeyExA ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved) {
        var mh$ = RegDeleteKeyExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$648.RegDeleteKeyExW$MH,"RegDeleteKeyExW");
    }
    public static int RegDeleteKeyExW ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved) {
        var mh$ = RegDeleteKeyExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$648.RegDeleteKeyTransactedA$MH,"RegDeleteKeyTransactedA");
    }
    public static int RegDeleteKeyTransactedA ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved,  Addressable hTransaction,  Addressable pExtendedParameter) {
        var mh$ = RegDeleteKeyTransactedA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved, hTransaction, pExtendedParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$648.RegDeleteKeyTransactedW$MH,"RegDeleteKeyTransactedW");
    }
    public static int RegDeleteKeyTransactedW ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved,  Addressable hTransaction,  Addressable pExtendedParameter) {
        var mh$ = RegDeleteKeyTransactedW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved, hTransaction, pExtendedParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDisableReflectionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$648.RegDisableReflectionKey$MH,"RegDisableReflectionKey");
    }
    public static int RegDisableReflectionKey ( Addressable hBase) {
        var mh$ = RegDisableReflectionKey$MH();
        try {
            return (int)mh$.invokeExact(hBase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnableReflectionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$648.RegEnableReflectionKey$MH,"RegEnableReflectionKey");
    }
    public static int RegEnableReflectionKey ( Addressable hBase) {
        var mh$ = RegEnableReflectionKey$MH();
        try {
            return (int)mh$.invokeExact(hBase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryReflectionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$649.RegQueryReflectionKey$MH,"RegQueryReflectionKey");
    }
    public static int RegQueryReflectionKey ( Addressable hBase,  Addressable bIsReflectionDisabled) {
        var mh$ = RegQueryReflectionKey$MH();
        try {
            return (int)mh$.invokeExact(hBase, bIsReflectionDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$649.RegDeleteValueA$MH,"RegDeleteValueA");
    }
    public static int RegDeleteValueA ( Addressable hKey,  Addressable lpValueName) {
        var mh$ = RegDeleteValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$649.RegDeleteValueW$MH,"RegDeleteValueW");
    }
    public static int RegDeleteValueW ( Addressable hKey,  Addressable lpValueName) {
        var mh$ = RegDeleteValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$649.RegEnumKeyA$MH,"RegEnumKeyA");
    }
    public static int RegEnumKeyA ( Addressable hKey,  int dwIndex,  Addressable lpName,  int cchName) {
        var mh$ = RegEnumKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, cchName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$649.RegEnumKeyW$MH,"RegEnumKeyW");
    }
    public static int RegEnumKeyW ( Addressable hKey,  int dwIndex,  Addressable lpName,  int cchName) {
        var mh$ = RegEnumKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, cchName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$649.RegEnumKeyExA$MH,"RegEnumKeyExA");
    }
    public static int RegEnumKeyExA ( Addressable hKey,  int dwIndex,  Addressable lpName,  Addressable lpcchName,  Addressable lpReserved,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpftLastWriteTime) {
        var mh$ = RegEnumKeyExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, lpcchName, lpReserved, lpClass, lpcchClass, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$650.RegEnumKeyExW$MH,"RegEnumKeyExW");
    }
    public static int RegEnumKeyExW ( Addressable hKey,  int dwIndex,  Addressable lpName,  Addressable lpcchName,  Addressable lpReserved,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpftLastWriteTime) {
        var mh$ = RegEnumKeyExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, lpcchName, lpReserved, lpClass, lpcchClass, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$650.RegEnumValueA$MH,"RegEnumValueA");
    }
    public static int RegEnumValueA ( Addressable hKey,  int dwIndex,  Addressable lpValueName,  Addressable lpcchValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegEnumValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$650.RegEnumValueW$MH,"RegEnumValueW");
    }
    public static int RegEnumValueW ( Addressable hKey,  int dwIndex,  Addressable lpValueName,  Addressable lpcchValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegEnumValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegFlushKey$MH() {
        return RuntimeHelper.requireNonNull(constants$650.RegFlushKey$MH,"RegFlushKey");
    }
    public static int RegFlushKey ( Addressable hKey) {
        var mh$ = RegFlushKey$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegGetKeySecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$650.RegGetKeySecurity$MH,"RegGetKeySecurity");
    }
    public static int RegGetKeySecurity ( Addressable hKey,  int SecurityInformation,  Addressable pSecurityDescriptor,  Addressable lpcbSecurityDescriptor) {
        var mh$ = RegGetKeySecurity$MH();
        try {
            return (int)mh$.invokeExact(hKey, SecurityInformation, pSecurityDescriptor, lpcbSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$650.RegLoadKeyA$MH,"RegLoadKeyA");
    }
    public static int RegLoadKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpFile) {
        var mh$ = RegLoadKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$651.RegLoadKeyW$MH,"RegLoadKeyW");
    }
    public static int RegLoadKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpFile) {
        var mh$ = RegLoadKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegNotifyChangeKeyValue$MH() {
        return RuntimeHelper.requireNonNull(constants$651.RegNotifyChangeKeyValue$MH,"RegNotifyChangeKeyValue");
    }
    public static int RegNotifyChangeKeyValue ( Addressable hKey,  int bWatchSubtree,  int dwNotifyFilter,  Addressable hEvent,  int fAsynchronous) {
        var mh$ = RegNotifyChangeKeyValue$MH();
        try {
            return (int)mh$.invokeExact(hKey, bWatchSubtree, dwNotifyFilter, hEvent, fAsynchronous);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$651.RegOpenKeyA$MH,"RegOpenKeyA");
    }
    public static int RegOpenKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RegOpenKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$651.RegOpenKeyW$MH,"RegOpenKeyW");
    }
    public static int RegOpenKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RegOpenKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$651.RegOpenKeyExA$MH,"RegOpenKeyExA");
    }
    public static int RegOpenKeyExA ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult) {
        var mh$ = RegOpenKeyExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$651.RegOpenKeyExW$MH,"RegOpenKeyExW");
    }
    public static int RegOpenKeyExW ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult) {
        var mh$ = RegOpenKeyExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$652.RegOpenKeyTransactedA$MH,"RegOpenKeyTransactedA");
    }
    public static int RegOpenKeyTransactedA ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RegOpenKeyTransactedA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$652.RegOpenKeyTransactedW$MH,"RegOpenKeyTransactedW");
    }
    public static int RegOpenKeyTransactedW ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RegOpenKeyTransactedW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryInfoKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$652.RegQueryInfoKeyA$MH,"RegQueryInfoKeyA");
    }
    public static int RegQueryInfoKeyA ( Addressable hKey,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpReserved,  Addressable lpcSubKeys,  Addressable lpcbMaxSubKeyLen,  Addressable lpcbMaxClassLen,  Addressable lpcValues,  Addressable lpcbMaxValueNameLen,  Addressable lpcbMaxValueLen,  Addressable lpcbSecurityDescriptor,  Addressable lpftLastWriteTime) {
        var mh$ = RegQueryInfoKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpClass, lpcchClass, lpReserved, lpcSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues, lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryInfoKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$652.RegQueryInfoKeyW$MH,"RegQueryInfoKeyW");
    }
    public static int RegQueryInfoKeyW ( Addressable hKey,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpReserved,  Addressable lpcSubKeys,  Addressable lpcbMaxSubKeyLen,  Addressable lpcbMaxClassLen,  Addressable lpcValues,  Addressable lpcbMaxValueNameLen,  Addressable lpcbMaxValueLen,  Addressable lpcbSecurityDescriptor,  Addressable lpftLastWriteTime) {
        var mh$ = RegQueryInfoKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpClass, lpcchClass, lpReserved, lpcSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues, lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$652.RegQueryValueA$MH,"RegQueryValueA");
    }
    public static int RegQueryValueA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegQueryValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$652.RegQueryValueW$MH,"RegQueryValueW");
    }
    public static int RegQueryValueW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegQueryValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryMultipleValuesA$MH() {
        return RuntimeHelper.requireNonNull(constants$653.RegQueryMultipleValuesA$MH,"RegQueryMultipleValuesA");
    }
    public static int RegQueryMultipleValuesA ( Addressable hKey,  Addressable val_list,  int num_vals,  Addressable lpValueBuf,  Addressable ldwTotsize) {
        var mh$ = RegQueryMultipleValuesA$MH();
        try {
            return (int)mh$.invokeExact(hKey, val_list, num_vals, lpValueBuf, ldwTotsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryMultipleValuesW$MH() {
        return RuntimeHelper.requireNonNull(constants$653.RegQueryMultipleValuesW$MH,"RegQueryMultipleValuesW");
    }
    public static int RegQueryMultipleValuesW ( Addressable hKey,  Addressable val_list,  int num_vals,  Addressable lpValueBuf,  Addressable ldwTotsize) {
        var mh$ = RegQueryMultipleValuesW$MH();
        try {
            return (int)mh$.invokeExact(hKey, val_list, num_vals, lpValueBuf, ldwTotsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueExA$MH() {
        return RuntimeHelper.requireNonNull(constants$653.RegQueryValueExA$MH,"RegQueryValueExA");
    }
    public static int RegQueryValueExA ( Addressable hKey,  Addressable lpValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegQueryValueExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueExW$MH() {
        return RuntimeHelper.requireNonNull(constants$653.RegQueryValueExW$MH,"RegQueryValueExW");
    }
    public static int RegQueryValueExW ( Addressable hKey,  Addressable lpValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RegQueryValueExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegReplaceKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$653.RegReplaceKeyA$MH,"RegReplaceKeyA");
    }
    public static int RegReplaceKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpNewFile,  Addressable lpOldFile) {
        var mh$ = RegReplaceKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpNewFile, lpOldFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegReplaceKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$653.RegReplaceKeyW$MH,"RegReplaceKeyW");
    }
    public static int RegReplaceKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpNewFile,  Addressable lpOldFile) {
        var mh$ = RegReplaceKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpNewFile, lpOldFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegRestoreKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$654.RegRestoreKeyA$MH,"RegRestoreKeyA");
    }
    public static int RegRestoreKeyA ( Addressable hKey,  Addressable lpFile,  int dwFlags) {
        var mh$ = RegRestoreKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegRestoreKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$654.RegRestoreKeyW$MH,"RegRestoreKeyW");
    }
    public static int RegRestoreKeyW ( Addressable hKey,  Addressable lpFile,  int dwFlags) {
        var mh$ = RegRestoreKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegRenameKey$MH() {
        return RuntimeHelper.requireNonNull(constants$654.RegRenameKey$MH,"RegRenameKey");
    }
    public static int RegRenameKey ( Addressable hKey,  Addressable lpSubKeyName,  Addressable lpNewKeyName) {
        var mh$ = RegRenameKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKeyName, lpNewKeyName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$654.RegSaveKeyA$MH,"RegSaveKeyA");
    }
    public static int RegSaveKeyA ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes) {
        var mh$ = RegSaveKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$654.RegSaveKeyW$MH,"RegSaveKeyW");
    }
    public static int RegSaveKeyW ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes) {
        var mh$ = RegSaveKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetKeySecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$654.RegSetKeySecurity$MH,"RegSetKeySecurity");
    }
    public static int RegSetKeySecurity ( Addressable hKey,  int SecurityInformation,  Addressable pSecurityDescriptor) {
        var mh$ = RegSetKeySecurity$MH();
        try {
            return (int)mh$.invokeExact(hKey, SecurityInformation, pSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$655.RegSetValueA$MH,"RegSetValueA");
    }
    public static int RegSetValueA ( Addressable hKey,  Addressable lpSubKey,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$655.RegSetValueW$MH,"RegSetValueW");
    }
    public static int RegSetValueW ( Addressable hKey,  Addressable lpSubKey,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueExA$MH() {
        return RuntimeHelper.requireNonNull(constants$655.RegSetValueExA$MH,"RegSetValueExA");
    }
    public static int RegSetValueExA ( Addressable hKey,  Addressable lpValueName,  int Reserved,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetValueExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, Reserved, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueExW$MH() {
        return RuntimeHelper.requireNonNull(constants$655.RegSetValueExW$MH,"RegSetValueExW");
    }
    public static int RegSetValueExW ( Addressable hKey,  Addressable lpValueName,  int Reserved,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetValueExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, Reserved, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegUnLoadKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$655.RegUnLoadKeyA$MH,"RegUnLoadKeyA");
    }
    public static int RegUnLoadKeyA ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegUnLoadKeyA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegUnLoadKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$655.RegUnLoadKeyW$MH,"RegUnLoadKeyW");
    }
    public static int RegUnLoadKeyW ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegUnLoadKeyW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$656.RegDeleteKeyValueA$MH,"RegDeleteKeyValueA");
    }
    public static int RegDeleteKeyValueA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName) {
        var mh$ = RegDeleteKeyValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$656.RegDeleteKeyValueW$MH,"RegDeleteKeyValueW");
    }
    public static int RegDeleteKeyValueW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName) {
        var mh$ = RegDeleteKeyValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetKeyValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$656.RegSetKeyValueA$MH,"RegSetKeyValueA");
    }
    public static int RegSetKeyValueA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetKeyValueA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetKeyValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$656.RegSetKeyValueW$MH,"RegSetKeyValueW");
    }
    public static int RegSetKeyValueW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RegSetKeyValueW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteTreeA$MH() {
        return RuntimeHelper.requireNonNull(constants$656.RegDeleteTreeA$MH,"RegDeleteTreeA");
    }
    public static int RegDeleteTreeA ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegDeleteTreeA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteTreeW$MH() {
        return RuntimeHelper.requireNonNull(constants$656.RegDeleteTreeW$MH,"RegDeleteTreeW");
    }
    public static int RegDeleteTreeW ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RegDeleteTreeW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCopyTreeA$MH() {
        return RuntimeHelper.requireNonNull(constants$657.RegCopyTreeA$MH,"RegCopyTreeA");
    }
    public static int RegCopyTreeA ( Addressable hKeySrc,  Addressable lpSubKey,  Addressable hKeyDest) {
        var mh$ = RegCopyTreeA$MH();
        try {
            return (int)mh$.invokeExact(hKeySrc, lpSubKey, hKeyDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegGetValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$657.RegGetValueA$MH,"RegGetValueA");
    }
    public static int RegGetValueA ( Addressable hkey,  Addressable lpSubKey,  Addressable lpValue,  int dwFlags,  Addressable pdwType,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RegGetValueA$MH();
        try {
            return (int)mh$.invokeExact(hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegGetValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$657.RegGetValueW$MH,"RegGetValueW");
    }
    public static int RegGetValueW ( Addressable hkey,  Addressable lpSubKey,  Addressable lpValue,  int dwFlags,  Addressable pdwType,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RegGetValueW$MH();
        try {
            return (int)mh$.invokeExact(hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCopyTreeW$MH() {
        return RuntimeHelper.requireNonNull(constants$657.RegCopyTreeW$MH,"RegCopyTreeW");
    }
    public static int RegCopyTreeW ( Addressable hKeySrc,  Addressable lpSubKey,  Addressable hKeyDest) {
        var mh$ = RegCopyTreeW$MH();
        try {
            return (int)mh$.invokeExact(hKeySrc, lpSubKey, hKeyDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadMUIStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$657.RegLoadMUIStringA$MH,"RegLoadMUIStringA");
    }
    public static int RegLoadMUIStringA ( Addressable hKey,  Addressable pszValue,  Addressable pszOutBuf,  int cbOutBuf,  Addressable pcbData,  int Flags,  Addressable pszDirectory) {
        var mh$ = RegLoadMUIStringA$MH();
        try {
            return (int)mh$.invokeExact(hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadMUIStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$657.RegLoadMUIStringW$MH,"RegLoadMUIStringW");
    }
    public static int RegLoadMUIStringW ( Addressable hKey,  Addressable pszValue,  Addressable pszOutBuf,  int cbOutBuf,  Addressable pcbData,  int Flags,  Addressable pszDirectory) {
        var mh$ = RegLoadMUIStringW$MH();
        try {
            return (int)mh$.invokeExact(hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadAppKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$658.RegLoadAppKeyA$MH,"RegLoadAppKeyA");
    }
    public static int RegLoadAppKeyA ( Addressable lpFile,  Addressable phkResult,  int samDesired,  int dwOptions,  int Reserved) {
        var mh$ = RegLoadAppKeyA$MH();
        try {
            return (int)mh$.invokeExact(lpFile, phkResult, samDesired, dwOptions, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadAppKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$658.RegLoadAppKeyW$MH,"RegLoadAppKeyW");
    }
    public static int RegLoadAppKeyW ( Addressable lpFile,  Addressable phkResult,  int samDesired,  int dwOptions,  int Reserved) {
        var mh$ = RegLoadAppKeyW$MH();
        try {
            return (int)mh$.invokeExact(lpFile, phkResult, samDesired, dwOptions, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownA$MH() {
        return RuntimeHelper.requireNonNull(constants$658.InitiateSystemShutdownA$MH,"InitiateSystemShutdownA");
    }
    public static int InitiateSystemShutdownA ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown) {
        var mh$ = InitiateSystemShutdownA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownW$MH() {
        return RuntimeHelper.requireNonNull(constants$658.InitiateSystemShutdownW$MH,"InitiateSystemShutdownW");
    }
    public static int InitiateSystemShutdownW ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown) {
        var mh$ = InitiateSystemShutdownW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortSystemShutdownA$MH() {
        return RuntimeHelper.requireNonNull(constants$658.AbortSystemShutdownA$MH,"AbortSystemShutdownA");
    }
    public static int AbortSystemShutdownA ( Addressable lpMachineName) {
        var mh$ = AbortSystemShutdownA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortSystemShutdownW$MH() {
        return RuntimeHelper.requireNonNull(constants$658.AbortSystemShutdownW$MH,"AbortSystemShutdownW");
    }
    public static int AbortSystemShutdownW ( Addressable lpMachineName) {
        var mh$ = AbortSystemShutdownW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownExA$MH() {
        return RuntimeHelper.requireNonNull(constants$659.InitiateSystemShutdownExA$MH,"InitiateSystemShutdownExA");
    }
    public static int InitiateSystemShutdownExA ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown,  int dwReason) {
        var mh$ = InitiateSystemShutdownExA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownExW$MH() {
        return RuntimeHelper.requireNonNull(constants$659.InitiateSystemShutdownExW$MH,"InitiateSystemShutdownExW");
    }
    public static int InitiateSystemShutdownExW ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown,  int dwReason) {
        var mh$ = InitiateSystemShutdownExW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateShutdownA$MH() {
        return RuntimeHelper.requireNonNull(constants$659.InitiateShutdownA$MH,"InitiateShutdownA");
    }
    public static int InitiateShutdownA ( Addressable lpMachineName,  Addressable lpMessage,  int dwGracePeriod,  int dwShutdownFlags,  int dwReason) {
        var mh$ = InitiateShutdownA$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateShutdownW$MH() {
        return RuntimeHelper.requireNonNull(constants$659.InitiateShutdownW$MH,"InitiateShutdownW");
    }
    public static int InitiateShutdownW ( Addressable lpMachineName,  Addressable lpMessage,  int dwGracePeriod,  int dwShutdownFlags,  int dwReason) {
        var mh$ = InitiateShutdownW$MH();
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckForHiberboot$MH() {
        return RuntimeHelper.requireNonNull(constants$659.CheckForHiberboot$MH,"CheckForHiberboot");
    }
    public static int CheckForHiberboot ( Addressable pHiberboot,  byte bClearFlag) {
        var mh$ = CheckForHiberboot$MH();
        try {
            return (int)mh$.invokeExact(pHiberboot, bClearFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$659.RegSaveKeyExA$MH,"RegSaveKeyExA");
    }
    public static int RegSaveKeyExA ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes,  int Flags) {
        var mh$ = RegSaveKeyExA$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$660.RegSaveKeyExW$MH,"RegSaveKeyExW");
    }
    public static int RegSaveKeyExW ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes,  int Flags) {
        var mh$ = RegSaveKeyExW$MH();
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPNETRESOURCEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNETRESOURCEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNETRESOURCE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetAddConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$660.WNetAddConnectionA$MH,"WNetAddConnectionA");
    }
    public static int WNetAddConnectionA ( Addressable lpRemoteName,  Addressable lpPassword,  Addressable lpLocalName) {
        var mh$ = WNetAddConnectionA$MH();
        try {
            return (int)mh$.invokeExact(lpRemoteName, lpPassword, lpLocalName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$660.WNetAddConnectionW$MH,"WNetAddConnectionW");
    }
    public static int WNetAddConnectionW ( Addressable lpRemoteName,  Addressable lpPassword,  Addressable lpLocalName) {
        var mh$ = WNetAddConnectionW$MH();
        try {
            return (int)mh$.invokeExact(lpRemoteName, lpPassword, lpLocalName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection2A$MH() {
        return RuntimeHelper.requireNonNull(constants$660.WNetAddConnection2A$MH,"WNetAddConnection2A");
    }
    public static int WNetAddConnection2A ( Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = WNetAddConnection2A$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection2W$MH() {
        return RuntimeHelper.requireNonNull(constants$660.WNetAddConnection2W$MH,"WNetAddConnection2W");
    }
    public static int WNetAddConnection2W ( Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = WNetAddConnection2W$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection3A$MH() {
        return RuntimeHelper.requireNonNull(constants$660.WNetAddConnection3A$MH,"WNetAddConnection3A");
    }
    public static int WNetAddConnection3A ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = WNetAddConnection3A$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection3W$MH() {
        return RuntimeHelper.requireNonNull(constants$661.WNetAddConnection3W$MH,"WNetAddConnection3W");
    }
    public static int WNetAddConnection3W ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = WNetAddConnection3W$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection4A$MH() {
        return RuntimeHelper.requireNonNull(constants$661.WNetAddConnection4A$MH,"WNetAddConnection4A");
    }
    public static int WNetAddConnection4A ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions) {
        var mh$ = WNetAddConnection4A$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection4W$MH() {
        return RuntimeHelper.requireNonNull(constants$661.WNetAddConnection4W$MH,"WNetAddConnection4W");
    }
    public static int WNetAddConnection4W ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions) {
        var mh$ = WNetAddConnection4W$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$661.WNetCancelConnectionA$MH,"WNetCancelConnectionA");
    }
    public static int WNetCancelConnectionA ( Addressable lpName,  int fForce) {
        var mh$ = WNetCancelConnectionA$MH();
        try {
            return (int)mh$.invokeExact(lpName, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$661.WNetCancelConnectionW$MH,"WNetCancelConnectionW");
    }
    public static int WNetCancelConnectionW ( Addressable lpName,  int fForce) {
        var mh$ = WNetCancelConnectionW$MH();
        try {
            return (int)mh$.invokeExact(lpName, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnection2A$MH() {
        return RuntimeHelper.requireNonNull(constants$661.WNetCancelConnection2A$MH,"WNetCancelConnection2A");
    }
    public static int WNetCancelConnection2A ( Addressable lpName,  int dwFlags,  int fForce) {
        var mh$ = WNetCancelConnection2A$MH();
        try {
            return (int)mh$.invokeExact(lpName, dwFlags, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnection2W$MH() {
        return RuntimeHelper.requireNonNull(constants$662.WNetCancelConnection2W$MH,"WNetCancelConnection2W");
    }
    public static int WNetCancelConnection2W ( Addressable lpName,  int dwFlags,  int fForce) {
        var mh$ = WNetCancelConnection2W$MH();
        try {
            return (int)mh$.invokeExact(lpName, dwFlags, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$662.WNetGetConnectionA$MH,"WNetGetConnectionA");
    }
    public static int WNetGetConnectionA ( Addressable lpLocalName,  Addressable lpRemoteName,  Addressable lpnLength) {
        var mh$ = WNetGetConnectionA$MH();
        try {
            return (int)mh$.invokeExact(lpLocalName, lpRemoteName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$662.WNetGetConnectionW$MH,"WNetGetConnectionW");
    }
    public static int WNetGetConnectionW ( Addressable lpLocalName,  Addressable lpRemoteName,  Addressable lpnLength) {
        var mh$ = WNetGetConnectionW$MH();
        try {
            return (int)mh$.invokeExact(lpLocalName, lpRemoteName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetRestoreSingleConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$662.WNetRestoreSingleConnectionW$MH,"WNetRestoreSingleConnectionW");
    }
    public static int WNetRestoreSingleConnectionW ( Addressable hwndParent,  Addressable lpDevice,  int fUseUI) {
        var mh$ = WNetRestoreSingleConnectionW$MH();
        try {
            return (int)mh$.invokeExact(hwndParent, lpDevice, fUseUI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$662.WNetUseConnectionA$MH,"WNetUseConnectionA");
    }
    public static int WNetUseConnectionA ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserId,  int dwFlags,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = WNetUseConnectionA$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserId, dwFlags, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$662.WNetUseConnectionW$MH,"WNetUseConnectionW");
    }
    public static int WNetUseConnectionW ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserId,  int dwFlags,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = WNetUseConnectionW$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserId, dwFlags, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnection4A$MH() {
        return RuntimeHelper.requireNonNull(constants$663.WNetUseConnection4A$MH,"WNetUseConnection4A");
    }
    public static int WNetUseConnection4A ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = WNetUseConnection4A$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnection4W$MH() {
        return RuntimeHelper.requireNonNull(constants$663.WNetUseConnection4W$MH,"WNetUseConnection4W");
    }
    public static int WNetUseConnection4W ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = WNetUseConnection4W$MH();
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetConnectionDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$663.WNetConnectionDialog$MH,"WNetConnectionDialog");
    }
    public static int WNetConnectionDialog ( Addressable hwnd,  int dwType) {
        var mh$ = WNetConnectionDialog$MH();
        try {
            return (int)mh$.invokeExact(hwnd, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetDisconnectDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$663.WNetDisconnectDialog$MH,"WNetDisconnectDialog");
    }
    public static int WNetDisconnectDialog ( Addressable hwnd,  int dwType) {
        var mh$ = WNetDisconnectDialog$MH();
        try {
            return (int)mh$.invokeExact(hwnd, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCONNECTDLGSTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCONNECTDLGSTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCONNECTDLGSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetConnectionDialog1A$MH() {
        return RuntimeHelper.requireNonNull(constants$663.WNetConnectionDialog1A$MH,"WNetConnectionDialog1A");
    }
    public static int WNetConnectionDialog1A ( Addressable lpConnDlgStruct) {
        var mh$ = WNetConnectionDialog1A$MH();
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetConnectionDialog1W$MH() {
        return RuntimeHelper.requireNonNull(constants$663.WNetConnectionDialog1W$MH,"WNetConnectionDialog1W");
    }
    public static int WNetConnectionDialog1W ( Addressable lpConnDlgStruct) {
        var mh$ = WNetConnectionDialog1W$MH();
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDISCDLGSTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISCDLGSTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISCDLGSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetDisconnectDialog1A$MH() {
        return RuntimeHelper.requireNonNull(constants$664.WNetDisconnectDialog1A$MH,"WNetDisconnectDialog1A");
    }
    public static int WNetDisconnectDialog1A ( Addressable lpConnDlgStruct) {
        var mh$ = WNetDisconnectDialog1A$MH();
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetDisconnectDialog1W$MH() {
        return RuntimeHelper.requireNonNull(constants$664.WNetDisconnectDialog1W$MH,"WNetDisconnectDialog1W");
    }
    public static int WNetDisconnectDialog1W ( Addressable lpConnDlgStruct) {
        var mh$ = WNetDisconnectDialog1W$MH();
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetOpenEnumA$MH() {
        return RuntimeHelper.requireNonNull(constants$664.WNetOpenEnumA$MH,"WNetOpenEnumA");
    }
    public static int WNetOpenEnumA ( int dwScope,  int dwType,  int dwUsage,  Addressable lpNetResource,  Addressable lphEnum) {
        var mh$ = WNetOpenEnumA$MH();
        try {
            return (int)mh$.invokeExact(dwScope, dwType, dwUsage, lpNetResource, lphEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetOpenEnumW$MH() {
        return RuntimeHelper.requireNonNull(constants$664.WNetOpenEnumW$MH,"WNetOpenEnumW");
    }
    public static int WNetOpenEnumW ( int dwScope,  int dwType,  int dwUsage,  Addressable lpNetResource,  Addressable lphEnum) {
        var mh$ = WNetOpenEnumW$MH();
        try {
            return (int)mh$.invokeExact(dwScope, dwType, dwUsage, lpNetResource, lphEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetEnumResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$664.WNetEnumResourceA$MH,"WNetEnumResourceA");
    }
    public static int WNetEnumResourceA ( Addressable hEnum,  Addressable lpcCount,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = WNetEnumResourceA$MH();
        try {
            return (int)mh$.invokeExact(hEnum, lpcCount, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetEnumResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$664.WNetEnumResourceW$MH,"WNetEnumResourceW");
    }
    public static int WNetEnumResourceW ( Addressable hEnum,  Addressable lpcCount,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = WNetEnumResourceW$MH();
        try {
            return (int)mh$.invokeExact(hEnum, lpcCount, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCloseEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$665.WNetCloseEnum$MH,"WNetCloseEnum");
    }
    public static int WNetCloseEnum ( Addressable hEnum) {
        var mh$ = WNetCloseEnum$MH();
        try {
            return (int)mh$.invokeExact(hEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceParentA$MH() {
        return RuntimeHelper.requireNonNull(constants$665.WNetGetResourceParentA$MH,"WNetGetResourceParentA");
    }
    public static int WNetGetResourceParentA ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer) {
        var mh$ = WNetGetResourceParentA$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceParentW$MH() {
        return RuntimeHelper.requireNonNull(constants$665.WNetGetResourceParentW$MH,"WNetGetResourceParentW");
    }
    public static int WNetGetResourceParentW ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer) {
        var mh$ = WNetGetResourceParentW$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$665.WNetGetResourceInformationA$MH,"WNetGetResourceInformationA");
    }
    public static int WNetGetResourceInformationA ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer,  Addressable lplpSystem) {
        var mh$ = WNetGetResourceInformationA$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer, lplpSystem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$665.WNetGetResourceInformationW$MH,"WNetGetResourceInformationW");
    }
    public static int WNetGetResourceInformationW ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer,  Addressable lplpSystem) {
        var mh$ = WNetGetResourceInformationW$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer, lplpSystem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPUNIVERSAL_NAME_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUNIVERSAL_NAME_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUNIVERSAL_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREMOTE_NAME_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREMOTE_NAME_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREMOTE_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetGetUniversalNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$665.WNetGetUniversalNameA$MH,"WNetGetUniversalNameA");
    }
    public static int WNetGetUniversalNameA ( Addressable lpLocalPath,  int dwInfoLevel,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = WNetGetUniversalNameA$MH();
        try {
            return (int)mh$.invokeExact(lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetUniversalNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$666.WNetGetUniversalNameW$MH,"WNetGetUniversalNameW");
    }
    public static int WNetGetUniversalNameW ( Addressable lpLocalPath,  int dwInfoLevel,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = WNetGetUniversalNameW$MH();
        try {
            return (int)mh$.invokeExact(lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetUserA$MH() {
        return RuntimeHelper.requireNonNull(constants$666.WNetGetUserA$MH,"WNetGetUserA");
    }
    public static int WNetGetUserA ( Addressable lpName,  Addressable lpUserName,  Addressable lpnLength) {
        var mh$ = WNetGetUserA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpUserName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$666.WNetGetUserW$MH,"WNetGetUserW");
    }
    public static int WNetGetUserW ( Addressable lpName,  Addressable lpUserName,  Addressable lpnLength) {
        var mh$ = WNetGetUserW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpUserName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetProviderNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$666.WNetGetProviderNameA$MH,"WNetGetProviderNameA");
    }
    public static int WNetGetProviderNameA ( int dwNetType,  Addressable lpProviderName,  Addressable lpBufferSize) {
        var mh$ = WNetGetProviderNameA$MH();
        try {
            return (int)mh$.invokeExact(dwNetType, lpProviderName, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetProviderNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$666.WNetGetProviderNameW$MH,"WNetGetProviderNameW");
    }
    public static int WNetGetProviderNameW ( int dwNetType,  Addressable lpProviderName,  Addressable lpBufferSize) {
        var mh$ = WNetGetProviderNameW$MH();
        try {
            return (int)mh$.invokeExact(dwNetType, lpProviderName, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPNETINFOSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetGetNetworkInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$666.WNetGetNetworkInformationA$MH,"WNetGetNetworkInformationA");
    }
    public static int WNetGetNetworkInformationA ( Addressable lpProvider,  Addressable lpNetInfoStruct) {
        var mh$ = WNetGetNetworkInformationA$MH();
        try {
            return (int)mh$.invokeExact(lpProvider, lpNetInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetNetworkInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$667.WNetGetNetworkInformationW$MH,"WNetGetNetworkInformationW");
    }
    public static int WNetGetNetworkInformationW ( Addressable lpProvider,  Addressable lpNetInfoStruct) {
        var mh$ = WNetGetNetworkInformationW$MH();
        try {
            return (int)mh$.invokeExact(lpProvider, lpNetInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetLastErrorA$MH() {
        return RuntimeHelper.requireNonNull(constants$667.WNetGetLastErrorA$MH,"WNetGetLastErrorA");
    }
    public static int WNetGetLastErrorA ( Addressable lpError,  Addressable lpErrorBuf,  int nErrorBufSize,  Addressable lpNameBuf,  int nNameBufSize) {
        var mh$ = WNetGetLastErrorA$MH();
        try {
            return (int)mh$.invokeExact(lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetLastErrorW$MH() {
        return RuntimeHelper.requireNonNull(constants$667.WNetGetLastErrorW$MH,"WNetGetLastErrorW");
    }
    public static int WNetGetLastErrorW ( Addressable lpError,  Addressable lpErrorBuf,  int nErrorBufSize,  Addressable lpNameBuf,  int nNameBufSize) {
        var mh$ = WNetGetLastErrorW$MH();
        try {
            return (int)mh$.invokeExact(lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPNETCONNECTINFOSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle MultinetGetConnectionPerformanceA$MH() {
        return RuntimeHelper.requireNonNull(constants$667.MultinetGetConnectionPerformanceA$MH,"MultinetGetConnectionPerformanceA");
    }
    public static int MultinetGetConnectionPerformanceA ( Addressable lpNetResource,  Addressable lpNetConnectInfoStruct) {
        var mh$ = MultinetGetConnectionPerformanceA$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpNetConnectInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MultinetGetConnectionPerformanceW$MH() {
        return RuntimeHelper.requireNonNull(constants$667.MultinetGetConnectionPerformanceW$MH,"MultinetGetConnectionPerformanceW");
    }
    public static int MultinetGetConnectionPerformanceW ( Addressable lpNetResource,  Addressable lpNetConnectInfoStruct) {
        var mh$ = MultinetGetConnectionPerformanceW$MH();
        try {
            return (int)mh$.invokeExact(lpNetResource, lpNetConnectInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeSetQualityOfService$MH() {
        return RuntimeHelper.requireNonNull(constants$667.DdeSetQualityOfService$MH,"DdeSetQualityOfService");
    }
    public static int DdeSetQualityOfService ( Addressable hwndClient,  Addressable pqosNew,  Addressable pqosPrev) {
        var mh$ = DdeSetQualityOfService$MH();
        try {
            return (int)mh$.invokeExact(hwndClient, pqosNew, pqosPrev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImpersonateDdeClientWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$668.ImpersonateDdeClientWindow$MH,"ImpersonateDdeClientWindow");
    }
    public static int ImpersonateDdeClientWindow ( Addressable hWndClient,  Addressable hWndServer) {
        var mh$ = ImpersonateDdeClientWindow$MH();
        try {
            return (int)mh$.invokeExact(hWndClient, hWndServer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PackDDElParam$MH() {
        return RuntimeHelper.requireNonNull(constants$668.PackDDElParam$MH,"PackDDElParam");
    }
    public static long PackDDElParam ( int msg,  long uiLo,  long uiHi) {
        var mh$ = PackDDElParam$MH();
        try {
            return (long)mh$.invokeExact(msg, uiLo, uiHi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnpackDDElParam$MH() {
        return RuntimeHelper.requireNonNull(constants$668.UnpackDDElParam$MH,"UnpackDDElParam");
    }
    public static int UnpackDDElParam ( int msg,  long lParam,  Addressable puiLo,  Addressable puiHi) {
        var mh$ = UnpackDDElParam$MH();
        try {
            return (int)mh$.invokeExact(msg, lParam, puiLo, puiHi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeDDElParam$MH() {
        return RuntimeHelper.requireNonNull(constants$668.FreeDDElParam$MH,"FreeDDElParam");
    }
    public static int FreeDDElParam ( int msg,  long lParam) {
        var mh$ = FreeDDElParam$MH();
        try {
            return (int)mh$.invokeExact(msg, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReuseDDElParam$MH() {
        return RuntimeHelper.requireNonNull(constants$668.ReuseDDElParam$MH,"ReuseDDElParam");
    }
    public static long ReuseDDElParam ( long lParam,  int msgIn,  int msgOut,  long uiLo,  long uiHi) {
        var mh$ = ReuseDDElParam$MH();
        try {
            return (long)mh$.invokeExact(lParam, msgIn, msgOut, uiLo, uiHi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCONVLIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCONV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HSZ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HDDEDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHSZPAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONVCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONVINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DdeInitializeA$MH() {
        return RuntimeHelper.requireNonNull(constants$669.DdeInitializeA$MH,"DdeInitializeA");
    }
    public static int DdeInitializeA ( Addressable pidInst,  Addressable pfnCallback,  int afCmd,  int ulRes) {
        var mh$ = DdeInitializeA$MH();
        try {
            return (int)mh$.invokeExact(pidInst, pfnCallback, afCmd, ulRes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeInitializeW$MH() {
        return RuntimeHelper.requireNonNull(constants$669.DdeInitializeW$MH,"DdeInitializeW");
    }
    public static int DdeInitializeW ( Addressable pidInst,  Addressable pfnCallback,  int afCmd,  int ulRes) {
        var mh$ = DdeInitializeW$MH();
        try {
            return (int)mh$.invokeExact(pidInst, pfnCallback, afCmd, ulRes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeUninitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$669.DdeUninitialize$MH,"DdeUninitialize");
    }
    public static int DdeUninitialize ( int idInst) {
        var mh$ = DdeUninitialize$MH();
        try {
            return (int)mh$.invokeExact(idInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeConnectList$MH() {
        return RuntimeHelper.requireNonNull(constants$670.DdeConnectList$MH,"DdeConnectList");
    }
    public static MemoryAddress DdeConnectList ( int idInst,  Addressable hszService,  Addressable hszTopic,  Addressable hConvList,  Addressable pCC) {
        var mh$ = DdeConnectList$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, hszService, hszTopic, hConvList, pCC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeQueryNextServer$MH() {
        return RuntimeHelper.requireNonNull(constants$670.DdeQueryNextServer$MH,"DdeQueryNextServer");
    }
    public static MemoryAddress DdeQueryNextServer ( Addressable hConvList,  Addressable hConvPrev) {
        var mh$ = DdeQueryNextServer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hConvList, hConvPrev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeDisconnectList$MH() {
        return RuntimeHelper.requireNonNull(constants$670.DdeDisconnectList$MH,"DdeDisconnectList");
    }
    public static int DdeDisconnectList ( Addressable hConvList) {
        var mh$ = DdeDisconnectList$MH();
        try {
            return (int)mh$.invokeExact(hConvList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeConnect$MH() {
        return RuntimeHelper.requireNonNull(constants$670.DdeConnect$MH,"DdeConnect");
    }
    public static MemoryAddress DdeConnect ( int idInst,  Addressable hszService,  Addressable hszTopic,  Addressable pCC) {
        var mh$ = DdeConnect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, hszService, hszTopic, pCC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$670.DdeDisconnect$MH,"DdeDisconnect");
    }
    public static int DdeDisconnect ( Addressable hConv) {
        var mh$ = DdeDisconnect$MH();
        try {
            return (int)mh$.invokeExact(hConv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeReconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$670.DdeReconnect$MH,"DdeReconnect");
    }
    public static MemoryAddress DdeReconnect ( Addressable hConv) {
        var mh$ = DdeReconnect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hConv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeQueryConvInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$671.DdeQueryConvInfo$MH,"DdeQueryConvInfo");
    }
    public static int DdeQueryConvInfo ( Addressable hConv,  int idTransaction,  Addressable pConvInfo) {
        var mh$ = DdeQueryConvInfo$MH();
        try {
            return (int)mh$.invokeExact(hConv, idTransaction, pConvInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeSetUserHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$671.DdeSetUserHandle$MH,"DdeSetUserHandle");
    }
    public static int DdeSetUserHandle ( Addressable hConv,  int id,  long hUser) {
        var mh$ = DdeSetUserHandle$MH();
        try {
            return (int)mh$.invokeExact(hConv, id, hUser);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeAbandonTransaction$MH() {
        return RuntimeHelper.requireNonNull(constants$671.DdeAbandonTransaction$MH,"DdeAbandonTransaction");
    }
    public static int DdeAbandonTransaction ( int idInst,  Addressable hConv,  int idTransaction) {
        var mh$ = DdeAbandonTransaction$MH();
        try {
            return (int)mh$.invokeExact(idInst, hConv, idTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdePostAdvise$MH() {
        return RuntimeHelper.requireNonNull(constants$671.DdePostAdvise$MH,"DdePostAdvise");
    }
    public static int DdePostAdvise ( int idInst,  Addressable hszTopic,  Addressable hszItem) {
        var mh$ = DdePostAdvise$MH();
        try {
            return (int)mh$.invokeExact(idInst, hszTopic, hszItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeEnableCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$671.DdeEnableCallback$MH,"DdeEnableCallback");
    }
    public static int DdeEnableCallback ( int idInst,  Addressable hConv,  int wCmd) {
        var mh$ = DdeEnableCallback$MH();
        try {
            return (int)mh$.invokeExact(idInst, hConv, wCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeImpersonateClient$MH() {
        return RuntimeHelper.requireNonNull(constants$671.DdeImpersonateClient$MH,"DdeImpersonateClient");
    }
    public static int DdeImpersonateClient ( Addressable hConv) {
        var mh$ = DdeImpersonateClient$MH();
        try {
            return (int)mh$.invokeExact(hConv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeNameService$MH() {
        return RuntimeHelper.requireNonNull(constants$672.DdeNameService$MH,"DdeNameService");
    }
    public static MemoryAddress DdeNameService ( int idInst,  Addressable hsz1,  Addressable hsz2,  int afCmd) {
        var mh$ = DdeNameService$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, hsz1, hsz2, afCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeClientTransaction$MH() {
        return RuntimeHelper.requireNonNull(constants$672.DdeClientTransaction$MH,"DdeClientTransaction");
    }
    public static MemoryAddress DdeClientTransaction ( Addressable pData,  int cbData,  Addressable hConv,  Addressable hszItem,  int wFmt,  int wType,  int dwTimeout,  Addressable pdwResult) {
        var mh$ = DdeClientTransaction$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pData, cbData, hConv, hszItem, wFmt, wType, dwTimeout, pdwResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeCreateDataHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$672.DdeCreateDataHandle$MH,"DdeCreateDataHandle");
    }
    public static MemoryAddress DdeCreateDataHandle ( int idInst,  Addressable pSrc,  int cb,  int cbOff,  Addressable hszItem,  int wFmt,  int afCmd) {
        var mh$ = DdeCreateDataHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, pSrc, cb, cbOff, hszItem, wFmt, afCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeAddData$MH() {
        return RuntimeHelper.requireNonNull(constants$672.DdeAddData$MH,"DdeAddData");
    }
    public static MemoryAddress DdeAddData ( Addressable hData,  Addressable pSrc,  int cb,  int cbOff) {
        var mh$ = DdeAddData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hData, pSrc, cb, cbOff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeGetData$MH() {
        return RuntimeHelper.requireNonNull(constants$672.DdeGetData$MH,"DdeGetData");
    }
    public static int DdeGetData ( Addressable hData,  Addressable pDst,  int cbMax,  int cbOff) {
        var mh$ = DdeGetData$MH();
        try {
            return (int)mh$.invokeExact(hData, pDst, cbMax, cbOff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeAccessData$MH() {
        return RuntimeHelper.requireNonNull(constants$672.DdeAccessData$MH,"DdeAccessData");
    }
    public static MemoryAddress DdeAccessData ( Addressable hData,  Addressable pcbDataSize) {
        var mh$ = DdeAccessData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hData, pcbDataSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeUnaccessData$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DdeUnaccessData$MH,"DdeUnaccessData");
    }
    public static int DdeUnaccessData ( Addressable hData) {
        var mh$ = DdeUnaccessData$MH();
        try {
            return (int)mh$.invokeExact(hData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeFreeDataHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DdeFreeDataHandle$MH,"DdeFreeDataHandle");
    }
    public static int DdeFreeDataHandle ( Addressable hData) {
        var mh$ = DdeFreeDataHandle$MH();
        try {
            return (int)mh$.invokeExact(hData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeGetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DdeGetLastError$MH,"DdeGetLastError");
    }
    public static int DdeGetLastError ( int idInst) {
        var mh$ = DdeGetLastError$MH();
        try {
            return (int)mh$.invokeExact(idInst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeCreateStringHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DdeCreateStringHandleA$MH,"DdeCreateStringHandleA");
    }
    public static MemoryAddress DdeCreateStringHandleA ( int idInst,  Addressable psz,  int iCodePage) {
        var mh$ = DdeCreateStringHandleA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, psz, iCodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeCreateStringHandleW$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DdeCreateStringHandleW$MH,"DdeCreateStringHandleW");
    }
    public static MemoryAddress DdeCreateStringHandleW ( int idInst,  Addressable psz,  int iCodePage) {
        var mh$ = DdeCreateStringHandleW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idInst, psz, iCodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeQueryStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$673.DdeQueryStringA$MH,"DdeQueryStringA");
    }
    public static int DdeQueryStringA ( int idInst,  Addressable hsz,  Addressable psz,  int cchMax,  int iCodePage) {
        var mh$ = DdeQueryStringA$MH();
        try {
            return (int)mh$.invokeExact(idInst, hsz, psz, cchMax, iCodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeQueryStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$674.DdeQueryStringW$MH,"DdeQueryStringW");
    }
    public static int DdeQueryStringW ( int idInst,  Addressable hsz,  Addressable psz,  int cchMax,  int iCodePage) {
        var mh$ = DdeQueryStringW$MH();
        try {
            return (int)mh$.invokeExact(idInst, hsz, psz, cchMax, iCodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeFreeStringHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$674.DdeFreeStringHandle$MH,"DdeFreeStringHandle");
    }
    public static int DdeFreeStringHandle ( int idInst,  Addressable hsz) {
        var mh$ = DdeFreeStringHandle$MH();
        try {
            return (int)mh$.invokeExact(idInst, hsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeKeepStringHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$674.DdeKeepStringHandle$MH,"DdeKeepStringHandle");
    }
    public static int DdeKeepStringHandle ( int idInst,  Addressable hsz) {
        var mh$ = DdeKeepStringHandle$MH();
        try {
            return (int)mh$.invokeExact(idInst, hsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DdeCmpStringHandles$MH() {
        return RuntimeHelper.requireNonNull(constants$674.DdeCmpStringHandles$MH,"DdeCmpStringHandles");
    }
    public static int DdeCmpStringHandles ( Addressable hsz1,  Addressable hsz2) {
        var mh$ = DdeCmpStringHandles$MH();
        try {
            return (int)mh$.invokeExact(hsz1, hsz2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PDDEML_MSG_HOOK_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONMSGSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONCBSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONHSZSTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONHSZSTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONHSZSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONERRSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONLINKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMONCONVSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LZStart$MH() {
        return RuntimeHelper.requireNonNull(constants$674.LZStart$MH,"LZStart");
    }
    public static int LZStart () {
        var mh$ = LZStart$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZDone$MH() {
        return RuntimeHelper.requireNonNull(constants$674.LZDone$MH,"LZDone");
    }
    public static void LZDone () {
        var mh$ = LZDone$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyLZFile$MH() {
        return RuntimeHelper.requireNonNull(constants$675.CopyLZFile$MH,"CopyLZFile");
    }
    public static int CopyLZFile ( int hfSource,  int hfDest) {
        var mh$ = CopyLZFile$MH();
        try {
            return (int)mh$.invokeExact(hfSource, hfDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZCopy$MH() {
        return RuntimeHelper.requireNonNull(constants$675.LZCopy$MH,"LZCopy");
    }
    public static int LZCopy ( int hfSource,  int hfDest) {
        var mh$ = LZCopy$MH();
        try {
            return (int)mh$.invokeExact(hfSource, hfDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZInit$MH() {
        return RuntimeHelper.requireNonNull(constants$675.LZInit$MH,"LZInit");
    }
    public static int LZInit ( int hfSource) {
        var mh$ = LZInit$MH();
        try {
            return (int)mh$.invokeExact(hfSource);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExpandedNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$675.GetExpandedNameA$MH,"GetExpandedNameA");
    }
    public static int GetExpandedNameA ( Addressable lpszSource,  Addressable lpszBuffer) {
        var mh$ = GetExpandedNameA$MH();
        try {
            return (int)mh$.invokeExact(lpszSource, lpszBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetExpandedNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$675.GetExpandedNameW$MH,"GetExpandedNameW");
    }
    public static int GetExpandedNameW ( Addressable lpszSource,  Addressable lpszBuffer) {
        var mh$ = GetExpandedNameW$MH();
        try {
            return (int)mh$.invokeExact(lpszSource, lpszBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZOpenFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$675.LZOpenFileA$MH,"LZOpenFileA");
    }
    public static int LZOpenFileA ( Addressable lpFileName,  Addressable lpReOpenBuf,  short wStyle) {
        var mh$ = LZOpenFileA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpReOpenBuf, wStyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZOpenFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$676.LZOpenFileW$MH,"LZOpenFileW");
    }
    public static int LZOpenFileW ( Addressable lpFileName,  Addressable lpReOpenBuf,  short wStyle) {
        var mh$ = LZOpenFileW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpReOpenBuf, wStyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZSeek$MH() {
        return RuntimeHelper.requireNonNull(constants$676.LZSeek$MH,"LZSeek");
    }
    public static int LZSeek ( int hFile,  int lOffset,  int iOrigin) {
        var mh$ = LZSeek$MH();
        try {
            return (int)mh$.invokeExact(hFile, lOffset, iOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZRead$MH() {
        return RuntimeHelper.requireNonNull(constants$676.LZRead$MH,"LZRead");
    }
    public static int LZRead ( int hFile,  Addressable lpBuffer,  int cbRead) {
        var mh$ = LZRead$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpBuffer, cbRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LZClose$MH() {
        return RuntimeHelper.requireNonNull(constants$676.LZClose$MH,"LZClose");
    }
    public static void LZClose ( int hFile) {
        var mh$ = LZClose$MH();
        try {
            mh$.invokeExact(hFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPUINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HDRVR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mciSendCommandA$MH() {
        return RuntimeHelper.requireNonNull(constants$678.mciSendCommandA$MH,"mciSendCommandA");
    }
    public static int mciSendCommandA ( int mciId,  int uMsg,  long dwParam1,  long dwParam2) {
        var mh$ = mciSendCommandA$MH();
        try {
            return (int)mh$.invokeExact(mciId, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciSendCommandW$MH() {
        return RuntimeHelper.requireNonNull(constants$678.mciSendCommandW$MH,"mciSendCommandW");
    }
    public static int mciSendCommandW ( int mciId,  int uMsg,  long dwParam1,  long dwParam2) {
        var mh$ = mciSendCommandW$MH();
        try {
            return (int)mh$.invokeExact(mciId, uMsg, dwParam1, dwParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciSendStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$678.mciSendStringA$MH,"mciSendStringA");
    }
    public static int mciSendStringA ( Addressable lpstrCommand,  Addressable lpstrReturnString,  int uReturnLength,  Addressable hwndCallback) {
        var mh$ = mciSendStringA$MH();
        try {
            return (int)mh$.invokeExact(lpstrCommand, lpstrReturnString, uReturnLength, hwndCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciSendStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$678.mciSendStringW$MH,"mciSendStringW");
    }
    public static int mciSendStringW ( Addressable lpstrCommand,  Addressable lpstrReturnString,  int uReturnLength,  Addressable hwndCallback) {
        var mh$ = mciSendStringW$MH();
        try {
            return (int)mh$.invokeExact(lpstrCommand, lpstrReturnString, uReturnLength, hwndCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetDeviceIDA$MH() {
        return RuntimeHelper.requireNonNull(constants$678.mciGetDeviceIDA$MH,"mciGetDeviceIDA");
    }
    public static int mciGetDeviceIDA ( Addressable pszDevice) {
        var mh$ = mciGetDeviceIDA$MH();
        try {
            return (int)mh$.invokeExact(pszDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetDeviceIDW$MH() {
        return RuntimeHelper.requireNonNull(constants$678.mciGetDeviceIDW$MH,"mciGetDeviceIDW");
    }
    public static int mciGetDeviceIDW ( Addressable pszDevice) {
        var mh$ = mciGetDeviceIDW$MH();
        try {
            return (int)mh$.invokeExact(pszDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetDeviceIDFromElementIDA$MH() {
        return RuntimeHelper.requireNonNull(constants$679.mciGetDeviceIDFromElementIDA$MH,"mciGetDeviceIDFromElementIDA");
    }
    public static int mciGetDeviceIDFromElementIDA ( int dwElementID,  Addressable lpstrType) {
        var mh$ = mciGetDeviceIDFromElementIDA$MH();
        try {
            return (int)mh$.invokeExact(dwElementID, lpstrType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetDeviceIDFromElementIDW$MH() {
        return RuntimeHelper.requireNonNull(constants$679.mciGetDeviceIDFromElementIDW$MH,"mciGetDeviceIDFromElementIDW");
    }
    public static int mciGetDeviceIDFromElementIDW ( int dwElementID,  Addressable lpstrType) {
        var mh$ = mciGetDeviceIDFromElementIDW$MH();
        try {
            return (int)mh$.invokeExact(dwElementID, lpstrType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetErrorStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$679.mciGetErrorStringA$MH,"mciGetErrorStringA");
    }
    public static int mciGetErrorStringA ( int mcierr,  Addressable pszText,  int cchText) {
        var mh$ = mciGetErrorStringA$MH();
        try {
            return (int)mh$.invokeExact(mcierr, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetErrorStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$679.mciGetErrorStringW$MH,"mciGetErrorStringW");
    }
    public static int mciGetErrorStringW ( int mcierr,  Addressable pszText,  int cchText) {
        var mh$ = mciGetErrorStringW$MH();
        try {
            return (int)mh$.invokeExact(mcierr, pszText, cchText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciSetYieldProc$MH() {
        return RuntimeHelper.requireNonNull(constants$679.mciSetYieldProc$MH,"mciSetYieldProc");
    }
    public static int mciSetYieldProc ( int mciId,  Addressable fpYieldProc,  int dwYieldData) {
        var mh$ = mciSetYieldProc$MH();
        try {
            return (int)mh$.invokeExact(mciId, fpYieldProc, dwYieldData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetCreatorTask$MH() {
        return RuntimeHelper.requireNonNull(constants$679.mciGetCreatorTask$MH,"mciGetCreatorTask");
    }
    public static MemoryAddress mciGetCreatorTask ( int mciId) {
        var mh$ = mciGetCreatorTask$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mciId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciGetYieldProc$MH() {
        return RuntimeHelper.requireNonNull(constants$680.mciGetYieldProc$MH,"mciGetYieldProc");
    }
    public static MemoryAddress mciGetYieldProc ( int mciId,  Addressable pdwYieldData) {
        var mh$ = mciGetYieldProc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mciId, pdwYieldData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMCI_GENERIC_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_GENERIC_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SEEK_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SEEK_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_STATUS_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_STATUS_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_INFO_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_INFO_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_INFO_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_GETDEVCAPS_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_GETDEVCAPS_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SYSINFO_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SYSINFO_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SYSINFO_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SYSINFO_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SYSINFO_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SYSINFO_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_BREAK_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_BREAK_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SAVE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SAVE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SAVE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SAVE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SAVE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SAVE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_LOAD_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_LOAD_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_LOAD_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_LOAD_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_LOAD_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_LOAD_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_RECORD_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_VD_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_VD_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_VD_STEP_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_VD_STEP_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_VD_ESCAPE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_VD_ESCAPE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_VD_ESCAPE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_VD_ESCAPE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_VD_ESCAPE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_VD_ESCAPE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_WAVE_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_WAVE_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_WAVE_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_WAVE_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_WAVE_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_WAVE_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_WAVE_DELETE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_WAVE_DELETE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_WAVE_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_WAVE_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_SEQ_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_SEQ_SET_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_PLAY_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_STEP_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_STEP_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_WINDOW_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_WINDOW_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_WINDOW_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_WINDOW_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_WINDOW_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_WINDOW_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_RECT_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_RECT_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_ANIM_UPDATE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_ANIM_UPDATE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_OPEN_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_OPEN_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_OPEN_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_WINDOW_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_WINDOW_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_WINDOW_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_WINDOW_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_WINDOW_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_WINDOW_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_RECT_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_RECT_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_SAVE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_SAVE_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_SAVE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_SAVE_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_SAVE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_SAVE_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_LOAD_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_LOAD_PARMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_LOAD_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_LOAD_PARMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMCI_OVLY_LOAD_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMCI_OVLY_LOAD_PARMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mciGetDriverData$MH() {
        return RuntimeHelper.requireNonNull(constants$680.mciGetDriverData$MH,"mciGetDriverData");
    }
    public static long mciGetDriverData ( int wDeviceID) {
        var mh$ = mciGetDriverData$MH();
        try {
            return (long)mh$.invokeExact(wDeviceID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciLoadCommandResource$MH() {
        return RuntimeHelper.requireNonNull(constants$680.mciLoadCommandResource$MH,"mciLoadCommandResource");
    }
    public static int mciLoadCommandResource ( Addressable hInstance,  Addressable lpResName,  int wType) {
        var mh$ = mciLoadCommandResource$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpResName, wType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciSetDriverData$MH() {
        return RuntimeHelper.requireNonNull(constants$680.mciSetDriverData$MH,"mciSetDriverData");
    }
    public static int mciSetDriverData ( int wDeviceID,  long dwData) {
        var mh$ = mciSetDriverData$MH();
        try {
            return (int)mh$.invokeExact(wDeviceID, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciDriverYield$MH() {
        return RuntimeHelper.requireNonNull(constants$680.mciDriverYield$MH,"mciDriverYield");
    }
    public static int mciDriverYield ( int wDeviceID) {
        var mh$ = mciDriverYield$MH();
        try {
            return (int)mh$.invokeExact(wDeviceID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciDriverNotify$MH() {
        return RuntimeHelper.requireNonNull(constants$680.mciDriverNotify$MH,"mciDriverNotify");
    }
    public static int mciDriverNotify ( Addressable hwndCallback,  int wDeviceID,  int uStatus) {
        var mh$ = mciDriverNotify$MH();
        try {
            return (int)mh$.invokeExact(hwndCallback, wDeviceID, uStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mciFreeCommandResource$MH() {
        return RuntimeHelper.requireNonNull(constants$681.mciFreeCommandResource$MH,"mciFreeCommandResource");
    }
    public static int mciFreeCommandResource ( int wTable) {
        var mh$ = mciFreeCommandResource$MH();
        try {
            return (int)mh$.invokeExact(wTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PDRVCONFIGINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDRVCONFIGINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRVCONFIGINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRVCONFIGINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDRVCONFIGINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRVCONFIGINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CloseDriver$MH() {
        return RuntimeHelper.requireNonNull(constants$681.CloseDriver$MH,"CloseDriver");
    }
    public static long CloseDriver ( Addressable hDriver,  long lParam1,  long lParam2) {
        var mh$ = CloseDriver$MH();
        try {
            return (long)mh$.invokeExact(hDriver, lParam1, lParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenDriver$MH() {
        return RuntimeHelper.requireNonNull(constants$681.OpenDriver$MH,"OpenDriver");
    }
    public static MemoryAddress OpenDriver ( Addressable szDriverName,  Addressable szSectionName,  long lParam2) {
        var mh$ = OpenDriver$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(szDriverName, szSectionName, lParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendDriverMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$681.SendDriverMessage$MH,"SendDriverMessage");
    }
    public static long SendDriverMessage ( Addressable hDriver,  int message,  long lParam1,  long lParam2) {
        var mh$ = SendDriverMessage$MH();
        try {
            return (long)mh$.invokeExact(hDriver, message, lParam1, lParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrvGetModuleHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$682.DrvGetModuleHandle$MH,"DrvGetModuleHandle");
    }
    public static MemoryAddress DrvGetModuleHandle ( Addressable hDriver) {
        var mh$ = DrvGetModuleHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDriver);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDriverModuleHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$682.GetDriverModuleHandle$MH,"GetDriverModuleHandle");
    }
    public static MemoryAddress GetDriverModuleHandle ( Addressable hDriver) {
        var mh$ = GetDriverModuleHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDriver);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefDriverProc$MH() {
        return RuntimeHelper.requireNonNull(constants$682.DefDriverProc$MH,"DefDriverProc");
    }
    public static long DefDriverProc ( long dwDriverIdentifier,  Addressable hdrvr,  int uMsg,  long lParam1,  long lParam2) {
        var mh$ = DefDriverProc$MH();
        try {
            return (long)mh$.invokeExact(dwDriverIdentifier, hdrvr, uMsg, lParam1, lParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DriverCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$682.DriverCallback$MH,"DriverCallback");
    }
    public static int DriverCallback ( long dwCallback,  int dwFlags,  Addressable hDevice,  int dwMsg,  long dwUser,  long dwParam1,  long dwParam2) {
        var mh$ = DriverCallback$MH();
        try {
            return (int)mh$.invokeExact(dwCallback, dwFlags, hDevice, dwMsg, dwUser, dwParam1, dwParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sndOpenSound$MH() {
        return RuntimeHelper.requireNonNull(constants$682.sndOpenSound$MH,"sndOpenSound");
    }
    public static int sndOpenSound ( Addressable EventName,  Addressable AppName,  int Flags,  Addressable FileHandle) {
        var mh$ = sndOpenSound$MH();
        try {
            return (int)mh$.invokeExact(EventName, AppName, Flags, FileHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmDrvInstall$MH() {
        return RuntimeHelper.requireNonNull(constants$683.mmDrvInstall$MH,"mmDrvInstall");
    }
    public static int mmDrvInstall ( Addressable hDriver,  Addressable wszDrvEntry,  Addressable drvMessage,  int wFlags) {
        var mh$ = mmDrvInstall$MH();
        try {
            return (int)mh$.invokeExact(hDriver, wszDrvEntry, drvMessage, wFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMMIO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMMIOINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMMIOINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMMIOINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMMIOINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMMCKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMMCKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMMCKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMMCKINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle mmioStringToFOURCCA$MH() {
        return RuntimeHelper.requireNonNull(constants$684.mmioStringToFOURCCA$MH,"mmioStringToFOURCCA");
    }
    public static int mmioStringToFOURCCA ( Addressable sz,  int uFlags) {
        var mh$ = mmioStringToFOURCCA$MH();
        try {
            return (int)mh$.invokeExact(sz, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioStringToFOURCCW$MH() {
        return RuntimeHelper.requireNonNull(constants$684.mmioStringToFOURCCW$MH,"mmioStringToFOURCCW");
    }
    public static int mmioStringToFOURCCW ( Addressable sz,  int uFlags) {
        var mh$ = mmioStringToFOURCCW$MH();
        try {
            return (int)mh$.invokeExact(sz, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioInstallIOProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$684.mmioInstallIOProcA$MH,"mmioInstallIOProcA");
    }
    public static MemoryAddress mmioInstallIOProcA ( int fccIOProc,  Addressable pIOProc,  int dwFlags) {
        var mh$ = mmioInstallIOProcA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fccIOProc, pIOProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioInstallIOProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$684.mmioInstallIOProcW$MH,"mmioInstallIOProcW");
    }
    public static MemoryAddress mmioInstallIOProcW ( int fccIOProc,  Addressable pIOProc,  int dwFlags) {
        var mh$ = mmioInstallIOProcW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fccIOProc, pIOProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioOpenA$MH() {
        return RuntimeHelper.requireNonNull(constants$684.mmioOpenA$MH,"mmioOpenA");
    }
    public static MemoryAddress mmioOpenA ( Addressable pszFileName,  Addressable pmmioinfo,  int fdwOpen) {
        var mh$ = mmioOpenA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszFileName, pmmioinfo, fdwOpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioOpenW$MH() {
        return RuntimeHelper.requireNonNull(constants$684.mmioOpenW$MH,"mmioOpenW");
    }
    public static MemoryAddress mmioOpenW ( Addressable pszFileName,  Addressable pmmioinfo,  int fdwOpen) {
        var mh$ = mmioOpenW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszFileName, pmmioinfo, fdwOpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioRenameA$MH() {
        return RuntimeHelper.requireNonNull(constants$685.mmioRenameA$MH,"mmioRenameA");
    }
    public static int mmioRenameA ( Addressable pszFileName,  Addressable pszNewFileName,  Addressable pmmioinfo,  int fdwRename) {
        var mh$ = mmioRenameA$MH();
        try {
            return (int)mh$.invokeExact(pszFileName, pszNewFileName, pmmioinfo, fdwRename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioRenameW$MH() {
        return RuntimeHelper.requireNonNull(constants$685.mmioRenameW$MH,"mmioRenameW");
    }
    public static int mmioRenameW ( Addressable pszFileName,  Addressable pszNewFileName,  Addressable pmmioinfo,  int fdwRename) {
        var mh$ = mmioRenameW$MH();
        try {
            return (int)mh$.invokeExact(pszFileName, pszNewFileName, pmmioinfo, fdwRename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioClose$MH() {
        return RuntimeHelper.requireNonNull(constants$685.mmioClose$MH,"mmioClose");
    }
    public static int mmioClose ( Addressable hmmio,  int fuClose) {
        var mh$ = mmioClose$MH();
        try {
            return (int)mh$.invokeExact(hmmio, fuClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioRead$MH() {
        return RuntimeHelper.requireNonNull(constants$685.mmioRead$MH,"mmioRead");
    }
    public static int mmioRead ( Addressable hmmio,  Addressable pch,  int cch) {
        var mh$ = mmioRead$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pch, cch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioWrite$MH() {
        return RuntimeHelper.requireNonNull(constants$685.mmioWrite$MH,"mmioWrite");
    }
    public static int mmioWrite ( Addressable hmmio,  Addressable pch,  int cch) {
        var mh$ = mmioWrite$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pch, cch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioSeek$MH() {
        return RuntimeHelper.requireNonNull(constants$685.mmioSeek$MH,"mmioSeek");
    }
    public static int mmioSeek ( Addressable hmmio,  int lOffset,  int iOrigin) {
        var mh$ = mmioSeek$MH();
        try {
            return (int)mh$.invokeExact(hmmio, lOffset, iOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioGetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$686.mmioGetInfo$MH,"mmioGetInfo");
    }
    public static int mmioGetInfo ( Addressable hmmio,  Addressable pmmioinfo,  int fuInfo) {
        var mh$ = mmioGetInfo$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioSetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$686.mmioSetInfo$MH,"mmioSetInfo");
    }
    public static int mmioSetInfo ( Addressable hmmio,  Addressable pmmioinfo,  int fuInfo) {
        var mh$ = mmioSetInfo$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioSetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$686.mmioSetBuffer$MH,"mmioSetBuffer");
    }
    public static int mmioSetBuffer ( Addressable hmmio,  Addressable pchBuffer,  int cchBuffer,  int fuBuffer) {
        var mh$ = mmioSetBuffer$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pchBuffer, cchBuffer, fuBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$686.mmioFlush$MH,"mmioFlush");
    }
    public static int mmioFlush ( Addressable hmmio,  int fuFlush) {
        var mh$ = mmioFlush$MH();
        try {
            return (int)mh$.invokeExact(hmmio, fuFlush);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioAdvance$MH() {
        return RuntimeHelper.requireNonNull(constants$686.mmioAdvance$MH,"mmioAdvance");
    }
    public static int mmioAdvance ( Addressable hmmio,  Addressable pmmioinfo,  int fuAdvance) {
        var mh$ = mmioAdvance$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmioinfo, fuAdvance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioSendMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$686.mmioSendMessage$MH,"mmioSendMessage");
    }
    public static long mmioSendMessage ( Addressable hmmio,  int uMsg,  long lParam1,  long lParam2) {
        var mh$ = mmioSendMessage$MH();
        try {
            return (long)mh$.invokeExact(hmmio, uMsg, lParam1, lParam2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioDescend$MH() {
        return RuntimeHelper.requireNonNull(constants$687.mmioDescend$MH,"mmioDescend");
    }
    public static int mmioDescend ( Addressable hmmio,  Addressable pmmcki,  Addressable pmmckiParent,  int fuDescend) {
        var mh$ = mmioDescend$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmcki, pmmckiParent, fuDescend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioAscend$MH() {
        return RuntimeHelper.requireNonNull(constants$687.mmioAscend$MH,"mmioAscend");
    }
    public static int mmioAscend ( Addressable hmmio,  Addressable pmmcki,  int fuAscend) {
        var mh$ = mmioAscend$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmcki, fuAscend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mmioCreateChunk$MH() {
        return RuntimeHelper.requireNonNull(constants$687.mmioCreateChunk$MH,"mmioCreateChunk");
    }
    public static int mmioCreateChunk ( Addressable hmmio,  Addressable pmmcki,  int fuCreate) {
        var mh$ = mmioCreateChunk$MH();
        try {
            return (int)mh$.invokeExact(hmmio, pmmcki, fuCreate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timeSetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$688.timeSetEvent$MH,"timeSetEvent");
    }
    public static int timeSetEvent ( int uDelay,  int uResolution,  Addressable fptc,  long dwUser,  int fuEvent) {
        var mh$ = timeSetEvent$MH();
        try {
            return (int)mh$.invokeExact(uDelay, uResolution, fptc, dwUser, fuEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timeKillEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$688.timeKillEvent$MH,"timeKillEvent");
    }
    public static int timeKillEvent ( int uTimerID) {
        var mh$ = timeKillEvent$MH();
        try {
            return (int)mh$.invokeExact(uTimerID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sndPlaySoundA$MH() {
        return RuntimeHelper.requireNonNull(constants$688.sndPlaySoundA$MH,"sndPlaySoundA");
    }
    public static int sndPlaySoundA ( Addressable pszSound,  int fuSound) {
        var mh$ = sndPlaySoundA$MH();
        try {
            return (int)mh$.invokeExact(pszSound, fuSound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sndPlaySoundW$MH() {
        return RuntimeHelper.requireNonNull(constants$688.sndPlaySoundW$MH,"sndPlaySoundW");
    }
    public static int sndPlaySoundW ( Addressable pszSound,  int fuSound) {
        var mh$ = sndPlaySoundW$MH();
        try {
            return (int)mh$.invokeExact(pszSound, fuSound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlaySoundA$MH() {
        return RuntimeHelper.requireNonNull(constants$688.PlaySoundA$MH,"PlaySoundA");
    }
    public static int PlaySoundA ( Addressable pszSound,  Addressable hmod,  int fdwSound) {
        var mh$ = PlaySoundA$MH();
        try {
            return (int)mh$.invokeExact(pszSound, hmod, fdwSound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlaySoundW$MH() {
        return RuntimeHelper.requireNonNull(constants$689.PlaySoundW$MH,"PlaySoundW");
    }
    public static int PlaySoundW ( Addressable pszSound,  Addressable hmod,  int fdwSound) {
        var mh$ = PlaySoundW$MH();
        try {
            return (int)mh$.invokeExact(pszSound, hmod, fdwSound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HWAVE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWAVEIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWAVEOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHWAVEIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHWAVEOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPS2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEOUTCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEOUTCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEOUTCAPS2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEINCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEINCAPSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEINCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEINCAPSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEINCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEINCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWAVEINCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWAVEINCAPS2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWAVEINCAPS2W = Constants$root.C_POINTER$LAYOUT;
}


