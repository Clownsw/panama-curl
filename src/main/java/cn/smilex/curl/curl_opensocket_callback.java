// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface curl_opensocket_callback {

    long apply(java.lang.foreign.MemoryAddress clientp, int purpose, java.lang.foreign.MemoryAddress address);
    static MemorySegment allocate(curl_opensocket_callback fi, MemorySession session) {
        return RuntimeHelper.upcallStub(curl_opensocket_callback.class, fi, constants$1385.curl_opensocket_callback$FUNC, session);
    }
    static curl_opensocket_callback ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _clientp, int _purpose, java.lang.foreign.MemoryAddress _address) -> {
            try {
                return (long)constants$1385.curl_opensocket_callback$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_clientp, _purpose, (java.lang.foreign.Addressable)_address);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


