// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class curl_h_26 extends curl_h_25 {

    public static OfAddress PSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ImmInstallIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.ImmInstallIMEA$MH,"ImmInstallIMEA");
    }
    public static MemoryAddress ImmInstallIMEA ( Addressable lpszIMEFileName,  Addressable lpszLayoutText) {
        var mh$ = ImmInstallIMEA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmInstallIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.ImmInstallIMEW$MH,"ImmInstallIMEW");
    }
    public static MemoryAddress ImmInstallIMEW ( Addressable lpszIMEFileName,  Addressable lpszLayoutText) {
        var mh$ = ImmInstallIMEW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDefaultIMEWnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.ImmGetDefaultIMEWnd$MH,"ImmGetDefaultIMEWnd");
    }
    public static MemoryAddress ImmGetDefaultIMEWnd ( Addressable x0) {
        var mh$ = ImmGetDefaultIMEWnd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionA$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.ImmGetDescriptionA$MH,"ImmGetDescriptionA");
    }
    public static int ImmGetDescriptionA ( Addressable x0,  Addressable lpszDescription,  int uBufLen) {
        var mh$ = ImmGetDescriptionA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionW$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.ImmGetDescriptionW$MH,"ImmGetDescriptionW");
    }
    public static int ImmGetDescriptionW ( Addressable x0,  Addressable lpszDescription,  int uBufLen) {
        var mh$ = ImmGetDescriptionW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.ImmGetIMEFileNameA$MH,"ImmGetIMEFileNameA");
    }
    public static int ImmGetIMEFileNameA ( Addressable x0,  Addressable lpszFileName,  int uBufLen) {
        var mh$ = ImmGetIMEFileNameA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.ImmGetIMEFileNameW$MH,"ImmGetIMEFileNameW");
    }
    public static int ImmGetIMEFileNameW ( Addressable x0,  Addressable lpszFileName,  int uBufLen) {
        var mh$ = ImmGetIMEFileNameW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.ImmGetProperty$MH,"ImmGetProperty");
    }
    public static int ImmGetProperty ( Addressable x0,  int x1) {
        var mh$ = ImmGetProperty$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.ImmIsIME$MH,"ImmIsIME");
    }
    public static int ImmIsIME ( Addressable x0) {
        var mh$ = ImmIsIME$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSimulateHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.ImmSimulateHotKey$MH,"ImmSimulateHotKey");
    }
    public static int ImmSimulateHotKey ( Addressable x0,  int x1) {
        var mh$ = ImmSimulateHotKey$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.ImmCreateContext$MH,"ImmCreateContext");
    }
    public static MemoryAddress ImmCreateContext () {
        var mh$ = ImmCreateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDestroyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.ImmDestroyContext$MH,"ImmDestroyContext");
    }
    public static int ImmDestroyContext ( Addressable x0) {
        var mh$ = ImmDestroyContext$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.ImmGetContext$MH,"ImmGetContext");
    }
    public static MemoryAddress ImmGetContext ( Addressable x0) {
        var mh$ = ImmGetContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.ImmReleaseContext$MH,"ImmReleaseContext");
    }
    public static int ImmReleaseContext ( Addressable x0,  Addressable x1) {
        var mh$ = ImmReleaseContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.ImmAssociateContext$MH,"ImmAssociateContext");
    }
    public static MemoryAddress ImmAssociateContext ( Addressable x0,  Addressable x1) {
        var mh$ = ImmAssociateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContextEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.ImmAssociateContextEx$MH,"ImmAssociateContextEx");
    }
    public static int ImmAssociateContextEx ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = ImmAssociateContextEx$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.ImmGetCompositionStringA$MH,"ImmGetCompositionStringA");
    }
    public static int ImmGetCompositionStringA ( Addressable x0,  int x1,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetCompositionStringA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.ImmGetCompositionStringW$MH,"ImmGetCompositionStringW");
    }
    public static int ImmGetCompositionStringW ( Addressable x0,  int x1,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetCompositionStringW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.ImmSetCompositionStringA$MH,"ImmSetCompositionStringA");
    }
    public static int ImmSetCompositionStringA ( Addressable x0,  int dwIndex,  Addressable lpComp,  int dwCompLen,  Addressable lpRead,  int dwReadLen) {
        var mh$ = ImmSetCompositionStringA$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.ImmSetCompositionStringW$MH,"ImmSetCompositionStringW");
    }
    public static int ImmSetCompositionStringW ( Addressable x0,  int dwIndex,  Addressable lpComp,  int dwCompLen,  Addressable lpRead,  int dwReadLen) {
        var mh$ = ImmSetCompositionStringW$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.ImmGetCandidateListCountA$MH,"ImmGetCandidateListCountA");
    }
    public static int ImmGetCandidateListCountA ( Addressable x0,  Addressable lpdwListCount) {
        var mh$ = ImmGetCandidateListCountA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.ImmGetCandidateListCountW$MH,"ImmGetCandidateListCountW");
    }
    public static int ImmGetCandidateListCountW ( Addressable x0,  Addressable lpdwListCount) {
        var mh$ = ImmGetCandidateListCountW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListA$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.ImmGetCandidateListA$MH,"ImmGetCandidateListA");
    }
    public static int ImmGetCandidateListA ( Addressable x0,  int deIndex,  Addressable lpCandList,  int dwBufLen) {
        var mh$ = ImmGetCandidateListA$MH();
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListW$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.ImmGetCandidateListW$MH,"ImmGetCandidateListW");
    }
    public static int ImmGetCandidateListW ( Addressable x0,  int deIndex,  Addressable lpCandList,  int dwBufLen) {
        var mh$ = ImmGetCandidateListW$MH();
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineA$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.ImmGetGuideLineA$MH,"ImmGetGuideLineA");
    }
    public static int ImmGetGuideLineA ( Addressable x0,  int dwIndex,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetGuideLineA$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineW$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.ImmGetGuideLineW$MH,"ImmGetGuideLineW");
    }
    public static int ImmGetGuideLineW ( Addressable x0,  int dwIndex,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = ImmGetGuideLineW$MH();
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.ImmGetConversionStatus$MH,"ImmGetConversionStatus");
    }
    public static int ImmGetConversionStatus ( Addressable x0,  Addressable lpfdwConversion,  Addressable lpfdwSentence) {
        var mh$ = ImmGetConversionStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, lpfdwConversion, lpfdwSentence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.ImmSetConversionStatus$MH,"ImmSetConversionStatus");
    }
    public static int ImmSetConversionStatus ( Addressable x0,  int x1,  int x2) {
        var mh$ = ImmSetConversionStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.ImmGetOpenStatus$MH,"ImmGetOpenStatus");
    }
    public static int ImmGetOpenStatus ( Addressable x0) {
        var mh$ = ImmGetOpenStatus$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.ImmSetOpenStatus$MH,"ImmSetOpenStatus");
    }
    public static int ImmSetOpenStatus ( Addressable x0,  int x1) {
        var mh$ = ImmSetOpenStatus$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.ImmGetCompositionFontA$MH,"ImmGetCompositionFontA");
    }
    public static int ImmGetCompositionFontA ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmGetCompositionFontA$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.ImmGetCompositionFontW$MH,"ImmGetCompositionFontW");
    }
    public static int ImmGetCompositionFontW ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmGetCompositionFontW$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.ImmSetCompositionFontA$MH,"ImmSetCompositionFontA");
    }
    public static int ImmSetCompositionFontA ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmSetCompositionFontA$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.ImmSetCompositionFontW$MH,"ImmSetCompositionFontW");
    }
    public static int ImmSetCompositionFontW ( Addressable x0,  Addressable lplf) {
        var mh$ = ImmSetCompositionFontW$MH();
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.ImmConfigureIMEA$MH,"ImmConfigureIMEA");
    }
    public static int ImmConfigureIMEA ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmConfigureIMEA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.ImmConfigureIMEW$MH,"ImmConfigureIMEW");
    }
    public static int ImmConfigureIMEW ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmConfigureIMEW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeA$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.ImmEscapeA$MH,"ImmEscapeA");
    }
    public static long ImmEscapeA ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmEscapeA$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeW$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.ImmEscapeW$MH,"ImmEscapeW");
    }
    public static long ImmEscapeW ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = ImmEscapeW$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListA$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.ImmGetConversionListA$MH,"ImmGetConversionListA");
    }
    public static int ImmGetConversionListA ( Addressable x0,  Addressable x1,  Addressable lpSrc,  Addressable lpDst,  int dwBufLen,  int uFlag) {
        var mh$ = ImmGetConversionListA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListW$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.ImmGetConversionListW$MH,"ImmGetConversionListW");
    }
    public static int ImmGetConversionListW ( Addressable x0,  Addressable x1,  Addressable lpSrc,  Addressable lpDst,  int dwBufLen,  int uFlag) {
        var mh$ = ImmGetConversionListW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmNotifyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.ImmNotifyIME$MH,"ImmNotifyIME");
    }
    public static int ImmNotifyIME ( Addressable x0,  int dwAction,  int dwIndex,  int dwValue) {
        var mh$ = ImmNotifyIME$MH();
        try {
            return (int)mh$.invokeExact(x0, dwAction, dwIndex, dwValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.ImmGetStatusWindowPos$MH,"ImmGetStatusWindowPos");
    }
    public static int ImmGetStatusWindowPos ( Addressable x0,  Addressable lpptPos) {
        var mh$ = ImmGetStatusWindowPos$MH();
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.ImmSetStatusWindowPos$MH,"ImmSetStatusWindowPos");
    }
    public static int ImmSetStatusWindowPos ( Addressable x0,  Addressable lpptPos) {
        var mh$ = ImmSetStatusWindowPos$MH();
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.ImmGetCompositionWindow$MH,"ImmGetCompositionWindow");
    }
    public static int ImmGetCompositionWindow ( Addressable x0,  Addressable lpCompForm) {
        var mh$ = ImmGetCompositionWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.ImmSetCompositionWindow$MH,"ImmSetCompositionWindow");
    }
    public static int ImmSetCompositionWindow ( Addressable x0,  Addressable lpCompForm) {
        var mh$ = ImmSetCompositionWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.ImmGetCandidateWindow$MH,"ImmGetCandidateWindow");
    }
    public static int ImmGetCandidateWindow ( Addressable x0,  int x1,  Addressable lpCandidate) {
        var mh$ = ImmGetCandidateWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.ImmSetCandidateWindow$MH,"ImmSetCandidateWindow");
    }
    public static int ImmSetCandidateWindow ( Addressable x0,  Addressable lpCandidate) {
        var mh$ = ImmSetCandidateWindow$MH();
        try {
            return (int)mh$.invokeExact(x0, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.ImmIsUIMessageA$MH,"ImmIsUIMessageA");
    }
    public static int ImmIsUIMessageA ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = ImmIsUIMessageA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.ImmIsUIMessageW$MH,"ImmIsUIMessageW");
    }
    public static int ImmIsUIMessageW ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = ImmIsUIMessageW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetVirtualKey$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.ImmGetVirtualKey$MH,"ImmGetVirtualKey");
    }
    public static int ImmGetVirtualKey ( Addressable x0) {
        var mh$ = ImmGetVirtualKey$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.ImmRegisterWordA$MH,"ImmRegisterWordA");
    }
    public static int ImmRegisterWordA ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszRegister) {
        var mh$ = ImmRegisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.ImmRegisterWordW$MH,"ImmRegisterWordW");
    }
    public static int ImmRegisterWordW ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszRegister) {
        var mh$ = ImmRegisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.ImmUnregisterWordA$MH,"ImmUnregisterWordA");
    }
    public static int ImmUnregisterWordA ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszUnregister) {
        var mh$ = ImmUnregisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.ImmUnregisterWordW$MH,"ImmUnregisterWordW");
    }
    public static int ImmUnregisterWordW ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszUnregister) {
        var mh$ = ImmUnregisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleA$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.ImmGetRegisterWordStyleA$MH,"ImmGetRegisterWordStyleA");
    }
    public static int ImmGetRegisterWordStyleA ( Addressable x0,  int nItem,  Addressable lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleA$MH();
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleW$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.ImmGetRegisterWordStyleW$MH,"ImmGetRegisterWordStyleW");
    }
    public static int ImmGetRegisterWordStyleW ( Addressable x0,  int nItem,  Addressable lpStyleBuf) {
        var mh$ = ImmGetRegisterWordStyleW$MH();
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.ImmEnumRegisterWordA$MH,"ImmEnumRegisterWordA");
    }
    public static int ImmEnumRegisterWordA ( Addressable x0,  Addressable x1,  Addressable lpszReading,  int x3,  Addressable lpszRegister,  Addressable x5) {
        var mh$ = ImmEnumRegisterWordA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.ImmEnumRegisterWordW$MH,"ImmEnumRegisterWordW");
    }
    public static int ImmEnumRegisterWordW ( Addressable x0,  Addressable x1,  Addressable lpszReading,  int x3,  Addressable lpszRegister,  Addressable x5) {
        var mh$ = ImmEnumRegisterWordW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.ImmDisableIME$MH,"ImmDisableIME");
    }
    public static int ImmDisableIME ( int x0) {
        var mh$ = ImmDisableIME$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumInputContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.ImmEnumInputContext$MH,"ImmEnumInputContext");
    }
    public static int ImmEnumInputContext ( int idThread,  Addressable lpfn,  long lParam) {
        var mh$ = ImmEnumInputContext$MH();
        try {
            return (int)mh$.invokeExact(idThread, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.ImmGetImeMenuItemsA$MH,"ImmGetImeMenuItemsA");
    }
    public static int ImmGetImeMenuItemsA ( Addressable x0,  int x1,  int x2,  Addressable lpImeParentMenu,  Addressable lpImeMenu,  int dwSize) {
        var mh$ = ImmGetImeMenuItemsA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.ImmGetImeMenuItemsW$MH,"ImmGetImeMenuItemsW");
    }
    public static int ImmGetImeMenuItemsW ( Addressable x0,  int x1,  int x2,  Addressable lpImeParentMenu,  Addressable lpImeMenu,  int dwSize) {
        var mh$ = ImmGetImeMenuItemsW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableTextFrameService$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.ImmDisableTextFrameService$MH,"ImmDisableTextFrameService");
    }
    public static int ImmDisableTextFrameService ( int idThread) {
        var mh$ = ImmDisableTextFrameService$MH();
        try {
            return (int)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableLegacyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.ImmDisableLegacyIME$MH,"ImmDisableLegacyIME");
    }
    public static int ImmDisableLegacyIME () {
        var mh$ = ImmDisableLegacyIME$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PIN_ADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIN_ADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKET_ADDRESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKET_ADDRESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKET_ADDRESS_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKET_ADDRESS_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSADDR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCSADDR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_STORAGE_LH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR_STORAGE_LH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_STORAGE_XP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR_STORAGE_XP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_STORAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR_STORAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKET_PROCESSOR_AFFINITY = Constants$root.C_POINTER$LAYOUT;
    public static int IPPROTO_HOPOPTS() {
        return (int)0L;
    }
    public static int IPPROTO_ICMP() {
        return (int)1L;
    }
    public static int IPPROTO_IGMP() {
        return (int)2L;
    }
    public static int IPPROTO_GGP() {
        return (int)3L;
    }
    public static int IPPROTO_IPV4() {
        return (int)4L;
    }
    public static int IPPROTO_ST() {
        return (int)5L;
    }
    public static int IPPROTO_TCP() {
        return (int)6L;
    }
    public static int IPPROTO_CBT() {
        return (int)7L;
    }
    public static int IPPROTO_EGP() {
        return (int)8L;
    }
    public static int IPPROTO_IGP() {
        return (int)9L;
    }
    public static int IPPROTO_PUP() {
        return (int)12L;
    }
    public static int IPPROTO_UDP() {
        return (int)17L;
    }
    public static int IPPROTO_IDP() {
        return (int)22L;
    }
    public static int IPPROTO_RDP() {
        return (int)27L;
    }
    public static int IPPROTO_IPV6() {
        return (int)41L;
    }
    public static int IPPROTO_ROUTING() {
        return (int)43L;
    }
    public static int IPPROTO_FRAGMENT() {
        return (int)44L;
    }
    public static int IPPROTO_ESP() {
        return (int)50L;
    }
    public static int IPPROTO_AH() {
        return (int)51L;
    }
    public static int IPPROTO_ICMPV6() {
        return (int)58L;
    }
    public static int IPPROTO_NONE() {
        return (int)59L;
    }
    public static int IPPROTO_DSTOPTS() {
        return (int)60L;
    }
    public static int IPPROTO_ND() {
        return (int)77L;
    }
    public static int IPPROTO_ICLFXBM() {
        return (int)78L;
    }
    public static int IPPROTO_PIM() {
        return (int)103L;
    }
    public static int IPPROTO_PGM() {
        return (int)113L;
    }
    public static int IPPROTO_L2TP() {
        return (int)115L;
    }
    public static int IPPROTO_SCTP() {
        return (int)132L;
    }
    public static int IPPROTO_RAW() {
        return (int)255L;
    }
    public static int IPPROTO_MAX() {
        return (int)256L;
    }
    public static int IPPROTO_RESERVED_RAW() {
        return (int)257L;
    }
    public static int IPPROTO_RESERVED_IPSEC() {
        return (int)258L;
    }
    public static int IPPROTO_RESERVED_IPSECOFFLOAD() {
        return (int)259L;
    }
    public static int IPPROTO_RESERVED_WNV() {
        return (int)260L;
    }
    public static int IPPROTO_RESERVED_MAX() {
        return (int)261L;
    }
    public static OfAddress PIPROTO = Constants$root.C_POINTER$LAYOUT;
    public static int ScopeLevelInterface() {
        return (int)1L;
    }
    public static int ScopeLevelLink() {
        return (int)2L;
    }
    public static int ScopeLevelSubnet() {
        return (int)3L;
    }
    public static int ScopeLevelAdmin() {
        return (int)4L;
    }
    public static int ScopeLevelSite() {
        return (int)5L;
    }
    public static int ScopeLevelOrganization() {
        return (int)8L;
    }
    public static int ScopeLevelGlobal() {
        return (int)14L;
    }
    public static int ScopeLevelCount() {
        return (int)16L;
    }
    public static OfAddress PSCOPE_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_IN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_DL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSABUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSACMSGHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSACMSGHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSGHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEX2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEX2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEX2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEX2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEX3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEX3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEX4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFOEX4 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle __WSAFDIsSet$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.__WSAFDIsSet$MH,"__WSAFDIsSet");
    }
    public static int __WSAFDIsSet ( long fd,  Addressable x1) {
        var mh$ = __WSAFDIsSet$MH();
        try {
            return (int)mh$.invokeExact(fd, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPWSADATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAOVERLAPPED = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFLOWSPEC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFLOWSPEC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQOS_OBJECT_HDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQOS_SD_MODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQOS_SHAPING_RATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQOS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANETWORKEVENTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAPROTOCOLCHAIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAPROTOCOL_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAPROTOCOL_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAPROTOCOL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int NSP_NOTIFY_IMMEDIATELY() {
        return (int)0L;
    }
    public static int NSP_NOTIFY_HWND() {
        return (int)1L;
    }
    public static int NSP_NOTIFY_EVENT() {
        return (int)2L;
    }
    public static int NSP_NOTIFY_PORT() {
        return (int)3L;
    }
    public static int NSP_NOTIFY_APC() {
        return (int)4L;
    }
    public static OfAddress PWSACOMPLETIONTYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSACOMPLETIONTYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSACOMPLETION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSACOMPLETION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAFPROTOCOLS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAFPROTOCOLS = Constants$root.C_POINTER$LAYOUT;
    public static int COMP_EQUAL() {
        return (int)0L;
    }
    public static int COMP_NOTLESS() {
        return (int)1L;
    }
    public static OfAddress PWSAECOMPARATOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAECOMPARATOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAVERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAVERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSETA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSETA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSETW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSETW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSET2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSET2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSET2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSET2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAQUERYSET2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAQUERYSET2 = Constants$root.C_POINTER$LAYOUT;
    public static int RNRSERVICE_REGISTER() {
        return (int)0L;
    }
    public static int RNRSERVICE_DEREGISTER() {
        return (int)1L;
    }
    public static int RNRSERVICE_DELETE() {
        return (int)2L;
    }
    public static OfAddress PWSAESETSERVICEOP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAESETSERVICEOP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANSCLASSINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANSCLASSINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANSCLASSINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANSCLASSINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANSCLASSINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANSCLASSINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSASERVICECLASSINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSASERVICECLASSINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSASERVICECLASSINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSASERVICECLASSINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSASERVICECLASSINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSASERVICECLASSINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSANAMESPACE_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSANAMESPACE_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSAPOLLFD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSAPOLLFD = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle accept$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.accept$MH,"accept");
    }
    public static long accept ( long s,  Addressable addr,  Addressable addrlen) {
        var mh$ = accept$MH();
        try {
            return (long)mh$.invokeExact(s, addr, addrlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bind$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.bind$MH,"bind");
    }
    public static int bind ( long s,  Addressable name,  int namelen) {
        var mh$ = bind$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closesocket$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.closesocket$MH,"closesocket");
    }
    public static int closesocket ( long s) {
        var mh$ = closesocket$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.connect$MH,"connect");
    }
    public static int connect ( long s,  Addressable name,  int namelen) {
        var mh$ = connect$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ioctlsocket$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.ioctlsocket$MH,"ioctlsocket");
    }
    public static int ioctlsocket ( long s,  int cmd,  Addressable argp) {
        var mh$ = ioctlsocket$MH();
        try {
            return (int)mh$.invokeExact(s, cmd, argp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeername$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.getpeername$MH,"getpeername");
    }
    public static int getpeername ( long s,  Addressable name,  Addressable namelen) {
        var mh$ = getpeername$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockname$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.getsockname$MH,"getsockname");
    }
    public static int getsockname ( long s,  Addressable name,  Addressable namelen) {
        var mh$ = getsockname$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.getsockopt$MH,"getsockopt");
    }
    public static int getsockopt ( long s,  int level,  int optname,  Addressable optval,  Addressable optlen) {
        var mh$ = getsockopt$MH();
        try {
            return (int)mh$.invokeExact(s, level, optname, optval, optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htonl$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.htonl$MH,"htonl");
    }
    public static int htonl ( int hostlong) {
        var mh$ = htonl$MH();
        try {
            return (int)mh$.invokeExact(hostlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htons$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.htons$MH,"htons");
    }
    public static short htons ( short hostshort) {
        var mh$ = htons$MH();
        try {
            return (short)mh$.invokeExact(hostshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_addr$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.inet_addr$MH,"inet_addr");
    }
    public static int inet_addr ( Addressable cp) {
        var mh$ = inet_addr$MH();
        try {
            return (int)mh$.invokeExact(cp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_ntoa$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.inet_ntoa$MH,"inet_ntoa");
    }
    public static MemoryAddress inet_ntoa ( MemorySegment in) {
        var mh$ = inet_ntoa$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htonll$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.htonll$MH,"htonll");
    }
    public static long htonll ( long Value) {
        var mh$ = htonll$MH();
        try {
            return (long)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohll$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.ntohll$MH,"ntohll");
    }
    public static long ntohll ( long Value) {
        var mh$ = ntohll$MH();
        try {
            return (long)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htonf$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.htonf$MH,"htonf");
    }
    public static int htonf ( float Value) {
        var mh$ = htonf$MH();
        try {
            return (int)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohf$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.ntohf$MH,"ntohf");
    }
    public static float ntohf ( int Value) {
        var mh$ = ntohf$MH();
        try {
            return (float)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle htond$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.htond$MH,"htond");
    }
    public static long htond ( double Value) {
        var mh$ = htond$MH();
        try {
            return (long)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohd$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.ntohd$MH,"ntohd");
    }
    public static double ntohd ( long Value) {
        var mh$ = ntohd$MH();
        try {
            return (double)mh$.invokeExact(Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle listen$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.listen$MH,"listen");
    }
    public static int listen ( long s,  int backlog) {
        var mh$ = listen$MH();
        try {
            return (int)mh$.invokeExact(s, backlog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohl$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.ntohl$MH,"ntohl");
    }
    public static int ntohl ( int netlong) {
        var mh$ = ntohl$MH();
        try {
            return (int)mh$.invokeExact(netlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ntohs$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.ntohs$MH,"ntohs");
    }
    public static short ntohs ( short netshort) {
        var mh$ = ntohs$MH();
        try {
            return (short)mh$.invokeExact(netshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recv$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.recv$MH,"recv");
    }
    public static int recv ( long s,  Addressable buf,  int len,  int flags) {
        var mh$ = recv$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvfrom$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.recvfrom$MH,"recvfrom");
    }
    public static int recvfrom ( long s,  Addressable buf,  int len,  int flags,  Addressable from,  Addressable fromlen) {
        var mh$ = recvfrom$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags, from, fromlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.select$MH,"select");
    }
    public static int select ( int nfds,  Addressable readfds,  Addressable writefds,  Addressable exceptfds,  Addressable timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(nfds, readfds, writefds, exceptfds, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle send$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.send$MH,"send");
    }
    public static int send ( long s,  Addressable buf,  int len,  int flags) {
        var mh$ = send$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendto$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.sendto$MH,"sendto");
    }
    public static int sendto ( long s,  Addressable buf,  int len,  int flags,  Addressable to,  int tolen) {
        var mh$ = sendto$MH();
        try {
            return (int)mh$.invokeExact(s, buf, len, flags, to, tolen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.setsockopt$MH,"setsockopt");
    }
    public static int setsockopt ( long s,  int level,  int optname,  Addressable optval,  int optlen) {
        var mh$ = setsockopt$MH();
        try {
            return (int)mh$.invokeExact(s, level, optname, optval, optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.shutdown$MH,"shutdown");
    }
    public static int shutdown ( long s,  int how) {
        var mh$ = shutdown$MH();
        try {
            return (int)mh$.invokeExact(s, how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.socket$MH,"socket");
    }
    public static long socket ( int af,  int type,  int protocol) {
        var mh$ = socket$MH();
        try {
            return (long)mh$.invokeExact(af, type, protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostbyaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.gethostbyaddr$MH,"gethostbyaddr");
    }
    public static MemoryAddress gethostbyaddr ( Addressable addr,  int len,  int type) {
        var mh$ = gethostbyaddr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(addr, len, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.gethostbyname$MH,"gethostbyname");
    }
    public static MemoryAddress gethostbyname ( Addressable name) {
        var mh$ = gethostbyname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.gethostname$MH,"gethostname");
    }
    public static int gethostname ( Addressable name,  int namelen) {
        var mh$ = gethostname$MH();
        try {
            return (int)mh$.invokeExact(name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetHostNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.GetHostNameW$MH,"GetHostNameW");
    }
    public static int GetHostNameW ( Addressable name,  int namelen) {
        var mh$ = GetHostNameW$MH();
        try {
            return (int)mh$.invokeExact(name, namelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getservbyport$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.getservbyport$MH,"getservbyport");
    }
    public static MemoryAddress getservbyport ( int port,  Addressable proto) {
        var mh$ = getservbyport$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(port, proto);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getservbyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.getservbyname$MH,"getservbyname");
    }
    public static MemoryAddress getservbyname ( Addressable name,  Addressable proto) {
        var mh$ = getservbyname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, proto);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getprotobynumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.getprotobynumber$MH,"getprotobynumber");
    }
    public static MemoryAddress getprotobynumber ( int number) {
        var mh$ = getprotobynumber$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(number);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getprotobyname$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.getprotobyname$MH,"getprotobyname");
    }
    public static MemoryAddress getprotobyname ( Addressable name) {
        var mh$ = getprotobyname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAStartup$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.WSAStartup$MH,"WSAStartup");
    }
    public static int WSAStartup ( short wVersionRequested,  Addressable lpWSAData) {
        var mh$ = WSAStartup$MH();
        try {
            return (int)mh$.invokeExact(wVersionRequested, lpWSAData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.WSACleanup$MH,"WSACleanup");
    }
    public static int WSACleanup () {
        var mh$ = WSACleanup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.WSASetLastError$MH,"WSASetLastError");
    }
    public static void WSASetLastError ( int iError) {
        var mh$ = WSASetLastError$MH();
        try {
            mh$.invokeExact(iError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetLastError$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.WSAGetLastError$MH,"WSAGetLastError");
    }
    public static int WSAGetLastError () {
        var mh$ = WSAGetLastError$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAIsBlocking$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSAIsBlocking$MH,"WSAIsBlocking");
    }
    public static int WSAIsBlocking () {
        var mh$ = WSAIsBlocking$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAUnhookBlockingHook$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSAUnhookBlockingHook$MH,"WSAUnhookBlockingHook");
    }
    public static int WSAUnhookBlockingHook () {
        var mh$ = WSAUnhookBlockingHook$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetBlockingHook$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSASetBlockingHook$MH,"WSASetBlockingHook");
    }
    public static MemoryAddress WSASetBlockingHook ( Addressable lpBlockFunc) {
        var mh$ = WSASetBlockingHook$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpBlockFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACancelBlockingCall$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSACancelBlockingCall$MH,"WSACancelBlockingCall");
    }
    public static int WSACancelBlockingCall () {
        var mh$ = WSACancelBlockingCall$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetServByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetServByName$MH,"WSAAsyncGetServByName");
    }
    public static MemoryAddress WSAAsyncGetServByName ( Addressable hWnd,  int wMsg,  Addressable name,  Addressable proto,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetServByName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, name, proto, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetServByPort$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.WSAAsyncGetServByPort$MH,"WSAAsyncGetServByPort");
    }
    public static MemoryAddress WSAAsyncGetServByPort ( Addressable hWnd,  int wMsg,  int port,  Addressable proto,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetServByPort$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, port, proto, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetProtoByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSAAsyncGetProtoByName$MH,"WSAAsyncGetProtoByName");
    }
    public static MemoryAddress WSAAsyncGetProtoByName ( Addressable hWnd,  int wMsg,  Addressable name,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetProtoByName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, name, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetProtoByNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSAAsyncGetProtoByNumber$MH,"WSAAsyncGetProtoByNumber");
    }
    public static MemoryAddress WSAAsyncGetProtoByNumber ( Addressable hWnd,  int wMsg,  int number,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetProtoByNumber$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, number, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetHostByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSAAsyncGetHostByName$MH,"WSAAsyncGetHostByName");
    }
    public static MemoryAddress WSAAsyncGetHostByName ( Addressable hWnd,  int wMsg,  Addressable name,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetHostByName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, name, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncGetHostByAddr$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSAAsyncGetHostByAddr$MH,"WSAAsyncGetHostByAddr");
    }
    public static MemoryAddress WSAAsyncGetHostByAddr ( Addressable hWnd,  int wMsg,  Addressable addr,  int len,  int type,  Addressable buf,  int buflen) {
        var mh$ = WSAAsyncGetHostByAddr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, wMsg, addr, len, type, buf, buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACancelAsyncRequest$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSACancelAsyncRequest$MH,"WSACancelAsyncRequest");
    }
    public static int WSACancelAsyncRequest ( Addressable hAsyncTaskHandle) {
        var mh$ = WSACancelAsyncRequest$MH();
        try {
            return (int)mh$.invokeExact(hAsyncTaskHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAsyncSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.WSAAsyncSelect$MH,"WSAAsyncSelect");
    }
    public static int WSAAsyncSelect ( long s,  Addressable hWnd,  int wMsg,  int lEvent) {
        var mh$ = WSAAsyncSelect$MH();
        try {
            return (int)mh$.invokeExact(s, hWnd, wMsg, lEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAccept$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSAAccept$MH,"WSAAccept");
    }
    public static long WSAAccept ( long s,  Addressable addr,  Addressable addrlen,  Addressable lpfnCondition,  long dwCallbackData) {
        var mh$ = WSAAccept$MH();
        try {
            return (long)mh$.invokeExact(s, addr, addrlen, lpfnCondition, dwCallbackData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACloseEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSACloseEvent$MH,"WSACloseEvent");
    }
    public static int WSACloseEvent ( Addressable hEvent) {
        var mh$ = WSACloseEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSAConnect$MH,"WSAConnect");
    }
    public static int WSAConnect ( long s,  Addressable name,  int namelen,  Addressable lpCallerData,  Addressable lpCalleeData,  Addressable lpSQOS,  Addressable lpGQOS) {
        var mh$ = WSAConnect$MH();
        try {
            return (int)mh$.invokeExact(s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnectByNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSAConnectByNameW$MH,"WSAConnectByNameW");
    }
    public static int WSAConnectByNameW ( long s,  Addressable nodename,  Addressable servicename,  Addressable LocalAddressLength,  Addressable LocalAddress,  Addressable RemoteAddressLength,  Addressable RemoteAddress,  Addressable timeout,  Addressable Reserved) {
        var mh$ = WSAConnectByNameW$MH();
        try {
            return (int)mh$.invokeExact(s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnectByNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSAConnectByNameA$MH,"WSAConnectByNameA");
    }
    public static int WSAConnectByNameA ( long s,  Addressable nodename,  Addressable servicename,  Addressable LocalAddressLength,  Addressable LocalAddress,  Addressable RemoteAddressLength,  Addressable RemoteAddress,  Addressable timeout,  Addressable Reserved) {
        var mh$ = WSAConnectByNameA$MH();
        try {
            return (int)mh$.invokeExact(s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAConnectByList$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.WSAConnectByList$MH,"WSAConnectByList");
    }
    public static int WSAConnectByList ( long s,  Addressable SocketAddress,  Addressable LocalAddressLength,  Addressable LocalAddress,  Addressable RemoteAddressLength,  Addressable RemoteAddress,  Addressable timeout,  Addressable Reserved) {
        var mh$ = WSAConnectByList$MH();
        try {
            return (int)mh$.invokeExact(s, SocketAddress, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSACreateEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSACreateEvent$MH,"WSACreateEvent");
    }
    public static MemoryAddress WSACreateEvent () {
        var mh$ = WSACreateEvent$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSADuplicateSocketA$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSADuplicateSocketA$MH,"WSADuplicateSocketA");
    }
    public static int WSADuplicateSocketA ( long s,  int dwProcessId,  Addressable lpProtocolInfo) {
        var mh$ = WSADuplicateSocketA$MH();
        try {
            return (int)mh$.invokeExact(s, dwProcessId, lpProtocolInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSADuplicateSocketW$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSADuplicateSocketW$MH,"WSADuplicateSocketW");
    }
    public static int WSADuplicateSocketW ( long s,  int dwProcessId,  Addressable lpProtocolInfo) {
        var mh$ = WSADuplicateSocketW$MH();
        try {
            return (int)mh$.invokeExact(s, dwProcessId, lpProtocolInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNetworkEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSAEnumNetworkEvents$MH,"WSAEnumNetworkEvents");
    }
    public static int WSAEnumNetworkEvents ( long s,  Addressable hEventObject,  Addressable lpNetworkEvents) {
        var mh$ = WSAEnumNetworkEvents$MH();
        try {
            return (int)mh$.invokeExact(s, hEventObject, lpNetworkEvents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumProtocolsA$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSAEnumProtocolsA$MH,"WSAEnumProtocolsA");
    }
    public static int WSAEnumProtocolsA ( Addressable lpiProtocols,  Addressable lpProtocolBuffer,  Addressable lpdwBufferLength) {
        var mh$ = WSAEnumProtocolsA$MH();
        try {
            return (int)mh$.invokeExact(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumProtocolsW$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.WSAEnumProtocolsW$MH,"WSAEnumProtocolsW");
    }
    public static int WSAEnumProtocolsW ( Addressable lpiProtocols,  Addressable lpProtocolBuffer,  Addressable lpdwBufferLength) {
        var mh$ = WSAEnumProtocolsW$MH();
        try {
            return (int)mh$.invokeExact(lpiProtocols, lpProtocolBuffer, lpdwBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEventSelect$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSAEventSelect$MH,"WSAEventSelect");
    }
    public static int WSAEventSelect ( long s,  Addressable hEventObject,  int lNetworkEvents) {
        var mh$ = WSAEventSelect$MH();
        try {
            return (int)mh$.invokeExact(s, hEventObject, lNetworkEvents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetOverlappedResult$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSAGetOverlappedResult$MH,"WSAGetOverlappedResult");
    }
    public static int WSAGetOverlappedResult ( long s,  Addressable lpOverlapped,  Addressable lpcbTransfer,  int fWait,  Addressable lpdwFlags) {
        var mh$ = WSAGetOverlappedResult$MH();
        try {
            return (int)mh$.invokeExact(s, lpOverlapped, lpcbTransfer, fWait, lpdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetQOSByName$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSAGetQOSByName$MH,"WSAGetQOSByName");
    }
    public static int WSAGetQOSByName ( long s,  Addressable lpQOSName,  Addressable lpQOS) {
        var mh$ = WSAGetQOSByName$MH();
        try {
            return (int)mh$.invokeExact(s, lpQOSName, lpQOS);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAHtonl$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSAHtonl$MH,"WSAHtonl");
    }
    public static int WSAHtonl ( long s,  int hostlong,  Addressable lpnetlong) {
        var mh$ = WSAHtonl$MH();
        try {
            return (int)mh$.invokeExact(s, hostlong, lpnetlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAHtons$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSAHtons$MH,"WSAHtons");
    }
    public static int WSAHtons ( long s,  short hostshort,  Addressable lpnetshort) {
        var mh$ = WSAHtons$MH();
        try {
            return (int)mh$.invokeExact(s, hostshort, lpnetshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAIoctl$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.WSAIoctl$MH,"WSAIoctl");
    }
    public static int WSAIoctl ( long s,  int dwIoControlCode,  Addressable lpvInBuffer,  int cbInBuffer,  Addressable lpvOutBuffer,  int cbOutBuffer,  Addressable lpcbBytesReturned,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSAIoctl$MH();
        try {
            return (int)mh$.invokeExact(s, dwIoControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAJoinLeaf$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSAJoinLeaf$MH,"WSAJoinLeaf");
    }
    public static long WSAJoinLeaf ( long s,  Addressable name,  int namelen,  Addressable lpCallerData,  Addressable lpCalleeData,  Addressable lpSQOS,  Addressable lpGQOS,  int dwFlags) {
        var mh$ = WSAJoinLeaf$MH();
        try {
            return (long)mh$.invokeExact(s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSANtohl$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSANtohl$MH,"WSANtohl");
    }
    public static int WSANtohl ( long s,  int netlong,  Addressable lphostlong) {
        var mh$ = WSANtohl$MH();
        try {
            return (int)mh$.invokeExact(s, netlong, lphostlong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSANtohs$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSANtohs$MH,"WSANtohs");
    }
    public static int WSANtohs ( long s,  short netshort,  Addressable lphostshort) {
        var mh$ = WSANtohs$MH();
        try {
            return (int)mh$.invokeExact(s, netshort, lphostshort);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARecv$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSARecv$MH,"WSARecv");
    }
    public static int WSARecv ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesRecvd,  Addressable lpFlags,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSARecv$MH();
        try {
            return (int)mh$.invokeExact(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARecvDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSARecvDisconnect$MH,"WSARecvDisconnect");
    }
    public static int WSARecvDisconnect ( long s,  Addressable lpInboundDisconnectData) {
        var mh$ = WSARecvDisconnect$MH();
        try {
            return (int)mh$.invokeExact(s, lpInboundDisconnectData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARecvFrom$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.WSARecvFrom$MH,"WSARecvFrom");
    }
    public static int WSARecvFrom ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesRecvd,  Addressable lpFlags,  Addressable lpFrom,  Addressable lpFromlen,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSARecvFrom$MH();
        try {
            return (int)mh$.invokeExact(s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpFrom, lpFromlen, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAResetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSAResetEvent$MH,"WSAResetEvent");
    }
    public static int WSAResetEvent ( Addressable hEvent) {
        var mh$ = WSAResetEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASend$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSASend$MH,"WSASend");
    }
    public static int WSASend ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesSent,  int dwFlags,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSASend$MH();
        try {
            return (int)mh$.invokeExact(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASendMsg$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSASendMsg$MH,"WSASendMsg");
    }
    public static int WSASendMsg ( long Handle,  Addressable lpMsg,  int dwFlags,  Addressable lpNumberOfBytesSent,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSASendMsg$MH();
        try {
            return (int)mh$.invokeExact(Handle, lpMsg, dwFlags, lpNumberOfBytesSent, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASendDisconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSASendDisconnect$MH,"WSASendDisconnect");
    }
    public static int WSASendDisconnect ( long s,  Addressable lpOutboundDisconnectData) {
        var mh$ = WSASendDisconnect$MH();
        try {
            return (int)mh$.invokeExact(s, lpOutboundDisconnectData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASendTo$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSASendTo$MH,"WSASendTo");
    }
    public static int WSASendTo ( long s,  Addressable lpBuffers,  int dwBufferCount,  Addressable lpNumberOfBytesSent,  int dwFlags,  Addressable lpTo,  int iTolen,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSASendTo$MH();
        try {
            return (int)mh$.invokeExact(s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpTo, iTolen, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.WSASetEvent$MH,"WSASetEvent");
    }
    public static int WSASetEvent ( Addressable hEvent) {
        var mh$ = WSASetEvent$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASocketA$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSASocketA$MH,"WSASocketA");
    }
    public static long WSASocketA ( int af,  int type,  int protocol,  Addressable lpProtocolInfo,  int g,  int dwFlags) {
        var mh$ = WSASocketA$MH();
        try {
            return (long)mh$.invokeExact(af, type, protocol, lpProtocolInfo, g, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASocketW$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSASocketW$MH,"WSASocketW");
    }
    public static long WSASocketW ( int af,  int type,  int protocol,  Addressable lpProtocolInfo,  int g,  int dwFlags) {
        var mh$ = WSASocketW$MH();
        try {
            return (long)mh$.invokeExact(af, type, protocol, lpProtocolInfo, g, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAWaitForMultipleEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSAWaitForMultipleEvents$MH,"WSAWaitForMultipleEvents");
    }
    public static int WSAWaitForMultipleEvents ( int cEvents,  Addressable lphEvents,  int fWaitAll,  int dwTimeout,  int fAlertable) {
        var mh$ = WSAWaitForMultipleEvents$MH();
        try {
            return (int)mh$.invokeExact(cEvents, lphEvents, fWaitAll, dwTimeout, fAlertable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAddressToStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSAAddressToStringA$MH,"WSAAddressToStringA");
    }
    public static int WSAAddressToStringA ( Addressable lpsaAddress,  int dwAddressLength,  Addressable lpProtocolInfo,  Addressable lpszAddressString,  Addressable lpdwAddressStringLength) {
        var mh$ = WSAAddressToStringA$MH();
        try {
            return (int)mh$.invokeExact(lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAAddressToStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSAAddressToStringW$MH,"WSAAddressToStringW");
    }
    public static int WSAAddressToStringW ( Addressable lpsaAddress,  int dwAddressLength,  Addressable lpProtocolInfo,  Addressable lpszAddressString,  Addressable lpdwAddressStringLength) {
        var mh$ = WSAAddressToStringW$MH();
        try {
            return (int)mh$.invokeExact(lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAStringToAddressA$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.WSAStringToAddressA$MH,"WSAStringToAddressA");
    }
    public static int WSAStringToAddressA ( Addressable AddressString,  int AddressFamily,  Addressable lpProtocolInfo,  Addressable lpAddress,  Addressable lpAddressLength) {
        var mh$ = WSAStringToAddressA$MH();
        try {
            return (int)mh$.invokeExact(AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAStringToAddressW$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSAStringToAddressW$MH,"WSAStringToAddressW");
    }
    public static int WSAStringToAddressW ( Addressable AddressString,  int AddressFamily,  Addressable lpProtocolInfo,  Addressable lpAddress,  Addressable lpAddressLength) {
        var mh$ = WSAStringToAddressW$MH();
        try {
            return (int)mh$.invokeExact(AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceBeginA$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSALookupServiceBeginA$MH,"WSALookupServiceBeginA");
    }
    public static int WSALookupServiceBeginA ( Addressable lpqsRestrictions,  int dwControlFlags,  Addressable lphLookup) {
        var mh$ = WSALookupServiceBeginA$MH();
        try {
            return (int)mh$.invokeExact(lpqsRestrictions, dwControlFlags, lphLookup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceBeginW$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSALookupServiceBeginW$MH,"WSALookupServiceBeginW");
    }
    public static int WSALookupServiceBeginW ( Addressable lpqsRestrictions,  int dwControlFlags,  Addressable lphLookup) {
        var mh$ = WSALookupServiceBeginW$MH();
        try {
            return (int)mh$.invokeExact(lpqsRestrictions, dwControlFlags, lphLookup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceNextA$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSALookupServiceNextA$MH,"WSALookupServiceNextA");
    }
    public static int WSALookupServiceNextA ( Addressable hLookup,  int dwControlFlags,  Addressable lpdwBufferLength,  Addressable lpqsResults) {
        var mh$ = WSALookupServiceNextA$MH();
        try {
            return (int)mh$.invokeExact(hLookup, dwControlFlags, lpdwBufferLength, lpqsResults);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceNextW$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSALookupServiceNextW$MH,"WSALookupServiceNextW");
    }
    public static int WSALookupServiceNextW ( Addressable hLookup,  int dwControlFlags,  Addressable lpdwBufferLength,  Addressable lpqsResults) {
        var mh$ = WSALookupServiceNextW$MH();
        try {
            return (int)mh$.invokeExact(hLookup, dwControlFlags, lpdwBufferLength, lpqsResults);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSANSPIoctl$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.WSANSPIoctl$MH,"WSANSPIoctl");
    }
    public static int WSANSPIoctl ( Addressable hLookup,  int dwControlCode,  Addressable lpvInBuffer,  int cbInBuffer,  Addressable lpvOutBuffer,  int cbOutBuffer,  Addressable lpcbBytesReturned,  Addressable lpCompletion) {
        var mh$ = WSANSPIoctl$MH();
        try {
            return (int)mh$.invokeExact(hLookup, dwControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpCompletion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSALookupServiceEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSALookupServiceEnd$MH,"WSALookupServiceEnd");
    }
    public static int WSALookupServiceEnd ( Addressable hLookup) {
        var mh$ = WSALookupServiceEnd$MH();
        try {
            return (int)mh$.invokeExact(hLookup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAInstallServiceClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSAInstallServiceClassA$MH,"WSAInstallServiceClassA");
    }
    public static int WSAInstallServiceClassA ( Addressable lpServiceClassInfo) {
        var mh$ = WSAInstallServiceClassA$MH();
        try {
            return (int)mh$.invokeExact(lpServiceClassInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAInstallServiceClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSAInstallServiceClassW$MH,"WSAInstallServiceClassW");
    }
    public static int WSAInstallServiceClassW ( Addressable lpServiceClassInfo) {
        var mh$ = WSAInstallServiceClassW$MH();
        try {
            return (int)mh$.invokeExact(lpServiceClassInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSARemoveServiceClass$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSARemoveServiceClass$MH,"WSARemoveServiceClass");
    }
    public static int WSARemoveServiceClass ( Addressable lpServiceClassId) {
        var mh$ = WSARemoveServiceClass$MH();
        try {
            return (int)mh$.invokeExact(lpServiceClassId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSAGetServiceClassInfoA$MH,"WSAGetServiceClassInfoA");
    }
    public static int WSAGetServiceClassInfoA ( Addressable lpProviderId,  Addressable lpServiceClassId,  Addressable lpdwBufSize,  Addressable lpServiceClassInfo) {
        var mh$ = WSAGetServiceClassInfoA$MH();
        try {
            return (int)mh$.invokeExact(lpProviderId, lpServiceClassId, lpdwBufSize, lpServiceClassInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.WSAGetServiceClassInfoW$MH,"WSAGetServiceClassInfoW");
    }
    public static int WSAGetServiceClassInfoW ( Addressable lpProviderId,  Addressable lpServiceClassId,  Addressable lpdwBufSize,  Addressable lpServiceClassInfo) {
        var mh$ = WSAGetServiceClassInfoW$MH();
        try {
            return (int)mh$.invokeExact(lpProviderId, lpServiceClassId, lpdwBufSize, lpServiceClassInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersA$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSAEnumNameSpaceProvidersA$MH,"WSAEnumNameSpaceProvidersA");
    }
    public static int WSAEnumNameSpaceProvidersA ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = WSAEnumNameSpaceProvidersA$MH();
        try {
            return (int)mh$.invokeExact(lpdwBufferLength, lpnspBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersW$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSAEnumNameSpaceProvidersW$MH,"WSAEnumNameSpaceProvidersW");
    }
    public static int WSAEnumNameSpaceProvidersW ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = WSAEnumNameSpaceProvidersW$MH();
        try {
            return (int)mh$.invokeExact(lpdwBufferLength, lpnspBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSAEnumNameSpaceProvidersExA$MH,"WSAEnumNameSpaceProvidersExA");
    }
    public static int WSAEnumNameSpaceProvidersExA ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = WSAEnumNameSpaceProvidersExA$MH();
        try {
            return (int)mh$.invokeExact(lpdwBufferLength, lpnspBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAEnumNameSpaceProvidersExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSAEnumNameSpaceProvidersExW$MH,"WSAEnumNameSpaceProvidersExW");
    }
    public static int WSAEnumNameSpaceProvidersExW ( Addressable lpdwBufferLength,  Addressable lpnspBuffer) {
        var mh$ = WSAEnumNameSpaceProvidersExW$MH();
        try {
            return (int)mh$.invokeExact(lpdwBufferLength, lpnspBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassNameByClassIdA$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSAGetServiceClassNameByClassIdA$MH,"WSAGetServiceClassNameByClassIdA");
    }
    public static int WSAGetServiceClassNameByClassIdA ( Addressable lpServiceClassId,  Addressable lpszServiceClassName,  Addressable lpdwBufferLength) {
        var mh$ = WSAGetServiceClassNameByClassIdA$MH();
        try {
            return (int)mh$.invokeExact(lpServiceClassId, lpszServiceClassName, lpdwBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetServiceClassNameByClassIdW$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.WSAGetServiceClassNameByClassIdW$MH,"WSAGetServiceClassNameByClassIdW");
    }
    public static int WSAGetServiceClassNameByClassIdW ( Addressable lpServiceClassId,  Addressable lpszServiceClassName,  Addressable lpdwBufferLength) {
        var mh$ = WSAGetServiceClassNameByClassIdW$MH();
        try {
            return (int)mh$.invokeExact(lpServiceClassId, lpszServiceClassName, lpdwBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.WSASetServiceA$MH,"WSASetServiceA");
    }
    public static int WSASetServiceA ( Addressable lpqsRegInfo,  int essoperation,  int dwControlFlags) {
        var mh$ = WSASetServiceA$MH();
        try {
            return (int)mh$.invokeExact(lpqsRegInfo, essoperation, dwControlFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.WSASetServiceW$MH,"WSASetServiceW");
    }
    public static int WSASetServiceW ( Addressable lpqsRegInfo,  int essoperation,  int dwControlFlags) {
        var mh$ = WSASetServiceW$MH();
        try {
            return (int)mh$.invokeExact(lpqsRegInfo, essoperation, dwControlFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAProviderConfigChange$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.WSAProviderConfigChange$MH,"WSAProviderConfigChange");
    }
    public static int WSAProviderConfigChange ( Addressable lpNotificationHandle,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = WSAProviderConfigChange$MH();
        try {
            return (int)mh$.invokeExact(lpNotificationHandle, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAPoll$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.WSAPoll$MH,"WSAPoll");
    }
    public static int WSAPoll ( Addressable fdArray,  int fds,  int timeout) {
        var mh$ = WSAPoll$MH();
        try {
            return (int)mh$.invokeExact(fdArray, fds, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPSOCKADDR_IN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLINGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLINGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFD_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFD_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHOSTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHOSTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROTOENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROTOENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTIMEVAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTIMEVAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIN6_ADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIN6_ADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINTERFACE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINTERFACE_INFO_EX = Constants$root.C_POINTER$LAYOUT;
    public static int IP_PMTUDISC_NOT_SET() {
        return (int)0L;
    }
    public static int IP_PMTUDISC_DO() {
        return (int)1L;
    }
    public static int IP_PMTUDISC_DONT() {
        return (int)2L;
    }
    public static int IP_PMTUDISC_PROBE() {
        return (int)3L;
    }
    public static int IP_PMTUDISC_MAX() {
        return (int)4L;
    }
    public static OfAddress PPMTUD_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_IN6_LH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR_IN6_LH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_IN6_W2KSP1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR_IN6_W2KSP1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_IN6 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOCKADDR_IN6 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_INET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSOCKADDR_IN6_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment scopeid_unspecified$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1366.scopeid_unspecified$SEGMENT,"scopeid_unspecified");
    }
    public static MemorySegment in4addr_any$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1366.in4addr_any$SEGMENT,"in4addr_any");
    }
    public static MemorySegment in4addr_loopback$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1367.in4addr_loopback$SEGMENT,"in4addr_loopback");
    }
    public static MemorySegment in4addr_broadcast$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1367.in4addr_broadcast$SEGMENT,"in4addr_broadcast");
    }
    public static MemorySegment in4addr_allnodesonlink$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1367.in4addr_allnodesonlink$SEGMENT,"in4addr_allnodesonlink");
    }
    public static MemorySegment in4addr_allroutersonlink$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1367.in4addr_allroutersonlink$SEGMENT,"in4addr_allroutersonlink");
    }
    public static MemorySegment in4addr_alligmpv3routersonlink$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1367.in4addr_alligmpv3routersonlink$SEGMENT,"in4addr_alligmpv3routersonlink");
    }
    public static MemorySegment in4addr_allteredohostsonlink$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1367.in4addr_allteredohostsonlink$SEGMENT,"in4addr_allteredohostsonlink");
    }
    public static MemorySegment in4addr_linklocalprefix$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1368.in4addr_linklocalprefix$SEGMENT,"in4addr_linklocalprefix");
    }
    public static MemorySegment in4addr_multicastprefix$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1368.in4addr_multicastprefix$SEGMENT,"in4addr_multicastprefix");
    }
    public static MemorySegment in6addr_any$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1368.in6addr_any$SEGMENT,"in6addr_any");
    }
    public static MemorySegment in6addr_loopback$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1368.in6addr_loopback$SEGMENT,"in6addr_loopback");
    }
    public static MemorySegment in6addr_allnodesonnode$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1368.in6addr_allnodesonnode$SEGMENT,"in6addr_allnodesonnode");
    }
    public static MemorySegment in6addr_allnodesonlink$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1368.in6addr_allnodesonlink$SEGMENT,"in6addr_allnodesonlink");
    }
    public static MemorySegment in6addr_allroutersonlink$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1369.in6addr_allroutersonlink$SEGMENT,"in6addr_allroutersonlink");
    }
    public static MemorySegment in6addr_allmldv2routersonlink$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1369.in6addr_allmldv2routersonlink$SEGMENT,"in6addr_allmldv2routersonlink");
    }
    public static MemorySegment in6addr_teredoinitiallinklocaladdress$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1369.in6addr_teredoinitiallinklocaladdress$SEGMENT,"in6addr_teredoinitiallinklocaladdress");
    }
    public static MemorySegment in6addr_linklocalprefix$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1369.in6addr_linklocalprefix$SEGMENT,"in6addr_linklocalprefix");
    }
    public static MemorySegment in6addr_multicastprefix$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1369.in6addr_multicastprefix$SEGMENT,"in6addr_multicastprefix");
    }
    public static MemorySegment in6addr_solicitednodemulticastprefix$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1369.in6addr_solicitednodemulticastprefix$SEGMENT,"in6addr_solicitednodemulticastprefix");
    }
    public static MemorySegment in6addr_v4mappedprefix$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1370.in6addr_v4mappedprefix$SEGMENT,"in6addr_v4mappedprefix");
    }
    public static MemorySegment in6addr_6to4prefix$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1370.in6addr_6to4prefix$SEGMENT,"in6addr_6to4prefix");
    }
    public static MemorySegment in6addr_teredoprefix$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1370.in6addr_teredoprefix$SEGMENT,"in6addr_teredoprefix");
    }
    public static MemorySegment in6addr_teredoprefix_old$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1370.in6addr_teredoprefix_old$SEGMENT,"in6addr_teredoprefix_old");
    }
    public static MethodHandle IN6_ADDR_EQUAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.IN6_ADDR_EQUAL$MH,"IN6_ADDR_EQUAL");
    }
    public static byte IN6_ADDR_EQUAL ( Addressable x,  Addressable y) {
        var mh$ = IN6_ADDR_EQUAL$MH();
        try {
            return (byte)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_UNSPECIFIED$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.IN6_IS_ADDR_UNSPECIFIED$MH,"IN6_IS_ADDR_UNSPECIFIED");
    }
    public static byte IN6_IS_ADDR_UNSPECIFIED ( Addressable a) {
        var mh$ = IN6_IS_ADDR_UNSPECIFIED$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_LOOPBACK$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.IN6_IS_ADDR_LOOPBACK$MH,"IN6_IS_ADDR_LOOPBACK");
    }
    public static byte IN6_IS_ADDR_LOOPBACK ( Addressable a) {
        var mh$ = IN6_IS_ADDR_LOOPBACK$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MULTICAST$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.IN6_IS_ADDR_MULTICAST$MH,"IN6_IS_ADDR_MULTICAST");
    }
    public static byte IN6_IS_ADDR_MULTICAST ( Addressable a) {
        var mh$ = IN6_IS_ADDR_MULTICAST$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_EUI64$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.IN6_IS_ADDR_EUI64$MH,"IN6_IS_ADDR_EUI64");
    }
    public static byte IN6_IS_ADDR_EUI64 ( Addressable a) {
        var mh$ = IN6_IS_ADDR_EUI64$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST$MH,"IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST");
    }
    public static byte IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST ( Addressable a) {
        var mh$ = IN6_IS_ADDR_SUBNET_ROUTER_ANYCAST$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST$MH,"IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST");
    }
    public static byte IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST ( Addressable a) {
        var mh$ = IN6_IS_ADDR_SUBNET_RESERVED_ANYCAST$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_ANYCAST$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.IN6_IS_ADDR_ANYCAST$MH,"IN6_IS_ADDR_ANYCAST");
    }
    public static byte IN6_IS_ADDR_ANYCAST ( Addressable a) {
        var mh$ = IN6_IS_ADDR_ANYCAST$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_LINKLOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.IN6_IS_ADDR_LINKLOCAL$MH,"IN6_IS_ADDR_LINKLOCAL");
    }
    public static byte IN6_IS_ADDR_LINKLOCAL ( Addressable a) {
        var mh$ = IN6_IS_ADDR_LINKLOCAL$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_SITELOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.IN6_IS_ADDR_SITELOCAL$MH,"IN6_IS_ADDR_SITELOCAL");
    }
    public static byte IN6_IS_ADDR_SITELOCAL ( Addressable a) {
        var mh$ = IN6_IS_ADDR_SITELOCAL$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_GLOBAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.IN6_IS_ADDR_GLOBAL$MH,"IN6_IS_ADDR_GLOBAL");
    }
    public static byte IN6_IS_ADDR_GLOBAL ( Addressable a) {
        var mh$ = IN6_IS_ADDR_GLOBAL$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_V4MAPPED$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.IN6_IS_ADDR_V4MAPPED$MH,"IN6_IS_ADDR_V4MAPPED");
    }
    public static byte IN6_IS_ADDR_V4MAPPED ( Addressable a) {
        var mh$ = IN6_IS_ADDR_V4MAPPED$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_V4COMPAT$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.IN6_IS_ADDR_V4COMPAT$MH,"IN6_IS_ADDR_V4COMPAT");
    }
    public static byte IN6_IS_ADDR_V4COMPAT ( Addressable a) {
        var mh$ = IN6_IS_ADDR_V4COMPAT$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_V4TRANSLATED$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.IN6_IS_ADDR_V4TRANSLATED$MH,"IN6_IS_ADDR_V4TRANSLATED");
    }
    public static byte IN6_IS_ADDR_V4TRANSLATED ( Addressable a) {
        var mh$ = IN6_IS_ADDR_V4TRANSLATED$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MC_NODELOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.IN6_IS_ADDR_MC_NODELOCAL$MH,"IN6_IS_ADDR_MC_NODELOCAL");
    }
    public static byte IN6_IS_ADDR_MC_NODELOCAL ( Addressable a) {
        var mh$ = IN6_IS_ADDR_MC_NODELOCAL$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MC_LINKLOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.IN6_IS_ADDR_MC_LINKLOCAL$MH,"IN6_IS_ADDR_MC_LINKLOCAL");
    }
    public static byte IN6_IS_ADDR_MC_LINKLOCAL ( Addressable a) {
        var mh$ = IN6_IS_ADDR_MC_LINKLOCAL$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MC_SITELOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.IN6_IS_ADDR_MC_SITELOCAL$MH,"IN6_IS_ADDR_MC_SITELOCAL");
    }
    public static byte IN6_IS_ADDR_MC_SITELOCAL ( Addressable a) {
        var mh$ = IN6_IS_ADDR_MC_SITELOCAL$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MC_ORGLOCAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.IN6_IS_ADDR_MC_ORGLOCAL$MH,"IN6_IS_ADDR_MC_ORGLOCAL");
    }
    public static byte IN6_IS_ADDR_MC_ORGLOCAL ( Addressable a) {
        var mh$ = IN6_IS_ADDR_MC_ORGLOCAL$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_IS_ADDR_MC_GLOBAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.IN6_IS_ADDR_MC_GLOBAL$MH,"IN6_IS_ADDR_MC_GLOBAL");
    }
    public static byte IN6_IS_ADDR_MC_GLOBAL ( Addressable a) {
        var mh$ = IN6_IS_ADDR_MC_GLOBAL$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_SET_ADDR_UNSPECIFIED$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.IN6_SET_ADDR_UNSPECIFIED$MH,"IN6_SET_ADDR_UNSPECIFIED");
    }
    public static void IN6_SET_ADDR_UNSPECIFIED ( Addressable a) {
        var mh$ = IN6_SET_ADDR_UNSPECIFIED$MH();
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6_SET_ADDR_LOOPBACK$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.IN6_SET_ADDR_LOOPBACK$MH,"IN6_SET_ADDR_LOOPBACK");
    }
    public static void IN6_SET_ADDR_LOOPBACK ( Addressable a) {
        var mh$ = IN6_SET_ADDR_LOOPBACK$MH();
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6ADDR_SETANY$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.IN6ADDR_SETANY$MH,"IN6ADDR_SETANY");
    }
    public static void IN6ADDR_SETANY ( Addressable a) {
        var mh$ = IN6ADDR_SETANY$MH();
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6ADDR_SETLOOPBACK$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.IN6ADDR_SETLOOPBACK$MH,"IN6ADDR_SETLOOPBACK");
    }
    public static void IN6ADDR_SETLOOPBACK ( Addressable a) {
        var mh$ = IN6ADDR_SETLOOPBACK$MH();
        try {
            mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6ADDR_ISANY$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.IN6ADDR_ISANY$MH,"IN6ADDR_ISANY");
    }
    public static byte IN6ADDR_ISANY ( Addressable a) {
        var mh$ = IN6ADDR_ISANY$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6ADDR_ISLOOPBACK$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.IN6ADDR_ISLOOPBACK$MH,"IN6ADDR_ISLOOPBACK");
    }
    public static byte IN6ADDR_ISLOOPBACK ( Addressable a) {
        var mh$ = IN6ADDR_ISLOOPBACK$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6ADDR_ISEQUAL$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.IN6ADDR_ISEQUAL$MH,"IN6ADDR_ISEQUAL");
    }
    public static byte IN6ADDR_ISEQUAL ( Addressable a,  Addressable b) {
        var mh$ = IN6ADDR_ISEQUAL$MH();
        try {
            return (byte)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IN6ADDR_ISUNSPECIFIED$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.IN6ADDR_ISUNSPECIFIED$MH,"IN6ADDR_ISUNSPECIFIED");
    }
    public static byte IN6ADDR_ISUNSPECIFIED ( Addressable a) {
        var mh$ = IN6ADDR_ISUNSPECIFIED$MH();
        try {
            return (byte)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int MCAST_INCLUDE() {
        return (int)0L;
    }
    public static int MCAST_EXCLUDE() {
        return (int)1L;
    }
    public static OfAddress PIP_MREQ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIP_MREQ_SOURCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIP_MSFILTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIPV6_MREQ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGROUP_REQ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGROUP_SOURCE_REQ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGROUP_FILTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIN_PKTINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIN6_PKTINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIN_PKTINFO_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIN6_PKTINFO_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIN_RECVERR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PICMP_ERROR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPADDRINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADDRINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle getaddrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.getaddrinfo$MH,"getaddrinfo");
    }
    public static int getaddrinfo ( Addressable pNodeName,  Addressable pServiceName,  Addressable pHints,  Addressable ppResult) {
        var mh$ = getaddrinfo$MH();
        try {
            return (int)mh$.invokeExact(pNodeName, pServiceName, pHints, ppResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAddrInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.GetAddrInfoW$MH,"GetAddrInfoW");
    }
    public static int GetAddrInfoW ( Addressable pNodeName,  Addressable pServiceName,  Addressable pHints,  Addressable ppResult) {
        var mh$ = GetAddrInfoW$MH();
        try {
            return (int)mh$.invokeExact(pNodeName, pServiceName, pHints, ppResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAddrInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.GetAddrInfoExA$MH,"GetAddrInfoExA");
    }
    public static int GetAddrInfoExA ( Addressable pName,  Addressable pServiceName,  int dwNameSpace,  Addressable lpNspId,  Addressable hints,  Addressable ppResult,  Addressable timeout,  Addressable lpOverlapped,  Addressable lpCompletionRoutine,  Addressable lpNameHandle) {
        var mh$ = GetAddrInfoExA$MH();
        try {
            return (int)mh$.invokeExact(pName, pServiceName, dwNameSpace, lpNspId, hints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAddrInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1376.GetAddrInfoExW$MH,"GetAddrInfoExW");
    }
    public static int GetAddrInfoExW ( Addressable pName,  Addressable pServiceName,  int dwNameSpace,  Addressable lpNspId,  Addressable hints,  Addressable ppResult,  Addressable timeout,  Addressable lpOverlapped,  Addressable lpCompletionRoutine,  Addressable lpHandle) {
        var mh$ = GetAddrInfoExW$MH();
        try {
            return (int)mh$.invokeExact(pName, pServiceName, dwNameSpace, lpNspId, hints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAddrInfoExCancel$MH() {
        return RuntimeHelper.requireNonNull(constants$1376.GetAddrInfoExCancel$MH,"GetAddrInfoExCancel");
    }
    public static int GetAddrInfoExCancel ( Addressable lpHandle) {
        var mh$ = GetAddrInfoExCancel$MH();
        try {
            return (int)mh$.invokeExact(lpHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAddrInfoExOverlappedResult$MH() {
        return RuntimeHelper.requireNonNull(constants$1376.GetAddrInfoExOverlappedResult$MH,"GetAddrInfoExOverlappedResult");
    }
    public static int GetAddrInfoExOverlappedResult ( Addressable lpOverlapped) {
        var mh$ = GetAddrInfoExOverlappedResult$MH();
        try {
            return (int)mh$.invokeExact(lpOverlapped);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAddrInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$1376.SetAddrInfoExA$MH,"SetAddrInfoExA");
    }
    public static int SetAddrInfoExA ( Addressable pName,  Addressable pServiceName,  Addressable pAddresses,  int dwAddressCount,  Addressable lpBlob,  int dwFlags,  int dwNameSpace,  Addressable lpNspId,  Addressable timeout,  Addressable lpOverlapped,  Addressable lpCompletionRoutine,  Addressable lpNameHandle) {
        var mh$ = SetAddrInfoExA$MH();
        try {
            return (int)mh$.invokeExact(pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAddrInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1376.SetAddrInfoExW$MH,"SetAddrInfoExW");
    }
    public static int SetAddrInfoExW ( Addressable pName,  Addressable pServiceName,  Addressable pAddresses,  int dwAddressCount,  Addressable lpBlob,  int dwFlags,  int dwNameSpace,  Addressable lpNspId,  Addressable timeout,  Addressable lpOverlapped,  Addressable lpCompletionRoutine,  Addressable lpNameHandle) {
        var mh$ = SetAddrInfoExW$MH();
        try {
            return (int)mh$.invokeExact(pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freeaddrinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1376.freeaddrinfo$MH,"freeaddrinfo");
    }
    public static void freeaddrinfo ( Addressable pAddrInfo) {
        var mh$ = freeaddrinfo$MH();
        try {
            mh$.invokeExact(pAddrInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeAddrInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1377.FreeAddrInfoW$MH,"FreeAddrInfoW");
    }
    public static void FreeAddrInfoW ( Addressable pAddrInfo) {
        var mh$ = FreeAddrInfoW$MH();
        try {
            mh$.invokeExact(pAddrInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeAddrInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$1377.FreeAddrInfoEx$MH,"FreeAddrInfoEx");
    }
    public static void FreeAddrInfoEx ( Addressable pAddrInfoEx) {
        var mh$ = FreeAddrInfoEx$MH();
        try {
            mh$.invokeExact(pAddrInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeAddrInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$1377.FreeAddrInfoExW$MH,"FreeAddrInfoExW");
    }
    public static void FreeAddrInfoExW ( Addressable pAddrInfoEx) {
        var mh$ = FreeAddrInfoExW$MH();
        try {
            mh$.invokeExact(pAddrInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt socklen_t = Constants$root.C_LONG$LAYOUT;
    public static MethodHandle getnameinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1377.getnameinfo$MH,"getnameinfo");
    }
    public static int getnameinfo ( Addressable pSockaddr,  int SockaddrLength,  Addressable pNodeBuffer,  int NodeBufferSize,  Addressable pServiceBuffer,  int ServiceBufferSize,  int Flags) {
        var mh$ = getnameinfo$MH();
        try {
            return (int)mh$.invokeExact(pSockaddr, SockaddrLength, pNodeBuffer, NodeBufferSize, pServiceBuffer, ServiceBufferSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNameInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$1377.GetNameInfoW$MH,"GetNameInfoW");
    }
    public static int GetNameInfoW ( Addressable pSockaddr,  int SockaddrLength,  Addressable pNodeBuffer,  int NodeBufferSize,  Addressable pServiceBuffer,  int ServiceBufferSize,  int Flags) {
        var mh$ = GetNameInfoW$MH();
        try {
            return (int)mh$.invokeExact(pSockaddr, SockaddrLength, pNodeBuffer, NodeBufferSize, pServiceBuffer, ServiceBufferSize, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_pton$MH() {
        return RuntimeHelper.requireNonNull(constants$1377.inet_pton$MH,"inet_pton");
    }
    public static int inet_pton ( int Family,  Addressable pszAddrString,  Addressable pAddrBuf) {
        var mh$ = inet_pton$MH();
        try {
            return (int)mh$.invokeExact(Family, pszAddrString, pAddrBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InetPtonW$MH() {
        return RuntimeHelper.requireNonNull(constants$1378.InetPtonW$MH,"InetPtonW");
    }
    public static int InetPtonW ( int Family,  Addressable pszAddrString,  Addressable pAddrBuf) {
        var mh$ = InetPtonW$MH();
        try {
            return (int)mh$.invokeExact(Family, pszAddrString, pAddrBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle inet_ntop$MH() {
        return RuntimeHelper.requireNonNull(constants$1378.inet_ntop$MH,"inet_ntop");
    }
    public static MemoryAddress inet_ntop ( int Family,  Addressable pAddr,  Addressable pStringBuf,  long StringBufSize) {
        var mh$ = inet_ntop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Family, pAddr, pStringBuf, StringBufSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InetNtopW$MH() {
        return RuntimeHelper.requireNonNull(constants$1378.InetNtopW$MH,"InetNtopW");
    }
    public static MemoryAddress InetNtopW ( int Family,  Addressable pAddr,  Addressable pStringBuf,  long StringBufSize) {
        var mh$ = InetNtopW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Family, pAddr, pStringBuf, StringBufSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gai_strerrorA$MH() {
        return RuntimeHelper.requireNonNull(constants$1378.gai_strerrorA$MH,"gai_strerrorA");
    }
    public static MemoryAddress gai_strerrorA ( int ecode) {
        var mh$ = gai_strerrorA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ecode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gai_strerrorW$MH() {
        return RuntimeHelper.requireNonNull(constants$1378.gai_strerrorW$MH,"gai_strerrorW");
    }
    public static MemoryAddress gai_strerrorW ( int ecode) {
        var mh$ = gai_strerrorW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ecode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setipv4sourcefilter$MH() {
        return RuntimeHelper.requireNonNull(constants$1378.setipv4sourcefilter$MH,"setipv4sourcefilter");
    }
    public static int setipv4sourcefilter ( long Socket,  MemorySegment Interface,  MemorySegment Group,  int FilterMode,  int SourceCount,  Addressable SourceList) {
        var mh$ = setipv4sourcefilter$MH();
        try {
            return (int)mh$.invokeExact(Socket, Interface, Group, FilterMode, SourceCount, SourceList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getipv4sourcefilter$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.getipv4sourcefilter$MH,"getipv4sourcefilter");
    }
    public static int getipv4sourcefilter ( long Socket,  MemorySegment Interface,  MemorySegment Group,  Addressable FilterMode,  Addressable SourceCount,  Addressable SourceList) {
        var mh$ = getipv4sourcefilter$MH();
        try {
            return (int)mh$.invokeExact(Socket, Interface, Group, FilterMode, SourceCount, SourceList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsourcefilter$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.setsourcefilter$MH,"setsourcefilter");
    }
    public static int setsourcefilter ( long Socket,  int Interface,  Addressable Group,  int GroupLength,  int FilterMode,  int SourceCount,  Addressable SourceList) {
        var mh$ = setsourcefilter$MH();
        try {
            return (int)mh$.invokeExact(Socket, Interface, Group, GroupLength, FilterMode, SourceCount, SourceList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsourcefilter$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.getsourcefilter$MH,"getsourcefilter");
    }
    public static int getsourcefilter ( long Socket,  int Interface,  Addressable Group,  int GroupLength,  Addressable FilterMode,  Addressable SourceCount,  Addressable SourceList) {
        var mh$ = getsourcefilter$MH();
        try {
            return (int)mh$.invokeExact(Socket, Interface, Group, GroupLength, FilterMode, SourceCount, SourceList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idealsendbacklogquery$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.idealsendbacklogquery$MH,"idealsendbacklogquery");
    }
    public static int idealsendbacklogquery ( long s,  Addressable pISB) {
        var mh$ = idealsendbacklogquery$MH();
        try {
            return (int)mh$.invokeExact(s, pISB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle idealsendbacklognotify$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.idealsendbacklognotify$MH,"idealsendbacklognotify");
    }
    public static int idealsendbacklognotify ( long s,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = idealsendbacklognotify$MH();
        try {
            return (int)mh$.invokeExact(s, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetIPUserMtu$MH() {
        return RuntimeHelper.requireNonNull(constants$1379.WSAGetIPUserMtu$MH,"WSAGetIPUserMtu");
    }
    public static int WSAGetIPUserMtu ( long Socket,  Addressable Mtu) {
        var mh$ = WSAGetIPUserMtu$MH();
        try {
            return (int)mh$.invokeExact(Socket, Mtu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetIPUserMtu$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.WSASetIPUserMtu$MH,"WSASetIPUserMtu");
    }
    public static int WSASetIPUserMtu ( long Socket,  int Mtu) {
        var mh$ = WSASetIPUserMtu$MH();
        try {
            return (int)mh$.invokeExact(Socket, Mtu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetFailConnectOnIcmpError$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.WSAGetFailConnectOnIcmpError$MH,"WSAGetFailConnectOnIcmpError");
    }
    public static int WSAGetFailConnectOnIcmpError ( long Socket,  Addressable Enabled) {
        var mh$ = WSAGetFailConnectOnIcmpError$MH();
        try {
            return (int)mh$.invokeExact(Socket, Enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetFailConnectOnIcmpError$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.WSASetFailConnectOnIcmpError$MH,"WSASetFailConnectOnIcmpError");
    }
    public static int WSASetFailConnectOnIcmpError ( long Socket,  int Enabled) {
        var mh$ = WSASetFailConnectOnIcmpError$MH();
        try {
            return (int)mh$.invokeExact(Socket, Enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetIcmpErrorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.WSAGetIcmpErrorInfo$MH,"WSAGetIcmpErrorInfo");
    }
    public static int WSAGetIcmpErrorInfo ( long Socket,  Addressable Info) {
        var mh$ = WSAGetIcmpErrorInfo$MH();
        try {
            return (int)mh$.invokeExact(Socket, Info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetUdpSendMessageSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.WSAGetUdpSendMessageSize$MH,"WSAGetUdpSendMessageSize");
    }
    public static int WSAGetUdpSendMessageSize ( long Socket,  Addressable MsgSize) {
        var mh$ = WSAGetUdpSendMessageSize$MH();
        try {
            return (int)mh$.invokeExact(Socket, MsgSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetUdpSendMessageSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1380.WSASetUdpSendMessageSize$MH,"WSASetUdpSendMessageSize");
    }
    public static int WSASetUdpSendMessageSize ( long Socket,  int MsgSize) {
        var mh$ = WSASetUdpSendMessageSize$MH();
        try {
            return (int)mh$.invokeExact(Socket, MsgSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSAGetUdpRecvMaxCoalescedSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.WSAGetUdpRecvMaxCoalescedSize$MH,"WSAGetUdpRecvMaxCoalescedSize");
    }
    public static int WSAGetUdpRecvMaxCoalescedSize ( long Socket,  Addressable MaxCoalescedMsgSize) {
        var mh$ = WSAGetUdpRecvMaxCoalescedSize$MH();
        try {
            return (int)mh$.invokeExact(Socket, MaxCoalescedMsgSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WSASetUdpRecvMaxCoalescedSize$MH() {
        return RuntimeHelper.requireNonNull(constants$1381.WSASetUdpRecvMaxCoalescedSize$MH,"WSASetUdpRecvMaxCoalescedSize");
    }
    public static int WSASetUdpRecvMaxCoalescedSize ( long Socket,  int MaxCoalescedMsgSize) {
        var mh$ = WSASetUdpRecvMaxCoalescedSize$MH();
        try {
            return (int)mh$.invokeExact(Socket, MaxCoalescedMsgSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CURLSSLBACKEND_NONE() {
        return (int)0L;
    }
    public static int CURLSSLBACKEND_OPENSSL() {
        return (int)1L;
    }
    public static int CURLSSLBACKEND_GNUTLS() {
        return (int)2L;
    }
    public static int CURLSSLBACKEND_NSS() {
        return (int)3L;
    }
    public static int CURLSSLBACKEND_OBSOLETE4() {
        return (int)4L;
    }
    public static int CURLSSLBACKEND_GSKIT() {
        return (int)5L;
    }
    public static int CURLSSLBACKEND_POLARSSL() {
        return (int)6L;
    }
    public static int CURLSSLBACKEND_WOLFSSL() {
        return (int)7L;
    }
    public static int CURLSSLBACKEND_SCHANNEL() {
        return (int)8L;
    }
    public static int CURLSSLBACKEND_SECURETRANSPORT() {
        return (int)9L;
    }
    public static int CURLSSLBACKEND_AXTLS() {
        return (int)10L;
    }
    public static int CURLSSLBACKEND_MBEDTLS() {
        return (int)11L;
    }
    public static int CURLSSLBACKEND_MESALINK() {
        return (int)12L;
    }
    public static int CURLSSLBACKEND_BEARSSL() {
        return (int)13L;
    }
    public static int CURLSSLBACKEND_RUSTLS() {
        return (int)14L;
    }
    public static int CURLFILETYPE_FILE() {
        return (int)0L;
    }
    public static int CURLFILETYPE_DIRECTORY() {
        return (int)1L;
    }
    public static int CURLFILETYPE_SYMLINK() {
        return (int)2L;
    }
    public static int CURLFILETYPE_DEVICE_BLOCK() {
        return (int)3L;
    }
    public static int CURLFILETYPE_DEVICE_CHAR() {
        return (int)4L;
    }
    public static int CURLFILETYPE_NAMEDPIPE() {
        return (int)5L;
    }
    public static int CURLFILETYPE_SOCKET() {
        return (int)6L;
    }
    public static int CURLFILETYPE_DOOR() {
        return (int)7L;
    }
    public static int CURLFILETYPE_UNKNOWN() {
        return (int)8L;
    }
    public static int CURLSOCKTYPE_IPCXN() {
        return (int)0L;
    }
    public static int CURLSOCKTYPE_ACCEPT() {
        return (int)1L;
    }
    public static int CURLSOCKTYPE_LAST() {
        return (int)2L;
    }
    public static int CURLIOE_OK() {
        return (int)0L;
    }
    public static int CURLIOE_UNKNOWNCMD() {
        return (int)1L;
    }
    public static int CURLIOE_FAILRESTART() {
        return (int)2L;
    }
    public static int CURLIOE_LAST() {
        return (int)3L;
    }
    public static int CURLIOCMD_NOP() {
        return (int)0L;
    }
    public static int CURLIOCMD_RESTARTREAD() {
        return (int)1L;
    }
    public static int CURLIOCMD_LAST() {
        return (int)2L;
    }
    public static int CURLINFO_TEXT() {
        return (int)0L;
    }
    public static int CURLINFO_HEADER_IN() {
        return (int)1L;
    }
    public static int CURLINFO_HEADER_OUT() {
        return (int)2L;
    }
    public static int CURLINFO_DATA_IN() {
        return (int)3L;
    }
    public static int CURLINFO_DATA_OUT() {
        return (int)4L;
    }
    public static int CURLINFO_SSL_DATA_IN() {
        return (int)5L;
    }
    public static int CURLINFO_SSL_DATA_OUT() {
        return (int)6L;
    }
    public static int CURLINFO_END() {
        return (int)7L;
    }
    public static int CURLE_OK() {
        return (int)0L;
    }
    public static int CURLE_UNSUPPORTED_PROTOCOL() {
        return (int)1L;
    }
    public static int CURLE_FAILED_INIT() {
        return (int)2L;
    }
    public static int CURLE_URL_MALFORMAT() {
        return (int)3L;
    }
    public static int CURLE_NOT_BUILT_IN() {
        return (int)4L;
    }
    public static int CURLE_COULDNT_RESOLVE_PROXY() {
        return (int)5L;
    }
    public static int CURLE_COULDNT_RESOLVE_HOST() {
        return (int)6L;
    }
    public static int CURLE_COULDNT_CONNECT() {
        return (int)7L;
    }
    public static int CURLE_WEIRD_SERVER_REPLY() {
        return (int)8L;
    }
    public static int CURLE_REMOTE_ACCESS_DENIED() {
        return (int)9L;
    }
    public static int CURLE_FTP_ACCEPT_FAILED() {
        return (int)10L;
    }
    public static int CURLE_FTP_WEIRD_PASS_REPLY() {
        return (int)11L;
    }
    public static int CURLE_FTP_ACCEPT_TIMEOUT() {
        return (int)12L;
    }
    public static int CURLE_FTP_WEIRD_PASV_REPLY() {
        return (int)13L;
    }
    public static int CURLE_FTP_WEIRD_227_FORMAT() {
        return (int)14L;
    }
    public static int CURLE_FTP_CANT_GET_HOST() {
        return (int)15L;
    }
    public static int CURLE_HTTP2() {
        return (int)16L;
    }
    public static int CURLE_FTP_COULDNT_SET_TYPE() {
        return (int)17L;
    }
    public static int CURLE_PARTIAL_FILE() {
        return (int)18L;
    }
    public static int CURLE_FTP_COULDNT_RETR_FILE() {
        return (int)19L;
    }
    public static int CURLE_OBSOLETE20() {
        return (int)20L;
    }
    public static int CURLE_QUOTE_ERROR() {
        return (int)21L;
    }
    public static int CURLE_HTTP_RETURNED_ERROR() {
        return (int)22L;
    }
    public static int CURLE_WRITE_ERROR() {
        return (int)23L;
    }
    public static int CURLE_OBSOLETE24() {
        return (int)24L;
    }
    public static int CURLE_UPLOAD_FAILED() {
        return (int)25L;
    }
    public static int CURLE_READ_ERROR() {
        return (int)26L;
    }
    public static int CURLE_OUT_OF_MEMORY() {
        return (int)27L;
    }
    public static int CURLE_OPERATION_TIMEDOUT() {
        return (int)28L;
    }
    public static int CURLE_OBSOLETE29() {
        return (int)29L;
    }
    public static int CURLE_FTP_PORT_FAILED() {
        return (int)30L;
    }
    public static int CURLE_FTP_COULDNT_USE_REST() {
        return (int)31L;
    }
    public static int CURLE_OBSOLETE32() {
        return (int)32L;
    }
    public static int CURLE_RANGE_ERROR() {
        return (int)33L;
    }
    public static int CURLE_HTTP_POST_ERROR() {
        return (int)34L;
    }
    public static int CURLE_SSL_CONNECT_ERROR() {
        return (int)35L;
    }
    public static int CURLE_BAD_DOWNLOAD_RESUME() {
        return (int)36L;
    }
    public static int CURLE_FILE_COULDNT_READ_FILE() {
        return (int)37L;
    }
    public static int CURLE_LDAP_CANNOT_BIND() {
        return (int)38L;
    }
    public static int CURLE_LDAP_SEARCH_FAILED() {
        return (int)39L;
    }
    public static int CURLE_OBSOLETE40() {
        return (int)40L;
    }
    public static int CURLE_FUNCTION_NOT_FOUND() {
        return (int)41L;
    }
    public static int CURLE_ABORTED_BY_CALLBACK() {
        return (int)42L;
    }
    public static int CURLE_BAD_FUNCTION_ARGUMENT() {
        return (int)43L;
    }
    public static int CURLE_OBSOLETE44() {
        return (int)44L;
    }
    public static int CURLE_INTERFACE_FAILED() {
        return (int)45L;
    }
    public static int CURLE_OBSOLETE46() {
        return (int)46L;
    }
    public static int CURLE_TOO_MANY_REDIRECTS() {
        return (int)47L;
    }
    public static int CURLE_UNKNOWN_OPTION() {
        return (int)48L;
    }
    public static int CURLE_SETOPT_OPTION_SYNTAX() {
        return (int)49L;
    }
    public static int CURLE_OBSOLETE50() {
        return (int)50L;
    }
    public static int CURLE_OBSOLETE51() {
        return (int)51L;
    }
    public static int CURLE_GOT_NOTHING() {
        return (int)52L;
    }
    public static int CURLE_SSL_ENGINE_NOTFOUND() {
        return (int)53L;
    }
    public static int CURLE_SSL_ENGINE_SETFAILED() {
        return (int)54L;
    }
    public static int CURLE_SEND_ERROR() {
        return (int)55L;
    }
    public static int CURLE_RECV_ERROR() {
        return (int)56L;
    }
    public static int CURLE_OBSOLETE57() {
        return (int)57L;
    }
    public static int CURLE_SSL_CERTPROBLEM() {
        return (int)58L;
    }
    public static int CURLE_SSL_CIPHER() {
        return (int)59L;
    }
    public static int CURLE_PEER_FAILED_VERIFICATION() {
        return (int)60L;
    }
    public static int CURLE_BAD_CONTENT_ENCODING() {
        return (int)61L;
    }
    public static int CURLE_OBSOLETE62() {
        return (int)62L;
    }
    public static int CURLE_FILESIZE_EXCEEDED() {
        return (int)63L;
    }
    public static int CURLE_USE_SSL_FAILED() {
        return (int)64L;
    }
    public static int CURLE_SEND_FAIL_REWIND() {
        return (int)65L;
    }
    public static int CURLE_SSL_ENGINE_INITFAILED() {
        return (int)66L;
    }
    public static int CURLE_LOGIN_DENIED() {
        return (int)67L;
    }
    public static int CURLE_TFTP_NOTFOUND() {
        return (int)68L;
    }
    public static int CURLE_TFTP_PERM() {
        return (int)69L;
    }
    public static int CURLE_REMOTE_DISK_FULL() {
        return (int)70L;
    }
    public static int CURLE_TFTP_ILLEGAL() {
        return (int)71L;
    }
    public static int CURLE_TFTP_UNKNOWNID() {
        return (int)72L;
    }
    public static int CURLE_REMOTE_FILE_EXISTS() {
        return (int)73L;
    }
    public static int CURLE_TFTP_NOSUCHUSER() {
        return (int)74L;
    }
    public static int CURLE_OBSOLETE75() {
        return (int)75L;
    }
    public static int CURLE_OBSOLETE76() {
        return (int)76L;
    }
    public static int CURLE_SSL_CACERT_BADFILE() {
        return (int)77L;
    }
    public static int CURLE_REMOTE_FILE_NOT_FOUND() {
        return (int)78L;
    }
    public static int CURLE_SSH() {
        return (int)79L;
    }
    public static int CURLE_SSL_SHUTDOWN_FAILED() {
        return (int)80L;
    }
    public static int CURLE_AGAIN() {
        return (int)81L;
    }
    public static int CURLE_SSL_CRL_BADFILE() {
        return (int)82L;
    }
    public static int CURLE_SSL_ISSUER_ERROR() {
        return (int)83L;
    }
    public static int CURLE_FTP_PRET_FAILED() {
        return (int)84L;
    }
    public static int CURLE_RTSP_CSEQ_ERROR() {
        return (int)85L;
    }
    public static int CURLE_RTSP_SESSION_ERROR() {
        return (int)86L;
    }
    public static int CURLE_FTP_BAD_FILE_LIST() {
        return (int)87L;
    }
    public static int CURLE_CHUNK_FAILED() {
        return (int)88L;
    }
    public static int CURLE_NO_CONNECTION_AVAILABLE() {
        return (int)89L;
    }
    public static int CURLE_SSL_PINNEDPUBKEYNOTMATCH() {
        return (int)90L;
    }
    public static int CURLE_SSL_INVALIDCERTSTATUS() {
        return (int)91L;
    }
    public static int CURLE_HTTP2_STREAM() {
        return (int)92L;
    }
    public static int CURLE_RECURSIVE_API_CALL() {
        return (int)93L;
    }
    public static int CURLE_AUTH_ERROR() {
        return (int)94L;
    }
    public static int CURLE_HTTP3() {
        return (int)95L;
    }
    public static int CURLE_QUIC_CONNECT_ERROR() {
        return (int)96L;
    }
    public static int CURLE_PROXY() {
        return (int)97L;
    }
    public static int CURLE_SSL_CLIENTCERT() {
        return (int)98L;
    }
    public static int CURLE_UNRECOVERABLE_POLL() {
        return (int)99L;
    }
    public static int CURL_LAST() {
        return (int)100L;
    }
    public static int CURLPX_OK() {
        return (int)0L;
    }
    public static int CURLPX_BAD_ADDRESS_TYPE() {
        return (int)1L;
    }
    public static int CURLPX_BAD_VERSION() {
        return (int)2L;
    }
    public static int CURLPX_CLOSED() {
        return (int)3L;
    }
    public static int CURLPX_GSSAPI() {
        return (int)4L;
    }
    public static int CURLPX_GSSAPI_PERMSG() {
        return (int)5L;
    }
    public static int CURLPX_GSSAPI_PROTECTION() {
        return (int)6L;
    }
    public static int CURLPX_IDENTD() {
        return (int)7L;
    }
    public static int CURLPX_IDENTD_DIFFER() {
        return (int)8L;
    }
    public static int CURLPX_LONG_HOSTNAME() {
        return (int)9L;
    }
    public static int CURLPX_LONG_PASSWD() {
        return (int)10L;
    }
    public static int CURLPX_LONG_USER() {
        return (int)11L;
    }
    public static int CURLPX_NO_AUTH() {
        return (int)12L;
    }
    public static int CURLPX_RECV_ADDRESS() {
        return (int)13L;
    }
    public static int CURLPX_RECV_AUTH() {
        return (int)14L;
    }
    public static int CURLPX_RECV_CONNECT() {
        return (int)15L;
    }
    public static int CURLPX_RECV_REQACK() {
        return (int)16L;
    }
    public static int CURLPX_REPLY_ADDRESS_TYPE_NOT_SUPPORTED() {
        return (int)17L;
    }
    public static int CURLPX_REPLY_COMMAND_NOT_SUPPORTED() {
        return (int)18L;
    }
    public static int CURLPX_REPLY_CONNECTION_REFUSED() {
        return (int)19L;
    }
    public static int CURLPX_REPLY_GENERAL_SERVER_FAILURE() {
        return (int)20L;
    }
    public static int CURLPX_REPLY_HOST_UNREACHABLE() {
        return (int)21L;
    }
    public static int CURLPX_REPLY_NETWORK_UNREACHABLE() {
        return (int)22L;
    }
    public static int CURLPX_REPLY_NOT_ALLOWED() {
        return (int)23L;
    }
    public static int CURLPX_REPLY_TTL_EXPIRED() {
        return (int)24L;
    }
    public static int CURLPX_REPLY_UNASSIGNED() {
        return (int)25L;
    }
    public static int CURLPX_REQUEST_FAILED() {
        return (int)26L;
    }
    public static int CURLPX_RESOLVE_HOST() {
        return (int)27L;
    }
    public static int CURLPX_SEND_AUTH() {
        return (int)28L;
    }
    public static int CURLPX_SEND_CONNECT() {
        return (int)29L;
    }
    public static int CURLPX_SEND_REQUEST() {
        return (int)30L;
    }
    public static int CURLPX_UNKNOWN_FAIL() {
        return (int)31L;
    }
    public static int CURLPX_UNKNOWN_MODE() {
        return (int)32L;
    }
    public static int CURLPX_USER_REJECTED() {
        return (int)33L;
    }
    public static int CURLPX_LAST() {
        return (int)34L;
    }
    public static int CURLPROXY_HTTP() {
        return (int)0L;
    }
    public static int CURLPROXY_HTTP_1_0() {
        return (int)1L;
    }
    public static int CURLPROXY_HTTPS() {
        return (int)2L;
    }
    public static int CURLPROXY_SOCKS4() {
        return (int)4L;
    }
    public static int CURLPROXY_SOCKS5() {
        return (int)5L;
    }
    public static int CURLPROXY_SOCKS4A() {
        return (int)6L;
    }
    public static int CURLPROXY_SOCKS5_HOSTNAME() {
        return (int)7L;
    }
    public static int CURLKHTYPE_UNKNOWN() {
        return (int)0L;
    }
    public static int CURLKHTYPE_RSA1() {
        return (int)1L;
    }
    public static int CURLKHTYPE_RSA() {
        return (int)2L;
    }
    public static int CURLKHTYPE_DSS() {
        return (int)3L;
    }
    public static int CURLKHTYPE_ECDSA() {
        return (int)4L;
    }
    public static int CURLKHTYPE_ED25519() {
        return (int)5L;
    }
    public static int CURLKHSTAT_FINE_ADD_TO_FILE() {
        return (int)0L;
    }
    public static int CURLKHSTAT_FINE() {
        return (int)1L;
    }
    public static int CURLKHSTAT_REJECT() {
        return (int)2L;
    }
    public static int CURLKHSTAT_DEFER() {
        return (int)3L;
    }
    public static int CURLKHSTAT_FINE_REPLACE() {
        return (int)4L;
    }
    public static int CURLKHSTAT_LAST() {
        return (int)5L;
    }
    public static int CURLKHMATCH_OK() {
        return (int)0L;
    }
    public static int CURLKHMATCH_MISMATCH() {
        return (int)1L;
    }
    public static int CURLKHMATCH_MISSING() {
        return (int)2L;
    }
    public static int CURLKHMATCH_LAST() {
        return (int)3L;
    }
    public static int CURLUSESSL_NONE() {
        return (int)0L;
    }
    public static int CURLUSESSL_TRY() {
        return (int)1L;
    }
    public static int CURLUSESSL_CONTROL() {
        return (int)2L;
    }
    public static int CURLUSESSL_ALL() {
        return (int)3L;
    }
    public static int CURLUSESSL_LAST() {
        return (int)4L;
    }
    public static int CURLFTPSSL_CCC_NONE() {
        return (int)0L;
    }
    public static int CURLFTPSSL_CCC_PASSIVE() {
        return (int)1L;
    }
    public static int CURLFTPSSL_CCC_ACTIVE() {
        return (int)2L;
    }
    public static int CURLFTPSSL_CCC_LAST() {
        return (int)3L;
    }
    public static int CURLFTPAUTH_DEFAULT() {
        return (int)0L;
    }
    public static int CURLFTPAUTH_SSL() {
        return (int)1L;
    }
    public static int CURLFTPAUTH_TLS() {
        return (int)2L;
    }
    public static int CURLFTPAUTH_LAST() {
        return (int)3L;
    }
    public static int CURLFTP_CREATE_DIR_NONE() {
        return (int)0L;
    }
    public static int CURLFTP_CREATE_DIR() {
        return (int)1L;
    }
    public static int CURLFTP_CREATE_DIR_RETRY() {
        return (int)2L;
    }
    public static int CURLFTP_CREATE_DIR_LAST() {
        return (int)3L;
    }
    public static int CURLFTPMETHOD_DEFAULT() {
        return (int)0L;
    }
    public static int CURLFTPMETHOD_MULTICWD() {
        return (int)1L;
    }
    public static int CURLFTPMETHOD_NOCWD() {
        return (int)2L;
    }
    public static int CURLFTPMETHOD_SINGLECWD() {
        return (int)3L;
    }
    public static int CURLFTPMETHOD_LAST() {
        return (int)4L;
    }
    public static int CURLSTS_OK() {
        return (int)0L;
    }
    public static int CURLSTS_DONE() {
        return (int)1L;
    }
    public static int CURLSTS_FAIL() {
        return (int)2L;
    }
    public static int CURLOPT_WRITEDATA() {
        return (int)10001L;
    }
    public static int CURLOPT_URL() {
        return (int)10002L;
    }
    public static int CURLOPT_PORT() {
        return (int)3L;
    }
    public static int CURLOPT_PROXY() {
        return (int)10004L;
    }
    public static int CURLOPT_USERPWD() {
        return (int)10005L;
    }
    public static int CURLOPT_PROXYUSERPWD() {
        return (int)10006L;
    }
    public static int CURLOPT_RANGE() {
        return (int)10007L;
    }
    public static int CURLOPT_READDATA() {
        return (int)10009L;
    }
    public static int CURLOPT_ERRORBUFFER() {
        return (int)10010L;
    }
    public static int CURLOPT_WRITEFUNCTION() {
        return (int)20011L;
    }
    public static int CURLOPT_READFUNCTION() {
        return (int)20012L;
    }
    public static int CURLOPT_TIMEOUT() {
        return (int)13L;
    }
    public static int CURLOPT_INFILESIZE() {
        return (int)14L;
    }
    public static int CURLOPT_POSTFIELDS() {
        return (int)10015L;
    }
    public static int CURLOPT_REFERER() {
        return (int)10016L;
    }
    public static int CURLOPT_FTPPORT() {
        return (int)10017L;
    }
    public static int CURLOPT_USERAGENT() {
        return (int)10018L;
    }
    public static int CURLOPT_LOW_SPEED_LIMIT() {
        return (int)19L;
    }
    public static int CURLOPT_LOW_SPEED_TIME() {
        return (int)20L;
    }
    public static int CURLOPT_RESUME_FROM() {
        return (int)21L;
    }
    public static int CURLOPT_COOKIE() {
        return (int)10022L;
    }
    public static int CURLOPT_HTTPHEADER() {
        return (int)10023L;
    }
    public static int CURLOPT_HTTPPOST() {
        return (int)10024L;
    }
    public static int CURLOPT_SSLCERT() {
        return (int)10025L;
    }
    public static int CURLOPT_KEYPASSWD() {
        return (int)10026L;
    }
    public static int CURLOPT_CRLF() {
        return (int)27L;
    }
    public static int CURLOPT_QUOTE() {
        return (int)10028L;
    }
    public static int CURLOPT_HEADERDATA() {
        return (int)10029L;
    }
    public static int CURLOPT_COOKIEFILE() {
        return (int)10031L;
    }
    public static int CURLOPT_SSLVERSION() {
        return (int)32L;
    }
    public static int CURLOPT_TIMECONDITION() {
        return (int)33L;
    }
    public static int CURLOPT_TIMEVALUE() {
        return (int)34L;
    }
    public static int CURLOPT_CUSTOMREQUEST() {
        return (int)10036L;
    }
    public static int CURLOPT_STDERR() {
        return (int)10037L;
    }
    public static int CURLOPT_POSTQUOTE() {
        return (int)10039L;
    }
    public static int CURLOPT_OBSOLETE40() {
        return (int)10040L;
    }
    public static int CURLOPT_VERBOSE() {
        return (int)41L;
    }
    public static int CURLOPT_HEADER() {
        return (int)42L;
    }
    public static int CURLOPT_NOPROGRESS() {
        return (int)43L;
    }
    public static int CURLOPT_NOBODY() {
        return (int)44L;
    }
    public static int CURLOPT_FAILONERROR() {
        return (int)45L;
    }
    public static int CURLOPT_UPLOAD() {
        return (int)46L;
    }
    public static int CURLOPT_POST() {
        return (int)47L;
    }
    public static int CURLOPT_DIRLISTONLY() {
        return (int)48L;
    }
    public static int CURLOPT_APPEND() {
        return (int)50L;
    }
    public static int CURLOPT_NETRC() {
        return (int)51L;
    }
    public static int CURLOPT_FOLLOWLOCATION() {
        return (int)52L;
    }
    public static int CURLOPT_TRANSFERTEXT() {
        return (int)53L;
    }
    public static int CURLOPT_PUT() {
        return (int)54L;
    }
    public static int CURLOPT_PROGRESSFUNCTION() {
        return (int)20056L;
    }
    public static int CURLOPT_XFERINFODATA() {
        return (int)10057L;
    }
    public static int CURLOPT_AUTOREFERER() {
        return (int)58L;
    }
    public static int CURLOPT_PROXYPORT() {
        return (int)59L;
    }
    public static int CURLOPT_POSTFIELDSIZE() {
        return (int)60L;
    }
    public static int CURLOPT_HTTPPROXYTUNNEL() {
        return (int)61L;
    }
    public static int CURLOPT_INTERFACE() {
        return (int)10062L;
    }
    public static int CURLOPT_KRBLEVEL() {
        return (int)10063L;
    }
    public static int CURLOPT_SSL_VERIFYPEER() {
        return (int)64L;
    }
    public static int CURLOPT_CAINFO() {
        return (int)10065L;
    }
    public static int CURLOPT_MAXREDIRS() {
        return (int)68L;
    }
    public static int CURLOPT_FILETIME() {
        return (int)69L;
    }
    public static int CURLOPT_TELNETOPTIONS() {
        return (int)10070L;
    }
    public static int CURLOPT_MAXCONNECTS() {
        return (int)71L;
    }
    public static int CURLOPT_OBSOLETE72() {
        return (int)72L;
    }
    public static int CURLOPT_FRESH_CONNECT() {
        return (int)74L;
    }
    public static int CURLOPT_FORBID_REUSE() {
        return (int)75L;
    }
    public static int CURLOPT_RANDOM_FILE() {
        return (int)10076L;
    }
    public static int CURLOPT_EGDSOCKET() {
        return (int)10077L;
    }
    public static int CURLOPT_CONNECTTIMEOUT() {
        return (int)78L;
    }
    public static int CURLOPT_HEADERFUNCTION() {
        return (int)20079L;
    }
    public static int CURLOPT_HTTPGET() {
        return (int)80L;
    }
    public static int CURLOPT_SSL_VERIFYHOST() {
        return (int)81L;
    }
    public static int CURLOPT_COOKIEJAR() {
        return (int)10082L;
    }
    public static int CURLOPT_SSL_CIPHER_LIST() {
        return (int)10083L;
    }
    public static int CURLOPT_HTTP_VERSION() {
        return (int)84L;
    }
    public static int CURLOPT_FTP_USE_EPSV() {
        return (int)85L;
    }
    public static int CURLOPT_SSLCERTTYPE() {
        return (int)10086L;
    }
    public static int CURLOPT_SSLKEY() {
        return (int)10087L;
    }
    public static int CURLOPT_SSLKEYTYPE() {
        return (int)10088L;
    }
    public static int CURLOPT_SSLENGINE() {
        return (int)10089L;
    }
    public static int CURLOPT_SSLENGINE_DEFAULT() {
        return (int)90L;
    }
    public static int CURLOPT_DNS_USE_GLOBAL_CACHE() {
        return (int)91L;
    }
    public static int CURLOPT_DNS_CACHE_TIMEOUT() {
        return (int)92L;
    }
    public static int CURLOPT_PREQUOTE() {
        return (int)10093L;
    }
    public static int CURLOPT_DEBUGFUNCTION() {
        return (int)20094L;
    }
    public static int CURLOPT_DEBUGDATA() {
        return (int)10095L;
    }
    public static int CURLOPT_COOKIESESSION() {
        return (int)96L;
    }
    public static int CURLOPT_CAPATH() {
        return (int)10097L;
    }
    public static int CURLOPT_BUFFERSIZE() {
        return (int)98L;
    }
    public static int CURLOPT_NOSIGNAL() {
        return (int)99L;
    }
    public static int CURLOPT_SHARE() {
        return (int)10100L;
    }
    public static int CURLOPT_PROXYTYPE() {
        return (int)101L;
    }
    public static int CURLOPT_ACCEPT_ENCODING() {
        return (int)10102L;
    }
    public static int CURLOPT_PRIVATE() {
        return (int)10103L;
    }
    public static int CURLOPT_HTTP200ALIASES() {
        return (int)10104L;
    }
    public static int CURLOPT_UNRESTRICTED_AUTH() {
        return (int)105L;
    }
    public static int CURLOPT_FTP_USE_EPRT() {
        return (int)106L;
    }
    public static int CURLOPT_HTTPAUTH() {
        return (int)107L;
    }
    public static int CURLOPT_SSL_CTX_FUNCTION() {
        return (int)20108L;
    }
    public static int CURLOPT_SSL_CTX_DATA() {
        return (int)10109L;
    }
    public static int CURLOPT_FTP_CREATE_MISSING_DIRS() {
        return (int)110L;
    }
    public static int CURLOPT_PROXYAUTH() {
        return (int)111L;
    }
    public static int CURLOPT_SERVER_RESPONSE_TIMEOUT() {
        return (int)112L;
    }
    public static int CURLOPT_IPRESOLVE() {
        return (int)113L;
    }
    public static int CURLOPT_MAXFILESIZE() {
        return (int)114L;
    }
    public static int CURLOPT_INFILESIZE_LARGE() {
        return (int)30115L;
    }
    public static int CURLOPT_RESUME_FROM_LARGE() {
        return (int)30116L;
    }
    public static int CURLOPT_MAXFILESIZE_LARGE() {
        return (int)30117L;
    }
    public static int CURLOPT_NETRC_FILE() {
        return (int)10118L;
    }
    public static int CURLOPT_USE_SSL() {
        return (int)119L;
    }
    public static int CURLOPT_POSTFIELDSIZE_LARGE() {
        return (int)30120L;
    }
    public static int CURLOPT_TCP_NODELAY() {
        return (int)121L;
    }
    public static int CURLOPT_FTPSSLAUTH() {
        return (int)129L;
    }
    public static int CURLOPT_IOCTLFUNCTION() {
        return (int)20130L;
    }
    public static int CURLOPT_IOCTLDATA() {
        return (int)10131L;
    }
    public static int CURLOPT_FTP_ACCOUNT() {
        return (int)10134L;
    }
    public static int CURLOPT_COOKIELIST() {
        return (int)10135L;
    }
    public static int CURLOPT_IGNORE_CONTENT_LENGTH() {
        return (int)136L;
    }
    public static int CURLOPT_FTP_SKIP_PASV_IP() {
        return (int)137L;
    }
    public static int CURLOPT_FTP_FILEMETHOD() {
        return (int)138L;
    }
    public static int CURLOPT_LOCALPORT() {
        return (int)139L;
    }
    public static int CURLOPT_LOCALPORTRANGE() {
        return (int)140L;
    }
    public static int CURLOPT_CONNECT_ONLY() {
        return (int)141L;
    }
    public static int CURLOPT_CONV_FROM_NETWORK_FUNCTION() {
        return (int)20142L;
    }
    public static int CURLOPT_CONV_TO_NETWORK_FUNCTION() {
        return (int)20143L;
    }
    public static int CURLOPT_CONV_FROM_UTF8_FUNCTION() {
        return (int)20144L;
    }
    public static int CURLOPT_MAX_SEND_SPEED_LARGE() {
        return (int)30145L;
    }
    public static int CURLOPT_MAX_RECV_SPEED_LARGE() {
        return (int)30146L;
    }
    public static int CURLOPT_FTP_ALTERNATIVE_TO_USER() {
        return (int)10147L;
    }
    public static int CURLOPT_SOCKOPTFUNCTION() {
        return (int)20148L;
    }
    public static int CURLOPT_SOCKOPTDATA() {
        return (int)10149L;
    }
    public static int CURLOPT_SSL_SESSIONID_CACHE() {
        return (int)150L;
    }
    public static int CURLOPT_SSH_AUTH_TYPES() {
        return (int)151L;
    }
    public static int CURLOPT_SSH_PUBLIC_KEYFILE() {
        return (int)10152L;
    }
    public static int CURLOPT_SSH_PRIVATE_KEYFILE() {
        return (int)10153L;
    }
    public static int CURLOPT_FTP_SSL_CCC() {
        return (int)154L;
    }
    public static int CURLOPT_TIMEOUT_MS() {
        return (int)155L;
    }
    public static int CURLOPT_CONNECTTIMEOUT_MS() {
        return (int)156L;
    }
    public static int CURLOPT_HTTP_TRANSFER_DECODING() {
        return (int)157L;
    }
    public static int CURLOPT_HTTP_CONTENT_DECODING() {
        return (int)158L;
    }
    public static int CURLOPT_NEW_FILE_PERMS() {
        return (int)159L;
    }
    public static int CURLOPT_NEW_DIRECTORY_PERMS() {
        return (int)160L;
    }
    public static int CURLOPT_POSTREDIR() {
        return (int)161L;
    }
    public static int CURLOPT_SSH_HOST_PUBLIC_KEY_MD5() {
        return (int)10162L;
    }
    public static int CURLOPT_OPENSOCKETFUNCTION() {
        return (int)20163L;
    }
    public static int CURLOPT_OPENSOCKETDATA() {
        return (int)10164L;
    }
    public static int CURLOPT_COPYPOSTFIELDS() {
        return (int)10165L;
    }
    public static int CURLOPT_PROXY_TRANSFER_MODE() {
        return (int)166L;
    }
    public static int CURLOPT_SEEKFUNCTION() {
        return (int)20167L;
    }
    public static int CURLOPT_SEEKDATA() {
        return (int)10168L;
    }
    public static int CURLOPT_CRLFILE() {
        return (int)10169L;
    }
    public static int CURLOPT_ISSUERCERT() {
        return (int)10170L;
    }
    public static int CURLOPT_ADDRESS_SCOPE() {
        return (int)171L;
    }
    public static int CURLOPT_CERTINFO() {
        return (int)172L;
    }
    public static int CURLOPT_USERNAME() {
        return (int)10173L;
    }
    public static int CURLOPT_PASSWORD() {
        return (int)10174L;
    }
    public static int CURLOPT_PROXYUSERNAME() {
        return (int)10175L;
    }
    public static int CURLOPT_PROXYPASSWORD() {
        return (int)10176L;
    }
    public static int CURLOPT_NOPROXY() {
        return (int)10177L;
    }
    public static int CURLOPT_TFTP_BLKSIZE() {
        return (int)178L;
    }
    public static int CURLOPT_SOCKS5_GSSAPI_SERVICE() {
        return (int)10179L;
    }
    public static int CURLOPT_SOCKS5_GSSAPI_NEC() {
        return (int)180L;
    }
    public static int CURLOPT_PROTOCOLS() {
        return (int)181L;
    }
    public static int CURLOPT_REDIR_PROTOCOLS() {
        return (int)182L;
    }
    public static int CURLOPT_SSH_KNOWNHOSTS() {
        return (int)10183L;
    }
    public static int CURLOPT_SSH_KEYFUNCTION() {
        return (int)20184L;
    }
    public static int CURLOPT_SSH_KEYDATA() {
        return (int)10185L;
    }
    public static int CURLOPT_MAIL_FROM() {
        return (int)10186L;
    }
    public static int CURLOPT_MAIL_RCPT() {
        return (int)10187L;
    }
    public static int CURLOPT_FTP_USE_PRET() {
        return (int)188L;
    }
    public static int CURLOPT_RTSP_REQUEST() {
        return (int)189L;
    }
    public static int CURLOPT_RTSP_SESSION_ID() {
        return (int)10190L;
    }
    public static int CURLOPT_RTSP_STREAM_URI() {
        return (int)10191L;
    }
    public static int CURLOPT_RTSP_TRANSPORT() {
        return (int)10192L;
    }
    public static int CURLOPT_RTSP_CLIENT_CSEQ() {
        return (int)193L;
    }
    public static int CURLOPT_RTSP_SERVER_CSEQ() {
        return (int)194L;
    }
    public static int CURLOPT_INTERLEAVEDATA() {
        return (int)10195L;
    }
    public static int CURLOPT_INTERLEAVEFUNCTION() {
        return (int)20196L;
    }
    public static int CURLOPT_WILDCARDMATCH() {
        return (int)197L;
    }
    public static int CURLOPT_CHUNK_BGN_FUNCTION() {
        return (int)20198L;
    }
    public static int CURLOPT_CHUNK_END_FUNCTION() {
        return (int)20199L;
    }
    public static int CURLOPT_FNMATCH_FUNCTION() {
        return (int)20200L;
    }
    public static int CURLOPT_CHUNK_DATA() {
        return (int)10201L;
    }
    public static int CURLOPT_FNMATCH_DATA() {
        return (int)10202L;
    }
    public static int CURLOPT_RESOLVE() {
        return (int)10203L;
    }
    public static int CURLOPT_TLSAUTH_USERNAME() {
        return (int)10204L;
    }
    public static int CURLOPT_TLSAUTH_PASSWORD() {
        return (int)10205L;
    }
    public static int CURLOPT_TLSAUTH_TYPE() {
        return (int)10206L;
    }
    public static int CURLOPT_TRANSFER_ENCODING() {
        return (int)207L;
    }
    public static int CURLOPT_CLOSESOCKETFUNCTION() {
        return (int)20208L;
    }
    public static int CURLOPT_CLOSESOCKETDATA() {
        return (int)10209L;
    }
    public static int CURLOPT_GSSAPI_DELEGATION() {
        return (int)210L;
    }
    public static int CURLOPT_DNS_SERVERS() {
        return (int)10211L;
    }
    public static int CURLOPT_ACCEPTTIMEOUT_MS() {
        return (int)212L;
    }
    public static int CURLOPT_TCP_KEEPALIVE() {
        return (int)213L;
    }
    public static int CURLOPT_TCP_KEEPIDLE() {
        return (int)214L;
    }
    public static int CURLOPT_TCP_KEEPINTVL() {
        return (int)215L;
    }
    public static int CURLOPT_SSL_OPTIONS() {
        return (int)216L;
    }
    public static int CURLOPT_MAIL_AUTH() {
        return (int)10217L;
    }
    public static int CURLOPT_SASL_IR() {
        return (int)218L;
    }
    public static int CURLOPT_XFERINFOFUNCTION() {
        return (int)20219L;
    }
    public static int CURLOPT_XOAUTH2_BEARER() {
        return (int)10220L;
    }
    public static int CURLOPT_DNS_INTERFACE() {
        return (int)10221L;
    }
    public static int CURLOPT_DNS_LOCAL_IP4() {
        return (int)10222L;
    }
    public static int CURLOPT_DNS_LOCAL_IP6() {
        return (int)10223L;
    }
    public static int CURLOPT_LOGIN_OPTIONS() {
        return (int)10224L;
    }
    public static int CURLOPT_SSL_ENABLE_NPN() {
        return (int)225L;
    }
    public static int CURLOPT_SSL_ENABLE_ALPN() {
        return (int)226L;
    }
    public static int CURLOPT_EXPECT_100_TIMEOUT_MS() {
        return (int)227L;
    }
    public static int CURLOPT_PROXYHEADER() {
        return (int)10228L;
    }
    public static int CURLOPT_HEADEROPT() {
        return (int)229L;
    }
    public static int CURLOPT_PINNEDPUBLICKEY() {
        return (int)10230L;
    }
    public static int CURLOPT_UNIX_SOCKET_PATH() {
        return (int)10231L;
    }
    public static int CURLOPT_SSL_VERIFYSTATUS() {
        return (int)232L;
    }
    public static int CURLOPT_SSL_FALSESTART() {
        return (int)233L;
    }
    public static int CURLOPT_PATH_AS_IS() {
        return (int)234L;
    }
    public static int CURLOPT_PROXY_SERVICE_NAME() {
        return (int)10235L;
    }
    public static int CURLOPT_SERVICE_NAME() {
        return (int)10236L;
    }
    public static int CURLOPT_PIPEWAIT() {
        return (int)237L;
    }
    public static int CURLOPT_DEFAULT_PROTOCOL() {
        return (int)10238L;
    }
    public static int CURLOPT_STREAM_WEIGHT() {
        return (int)239L;
    }
    public static int CURLOPT_STREAM_DEPENDS() {
        return (int)10240L;
    }
    public static int CURLOPT_STREAM_DEPENDS_E() {
        return (int)10241L;
    }
    public static int CURLOPT_TFTP_NO_OPTIONS() {
        return (int)242L;
    }
    public static int CURLOPT_CONNECT_TO() {
        return (int)10243L;
    }
    public static int CURLOPT_TCP_FASTOPEN() {
        return (int)244L;
    }
    public static int CURLOPT_KEEP_SENDING_ON_ERROR() {
        return (int)245L;
    }
    public static int CURLOPT_PROXY_CAINFO() {
        return (int)10246L;
    }
    public static int CURLOPT_PROXY_CAPATH() {
        return (int)10247L;
    }
    public static int CURLOPT_PROXY_SSL_VERIFYPEER() {
        return (int)248L;
    }
    public static int CURLOPT_PROXY_SSL_VERIFYHOST() {
        return (int)249L;
    }
    public static int CURLOPT_PROXY_SSLVERSION() {
        return (int)250L;
    }
    public static int CURLOPT_PROXY_TLSAUTH_USERNAME() {
        return (int)10251L;
    }
    public static int CURLOPT_PROXY_TLSAUTH_PASSWORD() {
        return (int)10252L;
    }
    public static int CURLOPT_PROXY_TLSAUTH_TYPE() {
        return (int)10253L;
    }
    public static int CURLOPT_PROXY_SSLCERT() {
        return (int)10254L;
    }
    public static int CURLOPT_PROXY_SSLCERTTYPE() {
        return (int)10255L;
    }
    public static int CURLOPT_PROXY_SSLKEY() {
        return (int)10256L;
    }
    public static int CURLOPT_PROXY_SSLKEYTYPE() {
        return (int)10257L;
    }
    public static int CURLOPT_PROXY_KEYPASSWD() {
        return (int)10258L;
    }
    public static int CURLOPT_PROXY_SSL_CIPHER_LIST() {
        return (int)10259L;
    }
    public static int CURLOPT_PROXY_CRLFILE() {
        return (int)10260L;
    }
    public static int CURLOPT_PROXY_SSL_OPTIONS() {
        return (int)261L;
    }
    public static int CURLOPT_PRE_PROXY() {
        return (int)10262L;
    }
    public static int CURLOPT_PROXY_PINNEDPUBLICKEY() {
        return (int)10263L;
    }
    public static int CURLOPT_ABSTRACT_UNIX_SOCKET() {
        return (int)10264L;
    }
    public static int CURLOPT_SUPPRESS_CONNECT_HEADERS() {
        return (int)265L;
    }
    public static int CURLOPT_REQUEST_TARGET() {
        return (int)10266L;
    }
    public static int CURLOPT_SOCKS5_AUTH() {
        return (int)267L;
    }
    public static int CURLOPT_SSH_COMPRESSION() {
        return (int)268L;
    }
    public static int CURLOPT_MIMEPOST() {
        return (int)10269L;
    }
    public static int CURLOPT_TIMEVALUE_LARGE() {
        return (int)30270L;
    }
    public static int CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS() {
        return (int)271L;
    }
    public static int CURLOPT_RESOLVER_START_FUNCTION() {
        return (int)20272L;
    }
    public static int CURLOPT_RESOLVER_START_DATA() {
        return (int)10273L;
    }
    public static int CURLOPT_HAPROXYPROTOCOL() {
        return (int)274L;
    }
    public static int CURLOPT_DNS_SHUFFLE_ADDRESSES() {
        return (int)275L;
    }
    public static int CURLOPT_TLS13_CIPHERS() {
        return (int)10276L;
    }
    public static int CURLOPT_PROXY_TLS13_CIPHERS() {
        return (int)10277L;
    }
    public static int CURLOPT_DISALLOW_USERNAME_IN_URL() {
        return (int)278L;
    }
    public static int CURLOPT_DOH_URL() {
        return (int)10279L;
    }
    public static int CURLOPT_UPLOAD_BUFFERSIZE() {
        return (int)280L;
    }
    public static int CURLOPT_UPKEEP_INTERVAL_MS() {
        return (int)281L;
    }
    public static int CURLOPT_CURLU() {
        return (int)10282L;
    }
    public static int CURLOPT_TRAILERFUNCTION() {
        return (int)20283L;
    }
    public static int CURLOPT_TRAILERDATA() {
        return (int)10284L;
    }
    public static int CURLOPT_HTTP09_ALLOWED() {
        return (int)285L;
    }
    public static int CURLOPT_ALTSVC_CTRL() {
        return (int)286L;
    }
    public static int CURLOPT_ALTSVC() {
        return (int)10287L;
    }
    public static int CURLOPT_MAXAGE_CONN() {
        return (int)288L;
    }
    public static int CURLOPT_SASL_AUTHZID() {
        return (int)10289L;
    }
    public static int CURLOPT_MAIL_RCPT_ALLLOWFAILS() {
        return (int)290L;
    }
    public static int CURLOPT_SSLCERT_BLOB() {
        return (int)40291L;
    }
    public static int CURLOPT_SSLKEY_BLOB() {
        return (int)40292L;
    }
    public static int CURLOPT_PROXY_SSLCERT_BLOB() {
        return (int)40293L;
    }
    public static int CURLOPT_PROXY_SSLKEY_BLOB() {
        return (int)40294L;
    }
    public static int CURLOPT_ISSUERCERT_BLOB() {
        return (int)40295L;
    }
    public static int CURLOPT_PROXY_ISSUERCERT() {
        return (int)10296L;
    }
    public static int CURLOPT_PROXY_ISSUERCERT_BLOB() {
        return (int)40297L;
    }
    public static int CURLOPT_SSL_EC_CURVES() {
        return (int)10298L;
    }
    public static int CURLOPT_HSTS_CTRL() {
        return (int)299L;
    }
    public static int CURLOPT_HSTS() {
        return (int)10300L;
    }
    public static int CURLOPT_HSTSREADFUNCTION() {
        return (int)20301L;
    }
    public static int CURLOPT_HSTSREADDATA() {
        return (int)10302L;
    }
    public static int CURLOPT_HSTSWRITEFUNCTION() {
        return (int)20303L;
    }
    public static int CURLOPT_HSTSWRITEDATA() {
        return (int)10304L;
    }
    public static int CURLOPT_AWS_SIGV4() {
        return (int)10305L;
    }
    public static int CURLOPT_DOH_SSL_VERIFYPEER() {
        return (int)306L;
    }
}


