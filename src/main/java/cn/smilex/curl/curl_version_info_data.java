// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class curl_version_info_data {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("age"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("version"),
        Constants$root.C_LONG$LAYOUT.withName("version_num"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("host"),
        Constants$root.C_LONG$LAYOUT.withName("features"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("ssl_version"),
        Constants$root.C_LONG$LAYOUT.withName("ssl_version_num"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("libz_version"),
        Constants$root.C_POINTER$LAYOUT.withName("protocols"),
        Constants$root.C_POINTER$LAYOUT.withName("ares"),
        Constants$root.C_LONG$LAYOUT.withName("ares_num"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("libidn"),
        Constants$root.C_LONG$LAYOUT.withName("iconv_ver_num"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("libssh_version"),
        Constants$root.C_LONG$LAYOUT.withName("brotli_ver_num"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("brotli_version"),
        Constants$root.C_LONG$LAYOUT.withName("nghttp2_ver_num"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("nghttp2_version"),
        Constants$root.C_POINTER$LAYOUT.withName("quic_version"),
        Constants$root.C_POINTER$LAYOUT.withName("cainfo"),
        Constants$root.C_POINTER$LAYOUT.withName("capath"),
        Constants$root.C_LONG$LAYOUT.withName("zstd_ver_num"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("zstd_version"),
        Constants$root.C_POINTER$LAYOUT.withName("hyper_version"),
        Constants$root.C_POINTER$LAYOUT.withName("gsasl_version")
    ).withName("curl_version_info_data");
    public static MemoryLayout $LAYOUT() {
        return curl_version_info_data.$struct$LAYOUT;
    }
    static final VarHandle age$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("age"));
    public static VarHandle age$VH() {
        return curl_version_info_data.age$VH;
    }
    public static int age$get(MemorySegment seg) {
        return (int)curl_version_info_data.age$VH.get(seg);
    }
    public static void age$set( MemorySegment seg, int x) {
        curl_version_info_data.age$VH.set(seg, x);
    }
    public static int age$get(MemorySegment seg, long index) {
        return (int)curl_version_info_data.age$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void age$set(MemorySegment seg, long index, int x) {
        curl_version_info_data.age$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
    public static VarHandle version$VH() {
        return curl_version_info_data.version$VH;
    }
    public static MemoryAddress version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.version$VH.get(seg);
    }
    public static void version$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.version$VH.set(seg, x);
    }
    public static MemoryAddress version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle version_num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version_num"));
    public static VarHandle version_num$VH() {
        return curl_version_info_data.version_num$VH;
    }
    public static int version_num$get(MemorySegment seg) {
        return (int)curl_version_info_data.version_num$VH.get(seg);
    }
    public static void version_num$set( MemorySegment seg, int x) {
        curl_version_info_data.version_num$VH.set(seg, x);
    }
    public static int version_num$get(MemorySegment seg, long index) {
        return (int)curl_version_info_data.version_num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void version_num$set(MemorySegment seg, long index, int x) {
        curl_version_info_data.version_num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle host$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("host"));
    public static VarHandle host$VH() {
        return curl_version_info_data.host$VH;
    }
    public static MemoryAddress host$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.host$VH.get(seg);
    }
    public static void host$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.host$VH.set(seg, x);
    }
    public static MemoryAddress host$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.host$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void host$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.host$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle features$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("features"));
    public static VarHandle features$VH() {
        return curl_version_info_data.features$VH;
    }
    public static int features$get(MemorySegment seg) {
        return (int)curl_version_info_data.features$VH.get(seg);
    }
    public static void features$set( MemorySegment seg, int x) {
        curl_version_info_data.features$VH.set(seg, x);
    }
    public static int features$get(MemorySegment seg, long index) {
        return (int)curl_version_info_data.features$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void features$set(MemorySegment seg, long index, int x) {
        curl_version_info_data.features$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ssl_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ssl_version"));
    public static VarHandle ssl_version$VH() {
        return curl_version_info_data.ssl_version$VH;
    }
    public static MemoryAddress ssl_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.ssl_version$VH.get(seg);
    }
    public static void ssl_version$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.ssl_version$VH.set(seg, x);
    }
    public static MemoryAddress ssl_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.ssl_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ssl_version$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.ssl_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ssl_version_num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ssl_version_num"));
    public static VarHandle ssl_version_num$VH() {
        return curl_version_info_data.ssl_version_num$VH;
    }
    public static int ssl_version_num$get(MemorySegment seg) {
        return (int)curl_version_info_data.ssl_version_num$VH.get(seg);
    }
    public static void ssl_version_num$set( MemorySegment seg, int x) {
        curl_version_info_data.ssl_version_num$VH.set(seg, x);
    }
    public static int ssl_version_num$get(MemorySegment seg, long index) {
        return (int)curl_version_info_data.ssl_version_num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ssl_version_num$set(MemorySegment seg, long index, int x) {
        curl_version_info_data.ssl_version_num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle libz_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("libz_version"));
    public static VarHandle libz_version$VH() {
        return curl_version_info_data.libz_version$VH;
    }
    public static MemoryAddress libz_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.libz_version$VH.get(seg);
    }
    public static void libz_version$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.libz_version$VH.set(seg, x);
    }
    public static MemoryAddress libz_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.libz_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void libz_version$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.libz_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle protocols$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("protocols"));
    public static VarHandle protocols$VH() {
        return curl_version_info_data.protocols$VH;
    }
    public static MemoryAddress protocols$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.protocols$VH.get(seg);
    }
    public static void protocols$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.protocols$VH.set(seg, x);
    }
    public static MemoryAddress protocols$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.protocols$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void protocols$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.protocols$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ares$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ares"));
    public static VarHandle ares$VH() {
        return curl_version_info_data.ares$VH;
    }
    public static MemoryAddress ares$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.ares$VH.get(seg);
    }
    public static void ares$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.ares$VH.set(seg, x);
    }
    public static MemoryAddress ares$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.ares$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ares$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.ares$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ares_num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ares_num"));
    public static VarHandle ares_num$VH() {
        return curl_version_info_data.ares_num$VH;
    }
    public static int ares_num$get(MemorySegment seg) {
        return (int)curl_version_info_data.ares_num$VH.get(seg);
    }
    public static void ares_num$set( MemorySegment seg, int x) {
        curl_version_info_data.ares_num$VH.set(seg, x);
    }
    public static int ares_num$get(MemorySegment seg, long index) {
        return (int)curl_version_info_data.ares_num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ares_num$set(MemorySegment seg, long index, int x) {
        curl_version_info_data.ares_num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle libidn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("libidn"));
    public static VarHandle libidn$VH() {
        return curl_version_info_data.libidn$VH;
    }
    public static MemoryAddress libidn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.libidn$VH.get(seg);
    }
    public static void libidn$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.libidn$VH.set(seg, x);
    }
    public static MemoryAddress libidn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.libidn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void libidn$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.libidn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iconv_ver_num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iconv_ver_num"));
    public static VarHandle iconv_ver_num$VH() {
        return curl_version_info_data.iconv_ver_num$VH;
    }
    public static int iconv_ver_num$get(MemorySegment seg) {
        return (int)curl_version_info_data.iconv_ver_num$VH.get(seg);
    }
    public static void iconv_ver_num$set( MemorySegment seg, int x) {
        curl_version_info_data.iconv_ver_num$VH.set(seg, x);
    }
    public static int iconv_ver_num$get(MemorySegment seg, long index) {
        return (int)curl_version_info_data.iconv_ver_num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iconv_ver_num$set(MemorySegment seg, long index, int x) {
        curl_version_info_data.iconv_ver_num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle libssh_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("libssh_version"));
    public static VarHandle libssh_version$VH() {
        return curl_version_info_data.libssh_version$VH;
    }
    public static MemoryAddress libssh_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.libssh_version$VH.get(seg);
    }
    public static void libssh_version$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.libssh_version$VH.set(seg, x);
    }
    public static MemoryAddress libssh_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.libssh_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void libssh_version$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.libssh_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle brotli_ver_num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("brotli_ver_num"));
    public static VarHandle brotli_ver_num$VH() {
        return curl_version_info_data.brotli_ver_num$VH;
    }
    public static int brotli_ver_num$get(MemorySegment seg) {
        return (int)curl_version_info_data.brotli_ver_num$VH.get(seg);
    }
    public static void brotli_ver_num$set( MemorySegment seg, int x) {
        curl_version_info_data.brotli_ver_num$VH.set(seg, x);
    }
    public static int brotli_ver_num$get(MemorySegment seg, long index) {
        return (int)curl_version_info_data.brotli_ver_num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void brotli_ver_num$set(MemorySegment seg, long index, int x) {
        curl_version_info_data.brotli_ver_num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle brotli_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("brotli_version"));
    public static VarHandle brotli_version$VH() {
        return curl_version_info_data.brotli_version$VH;
    }
    public static MemoryAddress brotli_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.brotli_version$VH.get(seg);
    }
    public static void brotli_version$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.brotli_version$VH.set(seg, x);
    }
    public static MemoryAddress brotli_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.brotli_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void brotli_version$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.brotli_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nghttp2_ver_num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nghttp2_ver_num"));
    public static VarHandle nghttp2_ver_num$VH() {
        return curl_version_info_data.nghttp2_ver_num$VH;
    }
    public static int nghttp2_ver_num$get(MemorySegment seg) {
        return (int)curl_version_info_data.nghttp2_ver_num$VH.get(seg);
    }
    public static void nghttp2_ver_num$set( MemorySegment seg, int x) {
        curl_version_info_data.nghttp2_ver_num$VH.set(seg, x);
    }
    public static int nghttp2_ver_num$get(MemorySegment seg, long index) {
        return (int)curl_version_info_data.nghttp2_ver_num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nghttp2_ver_num$set(MemorySegment seg, long index, int x) {
        curl_version_info_data.nghttp2_ver_num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nghttp2_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nghttp2_version"));
    public static VarHandle nghttp2_version$VH() {
        return curl_version_info_data.nghttp2_version$VH;
    }
    public static MemoryAddress nghttp2_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.nghttp2_version$VH.get(seg);
    }
    public static void nghttp2_version$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.nghttp2_version$VH.set(seg, x);
    }
    public static MemoryAddress nghttp2_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.nghttp2_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nghttp2_version$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.nghttp2_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle quic_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("quic_version"));
    public static VarHandle quic_version$VH() {
        return curl_version_info_data.quic_version$VH;
    }
    public static MemoryAddress quic_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.quic_version$VH.get(seg);
    }
    public static void quic_version$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.quic_version$VH.set(seg, x);
    }
    public static MemoryAddress quic_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.quic_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void quic_version$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.quic_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cainfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cainfo"));
    public static VarHandle cainfo$VH() {
        return curl_version_info_data.cainfo$VH;
    }
    public static MemoryAddress cainfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.cainfo$VH.get(seg);
    }
    public static void cainfo$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.cainfo$VH.set(seg, x);
    }
    public static MemoryAddress cainfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.cainfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cainfo$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.cainfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle capath$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("capath"));
    public static VarHandle capath$VH() {
        return curl_version_info_data.capath$VH;
    }
    public static MemoryAddress capath$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.capath$VH.get(seg);
    }
    public static void capath$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.capath$VH.set(seg, x);
    }
    public static MemoryAddress capath$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.capath$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void capath$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.capath$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle zstd_ver_num$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("zstd_ver_num"));
    public static VarHandle zstd_ver_num$VH() {
        return curl_version_info_data.zstd_ver_num$VH;
    }
    public static int zstd_ver_num$get(MemorySegment seg) {
        return (int)curl_version_info_data.zstd_ver_num$VH.get(seg);
    }
    public static void zstd_ver_num$set( MemorySegment seg, int x) {
        curl_version_info_data.zstd_ver_num$VH.set(seg, x);
    }
    public static int zstd_ver_num$get(MemorySegment seg, long index) {
        return (int)curl_version_info_data.zstd_ver_num$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void zstd_ver_num$set(MemorySegment seg, long index, int x) {
        curl_version_info_data.zstd_ver_num$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle zstd_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("zstd_version"));
    public static VarHandle zstd_version$VH() {
        return curl_version_info_data.zstd_version$VH;
    }
    public static MemoryAddress zstd_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.zstd_version$VH.get(seg);
    }
    public static void zstd_version$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.zstd_version$VH.set(seg, x);
    }
    public static MemoryAddress zstd_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.zstd_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void zstd_version$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.zstd_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hyper_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hyper_version"));
    public static VarHandle hyper_version$VH() {
        return curl_version_info_data.hyper_version$VH;
    }
    public static MemoryAddress hyper_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.hyper_version$VH.get(seg);
    }
    public static void hyper_version$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.hyper_version$VH.set(seg, x);
    }
    public static MemoryAddress hyper_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.hyper_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hyper_version$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.hyper_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gsasl_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gsasl_version"));
    public static VarHandle gsasl_version$VH() {
        return curl_version_info_data.gsasl_version$VH;
    }
    public static MemoryAddress gsasl_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.gsasl_version$VH.get(seg);
    }
    public static void gsasl_version$set( MemorySegment seg, MemoryAddress x) {
        curl_version_info_data.gsasl_version$VH.set(seg, x);
    }
    public static MemoryAddress gsasl_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_version_info_data.gsasl_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gsasl_version$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_version_info_data.gsasl_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


