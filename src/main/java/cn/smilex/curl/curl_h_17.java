// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class curl_h_17 extends curl_h_16 {

    public static MethodHandle PolyDraw$MH() {
        return RuntimeHelper.requireNonNull(constants$453.PolyDraw$MH,"PolyDraw");
    }
    public static int PolyDraw ( Addressable hdc,  Addressable apt,  Addressable aj,  int cpt) {
        var mh$ = PolyDraw$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, aj, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectClipPath$MH() {
        return RuntimeHelper.requireNonNull(constants$453.SelectClipPath$MH,"SelectClipPath");
    }
    public static int SelectClipPath ( Addressable hdc,  int mode) {
        var mh$ = SelectClipPath$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetArcDirection$MH() {
        return RuntimeHelper.requireNonNull(constants$453.SetArcDirection$MH,"SetArcDirection");
    }
    public static int SetArcDirection ( Addressable hdc,  int dir) {
        var mh$ = SetArcDirection$MH();
        try {
            return (int)mh$.invokeExact(hdc, dir);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMiterLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$454.SetMiterLimit$MH,"SetMiterLimit");
    }
    public static int SetMiterLimit ( Addressable hdc,  float limit,  Addressable old) {
        var mh$ = SetMiterLimit$MH();
        try {
            return (int)mh$.invokeExact(hdc, limit, old);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StrokeAndFillPath$MH() {
        return RuntimeHelper.requireNonNull(constants$454.StrokeAndFillPath$MH,"StrokeAndFillPath");
    }
    public static int StrokeAndFillPath ( Addressable hdc) {
        var mh$ = StrokeAndFillPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StrokePath$MH() {
        return RuntimeHelper.requireNonNull(constants$454.StrokePath$MH,"StrokePath");
    }
    public static int StrokePath ( Addressable hdc) {
        var mh$ = StrokePath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WidenPath$MH() {
        return RuntimeHelper.requireNonNull(constants$454.WidenPath$MH,"WidenPath");
    }
    public static int WidenPath ( Addressable hdc) {
        var mh$ = WidenPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtCreatePen$MH() {
        return RuntimeHelper.requireNonNull(constants$454.ExtCreatePen$MH,"ExtCreatePen");
    }
    public static MemoryAddress ExtCreatePen ( int iPenStyle,  int cWidth,  Addressable plbrush,  int cStyle,  Addressable pstyle) {
        var mh$ = ExtCreatePen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iPenStyle, cWidth, plbrush, cStyle, pstyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMiterLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$454.GetMiterLimit$MH,"GetMiterLimit");
    }
    public static int GetMiterLimit ( Addressable hdc,  Addressable plimit) {
        var mh$ = GetMiterLimit$MH();
        try {
            return (int)mh$.invokeExact(hdc, plimit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetArcDirection$MH() {
        return RuntimeHelper.requireNonNull(constants$455.GetArcDirection$MH,"GetArcDirection");
    }
    public static int GetArcDirection ( Addressable hdc) {
        var mh$ = GetArcDirection$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectA$MH() {
        return RuntimeHelper.requireNonNull(constants$455.GetObjectA$MH,"GetObjectA");
    }
    public static int GetObjectA ( Addressable h,  int c,  Addressable pv) {
        var mh$ = GetObjectA$MH();
        try {
            return (int)mh$.invokeExact(h, c, pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectW$MH() {
        return RuntimeHelper.requireNonNull(constants$455.GetObjectW$MH,"GetObjectW");
    }
    public static int GetObjectW ( Addressable h,  int c,  Addressable pv) {
        var mh$ = GetObjectW$MH();
        try {
            return (int)mh$.invokeExact(h, c, pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveToEx$MH() {
        return RuntimeHelper.requireNonNull(constants$455.MoveToEx$MH,"MoveToEx");
    }
    public static int MoveToEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = MoveToEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$455.TextOutA$MH,"TextOutA");
    }
    public static int TextOutA ( Addressable hdc,  int x,  int y,  Addressable lpString,  int c) {
        var mh$ = TextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$455.TextOutW$MH,"TextOutW");
    }
    public static int TextOutW ( Addressable hdc,  int x,  int y,  Addressable lpString,  int c) {
        var mh$ = TextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$456.ExtTextOutA$MH,"ExtTextOutA");
    }
    public static int ExtTextOutA ( Addressable hdc,  int x,  int y,  int options,  Addressable lprect,  Addressable lpString,  int c,  Addressable lpDx) {
        var mh$ = ExtTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, options, lprect, lpString, c, lpDx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$456.ExtTextOutW$MH,"ExtTextOutW");
    }
    public static int ExtTextOutW ( Addressable hdc,  int x,  int y,  int options,  Addressable lprect,  Addressable lpString,  int c,  Addressable lpDx) {
        var mh$ = ExtTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, options, lprect, lpString, c, lpDx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$456.PolyTextOutA$MH,"PolyTextOutA");
    }
    public static int PolyTextOutA ( Addressable hdc,  Addressable ppt,  int nstrings) {
        var mh$ = PolyTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppt, nstrings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$456.PolyTextOutW$MH,"PolyTextOutW");
    }
    public static int PolyTextOutW ( Addressable hdc,  Addressable ppt,  int nstrings) {
        var mh$ = PolyTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppt, nstrings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePolygonRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$456.CreatePolygonRgn$MH,"CreatePolygonRgn");
    }
    public static MemoryAddress CreatePolygonRgn ( Addressable pptl,  int cPoint,  int iMode) {
        var mh$ = CreatePolygonRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pptl, cPoint, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DPtoLP$MH() {
        return RuntimeHelper.requireNonNull(constants$456.DPtoLP$MH,"DPtoLP");
    }
    public static int DPtoLP ( Addressable hdc,  Addressable lppt,  int c) {
        var mh$ = DPtoLP$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LPtoDP$MH() {
        return RuntimeHelper.requireNonNull(constants$457.LPtoDP$MH,"LPtoDP");
    }
    public static int LPtoDP ( Addressable hdc,  Addressable lppt,  int c) {
        var mh$ = LPtoDP$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Polygon$MH() {
        return RuntimeHelper.requireNonNull(constants$457.Polygon$MH,"Polygon");
    }
    public static int Polygon ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = Polygon$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Polyline$MH() {
        return RuntimeHelper.requireNonNull(constants$457.Polyline$MH,"Polyline");
    }
    public static int Polyline ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = Polyline$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyBezier$MH() {
        return RuntimeHelper.requireNonNull(constants$457.PolyBezier$MH,"PolyBezier");
    }
    public static int PolyBezier ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = PolyBezier$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyBezierTo$MH() {
        return RuntimeHelper.requireNonNull(constants$457.PolyBezierTo$MH,"PolyBezierTo");
    }
    public static int PolyBezierTo ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = PolyBezierTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolylineTo$MH() {
        return RuntimeHelper.requireNonNull(constants$457.PolylineTo$MH,"PolylineTo");
    }
    public static int PolylineTo ( Addressable hdc,  Addressable apt,  int cpt) {
        var mh$ = PolylineTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$458.SetViewportExtEx$MH,"SetViewportExtEx");
    }
    public static int SetViewportExtEx ( Addressable hdc,  int x,  int y,  Addressable lpsz) {
        var mh$ = SetViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$458.SetViewportOrgEx$MH,"SetViewportOrgEx");
    }
    public static int SetViewportOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = SetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$458.SetWindowExtEx$MH,"SetWindowExtEx");
    }
    public static int SetWindowExtEx ( Addressable hdc,  int x,  int y,  Addressable lpsz) {
        var mh$ = SetWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$458.SetWindowOrgEx$MH,"SetWindowOrgEx");
    }
    public static int SetWindowOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = SetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$458.OffsetViewportOrgEx$MH,"OffsetViewportOrgEx");
    }
    public static int OffsetViewportOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = OffsetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$458.OffsetWindowOrgEx$MH,"OffsetWindowOrgEx");
    }
    public static int OffsetWindowOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = OffsetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScaleViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$459.ScaleViewportExtEx$MH,"ScaleViewportExtEx");
    }
    public static int ScaleViewportExtEx ( Addressable hdc,  int xn,  int dx,  int yn,  int yd,  Addressable lpsz) {
        var mh$ = ScaleViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, xn, dx, yn, yd, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScaleWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$459.ScaleWindowExtEx$MH,"ScaleWindowExtEx");
    }
    public static int ScaleWindowExtEx ( Addressable hdc,  int xn,  int xd,  int yn,  int yd,  Addressable lpsz) {
        var mh$ = ScaleWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, xn, xd, yn, yd, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBitmapDimensionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$459.SetBitmapDimensionEx$MH,"SetBitmapDimensionEx");
    }
    public static int SetBitmapDimensionEx ( Addressable hbm,  int w,  int h,  Addressable lpsz) {
        var mh$ = SetBitmapDimensionEx$MH();
        try {
            return (int)mh$.invokeExact(hbm, w, h, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$459.SetBrushOrgEx$MH,"SetBrushOrgEx");
    }
    public static int SetBrushOrgEx ( Addressable hdc,  int x,  int y,  Addressable lppt) {
        var mh$ = SetBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextFaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$459.GetTextFaceA$MH,"GetTextFaceA");
    }
    public static int GetTextFaceA ( Addressable hdc,  int c,  Addressable lpName) {
        var mh$ = GetTextFaceA$MH();
        try {
            return (int)mh$.invokeExact(hdc, c, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextFaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$459.GetTextFaceW$MH,"GetTextFaceW");
    }
    public static int GetTextFaceW ( Addressable hdc,  int c,  Addressable lpName) {
        var mh$ = GetTextFaceW$MH();
        try {
            return (int)mh$.invokeExact(hdc, c, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPKERNINGPAIR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetKerningPairsA$MH() {
        return RuntimeHelper.requireNonNull(constants$460.GetKerningPairsA$MH,"GetKerningPairsA");
    }
    public static int GetKerningPairsA ( Addressable hdc,  int nPairs,  Addressable lpKernPair) {
        var mh$ = GetKerningPairsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, nPairs, lpKernPair);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKerningPairsW$MH() {
        return RuntimeHelper.requireNonNull(constants$460.GetKerningPairsW$MH,"GetKerningPairsW");
    }
    public static int GetKerningPairsW ( Addressable hdc,  int nPairs,  Addressable lpKernPair) {
        var mh$ = GetKerningPairsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, nPairs, lpKernPair);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$460.GetDCOrgEx$MH,"GetDCOrgEx");
    }
    public static int GetDCOrgEx ( Addressable hdc,  Addressable lppt) {
        var mh$ = GetDCOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FixBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$460.FixBrushOrgEx$MH,"FixBrushOrgEx");
    }
    public static int FixBrushOrgEx ( Addressable hdc,  int x,  int y,  Addressable ptl) {
        var mh$ = FixBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, ptl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnrealizeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$460.UnrealizeObject$MH,"UnrealizeObject");
    }
    public static int UnrealizeObject ( Addressable h) {
        var mh$ = UnrealizeObject$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$460.GdiFlush$MH,"GdiFlush");
    }
    public static int GdiFlush () {
        var mh$ = GdiFlush$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiSetBatchLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$461.GdiSetBatchLimit$MH,"GdiSetBatchLimit");
    }
    public static int GdiSetBatchLimit ( int dw) {
        var mh$ = GdiSetBatchLimit$MH();
        try {
            return (int)mh$.invokeExact(dw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiGetBatchLimit$MH() {
        return RuntimeHelper.requireNonNull(constants$461.GdiGetBatchLimit$MH,"GdiGetBatchLimit");
    }
    public static int GdiGetBatchLimit () {
        var mh$ = GdiGetBatchLimit$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMMode$MH() {
        return RuntimeHelper.requireNonNull(constants$462.SetICMMode$MH,"SetICMMode");
    }
    public static int SetICMMode ( Addressable hdc,  int mode) {
        var mh$ = SetICMMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckColorsInGamut$MH() {
        return RuntimeHelper.requireNonNull(constants$462.CheckColorsInGamut$MH,"CheckColorsInGamut");
    }
    public static int CheckColorsInGamut ( Addressable hdc,  Addressable lpRGBTriple,  Addressable dlpBuffer,  int nCount) {
        var mh$ = CheckColorsInGamut$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRGBTriple, dlpBuffer, nCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$462.GetColorSpace$MH,"GetColorSpace");
    }
    public static MemoryAddress GetColorSpace ( Addressable hdc) {
        var mh$ = GetColorSpace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogColorSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$462.GetLogColorSpaceA$MH,"GetLogColorSpaceA");
    }
    public static int GetLogColorSpaceA ( Addressable hColorSpace,  Addressable lpBuffer,  int nSize) {
        var mh$ = GetLogColorSpaceA$MH();
        try {
            return (int)mh$.invokeExact(hColorSpace, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogColorSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$462.GetLogColorSpaceW$MH,"GetLogColorSpaceW");
    }
    public static int GetLogColorSpaceW ( Addressable hColorSpace,  Addressable lpBuffer,  int nSize) {
        var mh$ = GetLogColorSpaceW$MH();
        try {
            return (int)mh$.invokeExact(hColorSpace, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateColorSpaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$462.CreateColorSpaceA$MH,"CreateColorSpaceA");
    }
    public static MemoryAddress CreateColorSpaceA ( Addressable lplcs) {
        var mh$ = CreateColorSpaceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lplcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateColorSpaceW$MH() {
        return RuntimeHelper.requireNonNull(constants$463.CreateColorSpaceW$MH,"CreateColorSpaceW");
    }
    public static MemoryAddress CreateColorSpaceW ( Addressable lplcs) {
        var mh$ = CreateColorSpaceW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lplcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$463.SetColorSpace$MH,"SetColorSpace");
    }
    public static MemoryAddress SetColorSpace ( Addressable hdc,  Addressable hcs) {
        var mh$ = SetColorSpace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, hcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteColorSpace$MH() {
        return RuntimeHelper.requireNonNull(constants$463.DeleteColorSpace$MH,"DeleteColorSpace");
    }
    public static int DeleteColorSpace ( Addressable hcs) {
        var mh$ = DeleteColorSpace$MH();
        try {
            return (int)mh$.invokeExact(hcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetICMProfileA$MH() {
        return RuntimeHelper.requireNonNull(constants$463.GetICMProfileA$MH,"GetICMProfileA");
    }
    public static int GetICMProfileA ( Addressable hdc,  Addressable pBufSize,  Addressable pszFilename) {
        var mh$ = GetICMProfileA$MH();
        try {
            return (int)mh$.invokeExact(hdc, pBufSize, pszFilename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetICMProfileW$MH() {
        return RuntimeHelper.requireNonNull(constants$463.GetICMProfileW$MH,"GetICMProfileW");
    }
    public static int GetICMProfileW ( Addressable hdc,  Addressable pBufSize,  Addressable pszFilename) {
        var mh$ = GetICMProfileW$MH();
        try {
            return (int)mh$.invokeExact(hdc, pBufSize, pszFilename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMProfileA$MH() {
        return RuntimeHelper.requireNonNull(constants$463.SetICMProfileA$MH,"SetICMProfileA");
    }
    public static int SetICMProfileA ( Addressable hdc,  Addressable lpFileName) {
        var mh$ = SetICMProfileA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetICMProfileW$MH() {
        return RuntimeHelper.requireNonNull(constants$464.SetICMProfileW$MH,"SetICMProfileW");
    }
    public static int SetICMProfileW ( Addressable hdc,  Addressable lpFileName) {
        var mh$ = SetICMProfileW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDeviceGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$464.GetDeviceGammaRamp$MH,"GetDeviceGammaRamp");
    }
    public static int GetDeviceGammaRamp ( Addressable hdc,  Addressable lpRamp) {
        var mh$ = GetDeviceGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDeviceGammaRamp$MH() {
        return RuntimeHelper.requireNonNull(constants$464.SetDeviceGammaRamp$MH,"SetDeviceGammaRamp");
    }
    public static int SetDeviceGammaRamp ( Addressable hdc,  Addressable lpRamp) {
        var mh$ = SetDeviceGammaRamp$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpRamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorMatchToTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$464.ColorMatchToTarget$MH,"ColorMatchToTarget");
    }
    public static int ColorMatchToTarget ( Addressable hdc,  Addressable hdcTarget,  int action) {
        var mh$ = ColorMatchToTarget$MH();
        try {
            return (int)mh$.invokeExact(hdc, hdcTarget, action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumICMProfilesA$MH() {
        return RuntimeHelper.requireNonNull(constants$464.EnumICMProfilesA$MH,"EnumICMProfilesA");
    }
    public static int EnumICMProfilesA ( Addressable hdc,  Addressable proc,  long param) {
        var mh$ = EnumICMProfilesA$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumICMProfilesW$MH() {
        return RuntimeHelper.requireNonNull(constants$464.EnumICMProfilesW$MH,"EnumICMProfilesW");
    }
    public static int EnumICMProfilesW ( Addressable hdc,  Addressable proc,  long param) {
        var mh$ = EnumICMProfilesW$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateICMRegKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$465.UpdateICMRegKeyA$MH,"UpdateICMRegKeyA");
    }
    public static int UpdateICMRegKeyA ( int reserved,  Addressable lpszCMID,  Addressable lpszFileName,  int command) {
        var mh$ = UpdateICMRegKeyA$MH();
        try {
            return (int)mh$.invokeExact(reserved, lpszCMID, lpszFileName, command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateICMRegKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$465.UpdateICMRegKeyW$MH,"UpdateICMRegKeyW");
    }
    public static int UpdateICMRegKeyW ( int reserved,  Addressable lpszCMID,  Addressable lpszFileName,  int command) {
        var mh$ = UpdateICMRegKeyW$MH();
        try {
            return (int)mh$.invokeExact(reserved, lpszCMID, lpszFileName, command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ColorCorrectPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$465.ColorCorrectPalette$MH,"ColorCorrectPalette");
    }
    public static int ColorCorrectPalette ( Addressable hdc,  Addressable hPal,  int deFirst,  int num) {
        var mh$ = ColorCorrectPalette$MH();
        try {
            return (int)mh$.invokeExact(hdc, hPal, deFirst, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PEMR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRABORTPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRBEGINPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRENDPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCLOSEFIGURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFLATTENPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRWIDENPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMETARGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSAVEDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRREALIZEPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTCLIPPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETBKMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMAPMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETLAYOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETPOLYFILLMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETROP2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETSTRETCHBLTMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETTEXTALIGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMITERLIMIT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRRESTOREDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETARCDIRECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETMAPPERFLAGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETBKCOLOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETTEXTCOLOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTOBJECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRDELETEOBJECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRRESIZEPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETPALETTEENTRIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETCOLORADJUSTMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGDICOMMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREOF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRLINETO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRMOVETOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMROFFSETCLIPRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFILLPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTROKEANDFILLPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTROKEPATH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXCLUDECLIPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRINTERSECTCLIPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETVIEWPORTORGEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETWINDOWORGEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETBRUSHORGEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETVIEWPORTEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETWINDOWEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSCALEVIEWPORTEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSCALEWINDOWEXTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETWORLDTRANSFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRMODIFYWORLDTRANSFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETPIXELV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTFLOODFILL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRELLIPSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRRECTANGLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRROUNDRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRARC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRARCTO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCHORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPIE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRANGLEARC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYGON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIERTO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINETO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINE16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIER16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYGON16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYBEZIERTO16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYLINETO16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYDRAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYDRAW16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYLINE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYGON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYLINE16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYPOLYGON16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRINVERTRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPAINTRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFILLRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFRAMERGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTSELECTCLIPRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTTEXTOUTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTTEXTOUTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYTEXTOUTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPOLYTEXTOUTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRBITBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTRETCHBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRMASKBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPLGBLT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETDIBITSTODEVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSTRETCHDIBITS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTCREATEFONTINDIRECTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTCREATEPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEBRUSHINDIRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEMONOBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATEDIBPATTERNBRUSHPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGLSRECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGLSBOUNDEDRECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRPIXELFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATECOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETCOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSELECTCOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRDELETECOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMREXTESCAPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRDRAWESCAPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRNAMEDESCAPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMPROFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMPROFILEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRSETICMPROFILEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCREATECOLORSPACEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCOLORMATCHTOTARGET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRCOLORCORRECTPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRALPHABLEND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRGRADIENTFILL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEMRTRANSPARENTBLT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglCopyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$465.wglCopyContext$MH,"wglCopyContext");
    }
    public static int wglCopyContext ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = wglCopyContext$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$465.wglCreateContext$MH,"wglCreateContext");
    }
    public static MemoryAddress wglCreateContext ( Addressable x0) {
        var mh$ = wglCreateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglCreateLayerContext$MH() {
        return RuntimeHelper.requireNonNull(constants$465.wglCreateLayerContext$MH,"wglCreateLayerContext");
    }
    public static MemoryAddress wglCreateLayerContext ( Addressable x0,  int x1) {
        var mh$ = wglCreateLayerContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$466.wglDeleteContext$MH,"wglDeleteContext");
    }
    public static int wglDeleteContext ( Addressable x0) {
        var mh$ = wglDeleteContext$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetCurrentContext$MH() {
        return RuntimeHelper.requireNonNull(constants$466.wglGetCurrentContext$MH,"wglGetCurrentContext");
    }
    public static MemoryAddress wglGetCurrentContext () {
        var mh$ = wglGetCurrentContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetCurrentDC$MH() {
        return RuntimeHelper.requireNonNull(constants$466.wglGetCurrentDC$MH,"wglGetCurrentDC");
    }
    public static MemoryAddress wglGetCurrentDC () {
        var mh$ = wglGetCurrentDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$466.wglGetProcAddress$MH,"wglGetProcAddress");
    }
    public static MemoryAddress wglGetProcAddress ( Addressable x0) {
        var mh$ = wglGetProcAddress$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglMakeCurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$466.wglMakeCurrent$MH,"wglMakeCurrent");
    }
    public static int wglMakeCurrent ( Addressable x0,  Addressable x1) {
        var mh$ = wglMakeCurrent$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglShareLists$MH() {
        return RuntimeHelper.requireNonNull(constants$466.wglShareLists$MH,"wglShareLists");
    }
    public static int wglShareLists ( Addressable x0,  Addressable x1) {
        var mh$ = wglShareLists$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontBitmapsA$MH() {
        return RuntimeHelper.requireNonNull(constants$467.wglUseFontBitmapsA$MH,"wglUseFontBitmapsA");
    }
    public static int wglUseFontBitmapsA ( Addressable x0,  int x1,  int x2,  int x3) {
        var mh$ = wglUseFontBitmapsA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontBitmapsW$MH() {
        return RuntimeHelper.requireNonNull(constants$467.wglUseFontBitmapsW$MH,"wglUseFontBitmapsW");
    }
    public static int wglUseFontBitmapsW ( Addressable x0,  int x1,  int x2,  int x3) {
        var mh$ = wglUseFontBitmapsW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwapBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$467.SwapBuffers$MH,"SwapBuffers");
    }
    public static int SwapBuffers ( Addressable x0) {
        var mh$ = SwapBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPOINTFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGLYPHMETRICSFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGLYPHMETRICSFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglUseFontOutlinesA$MH() {
        return RuntimeHelper.requireNonNull(constants$467.wglUseFontOutlinesA$MH,"wglUseFontOutlinesA");
    }
    public static int wglUseFontOutlinesA ( Addressable x0,  int x1,  int x2,  int x3,  float x4,  float x5,  int x6,  Addressable x7) {
        var mh$ = wglUseFontOutlinesA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglUseFontOutlinesW$MH() {
        return RuntimeHelper.requireNonNull(constants$467.wglUseFontOutlinesW$MH,"wglUseFontOutlinesW");
    }
    public static int wglUseFontOutlinesW ( Addressable x0,  int x1,  int x2,  int x3,  float x4,  float x5,  int x6,  Addressable x7) {
        var mh$ = wglUseFontOutlinesW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5, x6, x7);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PLAYERPLANEDESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLAYERPLANEDESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglDescribeLayerPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$467.wglDescribeLayerPlane$MH,"wglDescribeLayerPlane");
    }
    public static int wglDescribeLayerPlane ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = wglDescribeLayerPlane$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglSetLayerPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$468.wglSetLayerPaletteEntries$MH,"wglSetLayerPaletteEntries");
    }
    public static int wglSetLayerPaletteEntries ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = wglSetLayerPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglGetLayerPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$468.wglGetLayerPaletteEntries$MH,"wglGetLayerPaletteEntries");
    }
    public static int wglGetLayerPaletteEntries ( Addressable x0,  int x1,  int x2,  int x3,  Addressable x4) {
        var mh$ = wglGetLayerPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglRealizeLayerPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$468.wglRealizeLayerPalette$MH,"wglRealizeLayerPalette");
    }
    public static int wglRealizeLayerPalette ( Addressable x0,  int x1,  int x2) {
        var mh$ = wglRealizeLayerPalette$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wglSwapLayerBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$468.wglSwapLayerBuffers$MH,"wglSwapLayerBuffers");
    }
    public static int wglSwapLayerBuffers ( Addressable x0,  int x1) {
        var mh$ = wglSwapLayerBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWGLSWAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWGLSWAP = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wglSwapMultipleBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$468.wglSwapMultipleBuffers$MH,"wglSwapMultipleBuffers");
    }
    public static int wglSwapMultipleBuffers ( int x0,  Addressable x1) {
        var mh$ = wglSwapMultipleBuffers$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HDWP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle wvsprintfA$MH() {
        return RuntimeHelper.requireNonNull(constants$477.wvsprintfA$MH,"wvsprintfA");
    }
    public static int wvsprintfA ( Addressable x0,  Addressable x1,  Addressable arglist) {
        var mh$ = wvsprintfA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, arglist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wvsprintfW$MH() {
        return RuntimeHelper.requireNonNull(constants$477.wvsprintfW$MH,"wvsprintfW");
    }
    public static int wvsprintfW ( Addressable x0,  Addressable x1,  Addressable arglist) {
        var mh$ = wvsprintfW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, arglist);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsprintfA$MH() {
        return RuntimeHelper.requireNonNull(constants$477.wsprintfA$MH,"wsprintfA");
    }
    public static int wsprintfA ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = wsprintfA$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wsprintfW$MH() {
        return RuntimeHelper.requireNonNull(constants$477.wsprintfW$MH,"wsprintfW");
    }
    public static int wsprintfW ( Addressable x0,  Addressable x1, Object... x2) {
        var mh$ = wsprintfW$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCBT_CREATEWNDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBT_CREATEWNDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBT_CREATEWND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCBTACTIVATESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWTSSESSION_NOTIFICATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSHELLHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEVENTMSGMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEVENTMSGMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEVENTMSGMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEVENTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEVENTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEVENTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCWPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWPRETSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCWPRETSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWPRETSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPKBDLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKBDLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMSLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMSLLHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEBUGHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDEBUGHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEBUGHOOKINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOUSEHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEHOOKSTRUCTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOUSEHOOKSTRUCTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHARDWAREHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHARDWAREHOOKSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LoadKeyboardLayoutA$MH() {
        return RuntimeHelper.requireNonNull(constants$477.LoadKeyboardLayoutA$MH,"LoadKeyboardLayoutA");
    }
    public static MemoryAddress LoadKeyboardLayoutA ( Addressable pwszKLID,  int Flags) {
        var mh$ = LoadKeyboardLayoutA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszKLID, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadKeyboardLayoutW$MH() {
        return RuntimeHelper.requireNonNull(constants$478.LoadKeyboardLayoutW$MH,"LoadKeyboardLayoutW");
    }
    public static MemoryAddress LoadKeyboardLayoutW ( Addressable pwszKLID,  int Flags) {
        var mh$ = LoadKeyboardLayoutW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszKLID, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ActivateKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$478.ActivateKeyboardLayout$MH,"ActivateKeyboardLayout");
    }
    public static MemoryAddress ActivateKeyboardLayout ( Addressable hkl,  int Flags) {
        var mh$ = ActivateKeyboardLayout$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hkl, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToUnicodeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$478.ToUnicodeEx$MH,"ToUnicodeEx");
    }
    public static int ToUnicodeEx ( int wVirtKey,  int wScanCode,  Addressable lpKeyState,  Addressable pwszBuff,  int cchBuff,  int wFlags,  Addressable dwhkl) {
        var mh$ = ToUnicodeEx$MH();
        try {
            return (int)mh$.invokeExact(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnloadKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$478.UnloadKeyboardLayout$MH,"UnloadKeyboardLayout");
    }
    public static int UnloadKeyboardLayout ( Addressable hkl) {
        var mh$ = UnloadKeyboardLayout$MH();
        try {
            return (int)mh$.invokeExact(hkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$478.GetKeyboardLayoutNameA$MH,"GetKeyboardLayoutNameA");
    }
    public static int GetKeyboardLayoutNameA ( Addressable pwszKLID) {
        var mh$ = GetKeyboardLayoutNameA$MH();
        try {
            return (int)mh$.invokeExact(pwszKLID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$478.GetKeyboardLayoutNameW$MH,"GetKeyboardLayoutNameW");
    }
    public static int GetKeyboardLayoutNameW ( Addressable pwszKLID) {
        var mh$ = GetKeyboardLayoutNameW$MH();
        try {
            return (int)mh$.invokeExact(pwszKLID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayoutList$MH() {
        return RuntimeHelper.requireNonNull(constants$479.GetKeyboardLayoutList$MH,"GetKeyboardLayoutList");
    }
    public static int GetKeyboardLayoutList ( int nBuff,  Addressable lpList) {
        var mh$ = GetKeyboardLayoutList$MH();
        try {
            return (int)mh$.invokeExact(nBuff, lpList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$479.GetKeyboardLayout$MH,"GetKeyboardLayout");
    }
    public static MemoryAddress GetKeyboardLayout ( int idThread) {
        var mh$ = GetKeyboardLayout$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMOUSEMOVEPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEMOVEPOINT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMouseMovePointsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$479.GetMouseMovePointsEx$MH,"GetMouseMovePointsEx");
    }
    public static int GetMouseMovePointsEx ( int cbSize,  Addressable lppt,  Addressable lpptBuf,  int nBufPoints,  int resolution) {
        var mh$ = GetMouseMovePointsEx$MH();
        try {
            return (int)mh$.invokeExact(cbSize, lppt, lpptBuf, nBufPoints, resolution);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopA$MH() {
        return RuntimeHelper.requireNonNull(constants$479.CreateDesktopA$MH,"CreateDesktopA");
    }
    public static MemoryAddress CreateDesktopA ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateDesktopA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopW$MH() {
        return RuntimeHelper.requireNonNull(constants$479.CreateDesktopW$MH,"CreateDesktopW");
    }
    public static MemoryAddress CreateDesktopW ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateDesktopW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopExA$MH() {
        return RuntimeHelper.requireNonNull(constants$479.CreateDesktopExA$MH,"CreateDesktopExA");
    }
    public static MemoryAddress CreateDesktopExA ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa,  int ulHeapSize,  Addressable pvoid) {
        var mh$ = CreateDesktopExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDesktopExW$MH() {
        return RuntimeHelper.requireNonNull(constants$480.CreateDesktopExW$MH,"CreateDesktopExW");
    }
    public static MemoryAddress CreateDesktopExW ( Addressable lpszDesktop,  Addressable lpszDevice,  Addressable pDevmode,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa,  int ulHeapSize,  Addressable pvoid) {
        var mh$ = CreateDesktopExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenDesktopA$MH() {
        return RuntimeHelper.requireNonNull(constants$480.OpenDesktopA$MH,"OpenDesktopA");
    }
    public static MemoryAddress OpenDesktopA ( Addressable lpszDesktop,  int dwFlags,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenDesktopA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenDesktopW$MH() {
        return RuntimeHelper.requireNonNull(constants$480.OpenDesktopW$MH,"OpenDesktopW");
    }
    public static MemoryAddress OpenDesktopW ( Addressable lpszDesktop,  int dwFlags,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenDesktopW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszDesktop, dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenInputDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$480.OpenInputDesktop$MH,"OpenInputDesktop");
    }
    public static MemoryAddress OpenInputDesktop ( int dwFlags,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenInputDesktop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwFlags, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopsA$MH() {
        return RuntimeHelper.requireNonNull(constants$480.EnumDesktopsA$MH,"EnumDesktopsA");
    }
    public static int EnumDesktopsA ( Addressable hwinsta,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumDesktopsA$MH();
        try {
            return (int)mh$.invokeExact(hwinsta, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopsW$MH() {
        return RuntimeHelper.requireNonNull(constants$480.EnumDesktopsW$MH,"EnumDesktopsW");
    }
    public static int EnumDesktopsW ( Addressable hwinsta,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumDesktopsW$MH();
        try {
            return (int)mh$.invokeExact(hwinsta, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDesktopWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$481.EnumDesktopWindows$MH,"EnumDesktopWindows");
    }
    public static int EnumDesktopWindows ( Addressable hDesktop,  Addressable lpfn,  long lParam) {
        var mh$ = EnumDesktopWindows$MH();
        try {
            return (int)mh$.invokeExact(hDesktop, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$481.SwitchDesktop$MH,"SwitchDesktop");
    }
    public static int SwitchDesktop ( Addressable hDesktop) {
        var mh$ = SwitchDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$481.SetThreadDesktop$MH,"SetThreadDesktop");
    }
    public static int SetThreadDesktop ( Addressable hDesktop) {
        var mh$ = SetThreadDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$481.CloseDesktop$MH,"CloseDesktop");
    }
    public static int CloseDesktop ( Addressable hDesktop) {
        var mh$ = CloseDesktop$MH();
        try {
            return (int)mh$.invokeExact(hDesktop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$481.GetThreadDesktop$MH,"GetThreadDesktop");
    }
    public static MemoryAddress GetThreadDesktop ( int dwThreadId) {
        var mh$ = GetThreadDesktop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowStationA$MH() {
        return RuntimeHelper.requireNonNull(constants$481.CreateWindowStationA$MH,"CreateWindowStationA");
    }
    public static MemoryAddress CreateWindowStationA ( Addressable lpwinsta,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateWindowStationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpwinsta, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowStationW$MH() {
        return RuntimeHelper.requireNonNull(constants$482.CreateWindowStationW$MH,"CreateWindowStationW");
    }
    public static MemoryAddress CreateWindowStationW ( Addressable lpwinsta,  int dwFlags,  int dwDesiredAccess,  Addressable lpsa) {
        var mh$ = CreateWindowStationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpwinsta, dwFlags, dwDesiredAccess, lpsa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWindowStationA$MH() {
        return RuntimeHelper.requireNonNull(constants$482.OpenWindowStationA$MH,"OpenWindowStationA");
    }
    public static MemoryAddress OpenWindowStationA ( Addressable lpszWinSta,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenWindowStationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszWinSta, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWindowStationW$MH() {
        return RuntimeHelper.requireNonNull(constants$482.OpenWindowStationW$MH,"OpenWindowStationW");
    }
    public static MemoryAddress OpenWindowStationW ( Addressable lpszWinSta,  int fInherit,  int dwDesiredAccess) {
        var mh$ = OpenWindowStationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszWinSta, fInherit, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumWindowStationsA$MH() {
        return RuntimeHelper.requireNonNull(constants$482.EnumWindowStationsA$MH,"EnumWindowStationsA");
    }
    public static int EnumWindowStationsA ( Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumWindowStationsA$MH();
        try {
            return (int)mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumWindowStationsW$MH() {
        return RuntimeHelper.requireNonNull(constants$482.EnumWindowStationsW$MH,"EnumWindowStationsW");
    }
    public static int EnumWindowStationsW ( Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumWindowStationsW$MH();
        try {
            return (int)mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$482.CloseWindowStation$MH,"CloseWindowStation");
    }
    public static int CloseWindowStation ( Addressable hWinSta) {
        var mh$ = CloseWindowStation$MH();
        try {
            return (int)mh$.invokeExact(hWinSta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$483.SetProcessWindowStation$MH,"SetProcessWindowStation");
    }
    public static int SetProcessWindowStation ( Addressable hWinSta) {
        var mh$ = SetProcessWindowStation$MH();
        try {
            return (int)mh$.invokeExact(hWinSta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessWindowStation$MH() {
        return RuntimeHelper.requireNonNull(constants$483.GetProcessWindowStation$MH,"GetProcessWindowStation");
    }
    public static MemoryAddress GetProcessWindowStation () {
        var mh$ = GetProcessWindowStation$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$483.SetUserObjectSecurity$MH,"SetUserObjectSecurity");
    }
    public static int SetUserObjectSecurity ( Addressable hObj,  Addressable pSIRequested,  Addressable pSID) {
        var mh$ = SetUserObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hObj, pSIRequested, pSID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$483.GetUserObjectSecurity$MH,"GetUserObjectSecurity");
    }
    public static int GetUserObjectSecurity ( Addressable hObj,  Addressable pSIRequested,  Addressable pSID,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetUserObjectSecurity$MH();
        try {
            return (int)mh$.invokeExact(hObj, pSIRequested, pSID, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUSEROBJECTFLAGS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetUserObjectInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$483.GetUserObjectInformationA$MH,"GetUserObjectInformationA");
    }
    public static int GetUserObjectInformationA ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetUserObjectInformationA$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserObjectInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$483.GetUserObjectInformationW$MH,"GetUserObjectInformationW");
    }
    public static int GetUserObjectInformationW ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetUserObjectInformationW$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$484.SetUserObjectInformationA$MH,"SetUserObjectInformationA");
    }
    public static int SetUserObjectInformationA ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength) {
        var mh$ = SetUserObjectInformationA$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserObjectInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$484.SetUserObjectInformationW$MH,"SetUserObjectInformationW");
    }
    public static int SetUserObjectInformationW ( Addressable hObj,  int nIndex,  Addressable pvInfo,  int nLength) {
        var mh$ = SetUserObjectInformationW$MH();
        try {
            return (int)mh$.invokeExact(hObj, nIndex, pvInfo, nLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWNDCLASSEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWNDCLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPWNDCLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWNDCLASS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle IsHungAppWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$484.IsHungAppWindow$MH,"IsHungAppWindow");
    }
    public static int IsHungAppWindow ( Addressable hwnd) {
        var mh$ = IsHungAppWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisableProcessWindowsGhosting$MH() {
        return RuntimeHelper.requireNonNull(constants$484.DisableProcessWindowsGhosting$MH,"DisableProcessWindowsGhosting");
    }
    public static void DisableProcessWindowsGhosting () {
        var mh$ = DisableProcessWindowsGhosting$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMINMAXINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMINMAXINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCOPYDATASTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMDINEXTMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMDINEXTMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWERBROADCAST_SETTING = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterWindowMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$484.RegisterWindowMessageA$MH,"RegisterWindowMessageA");
    }
    public static int RegisterWindowMessageA ( Addressable lpString) {
        var mh$ = RegisterWindowMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterWindowMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$484.RegisterWindowMessageW$MH,"RegisterWindowMessageW");
    }
    public static int RegisterWindowMessageW ( Addressable lpString) {
        var mh$ = RegisterWindowMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPWINDOWPOS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWINDOWPOS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNCCALCSIZE_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTRACKMOUSEEVENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle TrackMouseEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$485.TrackMouseEvent$MH,"TrackMouseEvent");
    }
    public static int TrackMouseEvent ( Addressable lpEventTrack) {
        var mh$ = TrackMouseEvent$MH();
        try {
            return (int)mh$.invokeExact(lpEventTrack);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawEdge$MH() {
        return RuntimeHelper.requireNonNull(constants$485.DrawEdge$MH,"DrawEdge");
    }
    public static int DrawEdge ( Addressable hdc,  Addressable qrc,  int edge,  int grfFlags) {
        var mh$ = DrawEdge$MH();
        try {
            return (int)mh$.invokeExact(hdc, qrc, edge, grfFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawFrameControl$MH() {
        return RuntimeHelper.requireNonNull(constants$485.DrawFrameControl$MH,"DrawFrameControl");
    }
    public static int DrawFrameControl ( Addressable x0,  Addressable x1,  int x2,  int x3) {
        var mh$ = DrawFrameControl$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawCaption$MH() {
        return RuntimeHelper.requireNonNull(constants$485.DrawCaption$MH,"DrawCaption");
    }
    public static int DrawCaption ( Addressable hwnd,  Addressable hdc,  Addressable lprect,  int flags) {
        var mh$ = DrawCaption$MH();
        try {
            return (int)mh$.invokeExact(hwnd, hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawAnimatedRects$MH() {
        return RuntimeHelper.requireNonNull(constants$485.DrawAnimatedRects$MH,"DrawAnimatedRects");
    }
    public static int DrawAnimatedRects ( Addressable hwnd,  int idAni,  Addressable lprcFrom,  Addressable lprcTo) {
        var mh$ = DrawAnimatedRects$MH();
        try {
            return (int)mh$.invokeExact(hwnd, idAni, lprcFrom, lprcTo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPACCEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPAINTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPAINTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPAINTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATESTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATESTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWINDOWPLACEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWINDOWPLACEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNMHDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLESTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEASUREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMEASUREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRAWITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRAWITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDELETEITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDELETEITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCOMPAREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOMPAREITEMSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$485.GetMessageA$MH,"GetMessageA");
    }
    public static int GetMessageA ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax) {
        var mh$ = GetMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$486.GetMessageW$MH,"GetMessageW");
    }
    public static int GetMessageW ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax) {
        var mh$ = GetMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$486.TranslateMessage$MH,"TranslateMessage");
    }
    public static int TranslateMessage ( Addressable lpMsg) {
        var mh$ = TranslateMessage$MH();
        try {
            return (int)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispatchMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$486.DispatchMessageA$MH,"DispatchMessageA");
    }
    public static long DispatchMessageA ( Addressable lpMsg) {
        var mh$ = DispatchMessageA$MH();
        try {
            return (long)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DispatchMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$486.DispatchMessageW$MH,"DispatchMessageW");
    }
    public static long DispatchMessageW ( Addressable lpMsg) {
        var mh$ = DispatchMessageW$MH();
        try {
            return (long)mh$.invokeExact(lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMessageQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$486.SetMessageQueue$MH,"SetMessageQueue");
    }
    public static int SetMessageQueue ( int cMessagesMax) {
        var mh$ = SetMessageQueue$MH();
        try {
            return (int)mh$.invokeExact(cMessagesMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$486.PeekMessageA$MH,"PeekMessageA");
    }
    public static int PeekMessageA ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax,  int wRemoveMsg) {
        var mh$ = PeekMessageA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$487.PeekMessageW$MH,"PeekMessageW");
    }
    public static int PeekMessageW ( Addressable lpMsg,  Addressable hWnd,  int wMsgFilterMin,  int wMsgFilterMax,  int wRemoveMsg) {
        var mh$ = PeekMessageW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$487.RegisterHotKey$MH,"RegisterHotKey");
    }
    public static int RegisterHotKey ( Addressable hWnd,  int id,  int fsModifiers,  int vk) {
        var mh$ = RegisterHotKey$MH();
        try {
            return (int)mh$.invokeExact(hWnd, id, fsModifiers, vk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$487.UnregisterHotKey$MH,"UnregisterHotKey");
    }
    public static int UnregisterHotKey ( Addressable hWnd,  int id) {
        var mh$ = UnregisterHotKey$MH();
        try {
            return (int)mh$.invokeExact(hWnd, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExitWindowsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$487.ExitWindowsEx$MH,"ExitWindowsEx");
    }
    public static int ExitWindowsEx ( int uFlags,  int dwReason) {
        var mh$ = ExitWindowsEx$MH();
        try {
            return (int)mh$.invokeExact(uFlags, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwapMouseButton$MH() {
        return RuntimeHelper.requireNonNull(constants$487.SwapMouseButton$MH,"SwapMouseButton");
    }
    public static int SwapMouseButton ( int fSwap) {
        var mh$ = SwapMouseButton$MH();
        try {
            return (int)mh$.invokeExact(fSwap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessagePos$MH() {
        return RuntimeHelper.requireNonNull(constants$487.GetMessagePos$MH,"GetMessagePos");
    }
    public static int GetMessagePos () {
        var mh$ = GetMessagePos$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageTime$MH() {
        return RuntimeHelper.requireNonNull(constants$488.GetMessageTime$MH,"GetMessageTime");
    }
    public static int GetMessageTime () {
        var mh$ = GetMessageTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMessageExtraInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$488.GetMessageExtraInfo$MH,"GetMessageExtraInfo");
    }
    public static long GetMessageExtraInfo () {
        var mh$ = GetMessageExtraInfo$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUnpredictedMessagePos$MH() {
        return RuntimeHelper.requireNonNull(constants$488.GetUnpredictedMessagePos$MH,"GetUnpredictedMessagePos");
    }
    public static int GetUnpredictedMessagePos () {
        var mh$ = GetUnpredictedMessagePos$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWow64Message$MH() {
        return RuntimeHelper.requireNonNull(constants$488.IsWow64Message$MH,"IsWow64Message");
    }
    public static int IsWow64Message () {
        var mh$ = IsWow64Message$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMessageExtraInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$488.SetMessageExtraInfo$MH,"SetMessageExtraInfo");
    }
    public static long SetMessageExtraInfo ( long lParam) {
        var mh$ = SetMessageExtraInfo$MH();
        try {
            return (long)mh$.invokeExact(lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$488.SendMessageA$MH,"SendMessageA");
    }
    public static long SendMessageA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendMessageA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SendMessageW$MH,"SendMessageW");
    }
    public static long SendMessageW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendMessageW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageTimeoutA$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SendMessageTimeoutA$MH,"SendMessageTimeoutA");
    }
    public static long SendMessageTimeoutA ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  int fuFlags,  int uTimeout,  Addressable lpdwResult) {
        var mh$ = SendMessageTimeoutA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageTimeoutW$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SendMessageTimeoutW$MH,"SendMessageTimeoutW");
    }
    public static long SendMessageTimeoutW ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  int fuFlags,  int uTimeout,  Addressable lpdwResult) {
        var mh$ = SendMessageTimeoutW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendNotifyMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SendNotifyMessageA$MH,"SendNotifyMessageA");
    }
    public static int SendNotifyMessageA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendNotifyMessageA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendNotifyMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SendNotifyMessageW$MH,"SendNotifyMessageW");
    }
    public static int SendNotifyMessageW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendNotifyMessageW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageCallbackA$MH() {
        return RuntimeHelper.requireNonNull(constants$489.SendMessageCallbackA$MH,"SendMessageCallbackA");
    }
    public static int SendMessageCallbackA ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  Addressable lpResultCallBack,  long dwData) {
        var mh$ = SendMessageCallbackA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam, lpResultCallBack, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendMessageCallbackW$MH() {
        return RuntimeHelper.requireNonNull(constants$490.SendMessageCallbackW$MH,"SendMessageCallbackW");
    }
    public static int SendMessageCallbackW ( Addressable hWnd,  int Msg,  long wParam,  long lParam,  Addressable lpResultCallBack,  long dwData) {
        var mh$ = SendMessageCallbackW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam, lpResultCallBack, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBSMINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle BroadcastSystemMessageExA$MH() {
        return RuntimeHelper.requireNonNull(constants$490.BroadcastSystemMessageExA$MH,"BroadcastSystemMessageExA");
    }
    public static int BroadcastSystemMessageExA ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam,  Addressable pbsmInfo) {
        var mh$ = BroadcastSystemMessageExA$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam, pbsmInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageExW$MH() {
        return RuntimeHelper.requireNonNull(constants$490.BroadcastSystemMessageExW$MH,"BroadcastSystemMessageExW");
    }
    public static int BroadcastSystemMessageExW ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam,  Addressable pbsmInfo) {
        var mh$ = BroadcastSystemMessageExW$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam, pbsmInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$490.BroadcastSystemMessageA$MH,"BroadcastSystemMessageA");
    }
    public static int BroadcastSystemMessageA ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam) {
        var mh$ = BroadcastSystemMessageA$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BroadcastSystemMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$490.BroadcastSystemMessageW$MH,"BroadcastSystemMessageW");
    }
    public static int BroadcastSystemMessageW ( int flags,  Addressable lpInfo,  int Msg,  long wParam,  long lParam) {
        var mh$ = BroadcastSystemMessageW$MH();
        try {
            return (int)mh$.invokeExact(flags, lpInfo, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HDEVNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHDEVNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterDeviceNotificationA$MH() {
        return RuntimeHelper.requireNonNull(constants$490.RegisterDeviceNotificationA$MH,"RegisterDeviceNotificationA");
    }
    public static MemoryAddress RegisterDeviceNotificationA ( Addressable hRecipient,  Addressable NotificationFilter,  int Flags) {
        var mh$ = RegisterDeviceNotificationA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, NotificationFilter, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterDeviceNotificationW$MH() {
        return RuntimeHelper.requireNonNull(constants$491.RegisterDeviceNotificationW$MH,"RegisterDeviceNotificationW");
    }
    public static MemoryAddress RegisterDeviceNotificationW ( Addressable hRecipient,  Addressable NotificationFilter,  int Flags) {
        var mh$ = RegisterDeviceNotificationW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, NotificationFilter, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterDeviceNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$491.UnregisterDeviceNotification$MH,"UnregisterDeviceNotification");
    }
    public static int UnregisterDeviceNotification ( Addressable Handle) {
        var mh$ = UnregisterDeviceNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HPOWERNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHPOWERNOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterPowerSettingNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$491.RegisterPowerSettingNotification$MH,"RegisterPowerSettingNotification");
    }
    public static MemoryAddress RegisterPowerSettingNotification ( Addressable hRecipient,  Addressable PowerSettingGuid,  int Flags) {
        var mh$ = RegisterPowerSettingNotification$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, PowerSettingGuid, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterPowerSettingNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$491.UnregisterPowerSettingNotification$MH,"UnregisterPowerSettingNotification");
    }
    public static int UnregisterPowerSettingNotification ( Addressable Handle) {
        var mh$ = UnregisterPowerSettingNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterSuspendResumeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$491.RegisterSuspendResumeNotification$MH,"RegisterSuspendResumeNotification");
    }
    public static MemoryAddress RegisterSuspendResumeNotification ( Addressable hRecipient,  int Flags) {
        var mh$ = RegisterSuspendResumeNotification$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hRecipient, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterSuspendResumeNotification$MH() {
        return RuntimeHelper.requireNonNull(constants$491.UnregisterSuspendResumeNotification$MH,"UnregisterSuspendResumeNotification");
    }
    public static int UnregisterSuspendResumeNotification ( Addressable Handle) {
        var mh$ = UnregisterSuspendResumeNotification$MH();
        try {
            return (int)mh$.invokeExact(Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$492.PostMessageA$MH,"PostMessageA");
    }
    public static int PostMessageA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostMessageA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$492.PostMessageW$MH,"PostMessageW");
    }
    public static int PostMessageW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostMessageW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostThreadMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$492.PostThreadMessageA$MH,"PostThreadMessageA");
    }
    public static int PostThreadMessageA ( int idThread,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostThreadMessageA$MH();
        try {
            return (int)mh$.invokeExact(idThread, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostThreadMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$492.PostThreadMessageW$MH,"PostThreadMessageW");
    }
    public static int PostThreadMessageW ( int idThread,  int Msg,  long wParam,  long lParam) {
        var mh$ = PostThreadMessageW$MH();
        try {
            return (int)mh$.invokeExact(idThread, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AttachThreadInput$MH() {
        return RuntimeHelper.requireNonNull(constants$492.AttachThreadInput$MH,"AttachThreadInput");
    }
    public static int AttachThreadInput ( int idAttach,  int idAttachTo,  int fAttach) {
        var mh$ = AttachThreadInput$MH();
        try {
            return (int)mh$.invokeExact(idAttach, idAttachTo, fAttach);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplyMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$492.ReplyMessage$MH,"ReplyMessage");
    }
    public static int ReplyMessage ( long lResult) {
        var mh$ = ReplyMessage$MH();
        try {
            return (int)mh$.invokeExact(lResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$493.WaitMessage$MH,"WaitMessage");
    }
    public static int WaitMessage () {
        var mh$ = WaitMessage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitForInputIdle$MH() {
        return RuntimeHelper.requireNonNull(constants$493.WaitForInputIdle$MH,"WaitForInputIdle");
    }
    public static int WaitForInputIdle ( Addressable hProcess,  int dwMilliseconds) {
        var mh$ = WaitForInputIdle$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwMilliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefWindowProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$493.DefWindowProcA$MH,"DefWindowProcA");
    }
    public static long DefWindowProcA ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefWindowProcA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefWindowProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$493.DefWindowProcW$MH,"DefWindowProcW");
    }
    public static long DefWindowProcW ( Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefWindowProcW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PostQuitMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$493.PostQuitMessage$MH,"PostQuitMessage");
    }
    public static void PostQuitMessage ( int nExitCode) {
        var mh$ = PostQuitMessage$MH();
        try {
            mh$.invokeExact(nExitCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallWindowProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$493.CallWindowProcA$MH,"CallWindowProcA");
    }
    public static long CallWindowProcA ( Addressable lpPrevWndFunc,  Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = CallWindowProcA$MH();
        try {
            return (long)mh$.invokeExact(lpPrevWndFunc, hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallWindowProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$494.CallWindowProcW$MH,"CallWindowProcW");
    }
    public static long CallWindowProcW ( Addressable lpPrevWndFunc,  Addressable hWnd,  int Msg,  long wParam,  long lParam) {
        var mh$ = CallWindowProcW$MH();
        try {
            return (long)mh$.invokeExact(lpPrevWndFunc, hWnd, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InSendMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$494.InSendMessage$MH,"InSendMessage");
    }
    public static int InSendMessage () {
        var mh$ = InSendMessage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InSendMessageEx$MH() {
        return RuntimeHelper.requireNonNull(constants$494.InSendMessageEx$MH,"InSendMessageEx");
    }
    public static int InSendMessageEx ( Addressable lpReserved) {
        var mh$ = InSendMessageEx$MH();
        try {
            return (int)mh$.invokeExact(lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDoubleClickTime$MH() {
        return RuntimeHelper.requireNonNull(constants$494.GetDoubleClickTime$MH,"GetDoubleClickTime");
    }
    public static int GetDoubleClickTime () {
        var mh$ = GetDoubleClickTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDoubleClickTime$MH() {
        return RuntimeHelper.requireNonNull(constants$494.SetDoubleClickTime$MH,"SetDoubleClickTime");
    }
    public static int SetDoubleClickTime ( int x0) {
        var mh$ = SetDoubleClickTime$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$494.RegisterClassA$MH,"RegisterClassA");
    }
    public static short RegisterClassA ( Addressable lpWndClass) {
        var mh$ = RegisterClassA$MH();
        try {
            return (short)mh$.invokeExact(lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$495.RegisterClassW$MH,"RegisterClassW");
    }
    public static short RegisterClassW ( Addressable lpWndClass) {
        var mh$ = RegisterClassW$MH();
        try {
            return (short)mh$.invokeExact(lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$495.UnregisterClassA$MH,"UnregisterClassA");
    }
    public static int UnregisterClassA ( Addressable lpClassName,  Addressable hInstance) {
        var mh$ = UnregisterClassA$MH();
        try {
            return (int)mh$.invokeExact(lpClassName, hInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$495.UnregisterClassW$MH,"UnregisterClassW");
    }
    public static int UnregisterClassW ( Addressable lpClassName,  Addressable hInstance) {
        var mh$ = UnregisterClassW$MH();
        try {
            return (int)mh$.invokeExact(lpClassName, hInstance);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$495.GetClassInfoA$MH,"GetClassInfoA");
    }
    public static int GetClassInfoA ( Addressable hInstance,  Addressable lpClassName,  Addressable lpWndClass) {
        var mh$ = GetClassInfoA$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpClassName, lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$495.GetClassInfoW$MH,"GetClassInfoW");
    }
    public static int GetClassInfoW ( Addressable hInstance,  Addressable lpClassName,  Addressable lpWndClass) {
        var mh$ = GetClassInfoW$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpClassName, lpWndClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassExA$MH() {
        return RuntimeHelper.requireNonNull(constants$495.RegisterClassExA$MH,"RegisterClassExA");
    }
    public static short RegisterClassExA ( Addressable x0) {
        var mh$ = RegisterClassExA$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClassExW$MH() {
        return RuntimeHelper.requireNonNull(constants$496.RegisterClassExW$MH,"RegisterClassExW");
    }
    public static short RegisterClassExW ( Addressable x0) {
        var mh$ = RegisterClassExW$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$496.GetClassInfoExA$MH,"GetClassInfoExA");
    }
    public static int GetClassInfoExA ( Addressable hInstance,  Addressable lpszClass,  Addressable lpwcx) {
        var mh$ = GetClassInfoExA$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpszClass, lpwcx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$496.GetClassInfoExW$MH,"GetClassInfoExW");
    }
    public static int GetClassInfoExW ( Addressable hInstance,  Addressable lpszClass,  Addressable lpwcx) {
        var mh$ = GetClassInfoExW$MH();
        try {
            return (int)mh$.invokeExact(hInstance, lpszClass, lpwcx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowExA$MH() {
        return RuntimeHelper.requireNonNull(constants$496.CreateWindowExA$MH,"CreateWindowExA");
    }
    public static MemoryAddress CreateWindowExA ( int dwExStyle,  Addressable lpClassName,  Addressable lpWindowName,  int dwStyle,  int X,  int Y,  int nWidth,  int nHeight,  Addressable hWndParent,  Addressable hMenu,  Addressable hInstance,  Addressable lpParam) {
        var mh$ = CreateWindowExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwExStyle, lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWindowExW$MH() {
        return RuntimeHelper.requireNonNull(constants$497.CreateWindowExW$MH,"CreateWindowExW");
    }
    public static MemoryAddress CreateWindowExW ( int dwExStyle,  Addressable lpClassName,  Addressable lpWindowName,  int dwStyle,  int X,  int Y,  int nWidth,  int nHeight,  Addressable hWndParent,  Addressable hMenu,  Addressable hInstance,  Addressable lpParam) {
        var mh$ = CreateWindowExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwExStyle, lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$497.IsWindow$MH,"IsWindow");
    }
    public static int IsWindow ( Addressable hWnd) {
        var mh$ = IsWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$497.IsMenu$MH,"IsMenu");
    }
    public static int IsMenu ( Addressable hMenu) {
        var mh$ = IsMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsChild$MH() {
        return RuntimeHelper.requireNonNull(constants$497.IsChild$MH,"IsChild");
    }
    public static int IsChild ( Addressable hWndParent,  Addressable hWnd) {
        var mh$ = IsChild$MH();
        try {
            return (int)mh$.invokeExact(hWndParent, hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$497.DestroyWindow$MH,"DestroyWindow");
    }
    public static int DestroyWindow ( Addressable hWnd) {
        var mh$ = DestroyWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$497.ShowWindow$MH,"ShowWindow");
    }
    public static int ShowWindow ( Addressable hWnd,  int nCmdShow) {
        var mh$ = ShowWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nCmdShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnimateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$498.AnimateWindow$MH,"AnimateWindow");
    }
    public static int AnimateWindow ( Addressable hWnd,  int dwTime,  int dwFlags) {
        var mh$ = AnimateWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dwTime, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateLayeredWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$498.UpdateLayeredWindow$MH,"UpdateLayeredWindow");
    }
    public static int UpdateLayeredWindow ( Addressable hWnd,  Addressable hdcDst,  Addressable pptDst,  Addressable psize,  Addressable hdcSrc,  Addressable pptSrc,  int crKey,  Addressable pblend,  int dwFlags) {
        var mh$ = UpdateLayeredWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hdcDst, pptDst, psize, hdcSrc, pptSrc, crKey, pblend, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUPDATELAYEREDWINDOWINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle UpdateLayeredWindowIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$498.UpdateLayeredWindowIndirect$MH,"UpdateLayeredWindowIndirect");
    }
    public static int UpdateLayeredWindowIndirect ( Addressable hWnd,  Addressable pULWInfo) {
        var mh$ = UpdateLayeredWindowIndirect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pULWInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLayeredWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$498.GetLayeredWindowAttributes$MH,"GetLayeredWindowAttributes");
    }
    public static int GetLayeredWindowAttributes ( Addressable hwnd,  Addressable pcrKey,  Addressable pbAlpha,  Addressable pdwFlags) {
        var mh$ = GetLayeredWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pcrKey, pbAlpha, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrintWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$498.PrintWindow$MH,"PrintWindow");
    }
    public static int PrintWindow ( Addressable hwnd,  Addressable hdcBlt,  int nFlags) {
        var mh$ = PrintWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, hdcBlt, nFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLayeredWindowAttributes$MH() {
        return RuntimeHelper.requireNonNull(constants$498.SetLayeredWindowAttributes$MH,"SetLayeredWindowAttributes");
    }
    public static int SetLayeredWindowAttributes ( Addressable hwnd,  int crKey,  byte bAlpha,  int dwFlags) {
        var mh$ = SetLayeredWindowAttributes$MH();
        try {
            return (int)mh$.invokeExact(hwnd, crKey, bAlpha, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowWindowAsync$MH() {
        return RuntimeHelper.requireNonNull(constants$499.ShowWindowAsync$MH,"ShowWindowAsync");
    }
    public static int ShowWindowAsync ( Addressable hWnd,  int nCmdShow) {
        var mh$ = ShowWindowAsync$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nCmdShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlashWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$499.FlashWindow$MH,"FlashWindow");
    }
    public static int FlashWindow ( Addressable hWnd,  int bInvert) {
        var mh$ = FlashWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, bInvert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PFLASHWINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FlashWindowEx$MH() {
        return RuntimeHelper.requireNonNull(constants$499.FlashWindowEx$MH,"FlashWindowEx");
    }
    public static int FlashWindowEx ( Addressable pfwi) {
        var mh$ = FlashWindowEx$MH();
        try {
            return (int)mh$.invokeExact(pfwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowOwnedPopups$MH() {
        return RuntimeHelper.requireNonNull(constants$499.ShowOwnedPopups$MH,"ShowOwnedPopups");
    }
    public static int ShowOwnedPopups ( Addressable hWnd,  int fShow) {
        var mh$ = ShowOwnedPopups$MH();
        try {
            return (int)mh$.invokeExact(hWnd, fShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$499.OpenIcon$MH,"OpenIcon");
    }
    public static int OpenIcon ( Addressable hWnd) {
        var mh$ = OpenIcon$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$499.CloseWindow$MH,"CloseWindow");
    }
    public static int CloseWindow ( Addressable hWnd) {
        var mh$ = CloseWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$500.MoveWindow$MH,"MoveWindow");
    }
    public static int MoveWindow ( Addressable hWnd,  int X,  int Y,  int nWidth,  int nHeight,  int bRepaint) {
        var mh$ = MoveWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, X, Y, nWidth, nHeight, bRepaint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$500.SetWindowPos$MH,"SetWindowPos");
    }
    public static int SetWindowPos ( Addressable hWnd,  Addressable hWndInsertAfter,  int X,  int Y,  int cx,  int cy,  int uFlags) {
        var mh$ = SetWindowPos$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hWndInsertAfter, X, Y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowPlacement$MH() {
        return RuntimeHelper.requireNonNull(constants$500.GetWindowPlacement$MH,"GetWindowPlacement");
    }
    public static int GetWindowPlacement ( Addressable hWnd,  Addressable lpwndpl) {
        var mh$ = GetWindowPlacement$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpwndpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowPlacement$MH() {
        return RuntimeHelper.requireNonNull(constants$500.SetWindowPlacement$MH,"SetWindowPlacement");
    }
    public static int SetWindowPlacement ( Addressable hWnd,  Addressable lpwndpl) {
        var mh$ = SetWindowPlacement$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpwndpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDisplayAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$500.GetWindowDisplayAffinity$MH,"GetWindowDisplayAffinity");
    }
    public static int GetWindowDisplayAffinity ( Addressable hWnd,  Addressable pdwAffinity) {
        var mh$ = GetWindowDisplayAffinity$MH();
        try {
            return (int)mh$.invokeExact(hWnd, pdwAffinity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowDisplayAffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$500.SetWindowDisplayAffinity$MH,"SetWindowDisplayAffinity");
    }
    public static int SetWindowDisplayAffinity ( Addressable hWnd,  int dwAffinity) {
        var mh$ = SetWindowDisplayAffinity$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dwAffinity);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginDeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$501.BeginDeferWindowPos$MH,"BeginDeferWindowPos");
    }
    public static MemoryAddress BeginDeferWindowPos ( int nNumWindows) {
        var mh$ = BeginDeferWindowPos$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nNumWindows);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$501.DeferWindowPos$MH,"DeferWindowPos");
    }
    public static MemoryAddress DeferWindowPos ( Addressable hWinPosInfo,  Addressable hWnd,  Addressable hWndInsertAfter,  int x,  int y,  int cx,  int cy,  int uFlags) {
        var mh$ = DeferWindowPos$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWinPosInfo, hWnd, hWndInsertAfter, x, y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDeferWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$501.EndDeferWindowPos$MH,"EndDeferWindowPos");
    }
    public static int EndDeferWindowPos ( Addressable hWinPosInfo) {
        var mh$ = EndDeferWindowPos$MH();
        try {
            return (int)mh$.invokeExact(hWinPosInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$501.IsWindowVisible$MH,"IsWindowVisible");
    }
    public static int IsWindowVisible ( Addressable hWnd) {
        var mh$ = IsWindowVisible$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsIconic$MH() {
        return RuntimeHelper.requireNonNull(constants$501.IsIconic$MH,"IsIconic");
    }
    public static int IsIconic ( Addressable hWnd) {
        var mh$ = IsIconic$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnyPopup$MH() {
        return RuntimeHelper.requireNonNull(constants$501.AnyPopup$MH,"AnyPopup");
    }
    public static int AnyPopup () {
        var mh$ = AnyPopup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BringWindowToTop$MH() {
        return RuntimeHelper.requireNonNull(constants$502.BringWindowToTop$MH,"BringWindowToTop");
    }
    public static int BringWindowToTop ( Addressable hWnd) {
        var mh$ = BringWindowToTop$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsZoomed$MH() {
        return RuntimeHelper.requireNonNull(constants$502.IsZoomed$MH,"IsZoomed");
    }
    public static int IsZoomed ( Addressable hWnd) {
        var mh$ = IsZoomed$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDLGTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCDLGTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCDLGTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCDLGTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDLGITEMTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDLGITEMTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDLGITEMTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGITEMTEMPLATEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGITEMTEMPLATEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDLGITEMTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateDialogParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$502.CreateDialogParamA$MH,"CreateDialogParamA");
    }
    public static MemoryAddress CreateDialogParamA ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogParamA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$502.CreateDialogParamW$MH,"CreateDialogParamW");
    }
    public static MemoryAddress CreateDialogParamW ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogParamW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogIndirectParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$502.CreateDialogIndirectParamA$MH,"CreateDialogIndirectParamA");
    }
    public static MemoryAddress CreateDialogIndirectParamA ( Addressable hInstance,  Addressable lpTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogIndirectParamA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDialogIndirectParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$502.CreateDialogIndirectParamW$MH,"CreateDialogIndirectParamW");
    }
    public static MemoryAddress CreateDialogIndirectParamW ( Addressable hInstance,  Addressable lpTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = CreateDialogIndirectParamW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$503.DialogBoxParamA$MH,"DialogBoxParamA");
    }
    public static long DialogBoxParamA ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxParamA$MH();
        try {
            return (long)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$503.DialogBoxParamW$MH,"DialogBoxParamW");
    }
    public static long DialogBoxParamW ( Addressable hInstance,  Addressable lpTemplateName,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxParamW$MH();
        try {
            return (long)mh$.invokeExact(hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxIndirectParamA$MH() {
        return RuntimeHelper.requireNonNull(constants$503.DialogBoxIndirectParamA$MH,"DialogBoxIndirectParamA");
    }
    public static long DialogBoxIndirectParamA ( Addressable hInstance,  Addressable hDialogTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxIndirectParamA$MH();
        try {
            return (long)mh$.invokeExact(hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DialogBoxIndirectParamW$MH() {
        return RuntimeHelper.requireNonNull(constants$503.DialogBoxIndirectParamW$MH,"DialogBoxIndirectParamW");
    }
    public static long DialogBoxIndirectParamW ( Addressable hInstance,  Addressable hDialogTemplate,  Addressable hWndParent,  Addressable lpDialogFunc,  long dwInitParam) {
        var mh$ = DialogBoxIndirectParamW$MH();
        try {
            return (long)mh$.invokeExact(hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$503.EndDialog$MH,"EndDialog");
    }
    public static int EndDialog ( Addressable hDlg,  long nResult) {
        var mh$ = EndDialog$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItem$MH() {
        return RuntimeHelper.requireNonNull(constants$503.GetDlgItem$MH,"GetDlgItem");
    }
    public static MemoryAddress GetDlgItem ( Addressable hDlg,  int nIDDlgItem) {
        var mh$ = GetDlgItem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDlg, nIDDlgItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemInt$MH() {
        return RuntimeHelper.requireNonNull(constants$504.SetDlgItemInt$MH,"SetDlgItemInt");
    }
    public static int SetDlgItemInt ( Addressable hDlg,  int nIDDlgItem,  int uValue,  int bSigned) {
        var mh$ = SetDlgItemInt$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, uValue, bSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemInt$MH() {
        return RuntimeHelper.requireNonNull(constants$504.GetDlgItemInt$MH,"GetDlgItemInt");
    }
    public static int GetDlgItemInt ( Addressable hDlg,  int nIDDlgItem,  Addressable lpTranslated,  int bSigned) {
        var mh$ = GetDlgItemInt$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpTranslated, bSigned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$504.SetDlgItemTextA$MH,"SetDlgItemTextA");
    }
    public static int SetDlgItemTextA ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString) {
        var mh$ = SetDlgItemTextA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDlgItemTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$504.SetDlgItemTextW$MH,"SetDlgItemTextW");
    }
    public static int SetDlgItemTextW ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString) {
        var mh$ = SetDlgItemTextW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$504.GetDlgItemTextA$MH,"GetDlgItemTextA");
    }
    public static int GetDlgItemTextA ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString,  int cchMax) {
        var mh$ = GetDlgItemTextA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString, cchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgItemTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$504.GetDlgItemTextW$MH,"GetDlgItemTextW");
    }
    public static int GetDlgItemTextW ( Addressable hDlg,  int nIDDlgItem,  Addressable lpString,  int cchMax) {
        var mh$ = GetDlgItemTextW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDDlgItem, lpString, cchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckDlgButton$MH() {
        return RuntimeHelper.requireNonNull(constants$505.CheckDlgButton$MH,"CheckDlgButton");
    }
    public static int CheckDlgButton ( Addressable hDlg,  int nIDButton,  int uCheck) {
        var mh$ = CheckDlgButton$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDButton, uCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckRadioButton$MH() {
        return RuntimeHelper.requireNonNull(constants$505.CheckRadioButton$MH,"CheckRadioButton");
    }
    public static int CheckRadioButton ( Addressable hDlg,  int nIDFirstButton,  int nIDLastButton,  int nIDCheckButton) {
        var mh$ = CheckRadioButton$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDFirstButton, nIDLastButton, nIDCheckButton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDlgButtonChecked$MH() {
        return RuntimeHelper.requireNonNull(constants$505.IsDlgButtonChecked$MH,"IsDlgButtonChecked");
    }
    public static int IsDlgButtonChecked ( Addressable hDlg,  int nIDButton) {
        var mh$ = IsDlgButtonChecked$MH();
        try {
            return (int)mh$.invokeExact(hDlg, nIDButton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendDlgItemMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$505.SendDlgItemMessageA$MH,"SendDlgItemMessageA");
    }
    public static long SendDlgItemMessageA ( Addressable hDlg,  int nIDDlgItem,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendDlgItemMessageA$MH();
        try {
            return (long)mh$.invokeExact(hDlg, nIDDlgItem, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SendDlgItemMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$505.SendDlgItemMessageW$MH,"SendDlgItemMessageW");
    }
    public static long SendDlgItemMessageW ( Addressable hDlg,  int nIDDlgItem,  int Msg,  long wParam,  long lParam) {
        var mh$ = SendDlgItemMessageW$MH();
        try {
            return (long)mh$.invokeExact(hDlg, nIDDlgItem, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNextDlgGroupItem$MH() {
        return RuntimeHelper.requireNonNull(constants$505.GetNextDlgGroupItem$MH,"GetNextDlgGroupItem");
    }
    public static MemoryAddress GetNextDlgGroupItem ( Addressable hDlg,  Addressable hCtl,  int bPrevious) {
        var mh$ = GetNextDlgGroupItem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDlg, hCtl, bPrevious);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNextDlgTabItem$MH() {
        return RuntimeHelper.requireNonNull(constants$506.GetNextDlgTabItem$MH,"GetNextDlgTabItem");
    }
    public static MemoryAddress GetNextDlgTabItem ( Addressable hDlg,  Addressable hCtl,  int bPrevious) {
        var mh$ = GetNextDlgTabItem$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDlg, hCtl, bPrevious);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDlgCtrlID$MH() {
        return RuntimeHelper.requireNonNull(constants$506.GetDlgCtrlID$MH,"GetDlgCtrlID");
    }
    public static int GetDlgCtrlID ( Addressable hWnd) {
        var mh$ = GetDlgCtrlID$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDialogBaseUnits$MH() {
        return RuntimeHelper.requireNonNull(constants$506.GetDialogBaseUnits$MH,"GetDialogBaseUnits");
    }
    public static int GetDialogBaseUnits () {
        var mh$ = GetDialogBaseUnits$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefDlgProcA$MH() {
        return RuntimeHelper.requireNonNull(constants$506.DefDlgProcA$MH,"DefDlgProcA");
    }
    public static long DefDlgProcA ( Addressable hDlg,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefDlgProcA$MH();
        try {
            return (long)mh$.invokeExact(hDlg, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefDlgProcW$MH() {
        return RuntimeHelper.requireNonNull(constants$506.DefDlgProcW$MH,"DefDlgProcW");
    }
    public static long DefDlgProcW ( Addressable hDlg,  int Msg,  long wParam,  long lParam) {
        var mh$ = DefDlgProcW$MH();
        try {
            return (long)mh$.invokeExact(hDlg, Msg, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int DCDC_DEFAULT() {
        return (int)0L;
    }
    public static int DCDC_DISABLE_FONT_UPDATE() {
        return (int)1L;
    }
    public static int DCDC_DISABLE_RELAYOUT() {
        return (int)2L;
    }
    public static MethodHandle SetDialogControlDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$506.SetDialogControlDpiChangeBehavior$MH,"SetDialogControlDpiChangeBehavior");
    }
    public static int SetDialogControlDpiChangeBehavior ( Addressable hWnd,  int mask,  int values) {
        var mh$ = SetDialogControlDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hWnd, mask, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDialogControlDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$507.GetDialogControlDpiChangeBehavior$MH,"GetDialogControlDpiChangeBehavior");
    }
    public static int GetDialogControlDpiChangeBehavior ( Addressable hWnd) {
        var mh$ = GetDialogControlDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int DDC_DEFAULT() {
        return (int)0L;
    }
    public static int DDC_DISABLE_ALL() {
        return (int)1L;
    }
    public static int DDC_DISABLE_RESIZE() {
        return (int)2L;
    }
    public static int DDC_DISABLE_CONTROL_RELAYOUT() {
        return (int)4L;
    }
    public static MethodHandle SetDialogDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$507.SetDialogDpiChangeBehavior$MH,"SetDialogDpiChangeBehavior");
    }
    public static int SetDialogDpiChangeBehavior ( Addressable hDlg,  int mask,  int values) {
        var mh$ = SetDialogDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hDlg, mask, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDialogDpiChangeBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$507.GetDialogDpiChangeBehavior$MH,"GetDialogDpiChangeBehavior");
    }
    public static int GetDialogDpiChangeBehavior ( Addressable hDlg) {
        var mh$ = GetDialogDpiChangeBehavior$MH();
        try {
            return (int)mh$.invokeExact(hDlg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallMsgFilterA$MH() {
        return RuntimeHelper.requireNonNull(constants$507.CallMsgFilterA$MH,"CallMsgFilterA");
    }
    public static int CallMsgFilterA ( Addressable lpMsg,  int nCode) {
        var mh$ = CallMsgFilterA$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, nCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallMsgFilterW$MH() {
        return RuntimeHelper.requireNonNull(constants$507.CallMsgFilterW$MH,"CallMsgFilterW");
    }
    public static int CallMsgFilterW ( Addressable lpMsg,  int nCode) {
        var mh$ = CallMsgFilterW$MH();
        try {
            return (int)mh$.invokeExact(lpMsg, nCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$507.OpenClipboard$MH,"OpenClipboard");
    }
    public static int OpenClipboard ( Addressable hWndNewOwner) {
        var mh$ = OpenClipboard$MH();
        try {
            return (int)mh$.invokeExact(hWndNewOwner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$508.CloseClipboard$MH,"CloseClipboard");
    }
    public static int CloseClipboard () {
        var mh$ = CloseClipboard$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardSequenceNumber$MH() {
        return RuntimeHelper.requireNonNull(constants$508.GetClipboardSequenceNumber$MH,"GetClipboardSequenceNumber");
    }
    public static int GetClipboardSequenceNumber () {
        var mh$ = GetClipboardSequenceNumber$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardOwner$MH() {
        return RuntimeHelper.requireNonNull(constants$508.GetClipboardOwner$MH,"GetClipboardOwner");
    }
    public static MemoryAddress GetClipboardOwner () {
        var mh$ = GetClipboardOwner$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClipboardViewer$MH() {
        return RuntimeHelper.requireNonNull(constants$508.SetClipboardViewer$MH,"SetClipboardViewer");
    }
    public static MemoryAddress SetClipboardViewer ( Addressable hWndNewViewer) {
        var mh$ = SetClipboardViewer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWndNewViewer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardViewer$MH() {
        return RuntimeHelper.requireNonNull(constants$508.GetClipboardViewer$MH,"GetClipboardViewer");
    }
    public static MemoryAddress GetClipboardViewer () {
        var mh$ = GetClipboardViewer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeClipboardChain$MH() {
        return RuntimeHelper.requireNonNull(constants$508.ChangeClipboardChain$MH,"ChangeClipboardChain");
    }
    public static int ChangeClipboardChain ( Addressable hWndRemove,  Addressable hWndNewNext) {
        var mh$ = ChangeClipboardChain$MH();
        try {
            return (int)mh$.invokeExact(hWndRemove, hWndNewNext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClipboardData$MH() {
        return RuntimeHelper.requireNonNull(constants$509.SetClipboardData$MH,"SetClipboardData");
    }
    public static MemoryAddress SetClipboardData ( int uFormat,  Addressable hMem) {
        var mh$ = SetClipboardData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uFormat, hMem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardData$MH() {
        return RuntimeHelper.requireNonNull(constants$509.GetClipboardData$MH,"GetClipboardData");
    }
    public static MemoryAddress GetClipboardData ( int uFormat) {
        var mh$ = GetClipboardData$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClipboardFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$509.RegisterClipboardFormatA$MH,"RegisterClipboardFormatA");
    }
    public static int RegisterClipboardFormatA ( Addressable lpszFormat) {
        var mh$ = RegisterClipboardFormatA$MH();
        try {
            return (int)mh$.invokeExact(lpszFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterClipboardFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$509.RegisterClipboardFormatW$MH,"RegisterClipboardFormatW");
    }
    public static int RegisterClipboardFormatW ( Addressable lpszFormat) {
        var mh$ = RegisterClipboardFormatW$MH();
        try {
            return (int)mh$.invokeExact(lpszFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CountClipboardFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$509.CountClipboardFormats$MH,"CountClipboardFormats");
    }
    public static int CountClipboardFormats () {
        var mh$ = CountClipboardFormats$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumClipboardFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$509.EnumClipboardFormats$MH,"EnumClipboardFormats");
    }
    public static int EnumClipboardFormats ( int format) {
        var mh$ = EnumClipboardFormats$MH();
        try {
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardFormatNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$510.GetClipboardFormatNameA$MH,"GetClipboardFormatNameA");
    }
    public static int GetClipboardFormatNameA ( int format,  Addressable lpszFormatName,  int cchMaxCount) {
        var mh$ = GetClipboardFormatNameA$MH();
        try {
            return (int)mh$.invokeExact(format, lpszFormatName, cchMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipboardFormatNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$510.GetClipboardFormatNameW$MH,"GetClipboardFormatNameW");
    }
    public static int GetClipboardFormatNameW ( int format,  Addressable lpszFormatName,  int cchMaxCount) {
        var mh$ = GetClipboardFormatNameW$MH();
        try {
            return (int)mh$.invokeExact(format, lpszFormatName, cchMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EmptyClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$510.EmptyClipboard$MH,"EmptyClipboard");
    }
    public static int EmptyClipboard () {
        var mh$ = EmptyClipboard$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsClipboardFormatAvailable$MH() {
        return RuntimeHelper.requireNonNull(constants$510.IsClipboardFormatAvailable$MH,"IsClipboardFormatAvailable");
    }
    public static int IsClipboardFormatAvailable ( int format) {
        var mh$ = IsClipboardFormatAvailable$MH();
        try {
            return (int)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPriorityClipboardFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$510.GetPriorityClipboardFormat$MH,"GetPriorityClipboardFormat");
    }
    public static int GetPriorityClipboardFormat ( Addressable paFormatPriorityList,  int cFormats) {
        var mh$ = GetPriorityClipboardFormat$MH();
        try {
            return (int)mh$.invokeExact(paFormatPriorityList, cFormats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOpenClipboardWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$510.GetOpenClipboardWindow$MH,"GetOpenClipboardWindow");
    }
    public static MemoryAddress GetOpenClipboardWindow () {
        var mh$ = GetOpenClipboardWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddClipboardFormatListener$MH() {
        return RuntimeHelper.requireNonNull(constants$511.AddClipboardFormatListener$MH,"AddClipboardFormatListener");
    }
    public static int AddClipboardFormatListener ( Addressable hwnd) {
        var mh$ = AddClipboardFormatListener$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveClipboardFormatListener$MH() {
        return RuntimeHelper.requireNonNull(constants$511.RemoveClipboardFormatListener$MH,"RemoveClipboardFormatListener");
    }
    public static int RemoveClipboardFormatListener ( Addressable hwnd) {
        var mh$ = RemoveClipboardFormatListener$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUpdatedClipboardFormats$MH() {
        return RuntimeHelper.requireNonNull(constants$511.GetUpdatedClipboardFormats$MH,"GetUpdatedClipboardFormats");
    }
    public static int GetUpdatedClipboardFormats ( Addressable lpuiFormats,  int cFormats,  Addressable pcFormatsOut) {
        var mh$ = GetUpdatedClipboardFormats$MH();
        try {
            return (int)mh$.invokeExact(lpuiFormats, cFormats, pcFormatsOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemA$MH() {
        return RuntimeHelper.requireNonNull(constants$511.CharToOemA$MH,"CharToOemA");
    }
    public static int CharToOemA ( Addressable pSrc,  Addressable pDst) {
        var mh$ = CharToOemA$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemW$MH() {
        return RuntimeHelper.requireNonNull(constants$511.CharToOemW$MH,"CharToOemW");
    }
    public static int CharToOemW ( Addressable pSrc,  Addressable pDst) {
        var mh$ = CharToOemW$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharA$MH() {
        return RuntimeHelper.requireNonNull(constants$511.OemToCharA$MH,"OemToCharA");
    }
    public static int OemToCharA ( Addressable pSrc,  Addressable pDst) {
        var mh$ = OemToCharA$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharW$MH() {
        return RuntimeHelper.requireNonNull(constants$512.OemToCharW$MH,"OemToCharW");
    }
    public static int OemToCharW ( Addressable pSrc,  Addressable pDst) {
        var mh$ = OemToCharW$MH();
        try {
            return (int)mh$.invokeExact(pSrc, pDst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$512.CharToOemBuffA$MH,"CharToOemBuffA");
    }
    public static int CharToOemBuffA ( Addressable lpszSrc,  Addressable lpszDst,  int cchDstLength) {
        var mh$ = CharToOemBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharToOemBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$512.CharToOemBuffW$MH,"CharToOemBuffW");
    }
    public static int CharToOemBuffW ( Addressable lpszSrc,  Addressable lpszDst,  int cchDstLength) {
        var mh$ = CharToOemBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$512.OemToCharBuffA$MH,"OemToCharBuffA");
    }
    public static int OemToCharBuffA ( Addressable lpszSrc,  Addressable lpszDst,  int cchDstLength) {
        var mh$ = OemToCharBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemToCharBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$512.OemToCharBuffW$MH,"OemToCharBuffW");
    }
    public static int OemToCharBuffW ( Addressable lpszSrc,  Addressable lpszDst,  int cchDstLength) {
        var mh$ = OemToCharBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpszSrc, lpszDst, cchDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperA$MH() {
        return RuntimeHelper.requireNonNull(constants$512.CharUpperA$MH,"CharUpperA");
    }
    public static MemoryAddress CharUpperA ( Addressable lpsz) {
        var mh$ = CharUpperA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$513.CharUpperW$MH,"CharUpperW");
    }
    public static MemoryAddress CharUpperW ( Addressable lpsz) {
        var mh$ = CharUpperW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$513.CharUpperBuffA$MH,"CharUpperBuffA");
    }
    public static int CharUpperBuffA ( Addressable lpsz,  int cchLength) {
        var mh$ = CharUpperBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharUpperBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$513.CharUpperBuffW$MH,"CharUpperBuffW");
    }
    public static int CharUpperBuffW ( Addressable lpsz,  int cchLength) {
        var mh$ = CharUpperBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerA$MH() {
        return RuntimeHelper.requireNonNull(constants$513.CharLowerA$MH,"CharLowerA");
    }
    public static MemoryAddress CharLowerA ( Addressable lpsz) {
        var mh$ = CharLowerA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerW$MH() {
        return RuntimeHelper.requireNonNull(constants$513.CharLowerW$MH,"CharLowerW");
    }
    public static MemoryAddress CharLowerW ( Addressable lpsz) {
        var mh$ = CharLowerW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerBuffA$MH() {
        return RuntimeHelper.requireNonNull(constants$513.CharLowerBuffA$MH,"CharLowerBuffA");
    }
    public static int CharLowerBuffA ( Addressable lpsz,  int cchLength) {
        var mh$ = CharLowerBuffA$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharLowerBuffW$MH() {
        return RuntimeHelper.requireNonNull(constants$514.CharLowerBuffW$MH,"CharLowerBuffW");
    }
    public static int CharLowerBuffW ( Addressable lpsz,  int cchLength) {
        var mh$ = CharLowerBuffW$MH();
        try {
            return (int)mh$.invokeExact(lpsz, cchLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharNextA$MH() {
        return RuntimeHelper.requireNonNull(constants$514.CharNextA$MH,"CharNextA");
    }
    public static MemoryAddress CharNextA ( Addressable lpsz) {
        var mh$ = CharNextA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharNextW$MH() {
        return RuntimeHelper.requireNonNull(constants$514.CharNextW$MH,"CharNextW");
    }
    public static MemoryAddress CharNextW ( Addressable lpsz) {
        var mh$ = CharNextW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharPrevA$MH() {
        return RuntimeHelper.requireNonNull(constants$514.CharPrevA$MH,"CharPrevA");
    }
    public static MemoryAddress CharPrevA ( Addressable lpszStart,  Addressable lpszCurrent) {
        var mh$ = CharPrevA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszStart, lpszCurrent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharPrevW$MH() {
        return RuntimeHelper.requireNonNull(constants$514.CharPrevW$MH,"CharPrevW");
    }
    public static MemoryAddress CharPrevW ( Addressable lpszStart,  Addressable lpszCurrent) {
        var mh$ = CharPrevW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszStart, lpszCurrent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharNextExA$MH() {
        return RuntimeHelper.requireNonNull(constants$514.CharNextExA$MH,"CharNextExA");
    }
    public static MemoryAddress CharNextExA ( short CodePage,  Addressable lpCurrentChar,  int dwFlags) {
        var mh$ = CharNextExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(CodePage, lpCurrentChar, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CharPrevExA$MH() {
        return RuntimeHelper.requireNonNull(constants$515.CharPrevExA$MH,"CharPrevExA");
    }
    public static MemoryAddress CharPrevExA ( short CodePage,  Addressable lpStart,  Addressable lpCurrentChar,  int dwFlags) {
        var mh$ = CharPrevExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(CodePage, lpStart, lpCurrentChar, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaA$MH() {
        return RuntimeHelper.requireNonNull(constants$515.IsCharAlphaA$MH,"IsCharAlphaA");
    }
    public static int IsCharAlphaA ( byte ch) {
        var mh$ = IsCharAlphaA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaW$MH() {
        return RuntimeHelper.requireNonNull(constants$515.IsCharAlphaW$MH,"IsCharAlphaW");
    }
    public static int IsCharAlphaW ( short ch) {
        var mh$ = IsCharAlphaW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaNumericA$MH() {
        return RuntimeHelper.requireNonNull(constants$515.IsCharAlphaNumericA$MH,"IsCharAlphaNumericA");
    }
    public static int IsCharAlphaNumericA ( byte ch) {
        var mh$ = IsCharAlphaNumericA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharAlphaNumericW$MH() {
        return RuntimeHelper.requireNonNull(constants$515.IsCharAlphaNumericW$MH,"IsCharAlphaNumericW");
    }
    public static int IsCharAlphaNumericW ( short ch) {
        var mh$ = IsCharAlphaNumericW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharUpperA$MH() {
        return RuntimeHelper.requireNonNull(constants$515.IsCharUpperA$MH,"IsCharUpperA");
    }
    public static int IsCharUpperA ( byte ch) {
        var mh$ = IsCharUpperA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$516.IsCharUpperW$MH,"IsCharUpperW");
    }
    public static int IsCharUpperW ( short ch) {
        var mh$ = IsCharUpperW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharLowerA$MH() {
        return RuntimeHelper.requireNonNull(constants$516.IsCharLowerA$MH,"IsCharLowerA");
    }
    public static int IsCharLowerA ( byte ch) {
        var mh$ = IsCharLowerA$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsCharLowerW$MH() {
        return RuntimeHelper.requireNonNull(constants$516.IsCharLowerW$MH,"IsCharLowerW");
    }
    public static int IsCharLowerW ( short ch) {
        var mh$ = IsCharLowerW$MH();
        try {
            return (int)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$516.SetFocus$MH,"SetFocus");
    }
    public static MemoryAddress SetFocus ( Addressable hWnd) {
        var mh$ = SetFocus$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$516.GetActiveWindow$MH,"GetActiveWindow");
    }
    public static MemoryAddress GetActiveWindow () {
        var mh$ = GetActiveWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFocus$MH() {
        return RuntimeHelper.requireNonNull(constants$516.GetFocus$MH,"GetFocus");
    }
    public static MemoryAddress GetFocus () {
        var mh$ = GetFocus$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKBCodePage$MH() {
        return RuntimeHelper.requireNonNull(constants$517.GetKBCodePage$MH,"GetKBCodePage");
    }
    public static int GetKBCodePage () {
        var mh$ = GetKBCodePage$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyState$MH() {
        return RuntimeHelper.requireNonNull(constants$517.GetKeyState$MH,"GetKeyState");
    }
    public static short GetKeyState ( int nVirtKey) {
        var mh$ = GetKeyState$MH();
        try {
            return (short)mh$.invokeExact(nVirtKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAsyncKeyState$MH() {
        return RuntimeHelper.requireNonNull(constants$517.GetAsyncKeyState$MH,"GetAsyncKeyState");
    }
    public static short GetAsyncKeyState ( int vKey) {
        var mh$ = GetAsyncKeyState$MH();
        try {
            return (short)mh$.invokeExact(vKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardState$MH() {
        return RuntimeHelper.requireNonNull(constants$517.GetKeyboardState$MH,"GetKeyboardState");
    }
    public static int GetKeyboardState ( Addressable lpKeyState) {
        var mh$ = GetKeyboardState$MH();
        try {
            return (int)mh$.invokeExact(lpKeyState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetKeyboardState$MH() {
        return RuntimeHelper.requireNonNull(constants$517.SetKeyboardState$MH,"SetKeyboardState");
    }
    public static int SetKeyboardState ( Addressable lpKeyState) {
        var mh$ = SetKeyboardState$MH();
        try {
            return (int)mh$.invokeExact(lpKeyState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyNameTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$517.GetKeyNameTextA$MH,"GetKeyNameTextA");
    }
    public static int GetKeyNameTextA ( int lParam,  Addressable lpString,  int cchSize) {
        var mh$ = GetKeyNameTextA$MH();
        try {
            return (int)mh$.invokeExact(lParam, lpString, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyNameTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$518.GetKeyNameTextW$MH,"GetKeyNameTextW");
    }
    public static int GetKeyNameTextW ( int lParam,  Addressable lpString,  int cchSize) {
        var mh$ = GetKeyNameTextW$MH();
        try {
            return (int)mh$.invokeExact(lParam, lpString, cchSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetKeyboardType$MH() {
        return RuntimeHelper.requireNonNull(constants$518.GetKeyboardType$MH,"GetKeyboardType");
    }
    public static int GetKeyboardType ( int nTypeFlag) {
        var mh$ = GetKeyboardType$MH();
        try {
            return (int)mh$.invokeExact(nTypeFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToAscii$MH() {
        return RuntimeHelper.requireNonNull(constants$518.ToAscii$MH,"ToAscii");
    }
    public static int ToAscii ( int uVirtKey,  int uScanCode,  Addressable lpKeyState,  Addressable lpChar,  int uFlags) {
        var mh$ = ToAscii$MH();
        try {
            return (int)mh$.invokeExact(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToAsciiEx$MH() {
        return RuntimeHelper.requireNonNull(constants$518.ToAsciiEx$MH,"ToAsciiEx");
    }
    public static int ToAsciiEx ( int uVirtKey,  int uScanCode,  Addressable lpKeyState,  Addressable lpChar,  int uFlags,  Addressable dwhkl) {
        var mh$ = ToAsciiEx$MH();
        try {
            return (int)mh$.invokeExact(uVirtKey, uScanCode, lpKeyState, lpChar, uFlags, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ToUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$518.ToUnicode$MH,"ToUnicode");
    }
    public static int ToUnicode ( int wVirtKey,  int wScanCode,  Addressable lpKeyState,  Addressable pwszBuff,  int cchBuff,  int wFlags) {
        var mh$ = ToUnicode$MH();
        try {
            return (int)mh$.invokeExact(wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OemKeyScan$MH() {
        return RuntimeHelper.requireNonNull(constants$518.OemKeyScan$MH,"OemKeyScan");
    }
    public static int OemKeyScan ( short wOemChar) {
        var mh$ = OemKeyScan$MH();
        try {
            return (int)mh$.invokeExact(wOemChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanA$MH() {
        return RuntimeHelper.requireNonNull(constants$519.VkKeyScanA$MH,"VkKeyScanA");
    }
    public static short VkKeyScanA ( byte ch) {
        var mh$ = VkKeyScanA$MH();
        try {
            return (short)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanW$MH() {
        return RuntimeHelper.requireNonNull(constants$519.VkKeyScanW$MH,"VkKeyScanW");
    }
    public static short VkKeyScanW ( short ch) {
        var mh$ = VkKeyScanW$MH();
        try {
            return (short)mh$.invokeExact(ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanExA$MH() {
        return RuntimeHelper.requireNonNull(constants$519.VkKeyScanExA$MH,"VkKeyScanExA");
    }
    public static short VkKeyScanExA ( byte ch,  Addressable dwhkl) {
        var mh$ = VkKeyScanExA$MH();
        try {
            return (short)mh$.invokeExact(ch, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VkKeyScanExW$MH() {
        return RuntimeHelper.requireNonNull(constants$519.VkKeyScanExW$MH,"VkKeyScanExW");
    }
    public static short VkKeyScanExW ( short ch,  Addressable dwhkl) {
        var mh$ = VkKeyScanExW$MH();
        try {
            return (short)mh$.invokeExact(ch, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle keybd_event$MH() {
        return RuntimeHelper.requireNonNull(constants$519.keybd_event$MH,"keybd_event");
    }
    public static void keybd_event ( byte bVk,  byte bScan,  int dwFlags,  long dwExtraInfo) {
        var mh$ = keybd_event$MH();
        try {
            mh$.invokeExact(bVk, bScan, dwFlags, dwExtraInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mouse_event$MH() {
        return RuntimeHelper.requireNonNull(constants$519.mouse_event$MH,"mouse_event");
    }
    public static void mouse_event ( int dwFlags,  int dx,  int dy,  int dwData,  long dwExtraInfo) {
        var mh$ = mouse_event$MH();
        try {
            mh$.invokeExact(dwFlags, dx, dy, dwData, dwExtraInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMOUSEINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKEYBDINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPKEYBDINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHARDWAREINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHARDWAREINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SendInput$MH() {
        return RuntimeHelper.requireNonNull(constants$520.SendInput$MH,"SendInput");
    }
    public static int SendInput ( int cInputs,  Addressable pInputs,  int cbSize) {
        var mh$ = SendInput$MH();
        try {
            return (int)mh$.invokeExact(cInputs, pInputs, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HTOUCHINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOUCHINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTOUCHINPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetTouchInputInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$520.GetTouchInputInfo$MH,"GetTouchInputInfo");
    }
    public static int GetTouchInputInfo ( Addressable hTouchInput,  int cInputs,  Addressable pInputs,  int cbSize) {
        var mh$ = GetTouchInputInfo$MH();
        try {
            return (int)mh$.invokeExact(hTouchInput, cInputs, pInputs, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseTouchInputHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$520.CloseTouchInputHandle$MH,"CloseTouchInputHandle");
    }
    public static int CloseTouchInputHandle ( Addressable hTouchInput) {
        var mh$ = CloseTouchInputHandle$MH();
        try {
            return (int)mh$.invokeExact(hTouchInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$520.RegisterTouchWindow$MH,"RegisterTouchWindow");
    }
    public static int RegisterTouchWindow ( Addressable hwnd,  int ulFlags) {
        var mh$ = RegisterTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, ulFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$520.UnregisterTouchWindow$MH,"UnregisterTouchWindow");
    }
    public static int UnregisterTouchWindow ( Addressable hwnd) {
        var mh$ = UnregisterTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsTouchWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$520.IsTouchWindow$MH,"IsTouchWindow");
    }
    public static int IsTouchWindow ( Addressable hwnd,  Addressable pulFlags) {
        var mh$ = IsTouchWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pulFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int PT_POINTER() {
        return (int)1L;
    }
    public static int PT_TOUCH() {
        return (int)2L;
    }
    public static int PT_PEN() {
        return (int)3L;
    }
    public static int PT_MOUSE() {
        return (int)4L;
    }
    public static int PT_TOUCHPAD() {
        return (int)5L;
    }
    public static int POINTER_CHANGE_NONE() {
        return (int)0L;
    }
    public static int POINTER_CHANGE_FIRSTBUTTON_DOWN() {
        return (int)1L;
    }
    public static int POINTER_CHANGE_FIRSTBUTTON_UP() {
        return (int)2L;
    }
    public static int POINTER_CHANGE_SECONDBUTTON_DOWN() {
        return (int)3L;
    }
    public static int POINTER_CHANGE_SECONDBUTTON_UP() {
        return (int)4L;
    }
    public static int POINTER_CHANGE_THIRDBUTTON_DOWN() {
        return (int)5L;
    }
    public static int POINTER_CHANGE_THIRDBUTTON_UP() {
        return (int)6L;
    }
    public static int POINTER_CHANGE_FOURTHBUTTON_DOWN() {
        return (int)7L;
    }
    public static int POINTER_CHANGE_FOURTHBUTTON_UP() {
        return (int)8L;
    }
    public static int POINTER_CHANGE_FIFTHBUTTON_DOWN() {
        return (int)9L;
    }
    public static int POINTER_CHANGE_FIFTHBUTTON_UP() {
        return (int)10L;
    }
    public static int POINTER_FEEDBACK_DEFAULT() {
        return (int)1L;
    }
    public static int POINTER_FEEDBACK_INDIRECT() {
        return (int)2L;
    }
    public static int POINTER_FEEDBACK_NONE() {
        return (int)3L;
    }
    public static MethodHandle InitializeTouchInjection$MH() {
        return RuntimeHelper.requireNonNull(constants$521.InitializeTouchInjection$MH,"InitializeTouchInjection");
    }
    public static int InitializeTouchInjection ( int maxCount,  int dwMode) {
        var mh$ = InitializeTouchInjection$MH();
        try {
            return (int)mh$.invokeExact(maxCount, dwMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InjectTouchInput$MH() {
        return RuntimeHelper.requireNonNull(constants$521.InjectTouchInput$MH,"InjectTouchInput");
    }
    public static int InjectTouchInput ( int count,  Addressable contacts) {
        var mh$ = InjectTouchInput$MH();
        try {
            return (int)mh$.invokeExact(count, contacts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUSAGE_PROPERTIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINTER_TYPE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINPUT_INJECTION_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetPointerType$MH() {
        return RuntimeHelper.requireNonNull(constants$521.GetPointerType$MH,"GetPointerType");
    }
    public static int GetPointerType ( int pointerId,  Addressable pointerType) {
        var mh$ = GetPointerType$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerCursorId$MH() {
        return RuntimeHelper.requireNonNull(constants$521.GetPointerCursorId$MH,"GetPointerCursorId");
    }
    public static int GetPointerCursorId ( int pointerId,  Addressable cursorId) {
        var mh$ = GetPointerCursorId$MH();
        try {
            return (int)mh$.invokeExact(pointerId, cursorId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$521.GetPointerInfo$MH,"GetPointerInfo");
    }
    public static int GetPointerInfo ( int pointerId,  Addressable pointerInfo) {
        var mh$ = GetPointerInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$521.GetPointerInfoHistory$MH,"GetPointerInfoHistory");
    }
    public static int GetPointerInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable pointerInfo) {
        var mh$ = GetPointerInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$522.GetPointerFrameInfo$MH,"GetPointerFrameInfo");
    }
    public static int GetPointerFrameInfo ( int pointerId,  Addressable pointerCount,  Addressable pointerInfo) {
        var mh$ = GetPointerFrameInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerCount, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$522.GetPointerFrameInfoHistory$MH,"GetPointerFrameInfoHistory");
    }
    public static int GetPointerFrameInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable pointerCount,  Addressable pointerInfo) {
        var mh$ = GetPointerFrameInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerCount, pointerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerTouchInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$522.GetPointerTouchInfo$MH,"GetPointerTouchInfo");
    }
    public static int GetPointerTouchInfo ( int pointerId,  Addressable touchInfo) {
        var mh$ = GetPointerTouchInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerTouchInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$522.GetPointerTouchInfoHistory$MH,"GetPointerTouchInfoHistory");
    }
    public static int GetPointerTouchInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable touchInfo) {
        var mh$ = GetPointerTouchInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameTouchInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$522.GetPointerFrameTouchInfo$MH,"GetPointerFrameTouchInfo");
    }
    public static int GetPointerFrameTouchInfo ( int pointerId,  Addressable pointerCount,  Addressable touchInfo) {
        var mh$ = GetPointerFrameTouchInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerCount, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFrameTouchInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$522.GetPointerFrameTouchInfoHistory$MH,"GetPointerFrameTouchInfoHistory");
    }
    public static int GetPointerFrameTouchInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable pointerCount,  Addressable touchInfo) {
        var mh$ = GetPointerFrameTouchInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerCount, touchInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerPenInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$523.GetPointerPenInfo$MH,"GetPointerPenInfo");
    }
    public static int GetPointerPenInfo ( int pointerId,  Addressable penInfo) {
        var mh$ = GetPointerPenInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerPenInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$523.GetPointerPenInfoHistory$MH,"GetPointerPenInfoHistory");
    }
    public static int GetPointerPenInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable penInfo) {
        var mh$ = GetPointerPenInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFramePenInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$523.GetPointerFramePenInfo$MH,"GetPointerFramePenInfo");
    }
    public static int GetPointerFramePenInfo ( int pointerId,  Addressable pointerCount,  Addressable penInfo) {
        var mh$ = GetPointerFramePenInfo$MH();
        try {
            return (int)mh$.invokeExact(pointerId, pointerCount, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerFramePenInfoHistory$MH() {
        return RuntimeHelper.requireNonNull(constants$523.GetPointerFramePenInfoHistory$MH,"GetPointerFramePenInfoHistory");
    }
    public static int GetPointerFramePenInfoHistory ( int pointerId,  Addressable entriesCount,  Addressable pointerCount,  Addressable penInfo) {
        var mh$ = GetPointerFramePenInfoHistory$MH();
        try {
            return (int)mh$.invokeExact(pointerId, entriesCount, pointerCount, penInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SkipPointerFrameMessages$MH() {
        return RuntimeHelper.requireNonNull(constants$523.SkipPointerFrameMessages$MH,"SkipPointerFrameMessages");
    }
    public static int SkipPointerFrameMessages ( int pointerId) {
        var mh$ = SkipPointerFrameMessages$MH();
        try {
            return (int)mh$.invokeExact(pointerId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterPointerInputTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$523.RegisterPointerInputTarget$MH,"RegisterPointerInputTarget");
    }
    public static int RegisterPointerInputTarget ( Addressable hwnd,  int pointerType) {
        var mh$ = RegisterPointerInputTarget$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterPointerInputTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$524.UnregisterPointerInputTarget$MH,"UnregisterPointerInputTarget");
    }
    public static int UnregisterPointerInputTarget ( Addressable hwnd,  int pointerType) {
        var mh$ = UnregisterPointerInputTarget$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterPointerInputTargetEx$MH() {
        return RuntimeHelper.requireNonNull(constants$524.RegisterPointerInputTargetEx$MH,"RegisterPointerInputTargetEx");
    }
    public static int RegisterPointerInputTargetEx ( Addressable hwnd,  int pointerType,  int fObserve) {
        var mh$ = RegisterPointerInputTargetEx$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType, fObserve);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterPointerInputTargetEx$MH() {
        return RuntimeHelper.requireNonNull(constants$524.UnregisterPointerInputTargetEx$MH,"UnregisterPointerInputTargetEx");
    }
    public static int UnregisterPointerInputTargetEx ( Addressable hwnd,  int pointerType) {
        var mh$ = UnregisterPointerInputTargetEx$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pointerType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HSYNTHETICPOINTERDEVICE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateSyntheticPointerDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$524.CreateSyntheticPointerDevice$MH,"CreateSyntheticPointerDevice");
    }
    public static MemoryAddress CreateSyntheticPointerDevice ( int pointerType,  int maxCount,  int mode) {
        var mh$ = CreateSyntheticPointerDevice$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pointerType, maxCount, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InjectSyntheticPointerInput$MH() {
        return RuntimeHelper.requireNonNull(constants$524.InjectSyntheticPointerInput$MH,"InjectSyntheticPointerInput");
    }
    public static int InjectSyntheticPointerInput ( Addressable device,  Addressable pointerInfo,  int count) {
        var mh$ = InjectSyntheticPointerInput$MH();
        try {
            return (int)mh$.invokeExact(device, pointerInfo, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroySyntheticPointerDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$524.DestroySyntheticPointerDevice$MH,"DestroySyntheticPointerDevice");
    }
    public static void DestroySyntheticPointerDevice ( Addressable device) {
        var mh$ = DestroySyntheticPointerDevice$MH();
        try {
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableMouseInPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$525.EnableMouseInPointer$MH,"EnableMouseInPointer");
    }
    public static int EnableMouseInPointer ( int fEnable) {
        var mh$ = EnableMouseInPointer$MH();
        try {
            return (int)mh$.invokeExact(fEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsMouseInPointerEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$525.IsMouseInPointerEnabled$MH,"IsMouseInPointerEnabled");
    }
    public static int IsMouseInPointerEnabled () {
        var mh$ = IsMouseInPointerEnabled$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableMouseInPointerForThread$MH() {
        return RuntimeHelper.requireNonNull(constants$525.EnableMouseInPointerForThread$MH,"EnableMouseInPointerForThread");
    }
    public static int EnableMouseInPointerForThread () {
        var mh$ = EnableMouseInPointerForThread$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterTouchHitTestingWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$525.RegisterTouchHitTestingWindow$MH,"RegisterTouchHitTestingWindow");
    }
    public static int RegisterTouchHitTestingWindow ( Addressable hwnd,  int value) {
        var mh$ = RegisterTouchHitTestingWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOUCH_HIT_TESTING_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle EvaluateProximityToRect$MH() {
        return RuntimeHelper.requireNonNull(constants$525.EvaluateProximityToRect$MH,"EvaluateProximityToRect");
    }
    public static int EvaluateProximityToRect ( Addressable controlBoundingBox,  Addressable pHitTestingInput,  Addressable pProximityEval) {
        var mh$ = EvaluateProximityToRect$MH();
        try {
            return (int)mh$.invokeExact(controlBoundingBox, pHitTestingInput, pProximityEval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EvaluateProximityToPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$525.EvaluateProximityToPolygon$MH,"EvaluateProximityToPolygon");
    }
    public static int EvaluateProximityToPolygon ( int numVertices,  Addressable controlPolygon,  Addressable pHitTestingInput,  Addressable pProximityEval) {
        var mh$ = EvaluateProximityToPolygon$MH();
        try {
            return (int)mh$.invokeExact(numVertices, controlPolygon, pHitTestingInput, pProximityEval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PackTouchHitTestingProximityEvaluation$MH() {
        return RuntimeHelper.requireNonNull(constants$526.PackTouchHitTestingProximityEvaluation$MH,"PackTouchHitTestingProximityEvaluation");
    }
    public static long PackTouchHitTestingProximityEvaluation ( Addressable pHitTestingInput,  Addressable pProximityEval) {
        var mh$ = PackTouchHitTestingProximityEvaluation$MH();
        try {
            return (long)mh$.invokeExact(pHitTestingInput, pProximityEval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FEEDBACK_TOUCH_CONTACTVISUALIZATION() {
        return (int)1L;
    }
    public static int FEEDBACK_PEN_BARRELVISUALIZATION() {
        return (int)2L;
    }
    public static int FEEDBACK_PEN_TAP() {
        return (int)3L;
    }
    public static int FEEDBACK_PEN_DOUBLETAP() {
        return (int)4L;
    }
    public static int FEEDBACK_PEN_PRESSANDHOLD() {
        return (int)5L;
    }
    public static int FEEDBACK_PEN_RIGHTTAP() {
        return (int)6L;
    }
    public static int FEEDBACK_TOUCH_TAP() {
        return (int)7L;
    }
    public static int FEEDBACK_TOUCH_DOUBLETAP() {
        return (int)8L;
    }
    public static int FEEDBACK_TOUCH_PRESSANDHOLD() {
        return (int)9L;
    }
    public static int FEEDBACK_TOUCH_RIGHTTAP() {
        return (int)10L;
    }
    public static int FEEDBACK_GESTURE_PRESSANDTAP() {
        return (int)11L;
    }
    public static int FEEDBACK_MAX() {
        return (int)-1L;
    }
    public static MethodHandle GetWindowFeedbackSetting$MH() {
        return RuntimeHelper.requireNonNull(constants$526.GetWindowFeedbackSetting$MH,"GetWindowFeedbackSetting");
    }
    public static int GetWindowFeedbackSetting ( Addressable hwnd,  int feedback,  int dwFlags,  Addressable pSize,  Addressable config) {
        var mh$ = GetWindowFeedbackSetting$MH();
        try {
            return (int)mh$.invokeExact(hwnd, feedback, dwFlags, pSize, config);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowFeedbackSetting$MH() {
        return RuntimeHelper.requireNonNull(constants$526.SetWindowFeedbackSetting$MH,"SetWindowFeedbackSetting");
    }
    public static int SetWindowFeedbackSetting ( Addressable hwnd,  int feedback,  int dwFlags,  int size,  Addressable configuration) {
        var mh$ = SetWindowFeedbackSetting$MH();
        try {
            return (int)mh$.invokeExact(hwnd, feedback, dwFlags, size, configuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerInputTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$526.GetPointerInputTransform$MH,"GetPointerInputTransform");
    }
    public static int GetPointerInputTransform ( int pointerId,  int historyCount,  Addressable inputTransform) {
        var mh$ = GetPointerInputTransform$MH();
        try {
            return (int)mh$.invokeExact(pointerId, historyCount, inputTransform);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PLASTINPUTINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetLastInputInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$526.GetLastInputInfo$MH,"GetLastInputInfo");
    }
    public static int GetLastInputInfo ( Addressable plii) {
        var mh$ = GetLastInputInfo$MH();
        try {
            return (int)mh$.invokeExact(plii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$526.MapVirtualKeyA$MH,"MapVirtualKeyA");
    }
    public static int MapVirtualKeyA ( int uCode,  int uMapType) {
        var mh$ = MapVirtualKeyA$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$527.MapVirtualKeyW$MH,"MapVirtualKeyW");
    }
    public static int MapVirtualKeyW ( int uCode,  int uMapType) {
        var mh$ = MapVirtualKeyW$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$527.MapVirtualKeyExA$MH,"MapVirtualKeyExA");
    }
    public static int MapVirtualKeyExA ( int uCode,  int uMapType,  Addressable dwhkl) {
        var mh$ = MapVirtualKeyExA$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapVirtualKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$527.MapVirtualKeyExW$MH,"MapVirtualKeyExW");
    }
    public static int MapVirtualKeyExW ( int uCode,  int uMapType,  Addressable dwhkl) {
        var mh$ = MapVirtualKeyExW$MH();
        try {
            return (int)mh$.invokeExact(uCode, uMapType, dwhkl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetInputState$MH() {
        return RuntimeHelper.requireNonNull(constants$527.GetInputState$MH,"GetInputState");
    }
    public static int GetInputState () {
        var mh$ = GetInputState$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetQueueStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$527.GetQueueStatus$MH,"GetQueueStatus");
    }
    public static int GetQueueStatus ( int flags) {
        var mh$ = GetQueueStatus$MH();
        try {
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$527.GetCapture$MH,"GetCapture");
    }
    public static MemoryAddress GetCapture () {
        var mh$ = GetCapture$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$528.SetCapture$MH,"SetCapture");
    }
    public static MemoryAddress SetCapture ( Addressable hWnd) {
        var mh$ = SetCapture$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseCapture$MH() {
        return RuntimeHelper.requireNonNull(constants$528.ReleaseCapture$MH,"ReleaseCapture");
    }
    public static int ReleaseCapture () {
        var mh$ = ReleaseCapture$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MsgWaitForMultipleObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$528.MsgWaitForMultipleObjects$MH,"MsgWaitForMultipleObjects");
    }
    public static int MsgWaitForMultipleObjects ( int nCount,  Addressable pHandles,  int fWaitAll,  int dwMilliseconds,  int dwWakeMask) {
        var mh$ = MsgWaitForMultipleObjects$MH();
        try {
            return (int)mh$.invokeExact(nCount, pHandles, fWaitAll, dwMilliseconds, dwWakeMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MsgWaitForMultipleObjectsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$528.MsgWaitForMultipleObjectsEx$MH,"MsgWaitForMultipleObjectsEx");
    }
    public static int MsgWaitForMultipleObjectsEx ( int nCount,  Addressable pHandles,  int dwMilliseconds,  int dwWakeMask,  int dwFlags) {
        var mh$ = MsgWaitForMultipleObjectsEx$MH();
        try {
            return (int)mh$.invokeExact(nCount, pHandles, dwMilliseconds, dwWakeMask, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$528.SetTimer$MH,"SetTimer");
    }
    public static long SetTimer ( Addressable hWnd,  long nIDEvent,  int uElapse,  Addressable lpTimerFunc) {
        var mh$ = SetTimer$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIDEvent, uElapse, lpTimerFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCoalescableTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$528.SetCoalescableTimer$MH,"SetCoalescableTimer");
    }
    public static long SetCoalescableTimer ( Addressable hWnd,  long nIDEvent,  int uElapse,  Addressable lpTimerFunc,  int uToleranceDelay) {
        var mh$ = SetCoalescableTimer$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIDEvent, uElapse, lpTimerFunc, uToleranceDelay);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle KillTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$529.KillTimer$MH,"KillTimer");
    }
    public static int KillTimer ( Addressable hWnd,  long uIDEvent) {
        var mh$ = KillTimer$MH();
        try {
            return (int)mh$.invokeExact(hWnd, uIDEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$529.IsWindowUnicode$MH,"IsWindowUnicode");
    }
    public static int IsWindowUnicode ( Addressable hWnd) {
        var mh$ = IsWindowUnicode$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$529.EnableWindow$MH,"EnableWindow");
    }
    public static int EnableWindow ( Addressable hWnd,  int bEnable) {
        var mh$ = EnableWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, bEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWindowEnabled$MH() {
        return RuntimeHelper.requireNonNull(constants$529.IsWindowEnabled$MH,"IsWindowEnabled");
    }
    public static int IsWindowEnabled ( Addressable hWnd) {
        var mh$ = IsWindowEnabled$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadAcceleratorsA$MH() {
        return RuntimeHelper.requireNonNull(constants$529.LoadAcceleratorsA$MH,"LoadAcceleratorsA");
    }
    public static MemoryAddress LoadAcceleratorsA ( Addressable hInstance,  Addressable lpTableName) {
        var mh$ = LoadAcceleratorsA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTableName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadAcceleratorsW$MH() {
        return RuntimeHelper.requireNonNull(constants$529.LoadAcceleratorsW$MH,"LoadAcceleratorsW");
    }
    public static MemoryAddress LoadAcceleratorsW ( Addressable hInstance,  Addressable lpTableName) {
        var mh$ = LoadAcceleratorsW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpTableName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateAcceleratorTableA$MH() {
        return RuntimeHelper.requireNonNull(constants$530.CreateAcceleratorTableA$MH,"CreateAcceleratorTableA");
    }
    public static MemoryAddress CreateAcceleratorTableA ( Addressable paccel,  int cAccel) {
        var mh$ = CreateAcceleratorTableA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(paccel, cAccel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateAcceleratorTableW$MH() {
        return RuntimeHelper.requireNonNull(constants$530.CreateAcceleratorTableW$MH,"CreateAcceleratorTableW");
    }
    public static MemoryAddress CreateAcceleratorTableW ( Addressable paccel,  int cAccel) {
        var mh$ = CreateAcceleratorTableW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(paccel, cAccel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyAcceleratorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$530.DestroyAcceleratorTable$MH,"DestroyAcceleratorTable");
    }
    public static int DestroyAcceleratorTable ( Addressable hAccel) {
        var mh$ = DestroyAcceleratorTable$MH();
        try {
            return (int)mh$.invokeExact(hAccel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyAcceleratorTableA$MH() {
        return RuntimeHelper.requireNonNull(constants$530.CopyAcceleratorTableA$MH,"CopyAcceleratorTableA");
    }
    public static int CopyAcceleratorTableA ( Addressable hAccelSrc,  Addressable lpAccelDst,  int cAccelEntries) {
        var mh$ = CopyAcceleratorTableA$MH();
        try {
            return (int)mh$.invokeExact(hAccelSrc, lpAccelDst, cAccelEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyAcceleratorTableW$MH() {
        return RuntimeHelper.requireNonNull(constants$530.CopyAcceleratorTableW$MH,"CopyAcceleratorTableW");
    }
    public static int CopyAcceleratorTableW ( Addressable hAccelSrc,  Addressable lpAccelDst,  int cAccelEntries) {
        var mh$ = CopyAcceleratorTableW$MH();
        try {
            return (int)mh$.invokeExact(hAccelSrc, lpAccelDst, cAccelEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateAcceleratorA$MH() {
        return RuntimeHelper.requireNonNull(constants$530.TranslateAcceleratorA$MH,"TranslateAcceleratorA");
    }
    public static int TranslateAcceleratorA ( Addressable hWnd,  Addressable hAccTable,  Addressable lpMsg) {
        var mh$ = TranslateAcceleratorA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hAccTable, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateAcceleratorW$MH() {
        return RuntimeHelper.requireNonNull(constants$531.TranslateAcceleratorW$MH,"TranslateAcceleratorW");
    }
    public static int TranslateAcceleratorW ( Addressable hWnd,  Addressable hAccTable,  Addressable lpMsg) {
        var mh$ = TranslateAcceleratorW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hAccTable, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemMetrics$MH() {
        return RuntimeHelper.requireNonNull(constants$531.GetSystemMetrics$MH,"GetSystemMetrics");
    }
    public static int GetSystemMetrics ( int nIndex) {
        var mh$ = GetSystemMetrics$MH();
        try {
            return (int)mh$.invokeExact(nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemMetricsForDpi$MH() {
        return RuntimeHelper.requireNonNull(constants$531.GetSystemMetricsForDpi$MH,"GetSystemMetricsForDpi");
    }
    public static int GetSystemMetricsForDpi ( int nIndex,  int dpi) {
        var mh$ = GetSystemMetricsForDpi$MH();
        try {
            return (int)mh$.invokeExact(nIndex, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$531.LoadMenuA$MH,"LoadMenuA");
    }
    public static MemoryAddress LoadMenuA ( Addressable hInstance,  Addressable lpMenuName) {
        var mh$ = LoadMenuA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpMenuName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$531.LoadMenuW$MH,"LoadMenuW");
    }
    public static MemoryAddress LoadMenuW ( Addressable hInstance,  Addressable lpMenuName) {
        var mh$ = LoadMenuW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpMenuName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuIndirectA$MH() {
        return RuntimeHelper.requireNonNull(constants$531.LoadMenuIndirectA$MH,"LoadMenuIndirectA");
    }
    public static MemoryAddress LoadMenuIndirectA ( Addressable lpMenuTemplate) {
        var mh$ = LoadMenuIndirectA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMenuTemplate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadMenuIndirectW$MH() {
        return RuntimeHelper.requireNonNull(constants$532.LoadMenuIndirectW$MH,"LoadMenuIndirectW");
    }
    public static MemoryAddress LoadMenuIndirectW ( Addressable lpMenuTemplate) {
        var mh$ = LoadMenuIndirectW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpMenuTemplate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$532.GetMenu$MH,"GetMenu");
    }
    public static MemoryAddress GetMenu ( Addressable hWnd) {
        var mh$ = GetMenu$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$532.SetMenu$MH,"SetMenu");
    }
    public static int SetMenu ( Addressable hWnd,  Addressable hMenu) {
        var mh$ = SetMenu$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$532.ChangeMenuA$MH,"ChangeMenuA");
    }
    public static int ChangeMenuA ( Addressable hMenu,  int cmd,  Addressable lpszNewItem,  int cmdInsert,  int flags) {
        var mh$ = ChangeMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, cmd, lpszNewItem, cmdInsert, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$532.ChangeMenuW$MH,"ChangeMenuW");
    }
    public static int ChangeMenuW ( Addressable hMenu,  int cmd,  Addressable lpszNewItem,  int cmdInsert,  int flags) {
        var mh$ = ChangeMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, cmd, lpszNewItem, cmdInsert, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HiliteMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$532.HiliteMenuItem$MH,"HiliteMenuItem");
    }
    public static int HiliteMenuItem ( Addressable hWnd,  Addressable hMenu,  int uIDHiliteItem,  int uHilite) {
        var mh$ = HiliteMenuItem$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu, uIDHiliteItem, uHilite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$533.GetMenuStringA$MH,"GetMenuStringA");
    }
    public static int GetMenuStringA ( Addressable hMenu,  int uIDItem,  Addressable lpString,  int cchMax,  int flags) {
        var mh$ = GetMenuStringA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDItem, lpString, cchMax, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$533.GetMenuStringW$MH,"GetMenuStringW");
    }
    public static int GetMenuStringW ( Addressable hMenu,  int uIDItem,  Addressable lpString,  int cchMax,  int flags) {
        var mh$ = GetMenuStringW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDItem, lpString, cchMax, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuState$MH() {
        return RuntimeHelper.requireNonNull(constants$533.GetMenuState$MH,"GetMenuState");
    }
    public static int GetMenuState ( Addressable hMenu,  int uId,  int uFlags) {
        var mh$ = GetMenuState$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uId, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawMenuBar$MH() {
        return RuntimeHelper.requireNonNull(constants$533.DrawMenuBar$MH,"DrawMenuBar");
    }
    public static int DrawMenuBar ( Addressable hWnd) {
        var mh$ = DrawMenuBar$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$533.GetSystemMenu$MH,"GetSystemMenu");
    }
    public static MemoryAddress GetSystemMenu ( Addressable hWnd,  int bRevert) {
        var mh$ = GetSystemMenu$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, bRevert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$533.CreateMenu$MH,"CreateMenu");
    }
    public static MemoryAddress CreateMenu () {
        var mh$ = CreateMenu$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePopupMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$534.CreatePopupMenu$MH,"CreatePopupMenu");
    }
    public static MemoryAddress CreatePopupMenu () {
        var mh$ = CreatePopupMenu$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$534.DestroyMenu$MH,"DestroyMenu");
    }
    public static int DestroyMenu ( Addressable hMenu) {
        var mh$ = DestroyMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$534.CheckMenuItem$MH,"CheckMenuItem");
    }
    public static int CheckMenuItem ( Addressable hMenu,  int uIDCheckItem,  int uCheck) {
        var mh$ = CheckMenuItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDCheckItem, uCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$534.EnableMenuItem$MH,"EnableMenuItem");
    }
    public static int EnableMenuItem ( Addressable hMenu,  int uIDEnableItem,  int uEnable) {
        var mh$ = EnableMenuItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uIDEnableItem, uEnable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSubMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$534.GetSubMenu$MH,"GetSubMenu");
    }
    public static MemoryAddress GetSubMenu ( Addressable hMenu,  int nPos) {
        var mh$ = GetSubMenu$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hMenu, nPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemID$MH() {
        return RuntimeHelper.requireNonNull(constants$534.GetMenuItemID$MH,"GetMenuItemID");
    }
    public static int GetMenuItemID ( Addressable hMenu,  int nPos) {
        var mh$ = GetMenuItemID$MH();
        try {
            return (int)mh$.invokeExact(hMenu, nPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemCount$MH() {
        return RuntimeHelper.requireNonNull(constants$535.GetMenuItemCount$MH,"GetMenuItemCount");
    }
    public static int GetMenuItemCount ( Addressable hMenu) {
        var mh$ = GetMenuItemCount$MH();
        try {
            return (int)mh$.invokeExact(hMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InsertMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$535.InsertMenuA$MH,"InsertMenuA");
    }
    public static int InsertMenuA ( Addressable hMenu,  int uPosition,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = InsertMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InsertMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$535.InsertMenuW$MH,"InsertMenuW");
    }
    public static int InsertMenuW ( Addressable hMenu,  int uPosition,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = InsertMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AppendMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$535.AppendMenuA$MH,"AppendMenuA");
    }
    public static int AppendMenuA ( Addressable hMenu,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = AppendMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AppendMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$535.AppendMenuW$MH,"AppendMenuW");
    }
    public static int AppendMenuW ( Addressable hMenu,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = AppendMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ModifyMenuA$MH() {
        return RuntimeHelper.requireNonNull(constants$535.ModifyMenuA$MH,"ModifyMenuA");
    }
    public static int ModifyMenuA ( Addressable hMnu,  int uPosition,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = ModifyMenuA$MH();
        try {
            return (int)mh$.invokeExact(hMnu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ModifyMenuW$MH() {
        return RuntimeHelper.requireNonNull(constants$536.ModifyMenuW$MH,"ModifyMenuW");
    }
    public static int ModifyMenuW ( Addressable hMnu,  int uPosition,  int uFlags,  long uIDNewItem,  Addressable lpNewItem) {
        var mh$ = ModifyMenuW$MH();
        try {
            return (int)mh$.invokeExact(hMnu, uPosition, uFlags, uIDNewItem, lpNewItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$536.RemoveMenu$MH,"RemoveMenu");
    }
    public static int RemoveMenu ( Addressable hMenu,  int uPosition,  int uFlags) {
        var mh$ = RemoveMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$536.DeleteMenu$MH,"DeleteMenu");
    }
    public static int DeleteMenu ( Addressable hMenu,  int uPosition,  int uFlags) {
        var mh$ = DeleteMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuItemBitmaps$MH() {
        return RuntimeHelper.requireNonNull(constants$536.SetMenuItemBitmaps$MH,"SetMenuItemBitmaps");
    }
    public static int SetMenuItemBitmaps ( Addressable hMenu,  int uPosition,  int uFlags,  Addressable hBitmapUnchecked,  Addressable hBitmapChecked) {
        var mh$ = SetMenuItemBitmaps$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uPosition, uFlags, hBitmapUnchecked, hBitmapChecked);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuCheckMarkDimensions$MH() {
        return RuntimeHelper.requireNonNull(constants$536.GetMenuCheckMarkDimensions$MH,"GetMenuCheckMarkDimensions");
    }
    public static int GetMenuCheckMarkDimensions () {
        var mh$ = GetMenuCheckMarkDimensions$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TrackPopupMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$536.TrackPopupMenu$MH,"TrackPopupMenu");
    }
    public static int TrackPopupMenu ( Addressable hMenu,  int uFlags,  int x,  int y,  int nReserved,  Addressable hWnd,  Addressable prcRect) {
        var mh$ = TrackPopupMenu$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, x, y, nReserved, hWnd, prcRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPTPMPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle TrackPopupMenuEx$MH() {
        return RuntimeHelper.requireNonNull(constants$537.TrackPopupMenuEx$MH,"TrackPopupMenuEx");
    }
    public static int TrackPopupMenuEx ( Addressable hMenu,  int uFlags,  int x,  int y,  Addressable hwnd,  Addressable lptpm) {
        var mh$ = TrackPopupMenuEx$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uFlags, x, y, hwnd, lptpm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CalculatePopupWindowPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$537.CalculatePopupWindowPosition$MH,"CalculatePopupWindowPosition");
    }
    public static int CalculatePopupWindowPosition ( Addressable anchorPoint,  Addressable windowSize,  int flags,  Addressable excludeRect,  Addressable popupWindowPosition) {
        var mh$ = CalculatePopupWindowPosition$MH();
        try {
            return (int)mh$.invokeExact(anchorPoint, windowSize, flags, excludeRect, popupWindowPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPMENUINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMENUINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMenuInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$537.GetMenuInfo$MH,"GetMenuInfo");
    }
    public static int GetMenuInfo ( Addressable x0,  Addressable x1) {
        var mh$ = GetMenuInfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$537.SetMenuInfo$MH,"SetMenuInfo");
    }
    public static int SetMenuInfo ( Addressable x0,  Addressable x1) {
        var mh$ = SetMenuInfo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndMenu$MH() {
        return RuntimeHelper.requireNonNull(constants$537.EndMenu$MH,"EndMenu");
    }
    public static int EndMenu () {
        var mh$ = EndMenu$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMENUGETOBJECTINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle InsertMenuItemA$MH() {
        return RuntimeHelper.requireNonNull(constants$537.InsertMenuItemA$MH,"InsertMenuItemA");
    }
    public static int InsertMenuItemA ( Addressable hmenu,  int item,  int fByPosition,  Addressable lpmi) {
        var mh$ = InsertMenuItemA$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InsertMenuItemW$MH() {
        return RuntimeHelper.requireNonNull(constants$538.InsertMenuItemW$MH,"InsertMenuItemW");
    }
    public static int InsertMenuItemW ( Addressable hmenu,  int item,  int fByPosition,  Addressable lpmi) {
        var mh$ = InsertMenuItemW$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$538.GetMenuItemInfoA$MH,"GetMenuItemInfoA");
    }
    public static int GetMenuItemInfoA ( Addressable hmenu,  int item,  int fByPosition,  Addressable lpmii) {
        var mh$ = GetMenuItemInfoA$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$538.GetMenuItemInfoW$MH,"GetMenuItemInfoW");
    }
    public static int GetMenuItemInfoW ( Addressable hmenu,  int item,  int fByPosition,  Addressable lpmii) {
        var mh$ = GetMenuItemInfoW$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPosition, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuItemInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$538.SetMenuItemInfoA$MH,"SetMenuItemInfoA");
    }
    public static int SetMenuItemInfoA ( Addressable hmenu,  int item,  int fByPositon,  Addressable lpmii) {
        var mh$ = SetMenuItemInfoA$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPositon, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuItemInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$538.SetMenuItemInfoW$MH,"SetMenuItemInfoW");
    }
    public static int SetMenuItemInfoW ( Addressable hmenu,  int item,  int fByPositon,  Addressable lpmii) {
        var mh$ = SetMenuItemInfoW$MH();
        try {
            return (int)mh$.invokeExact(hmenu, item, fByPositon, lpmii);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuDefaultItem$MH() {
        return RuntimeHelper.requireNonNull(constants$538.GetMenuDefaultItem$MH,"GetMenuDefaultItem");
    }
    public static int GetMenuDefaultItem ( Addressable hMenu,  int fByPos,  int gmdiFlags) {
        var mh$ = GetMenuDefaultItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, fByPos, gmdiFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuDefaultItem$MH() {
        return RuntimeHelper.requireNonNull(constants$539.SetMenuDefaultItem$MH,"SetMenuDefaultItem");
    }
    public static int SetMenuDefaultItem ( Addressable hMenu,  int uItem,  int fByPos) {
        var mh$ = SetMenuDefaultItem$MH();
        try {
            return (int)mh$.invokeExact(hMenu, uItem, fByPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuItemRect$MH() {
        return RuntimeHelper.requireNonNull(constants$539.GetMenuItemRect$MH,"GetMenuItemRect");
    }
    public static int GetMenuItemRect ( Addressable hWnd,  Addressable hMenu,  int uItem,  Addressable lprcItem) {
        var mh$ = GetMenuItemRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu, uItem, lprcItem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MenuItemFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$539.MenuItemFromPoint$MH,"MenuItemFromPoint");
    }
    public static int MenuItemFromPoint ( Addressable hWnd,  Addressable hMenu,  MemorySegment ptScreen) {
        var mh$ = MenuItemFromPoint$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hMenu, ptScreen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PDROPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDROPSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DragObject$MH() {
        return RuntimeHelper.requireNonNull(constants$539.DragObject$MH,"DragObject");
    }
    public static int DragObject ( Addressable hwndParent,  Addressable hwndFrom,  int fmt,  long data,  Addressable hcur) {
        var mh$ = DragObject$MH();
        try {
            return (int)mh$.invokeExact(hwndParent, hwndFrom, fmt, data, hcur);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DragDetect$MH() {
        return RuntimeHelper.requireNonNull(constants$539.DragDetect$MH,"DragDetect");
    }
    public static int DragDetect ( Addressable hwnd,  MemorySegment pt) {
        var mh$ = DragDetect$MH();
        try {
            return (int)mh$.invokeExact(hwnd, pt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$539.DrawIcon$MH,"DrawIcon");
    }
    public static int DrawIcon ( Addressable hDC,  int X,  int Y,  Addressable hIcon) {
        var mh$ = DrawIcon$MH();
        try {
            return (int)mh$.invokeExact(hDC, X, Y, hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDRAWTEXTPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DrawTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$540.DrawTextA$MH,"DrawTextA");
    }
    public static int DrawTextA ( Addressable hdc,  Addressable lpchText,  int cchText,  Addressable lprc,  int format) {
        var mh$ = DrawTextA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$540.DrawTextW$MH,"DrawTextW");
    }
    public static int DrawTextW ( Addressable hdc,  Addressable lpchText,  int cchText,  Addressable lprc,  int format) {
        var mh$ = DrawTextW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextExA$MH() {
        return RuntimeHelper.requireNonNull(constants$540.DrawTextExA$MH,"DrawTextExA");
    }
    public static int DrawTextExA ( Addressable hdc,  Addressable lpchText,  int cchText,  Addressable lprc,  int format,  Addressable lpdtp) {
        var mh$ = DrawTextExA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format, lpdtp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawTextExW$MH() {
        return RuntimeHelper.requireNonNull(constants$540.DrawTextExW$MH,"DrawTextExW");
    }
    public static int DrawTextExW ( Addressable hdc,  Addressable lpchText,  int cchText,  Addressable lprc,  int format,  Addressable lpdtp) {
        var mh$ = DrawTextExW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpchText, cchText, lprc, format, lpdtp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GrayStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$540.GrayStringA$MH,"GrayStringA");
    }
    public static int GrayStringA ( Addressable hDC,  Addressable hBrush,  Addressable lpOutputFunc,  long lpData,  int nCount,  int X,  int Y,  int nWidth,  int nHeight) {
        var mh$ = GrayStringA$MH();
        try {
            return (int)mh$.invokeExact(hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GrayStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$540.GrayStringW$MH,"GrayStringW");
    }
    public static int GrayStringW ( Addressable hDC,  Addressable hBrush,  Addressable lpOutputFunc,  long lpData,  int nCount,  int X,  int Y,  int nWidth,  int nHeight) {
        var mh$ = GrayStringW$MH();
        try {
            return (int)mh$.invokeExact(hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawStateA$MH() {
        return RuntimeHelper.requireNonNull(constants$541.DrawStateA$MH,"DrawStateA");
    }
    public static int DrawStateA ( Addressable hdc,  Addressable hbrFore,  Addressable qfnCallBack,  long lData,  long wData,  int x,  int y,  int cx,  int cy,  int uFlags) {
        var mh$ = DrawStateA$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbrFore, qfnCallBack, lData, wData, x, y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawStateW$MH() {
        return RuntimeHelper.requireNonNull(constants$541.DrawStateW$MH,"DrawStateW");
    }
    public static int DrawStateW ( Addressable hdc,  Addressable hbrFore,  Addressable qfnCallBack,  long lData,  long wData,  int x,  int y,  int cx,  int cy,  int uFlags) {
        var mh$ = DrawStateW$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbrFore, qfnCallBack, lData, wData, x, y, cx, cy, uFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TabbedTextOutA$MH() {
        return RuntimeHelper.requireNonNull(constants$541.TabbedTextOutA$MH,"TabbedTextOutA");
    }
    public static int TabbedTextOutA ( Addressable hdc,  int x,  int y,  Addressable lpString,  int chCount,  int nTabPositions,  Addressable lpnTabStopPositions,  int nTabOrigin) {
        var mh$ = TabbedTextOutA$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, chCount, nTabPositions, lpnTabStopPositions, nTabOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TabbedTextOutW$MH() {
        return RuntimeHelper.requireNonNull(constants$541.TabbedTextOutW$MH,"TabbedTextOutW");
    }
    public static int TabbedTextOutW ( Addressable hdc,  int x,  int y,  Addressable lpString,  int chCount,  int nTabPositions,  Addressable lpnTabStopPositions,  int nTabOrigin) {
        var mh$ = TabbedTextOutW$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, lpString, chCount, nTabPositions, lpnTabStopPositions, nTabOrigin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTabbedTextExtentA$MH() {
        return RuntimeHelper.requireNonNull(constants$541.GetTabbedTextExtentA$MH,"GetTabbedTextExtentA");
    }
    public static int GetTabbedTextExtentA ( Addressable hdc,  Addressable lpString,  int chCount,  int nTabPositions,  Addressable lpnTabStopPositions) {
        var mh$ = GetTabbedTextExtentA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, chCount, nTabPositions, lpnTabStopPositions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTabbedTextExtentW$MH() {
        return RuntimeHelper.requireNonNull(constants$541.GetTabbedTextExtentW$MH,"GetTabbedTextExtentW");
    }
    public static int GetTabbedTextExtentW ( Addressable hdc,  Addressable lpString,  int chCount,  int nTabPositions,  Addressable lpnTabStopPositions) {
        var mh$ = GetTabbedTextExtentW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, chCount, nTabPositions, lpnTabStopPositions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$542.UpdateWindow$MH,"UpdateWindow");
    }
    public static int UpdateWindow ( Addressable hWnd) {
        var mh$ = UpdateWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetActiveWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$542.SetActiveWindow$MH,"SetActiveWindow");
    }
    public static MemoryAddress SetActiveWindow ( Addressable hWnd) {
        var mh$ = SetActiveWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$542.GetForegroundWindow$MH,"GetForegroundWindow");
    }
    public static MemoryAddress GetForegroundWindow () {
        var mh$ = GetForegroundWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PaintDesktop$MH() {
        return RuntimeHelper.requireNonNull(constants$542.PaintDesktop$MH,"PaintDesktop");
    }
    public static int PaintDesktop ( Addressable hdc) {
        var mh$ = PaintDesktop$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SwitchToThisWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$542.SwitchToThisWindow$MH,"SwitchToThisWindow");
    }
    public static void SwitchToThisWindow ( Addressable hwnd,  int fUnknown) {
        var mh$ = SwitchToThisWindow$MH();
        try {
            mh$.invokeExact(hwnd, fUnknown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$542.SetForegroundWindow$MH,"SetForegroundWindow");
    }
    public static int SetForegroundWindow ( Addressable hWnd) {
        var mh$ = SetForegroundWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AllowSetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$543.AllowSetForegroundWindow$MH,"AllowSetForegroundWindow");
    }
    public static int AllowSetForegroundWindow ( int dwProcessId) {
        var mh$ = AllowSetForegroundWindow$MH();
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockSetForegroundWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$543.LockSetForegroundWindow$MH,"LockSetForegroundWindow");
    }
    public static int LockSetForegroundWindow ( int uLockCode) {
        var mh$ = LockSetForegroundWindow$MH();
        try {
            return (int)mh$.invokeExact(uLockCode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WindowFromDC$MH() {
        return RuntimeHelper.requireNonNull(constants$543.WindowFromDC$MH,"WindowFromDC");
    }
    public static MemoryAddress WindowFromDC ( Addressable hDC) {
        var mh$ = WindowFromDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hDC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDC$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetDC$MH,"GetDC");
    }
    public static MemoryAddress GetDC ( Addressable hWnd) {
        var mh$ = GetDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCEx$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetDCEx$MH,"GetDCEx");
    }
    public static MemoryAddress GetDCEx ( Addressable hWnd,  Addressable hrgnClip,  int flags) {
        var mh$ = GetDCEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, hrgnClip, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDC$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetWindowDC$MH,"GetWindowDC");
    }
    public static MemoryAddress GetWindowDC ( Addressable hWnd) {
        var mh$ = GetWindowDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseDC$MH() {
        return RuntimeHelper.requireNonNull(constants$544.ReleaseDC$MH,"ReleaseDC");
    }
    public static int ReleaseDC ( Addressable hWnd,  Addressable hDC) {
        var mh$ = ReleaseDC$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hDC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginPaint$MH() {
        return RuntimeHelper.requireNonNull(constants$544.BeginPaint$MH,"BeginPaint");
    }
    public static MemoryAddress BeginPaint ( Addressable hWnd,  Addressable lpPaint) {
        var mh$ = BeginPaint$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, lpPaint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPaint$MH() {
        return RuntimeHelper.requireNonNull(constants$544.EndPaint$MH,"EndPaint");
    }
    public static int EndPaint ( Addressable hWnd,  Addressable lpPaint) {
        var mh$ = EndPaint$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPaint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUpdateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$544.GetUpdateRect$MH,"GetUpdateRect");
    }
    public static int GetUpdateRect ( Addressable hWnd,  Addressable lpRect,  int bErase) {
        var mh$ = GetUpdateRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUpdateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$544.GetUpdateRgn$MH,"GetUpdateRgn");
    }
    public static int GetUpdateRgn ( Addressable hWnd,  Addressable hRgn,  int bErase) {
        var mh$ = GetUpdateRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$544.SetWindowRgn$MH,"SetWindowRgn");
    }
    public static int SetWindowRgn ( Addressable hWnd,  Addressable hRgn,  int bRedraw) {
        var mh$ = SetWindowRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn, bRedraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$545.GetWindowRgn$MH,"GetWindowRgn");
    }
    public static int GetWindowRgn ( Addressable hWnd,  Addressable hRgn) {
        var mh$ = GetWindowRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowRgnBox$MH() {
        return RuntimeHelper.requireNonNull(constants$545.GetWindowRgnBox$MH,"GetWindowRgnBox");
    }
    public static int GetWindowRgnBox ( Addressable hWnd,  Addressable lprc) {
        var mh$ = GetWindowRgnBox$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExcludeUpdateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$545.ExcludeUpdateRgn$MH,"ExcludeUpdateRgn");
    }
    public static int ExcludeUpdateRgn ( Addressable hDC,  Addressable hWnd) {
        var mh$ = ExcludeUpdateRgn$MH();
        try {
            return (int)mh$.invokeExact(hDC, hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvalidateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$545.InvalidateRect$MH,"InvalidateRect");
    }
    public static int InvalidateRect ( Addressable hWnd,  Addressable lpRect,  int bErase) {
        var mh$ = InvalidateRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ValidateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$545.ValidateRect$MH,"ValidateRect");
    }
    public static int ValidateRect ( Addressable hWnd,  Addressable lpRect) {
        var mh$ = ValidateRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvalidateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$545.InvalidateRgn$MH,"InvalidateRgn");
    }
    public static int InvalidateRgn ( Addressable hWnd,  Addressable hRgn,  int bErase) {
        var mh$ = InvalidateRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn, bErase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ValidateRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$546.ValidateRgn$MH,"ValidateRgn");
    }
    public static int ValidateRgn ( Addressable hWnd,  Addressable hRgn) {
        var mh$ = ValidateRgn$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hRgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RedrawWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$546.RedrawWindow$MH,"RedrawWindow");
    }
    public static int RedrawWindow ( Addressable hWnd,  Addressable lprcUpdate,  Addressable hrgnUpdate,  int flags) {
        var mh$ = RedrawWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lprcUpdate, hrgnUpdate, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockWindowUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$546.LockWindowUpdate$MH,"LockWindowUpdate");
    }
    public static int LockWindowUpdate ( Addressable hWndLock) {
        var mh$ = LockWindowUpdate$MH();
        try {
            return (int)mh$.invokeExact(hWndLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$546.ScrollWindow$MH,"ScrollWindow");
    }
    public static int ScrollWindow ( Addressable hWnd,  int XAmount,  int YAmount,  Addressable lpRect,  Addressable lpClipRect) {
        var mh$ = ScrollWindow$MH();
        try {
            return (int)mh$.invokeExact(hWnd, XAmount, YAmount, lpRect, lpClipRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollDC$MH() {
        return RuntimeHelper.requireNonNull(constants$546.ScrollDC$MH,"ScrollDC");
    }
    public static int ScrollDC ( Addressable hDC,  int dx,  int dy,  Addressable lprcScroll,  Addressable lprcClip,  Addressable hrgnUpdate,  Addressable lprcUpdate) {
        var mh$ = ScrollDC$MH();
        try {
            return (int)mh$.invokeExact(hDC, dx, dy, lprcScroll, lprcClip, hrgnUpdate, lprcUpdate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollWindowEx$MH() {
        return RuntimeHelper.requireNonNull(constants$546.ScrollWindowEx$MH,"ScrollWindowEx");
    }
    public static int ScrollWindowEx ( Addressable hWnd,  int dx,  int dy,  Addressable prcScroll,  Addressable prcClip,  Addressable hrgnUpdate,  Addressable prcUpdate,  int flags) {
        var mh$ = ScrollWindowEx$MH();
        try {
            return (int)mh$.invokeExact(hWnd, dx, dy, prcScroll, prcClip, hrgnUpdate, prcUpdate, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetScrollPos$MH() {
        return RuntimeHelper.requireNonNull(constants$547.SetScrollPos$MH,"SetScrollPos");
    }
    public static int SetScrollPos ( Addressable hWnd,  int nBar,  int nPos,  int bRedraw) {
        var mh$ = SetScrollPos$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar, nPos, bRedraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScrollPos$MH() {
        return RuntimeHelper.requireNonNull(constants$547.GetScrollPos$MH,"GetScrollPos");
    }
    public static int GetScrollPos ( Addressable hWnd,  int nBar) {
        var mh$ = GetScrollPos$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetScrollRange$MH() {
        return RuntimeHelper.requireNonNull(constants$547.SetScrollRange$MH,"SetScrollRange");
    }
    public static int SetScrollRange ( Addressable hWnd,  int nBar,  int nMinPos,  int nMaxPos,  int bRedraw) {
        var mh$ = SetScrollRange$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar, nMinPos, nMaxPos, bRedraw);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetScrollRange$MH() {
        return RuntimeHelper.requireNonNull(constants$547.GetScrollRange$MH,"GetScrollRange");
    }
    public static int GetScrollRange ( Addressable hWnd,  int nBar,  Addressable lpMinPos,  Addressable lpMaxPos) {
        var mh$ = GetScrollRange$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nBar, lpMinPos, lpMaxPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowScrollBar$MH() {
        return RuntimeHelper.requireNonNull(constants$547.ShowScrollBar$MH,"ShowScrollBar");
    }
    public static int ShowScrollBar ( Addressable hWnd,  int wBar,  int bShow) {
        var mh$ = ShowScrollBar$MH();
        try {
            return (int)mh$.invokeExact(hWnd, wBar, bShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableScrollBar$MH() {
        return RuntimeHelper.requireNonNull(constants$547.EnableScrollBar$MH,"EnableScrollBar");
    }
    public static int EnableScrollBar ( Addressable hWnd,  int wSBflags,  int wArrows) {
        var mh$ = EnableScrollBar$MH();
        try {
            return (int)mh$.invokeExact(hWnd, wSBflags, wArrows);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPropA$MH() {
        return RuntimeHelper.requireNonNull(constants$548.SetPropA$MH,"SetPropA");
    }
    public static int SetPropA ( Addressable hWnd,  Addressable lpString,  Addressable hData) {
        var mh$ = SetPropA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, hData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPropW$MH() {
        return RuntimeHelper.requireNonNull(constants$548.SetPropW$MH,"SetPropW");
    }
    public static int SetPropW ( Addressable hWnd,  Addressable lpString,  Addressable hData) {
        var mh$ = SetPropW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, hData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPropA$MH() {
        return RuntimeHelper.requireNonNull(constants$548.GetPropA$MH,"GetPropA");
    }
    public static MemoryAddress GetPropA ( Addressable hWnd,  Addressable lpString) {
        var mh$ = GetPropA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPropW$MH() {
        return RuntimeHelper.requireNonNull(constants$548.GetPropW$MH,"GetPropW");
    }
    public static MemoryAddress GetPropW ( Addressable hWnd,  Addressable lpString) {
        var mh$ = GetPropW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemovePropA$MH() {
        return RuntimeHelper.requireNonNull(constants$548.RemovePropA$MH,"RemovePropA");
    }
    public static MemoryAddress RemovePropA ( Addressable hWnd,  Addressable lpString) {
        var mh$ = RemovePropA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemovePropW$MH() {
        return RuntimeHelper.requireNonNull(constants$548.RemovePropW$MH,"RemovePropW");
    }
    public static MemoryAddress RemovePropW ( Addressable hWnd,  Addressable lpString) {
        var mh$ = RemovePropW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$549.EnumPropsExA$MH,"EnumPropsExA");
    }
    public static int EnumPropsExA ( Addressable hWnd,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumPropsExA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$549.EnumPropsExW$MH,"EnumPropsExW");
    }
    public static int EnumPropsExW ( Addressable hWnd,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumPropsExW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsA$MH() {
        return RuntimeHelper.requireNonNull(constants$549.EnumPropsA$MH,"EnumPropsA");
    }
    public static int EnumPropsA ( Addressable hWnd,  Addressable lpEnumFunc) {
        var mh$ = EnumPropsA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumPropsW$MH() {
        return RuntimeHelper.requireNonNull(constants$549.EnumPropsW$MH,"EnumPropsW");
    }
    public static int EnumPropsW ( Addressable hWnd,  Addressable lpEnumFunc) {
        var mh$ = EnumPropsW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpEnumFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$549.SetWindowTextA$MH,"SetWindowTextA");
    }
    public static int SetWindowTextA ( Addressable hWnd,  Addressable lpString) {
        var mh$ = SetWindowTextA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$549.SetWindowTextW$MH,"SetWindowTextW");
    }
    public static int SetWindowTextW ( Addressable hWnd,  Addressable lpString) {
        var mh$ = SetWindowTextW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextA$MH() {
        return RuntimeHelper.requireNonNull(constants$550.GetWindowTextA$MH,"GetWindowTextA");
    }
    public static int GetWindowTextA ( Addressable hWnd,  Addressable lpString,  int nMaxCount) {
        var mh$ = GetWindowTextA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextW$MH() {
        return RuntimeHelper.requireNonNull(constants$550.GetWindowTextW$MH,"GetWindowTextW");
    }
    public static int GetWindowTextW ( Addressable hWnd,  Addressable lpString,  int nMaxCount) {
        var mh$ = GetWindowTextW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpString, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$550.GetWindowTextLengthA$MH,"GetWindowTextLengthA");
    }
    public static int GetWindowTextLengthA ( Addressable hWnd) {
        var mh$ = GetWindowTextLengthA$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowTextLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$550.GetWindowTextLengthW$MH,"GetWindowTextLengthW");
    }
    public static int GetWindowTextLengthW ( Addressable hWnd) {
        var mh$ = GetWindowTextLengthW$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClientRect$MH() {
        return RuntimeHelper.requireNonNull(constants$550.GetClientRect$MH,"GetClientRect");
    }
    public static int GetClientRect ( Addressable hWnd,  Addressable lpRect) {
        var mh$ = GetClientRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowRect$MH() {
        return RuntimeHelper.requireNonNull(constants$550.GetWindowRect$MH,"GetWindowRect");
    }
    public static int GetWindowRect ( Addressable hWnd,  Addressable lpRect) {
        var mh$ = GetWindowRect$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustWindowRect$MH() {
        return RuntimeHelper.requireNonNull(constants$551.AdjustWindowRect$MH,"AdjustWindowRect");
    }
    public static int AdjustWindowRect ( Addressable lpRect,  int dwStyle,  int bMenu) {
        var mh$ = AdjustWindowRect$MH();
        try {
            return (int)mh$.invokeExact(lpRect, dwStyle, bMenu);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustWindowRectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$551.AdjustWindowRectEx$MH,"AdjustWindowRectEx");
    }
    public static int AdjustWindowRectEx ( Addressable lpRect,  int dwStyle,  int bMenu,  int dwExStyle) {
        var mh$ = AdjustWindowRectEx$MH();
        try {
            return (int)mh$.invokeExact(lpRect, dwStyle, bMenu, dwExStyle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AdjustWindowRectExForDpi$MH() {
        return RuntimeHelper.requireNonNull(constants$551.AdjustWindowRectExForDpi$MH,"AdjustWindowRectExForDpi");
    }
    public static int AdjustWindowRectExForDpi ( Addressable lpRect,  int dwStyle,  int bMenu,  int dwExStyle,  int dpi) {
        var mh$ = AdjustWindowRectExForDpi$MH();
        try {
            return (int)mh$.invokeExact(lpRect, dwStyle, bMenu, dwExStyle, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPHELPINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetWindowContextHelpId$MH() {
        return RuntimeHelper.requireNonNull(constants$551.SetWindowContextHelpId$MH,"SetWindowContextHelpId");
    }
    public static int SetWindowContextHelpId ( Addressable x0,  int x1) {
        var mh$ = SetWindowContextHelpId$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowContextHelpId$MH() {
        return RuntimeHelper.requireNonNull(constants$551.GetWindowContextHelpId$MH,"GetWindowContextHelpId");
    }
    public static int GetWindowContextHelpId ( Addressable x0) {
        var mh$ = GetWindowContextHelpId$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMenuContextHelpId$MH() {
        return RuntimeHelper.requireNonNull(constants$551.SetMenuContextHelpId$MH,"SetMenuContextHelpId");
    }
    public static int SetMenuContextHelpId ( Addressable x0,  int x1) {
        var mh$ = SetMenuContextHelpId$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMenuContextHelpId$MH() {
        return RuntimeHelper.requireNonNull(constants$552.GetMenuContextHelpId$MH,"GetMenuContextHelpId");
    }
    public static int GetMenuContextHelpId ( Addressable x0) {
        var mh$ = GetMenuContextHelpId$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBoxA$MH() {
        return RuntimeHelper.requireNonNull(constants$552.MessageBoxA$MH,"MessageBoxA");
    }
    public static int MessageBoxA ( Addressable hWnd,  Addressable lpText,  Addressable lpCaption,  int uType) {
        var mh$ = MessageBoxA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpText, lpCaption, uType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBoxW$MH() {
        return RuntimeHelper.requireNonNull(constants$552.MessageBoxW$MH,"MessageBoxW");
    }
    public static int MessageBoxW ( Addressable hWnd,  Addressable lpText,  Addressable lpCaption,  int uType) {
        var mh$ = MessageBoxW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpText, lpCaption, uType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBoxExA$MH() {
        return RuntimeHelper.requireNonNull(constants$552.MessageBoxExA$MH,"MessageBoxExA");
    }
    public static int MessageBoxExA ( Addressable hWnd,  Addressable lpText,  Addressable lpCaption,  int uType,  short wLanguageId) {
        var mh$ = MessageBoxExA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpText, lpCaption, uType, wLanguageId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBoxExW$MH() {
        return RuntimeHelper.requireNonNull(constants$552.MessageBoxExW$MH,"MessageBoxExW");
    }
    public static int MessageBoxExW ( Addressable hWnd,  Addressable lpText,  Addressable lpCaption,  int uType,  short wLanguageId) {
        var mh$ = MessageBoxExW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpText, lpCaption, uType, wLanguageId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMSGBOXPARAMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMSGBOXPARAMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMSGBOXPARAMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMSGBOXPARAMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMSGBOXPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMSGBOXPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle MessageBoxIndirectA$MH() {
        return RuntimeHelper.requireNonNull(constants$553.MessageBoxIndirectA$MH,"MessageBoxIndirectA");
    }
    public static int MessageBoxIndirectA ( Addressable lpmbp) {
        var mh$ = MessageBoxIndirectA$MH();
        try {
            return (int)mh$.invokeExact(lpmbp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBoxIndirectW$MH() {
        return RuntimeHelper.requireNonNull(constants$553.MessageBoxIndirectW$MH,"MessageBoxIndirectW");
    }
    public static int MessageBoxIndirectW ( Addressable lpmbp) {
        var mh$ = MessageBoxIndirectW$MH();
        try {
            return (int)mh$.invokeExact(lpmbp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MessageBeep$MH() {
        return RuntimeHelper.requireNonNull(constants$553.MessageBeep$MH,"MessageBeep");
    }
    public static int MessageBeep ( int uType) {
        var mh$ = MessageBeep$MH();
        try {
            return (int)mh$.invokeExact(uType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$553.ShowCursor$MH,"ShowCursor");
    }
    public static int ShowCursor ( int bShow) {
        var mh$ = ShowCursor$MH();
        try {
            return (int)mh$.invokeExact(bShow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCursorPos$MH() {
        return RuntimeHelper.requireNonNull(constants$553.SetCursorPos$MH,"SetCursorPos");
    }
    public static int SetCursorPos ( int X,  int Y) {
        var mh$ = SetCursorPos$MH();
        try {
            return (int)mh$.invokeExact(X, Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPhysicalCursorPos$MH() {
        return RuntimeHelper.requireNonNull(constants$554.SetPhysicalCursorPos$MH,"SetPhysicalCursorPos");
    }
    public static int SetPhysicalCursorPos ( int X,  int Y) {
        var mh$ = SetPhysicalCursorPos$MH();
        try {
            return (int)mh$.invokeExact(X, Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$554.SetCursor$MH,"SetCursor");
    }
    public static MemoryAddress SetCursor ( Addressable hCursor) {
        var mh$ = SetCursor$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCursorPos$MH() {
        return RuntimeHelper.requireNonNull(constants$554.GetCursorPos$MH,"GetCursorPos");
    }
    public static int GetCursorPos ( Addressable lpPoint) {
        var mh$ = GetCursorPos$MH();
        try {
            return (int)mh$.invokeExact(lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPhysicalCursorPos$MH() {
        return RuntimeHelper.requireNonNull(constants$554.GetPhysicalCursorPos$MH,"GetPhysicalCursorPos");
    }
    public static int GetPhysicalCursorPos ( Addressable lpPoint) {
        var mh$ = GetPhysicalCursorPos$MH();
        try {
            return (int)mh$.invokeExact(lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$554.GetClipCursor$MH,"GetClipCursor");
    }
    public static int GetClipCursor ( Addressable lpRect) {
        var mh$ = GetClipCursor$MH();
        try {
            return (int)mh$.invokeExact(lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$554.GetCursor$MH,"GetCursor");
    }
    public static MemoryAddress GetCursor () {
        var mh$ = GetCursor$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateCaret$MH() {
        return RuntimeHelper.requireNonNull(constants$555.CreateCaret$MH,"CreateCaret");
    }
    public static int CreateCaret ( Addressable hWnd,  Addressable hBitmap,  int nWidth,  int nHeight) {
        var mh$ = CreateCaret$MH();
        try {
            return (int)mh$.invokeExact(hWnd, hBitmap, nWidth, nHeight);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCaretBlinkTime$MH() {
        return RuntimeHelper.requireNonNull(constants$555.GetCaretBlinkTime$MH,"GetCaretBlinkTime");
    }
    public static int GetCaretBlinkTime () {
        var mh$ = GetCaretBlinkTime$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCaretBlinkTime$MH() {
        return RuntimeHelper.requireNonNull(constants$555.SetCaretBlinkTime$MH,"SetCaretBlinkTime");
    }
    public static int SetCaretBlinkTime ( int uMSeconds) {
        var mh$ = SetCaretBlinkTime$MH();
        try {
            return (int)mh$.invokeExact(uMSeconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyCaret$MH() {
        return RuntimeHelper.requireNonNull(constants$555.DestroyCaret$MH,"DestroyCaret");
    }
    public static int DestroyCaret () {
        var mh$ = DestroyCaret$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HideCaret$MH() {
        return RuntimeHelper.requireNonNull(constants$555.HideCaret$MH,"HideCaret");
    }
    public static int HideCaret ( Addressable hWnd) {
        var mh$ = HideCaret$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShowCaret$MH() {
        return RuntimeHelper.requireNonNull(constants$555.ShowCaret$MH,"ShowCaret");
    }
    public static int ShowCaret ( Addressable hWnd) {
        var mh$ = ShowCaret$MH();
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCaretPos$MH() {
        return RuntimeHelper.requireNonNull(constants$556.SetCaretPos$MH,"SetCaretPos");
    }
    public static int SetCaretPos ( int X,  int Y) {
        var mh$ = SetCaretPos$MH();
        try {
            return (int)mh$.invokeExact(X, Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCaretPos$MH() {
        return RuntimeHelper.requireNonNull(constants$556.GetCaretPos$MH,"GetCaretPos");
    }
    public static int GetCaretPos ( Addressable lpPoint) {
        var mh$ = GetCaretPos$MH();
        try {
            return (int)mh$.invokeExact(lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClientToScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$556.ClientToScreen$MH,"ClientToScreen");
    }
    public static int ClientToScreen ( Addressable hWnd,  Addressable lpPoint) {
        var mh$ = ClientToScreen$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScreenToClient$MH() {
        return RuntimeHelper.requireNonNull(constants$556.ScreenToClient$MH,"ScreenToClient");
    }
    public static int ScreenToClient ( Addressable hWnd,  Addressable lpPoint) {
        var mh$ = ScreenToClient$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogicalToPhysicalPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$556.LogicalToPhysicalPoint$MH,"LogicalToPhysicalPoint");
    }
    public static int LogicalToPhysicalPoint ( Addressable hWnd,  Addressable lpPoint) {
        var mh$ = LogicalToPhysicalPoint$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PhysicalToLogicalPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$556.PhysicalToLogicalPoint$MH,"PhysicalToLogicalPoint");
    }
    public static int PhysicalToLogicalPoint ( Addressable hWnd,  Addressable lpPoint) {
        var mh$ = PhysicalToLogicalPoint$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogicalToPhysicalPointForPerMonitorDPI$MH() {
        return RuntimeHelper.requireNonNull(constants$557.LogicalToPhysicalPointForPerMonitorDPI$MH,"LogicalToPhysicalPointForPerMonitorDPI");
    }
    public static int LogicalToPhysicalPointForPerMonitorDPI ( Addressable hWnd,  Addressable lpPoint) {
        var mh$ = LogicalToPhysicalPointForPerMonitorDPI$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PhysicalToLogicalPointForPerMonitorDPI$MH() {
        return RuntimeHelper.requireNonNull(constants$557.PhysicalToLogicalPointForPerMonitorDPI$MH,"PhysicalToLogicalPointForPerMonitorDPI");
    }
    public static int PhysicalToLogicalPointForPerMonitorDPI ( Addressable hWnd,  Addressable lpPoint) {
        var mh$ = PhysicalToLogicalPointForPerMonitorDPI$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapWindowPoints$MH() {
        return RuntimeHelper.requireNonNull(constants$557.MapWindowPoints$MH,"MapWindowPoints");
    }
    public static int MapWindowPoints ( Addressable hWndFrom,  Addressable hWndTo,  Addressable lpPoints,  int cPoints) {
        var mh$ = MapWindowPoints$MH();
        try {
            return (int)mh$.invokeExact(hWndFrom, hWndTo, lpPoints, cPoints);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WindowFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$557.WindowFromPoint$MH,"WindowFromPoint");
    }
    public static MemoryAddress WindowFromPoint ( MemorySegment Point) {
        var mh$ = WindowFromPoint$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WindowFromPhysicalPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$557.WindowFromPhysicalPoint$MH,"WindowFromPhysicalPoint");
    }
    public static MemoryAddress WindowFromPhysicalPoint ( MemorySegment Point) {
        var mh$ = WindowFromPhysicalPoint$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChildWindowFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$557.ChildWindowFromPoint$MH,"ChildWindowFromPoint");
    }
    public static MemoryAddress ChildWindowFromPoint ( Addressable hWndParent,  MemorySegment Point) {
        var mh$ = ChildWindowFromPoint$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWndParent, Point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClipCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$558.ClipCursor$MH,"ClipCursor");
    }
    public static int ClipCursor ( Addressable lpRect) {
        var mh$ = ClipCursor$MH();
        try {
            return (int)mh$.invokeExact(lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChildWindowFromPointEx$MH() {
        return RuntimeHelper.requireNonNull(constants$558.ChildWindowFromPointEx$MH,"ChildWindowFromPointEx");
    }
    public static MemoryAddress ChildWindowFromPointEx ( Addressable hwnd,  MemorySegment pt,  int flags) {
        var mh$ = ChildWindowFromPointEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hwnd, pt, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSysColor$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetSysColor$MH,"GetSysColor");
    }
    public static int GetSysColor ( int nIndex) {
        var mh$ = GetSysColor$MH();
        try {
            return (int)mh$.invokeExact(nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSysColorBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetSysColorBrush$MH,"GetSysColorBrush");
    }
    public static MemoryAddress GetSysColorBrush ( int nIndex) {
        var mh$ = GetSysColorBrush$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSysColors$MH() {
        return RuntimeHelper.requireNonNull(constants$558.SetSysColors$MH,"SetSysColors");
    }
    public static int SetSysColors ( int cElements,  Addressable lpaElements,  Addressable lpaRgbValues) {
        var mh$ = SetSysColors$MH();
        try {
            return (int)mh$.invokeExact(cElements, lpaElements, lpaRgbValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawFocusRect$MH() {
        return RuntimeHelper.requireNonNull(constants$558.DrawFocusRect$MH,"DrawFocusRect");
    }
    public static int DrawFocusRect ( Addressable hDC,  Addressable lprc) {
        var mh$ = DrawFocusRect$MH();
        try {
            return (int)mh$.invokeExact(hDC, lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillRect$MH() {
        return RuntimeHelper.requireNonNull(constants$559.FillRect$MH,"FillRect");
    }
    public static int FillRect ( Addressable hDC,  Addressable lprc,  Addressable hbr) {
        var mh$ = FillRect$MH();
        try {
            return (int)mh$.invokeExact(hDC, lprc, hbr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FrameRect$MH() {
        return RuntimeHelper.requireNonNull(constants$559.FrameRect$MH,"FrameRect");
    }
    public static int FrameRect ( Addressable hDC,  Addressable lprc,  Addressable hbr) {
        var mh$ = FrameRect$MH();
        try {
            return (int)mh$.invokeExact(hDC, lprc, hbr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvertRect$MH() {
        return RuntimeHelper.requireNonNull(constants$559.InvertRect$MH,"InvertRect");
    }
    public static int InvertRect ( Addressable hDC,  Addressable lprc) {
        var mh$ = InvertRect$MH();
        try {
            return (int)mh$.invokeExact(hDC, lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetRect$MH() {
        return RuntimeHelper.requireNonNull(constants$559.SetRect$MH,"SetRect");
    }
    public static int SetRect ( Addressable lprc,  int xLeft,  int yTop,  int xRight,  int yBottom) {
        var mh$ = SetRect$MH();
        try {
            return (int)mh$.invokeExact(lprc, xLeft, yTop, xRight, yBottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetRectEmpty$MH() {
        return RuntimeHelper.requireNonNull(constants$559.SetRectEmpty$MH,"SetRectEmpty");
    }
    public static int SetRectEmpty ( Addressable lprc) {
        var mh$ = SetRectEmpty$MH();
        try {
            return (int)mh$.invokeExact(lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyRect$MH() {
        return RuntimeHelper.requireNonNull(constants$559.CopyRect$MH,"CopyRect");
    }
    public static int CopyRect ( Addressable lprcDst,  Addressable lprcSrc) {
        var mh$ = CopyRect$MH();
        try {
            return (int)mh$.invokeExact(lprcDst, lprcSrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InflateRect$MH() {
        return RuntimeHelper.requireNonNull(constants$560.InflateRect$MH,"InflateRect");
    }
    public static int InflateRect ( Addressable lprc,  int dx,  int dy) {
        var mh$ = InflateRect$MH();
        try {
            return (int)mh$.invokeExact(lprc, dx, dy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IntersectRect$MH() {
        return RuntimeHelper.requireNonNull(constants$560.IntersectRect$MH,"IntersectRect");
    }
    public static int IntersectRect ( Addressable lprcDst,  Addressable lprcSrc1,  Addressable lprcSrc2) {
        var mh$ = IntersectRect$MH();
        try {
            return (int)mh$.invokeExact(lprcDst, lprcSrc1, lprcSrc2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnionRect$MH() {
        return RuntimeHelper.requireNonNull(constants$560.UnionRect$MH,"UnionRect");
    }
    public static int UnionRect ( Addressable lprcDst,  Addressable lprcSrc1,  Addressable lprcSrc2) {
        var mh$ = UnionRect$MH();
        try {
            return (int)mh$.invokeExact(lprcDst, lprcSrc1, lprcSrc2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SubtractRect$MH() {
        return RuntimeHelper.requireNonNull(constants$560.SubtractRect$MH,"SubtractRect");
    }
    public static int SubtractRect ( Addressable lprcDst,  Addressable lprcSrc1,  Addressable lprcSrc2) {
        var mh$ = SubtractRect$MH();
        try {
            return (int)mh$.invokeExact(lprcDst, lprcSrc1, lprcSrc2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetRect$MH() {
        return RuntimeHelper.requireNonNull(constants$560.OffsetRect$MH,"OffsetRect");
    }
    public static int OffsetRect ( Addressable lprc,  int dx,  int dy) {
        var mh$ = OffsetRect$MH();
        try {
            return (int)mh$.invokeExact(lprc, dx, dy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsRectEmpty$MH() {
        return RuntimeHelper.requireNonNull(constants$560.IsRectEmpty$MH,"IsRectEmpty");
    }
    public static int IsRectEmpty ( Addressable lprc) {
        var mh$ = IsRectEmpty$MH();
        try {
            return (int)mh$.invokeExact(lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualRect$MH() {
        return RuntimeHelper.requireNonNull(constants$561.EqualRect$MH,"EqualRect");
    }
    public static int EqualRect ( Addressable lprc1,  Addressable lprc2) {
        var mh$ = EqualRect$MH();
        try {
            return (int)mh$.invokeExact(lprc1, lprc2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtInRect$MH() {
        return RuntimeHelper.requireNonNull(constants$561.PtInRect$MH,"PtInRect");
    }
    public static int PtInRect ( Addressable lprc,  MemorySegment pt) {
        var mh$ = PtInRect$MH();
        try {
            return (int)mh$.invokeExact(lprc, pt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowWord$MH() {
        return RuntimeHelper.requireNonNull(constants$561.GetWindowWord$MH,"GetWindowWord");
    }
    public static short GetWindowWord ( Addressable hWnd,  int nIndex) {
        var mh$ = GetWindowWord$MH();
        try {
            return (short)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowWord$MH() {
        return RuntimeHelper.requireNonNull(constants$561.SetWindowWord$MH,"SetWindowWord");
    }
    public static short SetWindowWord ( Addressable hWnd,  int nIndex,  short wNewWord) {
        var mh$ = SetWindowWord$MH();
        try {
            return (short)mh$.invokeExact(hWnd, nIndex, wNewWord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowLongA$MH() {
        return RuntimeHelper.requireNonNull(constants$561.GetWindowLongA$MH,"GetWindowLongA");
    }
    public static int GetWindowLongA ( Addressable hWnd,  int nIndex) {
        var mh$ = GetWindowLongA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowLongW$MH() {
        return RuntimeHelper.requireNonNull(constants$561.GetWindowLongW$MH,"GetWindowLongW");
    }
    public static int GetWindowLongW ( Addressable hWnd,  int nIndex) {
        var mh$ = GetWindowLongW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowLongA$MH() {
        return RuntimeHelper.requireNonNull(constants$562.SetWindowLongA$MH,"SetWindowLongA");
    }
    public static int SetWindowLongA ( Addressable hWnd,  int nIndex,  int dwNewLong) {
        var mh$ = SetWindowLongA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowLongW$MH() {
        return RuntimeHelper.requireNonNull(constants$562.SetWindowLongW$MH,"SetWindowLongW");
    }
    public static int SetWindowLongW ( Addressable hWnd,  int nIndex,  int dwNewLong) {
        var mh$ = SetWindowLongW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowLongPtrA$MH() {
        return RuntimeHelper.requireNonNull(constants$562.GetWindowLongPtrA$MH,"GetWindowLongPtrA");
    }
    public static long GetWindowLongPtrA ( Addressable hWnd,  int nIndex) {
        var mh$ = GetWindowLongPtrA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowLongPtrW$MH() {
        return RuntimeHelper.requireNonNull(constants$562.GetWindowLongPtrW$MH,"GetWindowLongPtrW");
    }
    public static long GetWindowLongPtrW ( Addressable hWnd,  int nIndex) {
        var mh$ = GetWindowLongPtrW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowLongPtrA$MH() {
        return RuntimeHelper.requireNonNull(constants$562.SetWindowLongPtrA$MH,"SetWindowLongPtrA");
    }
    public static long SetWindowLongPtrA ( Addressable hWnd,  int nIndex,  long dwNewLong) {
        var mh$ = SetWindowLongPtrA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowLongPtrW$MH() {
        return RuntimeHelper.requireNonNull(constants$562.SetWindowLongPtrW$MH,"SetWindowLongPtrW");
    }
    public static long SetWindowLongPtrW ( Addressable hWnd,  int nIndex,  long dwNewLong) {
        var mh$ = SetWindowLongPtrW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassWord$MH() {
        return RuntimeHelper.requireNonNull(constants$563.GetClassWord$MH,"GetClassWord");
    }
    public static short GetClassWord ( Addressable hWnd,  int nIndex) {
        var mh$ = GetClassWord$MH();
        try {
            return (short)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClassWord$MH() {
        return RuntimeHelper.requireNonNull(constants$563.SetClassWord$MH,"SetClassWord");
    }
    public static short SetClassWord ( Addressable hWnd,  int nIndex,  short wNewWord) {
        var mh$ = SetClassWord$MH();
        try {
            return (short)mh$.invokeExact(hWnd, nIndex, wNewWord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassLongA$MH() {
        return RuntimeHelper.requireNonNull(constants$563.GetClassLongA$MH,"GetClassLongA");
    }
    public static int GetClassLongA ( Addressable hWnd,  int nIndex) {
        var mh$ = GetClassLongA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassLongW$MH() {
        return RuntimeHelper.requireNonNull(constants$563.GetClassLongW$MH,"GetClassLongW");
    }
    public static int GetClassLongW ( Addressable hWnd,  int nIndex) {
        var mh$ = GetClassLongW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClassLongA$MH() {
        return RuntimeHelper.requireNonNull(constants$563.SetClassLongA$MH,"SetClassLongA");
    }
    public static int SetClassLongA ( Addressable hWnd,  int nIndex,  int dwNewLong) {
        var mh$ = SetClassLongA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClassLongW$MH() {
        return RuntimeHelper.requireNonNull(constants$563.SetClassLongW$MH,"SetClassLongW");
    }
    public static int SetClassLongW ( Addressable hWnd,  int nIndex,  int dwNewLong) {
        var mh$ = SetClassLongW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassLongPtrA$MH() {
        return RuntimeHelper.requireNonNull(constants$564.GetClassLongPtrA$MH,"GetClassLongPtrA");
    }
    public static long GetClassLongPtrA ( Addressable hWnd,  int nIndex) {
        var mh$ = GetClassLongPtrA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassLongPtrW$MH() {
        return RuntimeHelper.requireNonNull(constants$564.GetClassLongPtrW$MH,"GetClassLongPtrW");
    }
    public static long GetClassLongPtrW ( Addressable hWnd,  int nIndex) {
        var mh$ = GetClassLongPtrW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClassLongPtrA$MH() {
        return RuntimeHelper.requireNonNull(constants$564.SetClassLongPtrA$MH,"SetClassLongPtrA");
    }
    public static long SetClassLongPtrA ( Addressable hWnd,  int nIndex,  long dwNewLong) {
        var mh$ = SetClassLongPtrA$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetClassLongPtrW$MH() {
        return RuntimeHelper.requireNonNull(constants$564.SetClassLongPtrW$MH,"SetClassLongPtrW");
    }
    public static long SetClassLongPtrW ( Addressable hWnd,  int nIndex,  long dwNewLong) {
        var mh$ = SetClassLongPtrW$MH();
        try {
            return (long)mh$.invokeExact(hWnd, nIndex, dwNewLong);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessDefaultLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$564.GetProcessDefaultLayout$MH,"GetProcessDefaultLayout");
    }
    public static int GetProcessDefaultLayout ( Addressable pdwDefaultLayout) {
        var mh$ = GetProcessDefaultLayout$MH();
        try {
            return (int)mh$.invokeExact(pdwDefaultLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDefaultLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$564.SetProcessDefaultLayout$MH,"SetProcessDefaultLayout");
    }
    public static int SetProcessDefaultLayout ( int dwDefaultLayout) {
        var mh$ = SetProcessDefaultLayout$MH();
        try {
            return (int)mh$.invokeExact(dwDefaultLayout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDesktopWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$565.GetDesktopWindow$MH,"GetDesktopWindow");
    }
    public static MemoryAddress GetDesktopWindow () {
        var mh$ = GetDesktopWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetParent$MH() {
        return RuntimeHelper.requireNonNull(constants$565.GetParent$MH,"GetParent");
    }
    public static MemoryAddress GetParent ( Addressable hWnd) {
        var mh$ = GetParent$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetParent$MH() {
        return RuntimeHelper.requireNonNull(constants$565.SetParent$MH,"SetParent");
    }
    public static MemoryAddress SetParent ( Addressable hWndChild,  Addressable hWndNewParent) {
        var mh$ = SetParent$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWndChild, hWndNewParent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumChildWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$565.EnumChildWindows$MH,"EnumChildWindows");
    }
    public static int EnumChildWindows ( Addressable hWndParent,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumChildWindows$MH();
        try {
            return (int)mh$.invokeExact(hWndParent, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindWindowA$MH() {
        return RuntimeHelper.requireNonNull(constants$565.FindWindowA$MH,"FindWindowA");
    }
    public static MemoryAddress FindWindowA ( Addressable lpClassName,  Addressable lpWindowName) {
        var mh$ = FindWindowA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpClassName, lpWindowName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindWindowW$MH() {
        return RuntimeHelper.requireNonNull(constants$565.FindWindowW$MH,"FindWindowW");
    }
    public static MemoryAddress FindWindowW ( Addressable lpClassName,  Addressable lpWindowName) {
        var mh$ = FindWindowW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpClassName, lpWindowName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindWindowExA$MH() {
        return RuntimeHelper.requireNonNull(constants$566.FindWindowExA$MH,"FindWindowExA");
    }
    public static MemoryAddress FindWindowExA ( Addressable hWndParent,  Addressable hWndChildAfter,  Addressable lpszClass,  Addressable lpszWindow) {
        var mh$ = FindWindowExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWndParent, hWndChildAfter, lpszClass, lpszWindow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindWindowExW$MH() {
        return RuntimeHelper.requireNonNull(constants$566.FindWindowExW$MH,"FindWindowExW");
    }
    public static MemoryAddress FindWindowExW ( Addressable hWndParent,  Addressable hWndChildAfter,  Addressable lpszClass,  Addressable lpszWindow) {
        var mh$ = FindWindowExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWndParent, hWndChildAfter, lpszClass, lpszWindow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetShellWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$566.GetShellWindow$MH,"GetShellWindow");
    }
    public static MemoryAddress GetShellWindow () {
        var mh$ = GetShellWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterShellHookWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$566.RegisterShellHookWindow$MH,"RegisterShellHookWindow");
    }
    public static int RegisterShellHookWindow ( Addressable hwnd) {
        var mh$ = RegisterShellHookWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeregisterShellHookWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$566.DeregisterShellHookWindow$MH,"DeregisterShellHookWindow");
    }
    public static int DeregisterShellHookWindow ( Addressable hwnd) {
        var mh$ = DeregisterShellHookWindow$MH();
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$566.EnumWindows$MH,"EnumWindows");
    }
    public static int EnumWindows ( Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumWindows$MH();
        try {
            return (int)mh$.invokeExact(lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumThreadWindows$MH() {
        return RuntimeHelper.requireNonNull(constants$567.EnumThreadWindows$MH,"EnumThreadWindows");
    }
    public static int EnumThreadWindows ( int dwThreadId,  Addressable lpfn,  long lParam) {
        var mh$ = EnumThreadWindows$MH();
        try {
            return (int)mh$.invokeExact(dwThreadId, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$567.GetClassNameA$MH,"GetClassNameA");
    }
    public static int GetClassNameA ( Addressable hWnd,  Addressable lpClassName,  int nMaxCount) {
        var mh$ = GetClassNameA$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpClassName, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClassNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$567.GetClassNameW$MH,"GetClassNameW");
    }
    public static int GetClassNameW ( Addressable hWnd,  Addressable lpClassName,  int nMaxCount) {
        var mh$ = GetClassNameW$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpClassName, nMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTopWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$567.GetTopWindow$MH,"GetTopWindow");
    }
    public static MemoryAddress GetTopWindow ( Addressable hWnd) {
        var mh$ = GetTopWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowThreadProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$567.GetWindowThreadProcessId$MH,"GetWindowThreadProcessId");
    }
    public static int GetWindowThreadProcessId ( Addressable hWnd,  Addressable lpdwProcessId) {
        var mh$ = GetWindowThreadProcessId$MH();
        try {
            return (int)mh$.invokeExact(hWnd, lpdwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsGUIThread$MH() {
        return RuntimeHelper.requireNonNull(constants$567.IsGUIThread$MH,"IsGUIThread");
    }
    public static int IsGUIThread ( int bConvert) {
        var mh$ = IsGUIThread$MH();
        try {
            return (int)mh$.invokeExact(bConvert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLastActivePopup$MH() {
        return RuntimeHelper.requireNonNull(constants$568.GetLastActivePopup$MH,"GetLastActivePopup");
    }
    public static MemoryAddress GetLastActivePopup ( Addressable hWnd) {
        var mh$ = GetLastActivePopup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$568.GetWindow$MH,"GetWindow");
    }
    public static MemoryAddress GetWindow ( Addressable hWnd,  int uCmd) {
        var mh$ = GetWindow$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hWnd, uCmd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowsHookA$MH() {
        return RuntimeHelper.requireNonNull(constants$568.SetWindowsHookA$MH,"SetWindowsHookA");
    }
    public static MemoryAddress SetWindowsHookA ( int nFilterType,  Addressable pfnFilterProc) {
        var mh$ = SetWindowsHookA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nFilterType, pfnFilterProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowsHookW$MH() {
        return RuntimeHelper.requireNonNull(constants$568.SetWindowsHookW$MH,"SetWindowsHookW");
    }
    public static MemoryAddress SetWindowsHookW ( int nFilterType,  Addressable pfnFilterProc) {
        var mh$ = SetWindowsHookW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nFilterType, pfnFilterProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhookWindowsHook$MH() {
        return RuntimeHelper.requireNonNull(constants$568.UnhookWindowsHook$MH,"UnhookWindowsHook");
    }
    public static int UnhookWindowsHook ( int nCode,  Addressable pfnFilterProc) {
        var mh$ = UnhookWindowsHook$MH();
        try {
            return (int)mh$.invokeExact(nCode, pfnFilterProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowsHookExA$MH() {
        return RuntimeHelper.requireNonNull(constants$568.SetWindowsHookExA$MH,"SetWindowsHookExA");
    }
    public static MemoryAddress SetWindowsHookExA ( int idHook,  Addressable lpfn,  Addressable hmod,  int dwThreadId) {
        var mh$ = SetWindowsHookExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idHook, lpfn, hmod, dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWindowsHookExW$MH() {
        return RuntimeHelper.requireNonNull(constants$569.SetWindowsHookExW$MH,"SetWindowsHookExW");
    }
    public static MemoryAddress SetWindowsHookExW ( int idHook,  Addressable lpfn,  Addressable hmod,  int dwThreadId) {
        var mh$ = SetWindowsHookExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(idHook, lpfn, hmod, dwThreadId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhookWindowsHookEx$MH() {
        return RuntimeHelper.requireNonNull(constants$569.UnhookWindowsHookEx$MH,"UnhookWindowsHookEx");
    }
    public static int UnhookWindowsHookEx ( Addressable hhk) {
        var mh$ = UnhookWindowsHookEx$MH();
        try {
            return (int)mh$.invokeExact(hhk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallNextHookEx$MH() {
        return RuntimeHelper.requireNonNull(constants$569.CallNextHookEx$MH,"CallNextHookEx");
    }
    public static long CallNextHookEx ( Addressable hhk,  int nCode,  long wParam,  long lParam) {
        var mh$ = CallNextHookEx$MH();
        try {
            return (long)mh$.invokeExact(hhk, nCode, wParam, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckMenuRadioItem$MH() {
        return RuntimeHelper.requireNonNull(constants$569.CheckMenuRadioItem$MH,"CheckMenuRadioItem");
    }
    public static int CheckMenuRadioItem ( Addressable hmenu,  int first,  int last,  int check,  int flags) {
        var mh$ = CheckMenuRadioItem$MH();
        try {
            return (int)mh$.invokeExact(hmenu, first, last, check, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMENUITEMTEMPLATEHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMENUITEMTEMPLATE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LoadBitmapA$MH() {
        return RuntimeHelper.requireNonNull(constants$569.LoadBitmapA$MH,"LoadBitmapA");
    }
    public static MemoryAddress LoadBitmapA ( Addressable hInstance,  Addressable lpBitmapName) {
        var mh$ = LoadBitmapA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpBitmapName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadBitmapW$MH() {
        return RuntimeHelper.requireNonNull(constants$569.LoadBitmapW$MH,"LoadBitmapW");
    }
    public static MemoryAddress LoadBitmapW ( Addressable hInstance,  Addressable lpBitmapName) {
        var mh$ = LoadBitmapW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpBitmapName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadCursorA$MH() {
        return RuntimeHelper.requireNonNull(constants$570.LoadCursorA$MH,"LoadCursorA");
    }
    public static MemoryAddress LoadCursorA ( Addressable hInstance,  Addressable lpCursorName) {
        var mh$ = LoadCursorA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpCursorName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadCursorW$MH() {
        return RuntimeHelper.requireNonNull(constants$570.LoadCursorW$MH,"LoadCursorW");
    }
    public static MemoryAddress LoadCursorW ( Addressable hInstance,  Addressable lpCursorName) {
        var mh$ = LoadCursorW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpCursorName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadCursorFromFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$570.LoadCursorFromFileA$MH,"LoadCursorFromFileA");
    }
    public static MemoryAddress LoadCursorFromFileA ( Addressable lpFileName) {
        var mh$ = LoadCursorFromFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadCursorFromFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$570.LoadCursorFromFileW$MH,"LoadCursorFromFileW");
    }
    public static MemoryAddress LoadCursorFromFileW ( Addressable lpFileName) {
        var mh$ = LoadCursorFromFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$570.CreateCursor$MH,"CreateCursor");
    }
    public static MemoryAddress CreateCursor ( Addressable hInst,  int xHotSpot,  int yHotSpot,  int nWidth,  int nHeight,  Addressable pvANDPlane,  Addressable pvXORPlane) {
        var mh$ = CreateCursor$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInst, xHotSpot, yHotSpot, nWidth, nHeight, pvANDPlane, pvXORPlane);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$570.DestroyCursor$MH,"DestroyCursor");
    }
    public static int DestroyCursor ( Addressable hCursor) {
        var mh$ = DestroyCursor$MH();
        try {
            return (int)mh$.invokeExact(hCursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$571.SetSystemCursor$MH,"SetSystemCursor");
    }
    public static int SetSystemCursor ( Addressable hcur,  int id) {
        var mh$ = SetSystemCursor$MH();
        try {
            return (int)mh$.invokeExact(hcur, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PICONINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LoadIconA$MH() {
        return RuntimeHelper.requireNonNull(constants$571.LoadIconA$MH,"LoadIconA");
    }
    public static MemoryAddress LoadIconA ( Addressable hInstance,  Addressable lpIconName) {
        var mh$ = LoadIconA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpIconName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadIconW$MH() {
        return RuntimeHelper.requireNonNull(constants$571.LoadIconW$MH,"LoadIconW");
    }
    public static MemoryAddress LoadIconW ( Addressable hInstance,  Addressable lpIconName) {
        var mh$ = LoadIconW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, lpIconName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrivateExtractIconsA$MH() {
        return RuntimeHelper.requireNonNull(constants$571.PrivateExtractIconsA$MH,"PrivateExtractIconsA");
    }
    public static int PrivateExtractIconsA ( Addressable szFileName,  int nIconIndex,  int cxIcon,  int cyIcon,  Addressable phicon,  Addressable piconid,  int nIcons,  int flags) {
        var mh$ = PrivateExtractIconsA$MH();
        try {
            return (int)mh$.invokeExact(szFileName, nIconIndex, cxIcon, cyIcon, phicon, piconid, nIcons, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrivateExtractIconsW$MH() {
        return RuntimeHelper.requireNonNull(constants$571.PrivateExtractIconsW$MH,"PrivateExtractIconsW");
    }
    public static int PrivateExtractIconsW ( Addressable szFileName,  int nIconIndex,  int cxIcon,  int cyIcon,  Addressable phicon,  Addressable piconid,  int nIcons,  int flags) {
        var mh$ = PrivateExtractIconsW$MH();
        try {
            return (int)mh$.invokeExact(szFileName, nIconIndex, cxIcon, cyIcon, phicon, piconid, nIcons, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$571.CreateIcon$MH,"CreateIcon");
    }
    public static MemoryAddress CreateIcon ( Addressable hInstance,  int nWidth,  int nHeight,  byte cPlanes,  byte cBitsPixel,  Addressable lpbANDbits,  Addressable lpbXORbits) {
        var mh$ = CreateIcon$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInstance, nWidth, nHeight, cPlanes, cBitsPixel, lpbANDbits, lpbXORbits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$572.DestroyIcon$MH,"DestroyIcon");
    }
    public static int DestroyIcon ( Addressable hIcon) {
        var mh$ = DestroyIcon$MH();
        try {
            return (int)mh$.invokeExact(hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupIconIdFromDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$572.LookupIconIdFromDirectory$MH,"LookupIconIdFromDirectory");
    }
    public static int LookupIconIdFromDirectory ( Addressable presbits,  int fIcon) {
        var mh$ = LookupIconIdFromDirectory$MH();
        try {
            return (int)mh$.invokeExact(presbits, fIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupIconIdFromDirectoryEx$MH() {
        return RuntimeHelper.requireNonNull(constants$572.LookupIconIdFromDirectoryEx$MH,"LookupIconIdFromDirectoryEx");
    }
    public static int LookupIconIdFromDirectoryEx ( Addressable presbits,  int fIcon,  int cxDesired,  int cyDesired,  int Flags) {
        var mh$ = LookupIconIdFromDirectoryEx$MH();
        try {
            return (int)mh$.invokeExact(presbits, fIcon, cxDesired, cyDesired, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIconFromResource$MH() {
        return RuntimeHelper.requireNonNull(constants$572.CreateIconFromResource$MH,"CreateIconFromResource");
    }
    public static MemoryAddress CreateIconFromResource ( Addressable presbits,  int dwResSize,  int fIcon,  int dwVer) {
        var mh$ = CreateIconFromResource$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(presbits, dwResSize, fIcon, dwVer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIconFromResourceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$572.CreateIconFromResourceEx$MH,"CreateIconFromResourceEx");
    }
    public static MemoryAddress CreateIconFromResourceEx ( Addressable presbits,  int dwResSize,  int fIcon,  int dwVer,  int cxDesired,  int cyDesired,  int Flags) {
        var mh$ = CreateIconFromResourceEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(presbits, dwResSize, fIcon, dwVer, cxDesired, cyDesired, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCURSORSHAPE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle LoadImageA$MH() {
        return RuntimeHelper.requireNonNull(constants$572.LoadImageA$MH,"LoadImageA");
    }
    public static MemoryAddress LoadImageA ( Addressable hInst,  Addressable name,  int type,  int cx,  int cy,  int fuLoad) {
        var mh$ = LoadImageA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInst, name, type, cx, cy, fuLoad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadImageW$MH() {
        return RuntimeHelper.requireNonNull(constants$573.LoadImageW$MH,"LoadImageW");
    }
    public static MemoryAddress LoadImageW ( Addressable hInst,  Addressable name,  int type,  int cx,  int cy,  int fuLoad) {
        var mh$ = LoadImageW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hInst, name, type, cx, cy, fuLoad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyImage$MH() {
        return RuntimeHelper.requireNonNull(constants$573.CopyImage$MH,"CopyImage");
    }
    public static MemoryAddress CopyImage ( Addressable h,  int type,  int cx,  int cy,  int flags) {
        var mh$ = CopyImage$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(h, type, cx, cy, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawIconEx$MH() {
        return RuntimeHelper.requireNonNull(constants$573.DrawIconEx$MH,"DrawIconEx");
    }
    public static int DrawIconEx ( Addressable hdc,  int xLeft,  int yTop,  Addressable hIcon,  int cxWidth,  int cyWidth,  int istepIfAniCur,  Addressable hbrFlickerFreeDraw,  int diFlags) {
        var mh$ = DrawIconEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, xLeft, yTop, hIcon, cxWidth, cyWidth, istepIfAniCur, hbrFlickerFreeDraw, diFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateIconIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$573.CreateIconIndirect$MH,"CreateIconIndirect");
    }
    public static MemoryAddress CreateIconIndirect ( Addressable piconinfo) {
        var mh$ = CreateIconIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(piconinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyIcon$MH() {
        return RuntimeHelper.requireNonNull(constants$573.CopyIcon$MH,"CopyIcon");
    }
    public static MemoryAddress CopyIcon ( Addressable hIcon) {
        var mh$ = CopyIcon$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hIcon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetIconInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$573.GetIconInfo$MH,"GetIconInfo");
    }
    public static int GetIconInfo ( Addressable hIcon,  Addressable piconinfo) {
        var mh$ = GetIconInfo$MH();
        try {
            return (int)mh$.invokeExact(hIcon, piconinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PICONINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PICONINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PICONINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetIconInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$574.GetIconInfoExA$MH,"GetIconInfoExA");
    }
    public static int GetIconInfoExA ( Addressable hicon,  Addressable piconinfo) {
        var mh$ = GetIconInfoExA$MH();
        try {
            return (int)mh$.invokeExact(hicon, piconinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetIconInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$574.GetIconInfoExW$MH,"GetIconInfoExW");
    }
    public static int GetIconInfoExW ( Addressable hicon,  Addressable piconinfo) {
        var mh$ = GetIconInfoExW$MH();
        try {
            return (int)mh$.invokeExact(hicon, piconinfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT() {
        return (int)0L;
    }
    public static int EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS() {
        return (int)1L;
    }
    public static MethodHandle IsDialogMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$574.IsDialogMessageA$MH,"IsDialogMessageA");
    }
    public static int IsDialogMessageA ( Addressable hDlg,  Addressable lpMsg) {
        var mh$ = IsDialogMessageA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDialogMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$574.IsDialogMessageW$MH,"IsDialogMessageW");
    }
    public static int IsDialogMessageW ( Addressable hDlg,  Addressable lpMsg) {
        var mh$ = IsDialogMessageW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapDialogRect$MH() {
        return RuntimeHelper.requireNonNull(constants$574.MapDialogRect$MH,"MapDialogRect");
    }
    public static int MapDialogRect ( Addressable hDlg,  Addressable lpRect) {
        var mh$ = MapDialogRect$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirListA$MH() {
        return RuntimeHelper.requireNonNull(constants$574.DlgDirListA$MH,"DlgDirListA");
    }
    public static int DlgDirListA ( Addressable hDlg,  Addressable lpPathSpec,  int nIDListBox,  int nIDStaticPath,  int uFileType) {
        var mh$ = DlgDirListA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpPathSpec, nIDListBox, nIDStaticPath, uFileType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirListW$MH() {
        return RuntimeHelper.requireNonNull(constants$575.DlgDirListW$MH,"DlgDirListW");
    }
    public static int DlgDirListW ( Addressable hDlg,  Addressable lpPathSpec,  int nIDListBox,  int nIDStaticPath,  int uFileType) {
        var mh$ = DlgDirListW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpPathSpec, nIDListBox, nIDStaticPath, uFileType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirSelectExA$MH() {
        return RuntimeHelper.requireNonNull(constants$575.DlgDirSelectExA$MH,"DlgDirSelectExA");
    }
    public static int DlgDirSelectExA ( Addressable hwndDlg,  Addressable lpString,  int chCount,  int idListBox) {
        var mh$ = DlgDirSelectExA$MH();
        try {
            return (int)mh$.invokeExact(hwndDlg, lpString, chCount, idListBox);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirSelectExW$MH() {
        return RuntimeHelper.requireNonNull(constants$575.DlgDirSelectExW$MH,"DlgDirSelectExW");
    }
    public static int DlgDirSelectExW ( Addressable hwndDlg,  Addressable lpString,  int chCount,  int idListBox) {
        var mh$ = DlgDirSelectExW$MH();
        try {
            return (int)mh$.invokeExact(hwndDlg, lpString, chCount, idListBox);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirListComboBoxA$MH() {
        return RuntimeHelper.requireNonNull(constants$575.DlgDirListComboBoxA$MH,"DlgDirListComboBoxA");
    }
    public static int DlgDirListComboBoxA ( Addressable hDlg,  Addressable lpPathSpec,  int nIDComboBox,  int nIDStaticPath,  int uFiletype) {
        var mh$ = DlgDirListComboBoxA$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpPathSpec, nIDComboBox, nIDStaticPath, uFiletype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirListComboBoxW$MH() {
        return RuntimeHelper.requireNonNull(constants$575.DlgDirListComboBoxW$MH,"DlgDirListComboBoxW");
    }
    public static int DlgDirListComboBoxW ( Addressable hDlg,  Addressable lpPathSpec,  int nIDComboBox,  int nIDStaticPath,  int uFiletype) {
        var mh$ = DlgDirListComboBoxW$MH();
        try {
            return (int)mh$.invokeExact(hDlg, lpPathSpec, nIDComboBox, nIDStaticPath, uFiletype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirSelectComboBoxExA$MH() {
        return RuntimeHelper.requireNonNull(constants$575.DlgDirSelectComboBoxExA$MH,"DlgDirSelectComboBoxExA");
    }
    public static int DlgDirSelectComboBoxExA ( Addressable hwndDlg,  Addressable lpString,  int cchOut,  int idComboBox) {
        var mh$ = DlgDirSelectComboBoxExA$MH();
        try {
            return (int)mh$.invokeExact(hwndDlg, lpString, cchOut, idComboBox);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DlgDirSelectComboBoxExW$MH() {
        return RuntimeHelper.requireNonNull(constants$576.DlgDirSelectComboBoxExW$MH,"DlgDirSelectComboBoxExW");
    }
    public static int DlgDirSelectComboBoxExW ( Addressable hwndDlg,  Addressable lpString,  int cchOut,  int idComboBox) {
        var mh$ = DlgDirSelectComboBoxExW$MH();
        try {
            return (int)mh$.invokeExact(hwndDlg, lpString, cchOut, idComboBox);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


