// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class curl_h_16 extends curl_h_15 {

    public static MethodHandle CreateSemaphoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$345.CreateSemaphoreA$MH,"CreateSemaphoreA");
    }
    public static MemoryAddress CreateSemaphoreA ( Addressable lpSemaphoreAttributes,  int lInitialCount,  int lMaximumCount,  Addressable lpName) {
        var mh$ = CreateSemaphoreA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSemaphoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$345.OpenSemaphoreA$MH,"OpenSemaphoreA");
    }
    public static MemoryAddress OpenSemaphoreA ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenSemaphoreA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWaitableTimerA$MH() {
        return RuntimeHelper.requireNonNull(constants$345.CreateWaitableTimerA$MH,"CreateWaitableTimerA");
    }
    public static MemoryAddress CreateWaitableTimerA ( Addressable lpTimerAttributes,  int bManualReset,  Addressable lpTimerName) {
        var mh$ = CreateWaitableTimerA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpTimerAttributes, bManualReset, lpTimerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenWaitableTimerA$MH() {
        return RuntimeHelper.requireNonNull(constants$345.OpenWaitableTimerA$MH,"OpenWaitableTimerA");
    }
    public static MemoryAddress OpenWaitableTimerA ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpTimerName) {
        var mh$ = OpenWaitableTimerA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpTimerName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSemaphoreExA$MH() {
        return RuntimeHelper.requireNonNull(constants$345.CreateSemaphoreExA$MH,"CreateSemaphoreExA");
    }
    public static MemoryAddress CreateSemaphoreExA ( Addressable lpSemaphoreAttributes,  int lInitialCount,  int lMaximumCount,  Addressable lpName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateSemaphoreExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateWaitableTimerExA$MH() {
        return RuntimeHelper.requireNonNull(constants$346.CreateWaitableTimerExA$MH,"CreateWaitableTimerExA");
    }
    public static MemoryAddress CreateWaitableTimerExA ( Addressable lpTimerAttributes,  Addressable lpTimerName,  int dwFlags,  int dwDesiredAccess) {
        var mh$ = CreateWaitableTimerExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpTimerAttributes, lpTimerName, dwFlags, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingA$MH() {
        return RuntimeHelper.requireNonNull(constants$346.CreateFileMappingA$MH,"CreateFileMappingA");
    }
    public static MemoryAddress CreateFileMappingA ( Addressable hFile,  Addressable lpFileMappingAttributes,  int flProtect,  int dwMaximumSizeHigh,  int dwMaximumSizeLow,  Addressable lpName) {
        var mh$ = CreateFileMappingA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileMappingNumaA$MH() {
        return RuntimeHelper.requireNonNull(constants$346.CreateFileMappingNumaA$MH,"CreateFileMappingNumaA");
    }
    public static MemoryAddress CreateFileMappingNumaA ( Addressable hFile,  Addressable lpFileMappingAttributes,  int flProtect,  int dwMaximumSizeHigh,  int dwMaximumSizeLow,  Addressable lpName,  int nndPreferred) {
        var mh$ = CreateFileMappingNumaA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenFileMappingA$MH() {
        return RuntimeHelper.requireNonNull(constants$346.OpenFileMappingA$MH,"OpenFileMappingA");
    }
    public static MemoryAddress OpenFileMappingA ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenFileMappingA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLogicalDriveStringsA$MH() {
        return RuntimeHelper.requireNonNull(constants$346.GetLogicalDriveStringsA$MH,"GetLogicalDriveStringsA");
    }
    public static int GetLogicalDriveStringsA ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetLogicalDriveStringsA$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadPackagedLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$346.LoadPackagedLibrary$MH,"LoadPackagedLibrary");
    }
    public static MemoryAddress LoadPackagedLibrary ( Addressable lpwLibFileName,  int Reserved) {
        var mh$ = LoadPackagedLibrary$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpwLibFileName, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryFullProcessImageNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$347.QueryFullProcessImageNameA$MH,"QueryFullProcessImageNameA");
    }
    public static int QueryFullProcessImageNameA ( Addressable hProcess,  int dwFlags,  Addressable lpExeName,  Addressable lpdwSize) {
        var mh$ = QueryFullProcessImageNameA$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwFlags, lpExeName, lpdwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryFullProcessImageNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$347.QueryFullProcessImageNameW$MH,"QueryFullProcessImageNameW");
    }
    public static int QueryFullProcessImageNameW ( Addressable hProcess,  int dwFlags,  Addressable lpExeName,  Addressable lpdwSize) {
        var mh$ = QueryFullProcessImageNameW$MH();
        try {
            return (int)mh$.invokeExact(hProcess, dwFlags, lpExeName, lpdwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ProcThreadAttributeParentProcess() {
        return (int)0L;
    }
    public static int ProcThreadAttributeHandleList() {
        return (int)2L;
    }
    public static int ProcThreadAttributeGroupAffinity() {
        return (int)3L;
    }
    public static int ProcThreadAttributePreferredNode() {
        return (int)4L;
    }
    public static int ProcThreadAttributeIdealProcessor() {
        return (int)5L;
    }
    public static int ProcThreadAttributeUmsThread() {
        return (int)6L;
    }
    public static int ProcThreadAttributeMitigationPolicy() {
        return (int)7L;
    }
    public static int ProcThreadAttributeSecurityCapabilities() {
        return (int)9L;
    }
    public static int ProcThreadAttributeProtectionLevel() {
        return (int)11L;
    }
    public static int ProcThreadAttributeJobList() {
        return (int)13L;
    }
    public static int ProcThreadAttributeChildProcessPolicy() {
        return (int)14L;
    }
    public static int ProcThreadAttributeAllApplicationPackagesPolicy() {
        return (int)15L;
    }
    public static int ProcThreadAttributeWin32kFilter() {
        return (int)16L;
    }
    public static int ProcThreadAttributeSafeOpenPromptOriginClaim() {
        return (int)17L;
    }
    public static int ProcThreadAttributeDesktopAppPolicy() {
        return (int)18L;
    }
    public static int ProcThreadAttributePseudoConsole() {
        return (int)22L;
    }
    public static int ProcThreadAttributeMitigationAuditPolicy() {
        return (int)24L;
    }
    public static MethodHandle GetStartupInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$347.GetStartupInfoA$MH,"GetStartupInfoA");
    }
    public static void GetStartupInfoA ( Addressable lpStartupInfo) {
        var mh$ = GetStartupInfoA$MH();
        try {
            mh$.invokeExact(lpStartupInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFirmwareEnvironmentVariableA$MH() {
        return RuntimeHelper.requireNonNull(constants$347.GetFirmwareEnvironmentVariableA$MH,"GetFirmwareEnvironmentVariableA");
    }
    public static int GetFirmwareEnvironmentVariableA ( Addressable lpName,  Addressable lpGuid,  Addressable pBuffer,  int nSize) {
        var mh$ = GetFirmwareEnvironmentVariableA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFirmwareEnvironmentVariableW$MH() {
        return RuntimeHelper.requireNonNull(constants$347.GetFirmwareEnvironmentVariableW$MH,"GetFirmwareEnvironmentVariableW");
    }
    public static int GetFirmwareEnvironmentVariableW ( Addressable lpName,  Addressable lpGuid,  Addressable pBuffer,  int nSize) {
        var mh$ = GetFirmwareEnvironmentVariableW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFirmwareEnvironmentVariableExA$MH() {
        return RuntimeHelper.requireNonNull(constants$347.GetFirmwareEnvironmentVariableExA$MH,"GetFirmwareEnvironmentVariableExA");
    }
    public static int GetFirmwareEnvironmentVariableExA ( Addressable lpName,  Addressable lpGuid,  Addressable pBuffer,  int nSize,  Addressable pdwAttribubutes) {
        var mh$ = GetFirmwareEnvironmentVariableExA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pBuffer, nSize, pdwAttribubutes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFirmwareEnvironmentVariableExW$MH() {
        return RuntimeHelper.requireNonNull(constants$348.GetFirmwareEnvironmentVariableExW$MH,"GetFirmwareEnvironmentVariableExW");
    }
    public static int GetFirmwareEnvironmentVariableExW ( Addressable lpName,  Addressable lpGuid,  Addressable pBuffer,  int nSize,  Addressable pdwAttribubutes) {
        var mh$ = GetFirmwareEnvironmentVariableExW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pBuffer, nSize, pdwAttribubutes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFirmwareEnvironmentVariableA$MH() {
        return RuntimeHelper.requireNonNull(constants$348.SetFirmwareEnvironmentVariableA$MH,"SetFirmwareEnvironmentVariableA");
    }
    public static int SetFirmwareEnvironmentVariableA ( Addressable lpName,  Addressable lpGuid,  Addressable pValue,  int nSize) {
        var mh$ = SetFirmwareEnvironmentVariableA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pValue, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFirmwareEnvironmentVariableW$MH() {
        return RuntimeHelper.requireNonNull(constants$348.SetFirmwareEnvironmentVariableW$MH,"SetFirmwareEnvironmentVariableW");
    }
    public static int SetFirmwareEnvironmentVariableW ( Addressable lpName,  Addressable lpGuid,  Addressable pValue,  int nSize) {
        var mh$ = SetFirmwareEnvironmentVariableW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pValue, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFirmwareEnvironmentVariableExA$MH() {
        return RuntimeHelper.requireNonNull(constants$348.SetFirmwareEnvironmentVariableExA$MH,"SetFirmwareEnvironmentVariableExA");
    }
    public static int SetFirmwareEnvironmentVariableExA ( Addressable lpName,  Addressable lpGuid,  Addressable pValue,  int nSize,  int dwAttributes) {
        var mh$ = SetFirmwareEnvironmentVariableExA$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pValue, nSize, dwAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFirmwareEnvironmentVariableExW$MH() {
        return RuntimeHelper.requireNonNull(constants$348.SetFirmwareEnvironmentVariableExW$MH,"SetFirmwareEnvironmentVariableExW");
    }
    public static int SetFirmwareEnvironmentVariableExW ( Addressable lpName,  Addressable lpGuid,  Addressable pValue,  int nSize,  int dwAttributes) {
        var mh$ = SetFirmwareEnvironmentVariableExW$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpGuid, pValue, nSize, dwAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFirmwareType$MH() {
        return RuntimeHelper.requireNonNull(constants$348.GetFirmwareType$MH,"GetFirmwareType");
    }
    public static int GetFirmwareType ( Addressable FirmwareType) {
        var mh$ = GetFirmwareType$MH();
        try {
            return (int)mh$.invokeExact(FirmwareType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsNativeVhdBoot$MH() {
        return RuntimeHelper.requireNonNull(constants$349.IsNativeVhdBoot$MH,"IsNativeVhdBoot");
    }
    public static int IsNativeVhdBoot ( Addressable NativeVhdBoot) {
        var mh$ = IsNativeVhdBoot$MH();
        try {
            return (int)mh$.invokeExact(NativeVhdBoot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$349.FindResourceA$MH,"FindResourceA");
    }
    public static MemoryAddress FindResourceA ( Addressable hModule,  Addressable lpName,  Addressable lpType) {
        var mh$ = FindResourceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hModule, lpName, lpType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindResourceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$349.FindResourceExA$MH,"FindResourceExA");
    }
    public static MemoryAddress FindResourceExA ( Addressable hModule,  Addressable lpType,  Addressable lpName,  short wLanguage) {
        var mh$ = FindResourceExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hModule, lpType, lpName, wLanguage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceTypesA$MH() {
        return RuntimeHelper.requireNonNull(constants$349.EnumResourceTypesA$MH,"EnumResourceTypesA");
    }
    public static int EnumResourceTypesA ( Addressable hModule,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumResourceTypesA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceTypesW$MH() {
        return RuntimeHelper.requireNonNull(constants$349.EnumResourceTypesW$MH,"EnumResourceTypesW");
    }
    public static int EnumResourceTypesW ( Addressable hModule,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumResourceTypesW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceNamesA$MH() {
        return RuntimeHelper.requireNonNull(constants$349.EnumResourceNamesA$MH,"EnumResourceNamesA");
    }
    public static int EnumResourceNamesA ( Addressable hModule,  Addressable lpType,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumResourceNamesA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$350.EnumResourceLanguagesA$MH,"EnumResourceLanguagesA");
    }
    public static int EnumResourceLanguagesA ( Addressable hModule,  Addressable lpType,  Addressable lpName,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumResourceLanguagesA$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpName, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumResourceLanguagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$350.EnumResourceLanguagesW$MH,"EnumResourceLanguagesW");
    }
    public static int EnumResourceLanguagesW ( Addressable hModule,  Addressable lpType,  Addressable lpName,  Addressable lpEnumFunc,  long lParam) {
        var mh$ = EnumResourceLanguagesW$MH();
        try {
            return (int)mh$.invokeExact(hModule, lpType, lpName, lpEnumFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginUpdateResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$350.BeginUpdateResourceA$MH,"BeginUpdateResourceA");
    }
    public static MemoryAddress BeginUpdateResourceA ( Addressable pFileName,  int bDeleteExistingResources) {
        var mh$ = BeginUpdateResourceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pFileName, bDeleteExistingResources);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginUpdateResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$350.BeginUpdateResourceW$MH,"BeginUpdateResourceW");
    }
    public static MemoryAddress BeginUpdateResourceW ( Addressable pFileName,  int bDeleteExistingResources) {
        var mh$ = BeginUpdateResourceW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pFileName, bDeleteExistingResources);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$350.UpdateResourceA$MH,"UpdateResourceA");
    }
    public static int UpdateResourceA ( Addressable hUpdate,  Addressable lpType,  Addressable lpName,  short wLanguage,  Addressable lpData,  int cb) {
        var mh$ = UpdateResourceA$MH();
        try {
            return (int)mh$.invokeExact(hUpdate, lpType, lpName, wLanguage, lpData, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$350.UpdateResourceW$MH,"UpdateResourceW");
    }
    public static int UpdateResourceW ( Addressable hUpdate,  Addressable lpType,  Addressable lpName,  short wLanguage,  Addressable lpData,  int cb) {
        var mh$ = UpdateResourceW$MH();
        try {
            return (int)mh$.invokeExact(hUpdate, lpType, lpName, wLanguage, lpData, cb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndUpdateResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$351.EndUpdateResourceA$MH,"EndUpdateResourceA");
    }
    public static int EndUpdateResourceA ( Addressable hUpdate,  int fDiscard) {
        var mh$ = EndUpdateResourceA$MH();
        try {
            return (int)mh$.invokeExact(hUpdate, fDiscard);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndUpdateResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$351.EndUpdateResourceW$MH,"EndUpdateResourceW");
    }
    public static int EndUpdateResourceW ( Addressable hUpdate,  int fDiscard) {
        var mh$ = EndUpdateResourceW$MH();
        try {
            return (int)mh$.invokeExact(hUpdate, fDiscard);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalAddAtomA$MH() {
        return RuntimeHelper.requireNonNull(constants$351.GlobalAddAtomA$MH,"GlobalAddAtomA");
    }
    public static short GlobalAddAtomA ( Addressable lpString) {
        var mh$ = GlobalAddAtomA$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalAddAtomW$MH() {
        return RuntimeHelper.requireNonNull(constants$351.GlobalAddAtomW$MH,"GlobalAddAtomW");
    }
    public static short GlobalAddAtomW ( Addressable lpString) {
        var mh$ = GlobalAddAtomW$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalAddAtomExA$MH() {
        return RuntimeHelper.requireNonNull(constants$351.GlobalAddAtomExA$MH,"GlobalAddAtomExA");
    }
    public static short GlobalAddAtomExA ( Addressable lpString,  int Flags) {
        var mh$ = GlobalAddAtomExA$MH();
        try {
            return (short)mh$.invokeExact(lpString, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalAddAtomExW$MH() {
        return RuntimeHelper.requireNonNull(constants$351.GlobalAddAtomExW$MH,"GlobalAddAtomExW");
    }
    public static short GlobalAddAtomExW ( Addressable lpString,  int Flags) {
        var mh$ = GlobalAddAtomExW$MH();
        try {
            return (short)mh$.invokeExact(lpString, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalFindAtomA$MH() {
        return RuntimeHelper.requireNonNull(constants$352.GlobalFindAtomA$MH,"GlobalFindAtomA");
    }
    public static short GlobalFindAtomA ( Addressable lpString) {
        var mh$ = GlobalFindAtomA$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalFindAtomW$MH() {
        return RuntimeHelper.requireNonNull(constants$352.GlobalFindAtomW$MH,"GlobalFindAtomW");
    }
    public static short GlobalFindAtomW ( Addressable lpString) {
        var mh$ = GlobalFindAtomW$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalGetAtomNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$352.GlobalGetAtomNameA$MH,"GlobalGetAtomNameA");
    }
    public static int GlobalGetAtomNameA ( short nAtom,  Addressable lpBuffer,  int nSize) {
        var mh$ = GlobalGetAtomNameA$MH();
        try {
            return (int)mh$.invokeExact(nAtom, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GlobalGetAtomNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$352.GlobalGetAtomNameW$MH,"GlobalGetAtomNameW");
    }
    public static int GlobalGetAtomNameW ( short nAtom,  Addressable lpBuffer,  int nSize) {
        var mh$ = GlobalGetAtomNameW$MH();
        try {
            return (int)mh$.invokeExact(nAtom, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAtomA$MH() {
        return RuntimeHelper.requireNonNull(constants$352.AddAtomA$MH,"AddAtomA");
    }
    public static short AddAtomA ( Addressable lpString) {
        var mh$ = AddAtomA$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddAtomW$MH() {
        return RuntimeHelper.requireNonNull(constants$352.AddAtomW$MH,"AddAtomW");
    }
    public static short AddAtomW ( Addressable lpString) {
        var mh$ = AddAtomW$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindAtomA$MH() {
        return RuntimeHelper.requireNonNull(constants$353.FindAtomA$MH,"FindAtomA");
    }
    public static short FindAtomA ( Addressable lpString) {
        var mh$ = FindAtomA$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindAtomW$MH() {
        return RuntimeHelper.requireNonNull(constants$353.FindAtomW$MH,"FindAtomW");
    }
    public static short FindAtomW ( Addressable lpString) {
        var mh$ = FindAtomW$MH();
        try {
            return (short)mh$.invokeExact(lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAtomNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$353.GetAtomNameA$MH,"GetAtomNameA");
    }
    public static int GetAtomNameA ( short nAtom,  Addressable lpBuffer,  int nSize) {
        var mh$ = GetAtomNameA$MH();
        try {
            return (int)mh$.invokeExact(nAtom, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAtomNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$353.GetAtomNameW$MH,"GetAtomNameW");
    }
    public static int GetAtomNameW ( short nAtom,  Addressable lpBuffer,  int nSize) {
        var mh$ = GetAtomNameW$MH();
        try {
            return (int)mh$.invokeExact(nAtom, lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileIntA$MH() {
        return RuntimeHelper.requireNonNull(constants$353.GetProfileIntA$MH,"GetProfileIntA");
    }
    public static int GetProfileIntA ( Addressable lpAppName,  Addressable lpKeyName,  int nDefault) {
        var mh$ = GetProfileIntA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, nDefault);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileIntW$MH() {
        return RuntimeHelper.requireNonNull(constants$353.GetProfileIntW$MH,"GetProfileIntW");
    }
    public static int GetProfileIntW ( Addressable lpAppName,  Addressable lpKeyName,  int nDefault) {
        var mh$ = GetProfileIntW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, nDefault);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$354.GetProfileStringA$MH,"GetProfileStringA");
    }
    public static int GetProfileStringA ( Addressable lpAppName,  Addressable lpKeyName,  Addressable lpDefault,  Addressable lpReturnedString,  int nSize) {
        var mh$ = GetProfileStringA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$354.GetProfileStringW$MH,"GetProfileStringW");
    }
    public static int GetProfileStringW ( Addressable lpAppName,  Addressable lpKeyName,  Addressable lpDefault,  Addressable lpReturnedString,  int nSize) {
        var mh$ = GetProfileStringW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProfileStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$354.WriteProfileStringA$MH,"WriteProfileStringA");
    }
    public static int WriteProfileStringA ( Addressable lpAppName,  Addressable lpKeyName,  Addressable lpString) {
        var mh$ = WriteProfileStringA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProfileStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$354.WriteProfileStringW$MH,"WriteProfileStringW");
    }
    public static int WriteProfileStringW ( Addressable lpAppName,  Addressable lpKeyName,  Addressable lpString) {
        var mh$ = WriteProfileStringW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileSectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$354.GetProfileSectionA$MH,"GetProfileSectionA");
    }
    public static int GetProfileSectionA ( Addressable lpAppName,  Addressable lpReturnedString,  int nSize) {
        var mh$ = GetProfileSectionA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpReturnedString, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProfileSectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$354.GetProfileSectionW$MH,"GetProfileSectionW");
    }
    public static int GetProfileSectionW ( Addressable lpAppName,  Addressable lpReturnedString,  int nSize) {
        var mh$ = GetProfileSectionW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpReturnedString, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProfileSectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$355.WriteProfileSectionA$MH,"WriteProfileSectionA");
    }
    public static int WriteProfileSectionA ( Addressable lpAppName,  Addressable lpString) {
        var mh$ = WriteProfileSectionA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteProfileSectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$355.WriteProfileSectionW$MH,"WriteProfileSectionW");
    }
    public static int WriteProfileSectionW ( Addressable lpAppName,  Addressable lpString) {
        var mh$ = WriteProfileSectionW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileIntA$MH() {
        return RuntimeHelper.requireNonNull(constants$355.GetPrivateProfileIntA$MH,"GetPrivateProfileIntA");
    }
    public static int GetPrivateProfileIntA ( Addressable lpAppName,  Addressable lpKeyName,  int nDefault,  Addressable lpFileName) {
        var mh$ = GetPrivateProfileIntA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, nDefault, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileIntW$MH() {
        return RuntimeHelper.requireNonNull(constants$355.GetPrivateProfileIntW$MH,"GetPrivateProfileIntW");
    }
    public static int GetPrivateProfileIntW ( Addressable lpAppName,  Addressable lpKeyName,  int nDefault,  Addressable lpFileName) {
        var mh$ = GetPrivateProfileIntW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, nDefault, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$355.GetPrivateProfileStringA$MH,"GetPrivateProfileStringA");
    }
    public static int GetPrivateProfileStringA ( Addressable lpAppName,  Addressable lpKeyName,  Addressable lpDefault,  Addressable lpReturnedString,  int nSize,  Addressable lpFileName) {
        var mh$ = GetPrivateProfileStringA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$355.GetPrivateProfileStringW$MH,"GetPrivateProfileStringW");
    }
    public static int GetPrivateProfileStringW ( Addressable lpAppName,  Addressable lpKeyName,  Addressable lpDefault,  Addressable lpReturnedString,  int nSize,  Addressable lpFileName) {
        var mh$ = GetPrivateProfileStringW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$356.WritePrivateProfileStringA$MH,"WritePrivateProfileStringA");
    }
    public static int WritePrivateProfileStringA ( Addressable lpAppName,  Addressable lpKeyName,  Addressable lpString,  Addressable lpFileName) {
        var mh$ = WritePrivateProfileStringA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpString, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$356.WritePrivateProfileStringW$MH,"WritePrivateProfileStringW");
    }
    public static int WritePrivateProfileStringW ( Addressable lpAppName,  Addressable lpKeyName,  Addressable lpString,  Addressable lpFileName) {
        var mh$ = WritePrivateProfileStringW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpKeyName, lpString, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileSectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$356.GetPrivateProfileSectionA$MH,"GetPrivateProfileSectionA");
    }
    public static int GetPrivateProfileSectionA ( Addressable lpAppName,  Addressable lpReturnedString,  int nSize,  Addressable lpFileName) {
        var mh$ = GetPrivateProfileSectionA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpReturnedString, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileSectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$356.GetPrivateProfileSectionW$MH,"GetPrivateProfileSectionW");
    }
    public static int GetPrivateProfileSectionW ( Addressable lpAppName,  Addressable lpReturnedString,  int nSize,  Addressable lpFileName) {
        var mh$ = GetPrivateProfileSectionW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpReturnedString, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileSectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$356.WritePrivateProfileSectionA$MH,"WritePrivateProfileSectionA");
    }
    public static int WritePrivateProfileSectionA ( Addressable lpAppName,  Addressable lpString,  Addressable lpFileName) {
        var mh$ = WritePrivateProfileSectionA$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpString, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileSectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$356.WritePrivateProfileSectionW$MH,"WritePrivateProfileSectionW");
    }
    public static int WritePrivateProfileSectionW ( Addressable lpAppName,  Addressable lpString,  Addressable lpFileName) {
        var mh$ = WritePrivateProfileSectionW$MH();
        try {
            return (int)mh$.invokeExact(lpAppName, lpString, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileSectionNamesA$MH() {
        return RuntimeHelper.requireNonNull(constants$357.GetPrivateProfileSectionNamesA$MH,"GetPrivateProfileSectionNamesA");
    }
    public static int GetPrivateProfileSectionNamesA ( Addressable lpszReturnBuffer,  int nSize,  Addressable lpFileName) {
        var mh$ = GetPrivateProfileSectionNamesA$MH();
        try {
            return (int)mh$.invokeExact(lpszReturnBuffer, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileSectionNamesW$MH() {
        return RuntimeHelper.requireNonNull(constants$357.GetPrivateProfileSectionNamesW$MH,"GetPrivateProfileSectionNamesW");
    }
    public static int GetPrivateProfileSectionNamesW ( Addressable lpszReturnBuffer,  int nSize,  Addressable lpFileName) {
        var mh$ = GetPrivateProfileSectionNamesW$MH();
        try {
            return (int)mh$.invokeExact(lpszReturnBuffer, nSize, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileStructA$MH() {
        return RuntimeHelper.requireNonNull(constants$357.GetPrivateProfileStructA$MH,"GetPrivateProfileStructA");
    }
    public static int GetPrivateProfileStructA ( Addressable lpszSection,  Addressable lpszKey,  Addressable lpStruct,  int uSizeStruct,  Addressable szFile) {
        var mh$ = GetPrivateProfileStructA$MH();
        try {
            return (int)mh$.invokeExact(lpszSection, lpszKey, lpStruct, uSizeStruct, szFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPrivateProfileStructW$MH() {
        return RuntimeHelper.requireNonNull(constants$357.GetPrivateProfileStructW$MH,"GetPrivateProfileStructW");
    }
    public static int GetPrivateProfileStructW ( Addressable lpszSection,  Addressable lpszKey,  Addressable lpStruct,  int uSizeStruct,  Addressable szFile) {
        var mh$ = GetPrivateProfileStructW$MH();
        try {
            return (int)mh$.invokeExact(lpszSection, lpszKey, lpStruct, uSizeStruct, szFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileStructA$MH() {
        return RuntimeHelper.requireNonNull(constants$357.WritePrivateProfileStructA$MH,"WritePrivateProfileStructA");
    }
    public static int WritePrivateProfileStructA ( Addressable lpszSection,  Addressable lpszKey,  Addressable lpStruct,  int uSizeStruct,  Addressable szFile) {
        var mh$ = WritePrivateProfileStructA$MH();
        try {
            return (int)mh$.invokeExact(lpszSection, lpszKey, lpStruct, uSizeStruct, szFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePrivateProfileStructW$MH() {
        return RuntimeHelper.requireNonNull(constants$357.WritePrivateProfileStructW$MH,"WritePrivateProfileStructW");
    }
    public static int WritePrivateProfileStructW ( Addressable lpszSection,  Addressable lpszKey,  Addressable lpStruct,  int uSizeStruct,  Addressable szFile) {
        var mh$ = WritePrivateProfileStructW$MH();
        try {
            return (int)mh$.invokeExact(lpszSection, lpszKey, lpStruct, uSizeStruct, szFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Wow64EnableWow64FsRedirection$MH() {
        return RuntimeHelper.requireNonNull(constants$358.Wow64EnableWow64FsRedirection$MH,"Wow64EnableWow64FsRedirection");
    }
    public static byte Wow64EnableWow64FsRedirection ( byte Wow64FsEnableRedirection) {
        var mh$ = Wow64EnableWow64FsRedirection$MH();
        try {
            return (byte)mh$.invokeExact(Wow64FsEnableRedirection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDllDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$358.SetDllDirectoryA$MH,"SetDllDirectoryA");
    }
    public static int SetDllDirectoryA ( Addressable lpPathName) {
        var mh$ = SetDllDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDllDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$359.SetDllDirectoryW$MH,"SetDllDirectoryW");
    }
    public static int SetDllDirectoryW ( Addressable lpPathName) {
        var mh$ = SetDllDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDllDirectoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$359.GetDllDirectoryA$MH,"GetDllDirectoryA");
    }
    public static int GetDllDirectoryA ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetDllDirectoryA$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDllDirectoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$359.GetDllDirectoryW$MH,"GetDllDirectoryW");
    }
    public static int GetDllDirectoryW ( int nBufferLength,  Addressable lpBuffer) {
        var mh$ = GetDllDirectoryW$MH();
        try {
            return (int)mh$.invokeExact(nBufferLength, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSearchPathMode$MH() {
        return RuntimeHelper.requireNonNull(constants$359.SetSearchPathMode$MH,"SetSearchPathMode");
    }
    public static int SetSearchPathMode ( int Flags) {
        var mh$ = SetSearchPathMode$MH();
        try {
            return (int)mh$.invokeExact(Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryExA$MH() {
        return RuntimeHelper.requireNonNull(constants$359.CreateDirectoryExA$MH,"CreateDirectoryExA");
    }
    public static int CreateDirectoryExA ( Addressable lpTemplateDirectory,  Addressable lpNewDirectory,  Addressable lpSecurityAttributes) {
        var mh$ = CreateDirectoryExA$MH();
        try {
            return (int)mh$.invokeExact(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryExW$MH() {
        return RuntimeHelper.requireNonNull(constants$359.CreateDirectoryExW$MH,"CreateDirectoryExW");
    }
    public static int CreateDirectoryExW ( Addressable lpTemplateDirectory,  Addressable lpNewDirectory,  Addressable lpSecurityAttributes) {
        var mh$ = CreateDirectoryExW$MH();
        try {
            return (int)mh$.invokeExact(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$360.CreateDirectoryTransactedA$MH,"CreateDirectoryTransactedA");
    }
    public static int CreateDirectoryTransactedA ( Addressable lpTemplateDirectory,  Addressable lpNewDirectory,  Addressable lpSecurityAttributes,  Addressable hTransaction) {
        var mh$ = CreateDirectoryTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDirectoryTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$360.CreateDirectoryTransactedW$MH,"CreateDirectoryTransactedW");
    }
    public static int CreateDirectoryTransactedW ( Addressable lpTemplateDirectory,  Addressable lpNewDirectory,  Addressable lpSecurityAttributes,  Addressable hTransaction) {
        var mh$ = CreateDirectoryTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$360.RemoveDirectoryTransactedA$MH,"RemoveDirectoryTransactedA");
    }
    public static int RemoveDirectoryTransactedA ( Addressable lpPathName,  Addressable hTransaction) {
        var mh$ = RemoveDirectoryTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveDirectoryTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$360.RemoveDirectoryTransactedW$MH,"RemoveDirectoryTransactedW");
    }
    public static int RemoveDirectoryTransactedW ( Addressable lpPathName,  Addressable hTransaction) {
        var mh$ = RemoveDirectoryTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpPathName, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$360.GetFullPathNameTransactedA$MH,"GetFullPathNameTransactedA");
    }
    public static int GetFullPathNameTransactedA ( Addressable lpFileName,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart,  Addressable hTransaction) {
        var mh$ = GetFullPathNameTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFullPathNameTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$360.GetFullPathNameTransactedW$MH,"GetFullPathNameTransactedW");
    }
    public static int GetFullPathNameTransactedW ( Addressable lpFileName,  int nBufferLength,  Addressable lpBuffer,  Addressable lpFilePart,  Addressable hTransaction) {
        var mh$ = GetFullPathNameTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefineDosDeviceA$MH() {
        return RuntimeHelper.requireNonNull(constants$361.DefineDosDeviceA$MH,"DefineDosDeviceA");
    }
    public static int DefineDosDeviceA ( int dwFlags,  Addressable lpDeviceName,  Addressable lpTargetPath) {
        var mh$ = DefineDosDeviceA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpDeviceName, lpTargetPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDosDeviceA$MH() {
        return RuntimeHelper.requireNonNull(constants$361.QueryDosDeviceA$MH,"QueryDosDeviceA");
    }
    public static int QueryDosDeviceA ( Addressable lpDeviceName,  Addressable lpTargetPath,  int ucchMax) {
        var mh$ = QueryDosDeviceA$MH();
        try {
            return (int)mh$.invokeExact(lpDeviceName, lpTargetPath, ucchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$361.CreateFileTransactedA$MH,"CreateFileTransactedA");
    }
    public static MemoryAddress CreateFileTransactedA ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwCreationDisposition,  int dwFlagsAndAttributes,  Addressable hTemplateFile,  Addressable hTransaction,  Addressable pusMiniVersion,  Addressable lpExtendedParameter) {
        var mh$ = CreateFileTransactedA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, lpExtendedParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFileTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$361.CreateFileTransactedW$MH,"CreateFileTransactedW");
    }
    public static MemoryAddress CreateFileTransactedW ( Addressable lpFileName,  int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwCreationDisposition,  int dwFlagsAndAttributes,  Addressable hTemplateFile,  Addressable hTransaction,  Addressable pusMiniVersion,  Addressable lpExtendedParameter) {
        var mh$ = CreateFileTransactedW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, lpExtendedParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReOpenFile$MH() {
        return RuntimeHelper.requireNonNull(constants$361.ReOpenFile$MH,"ReOpenFile");
    }
    public static MemoryAddress ReOpenFile ( Addressable hOriginalFile,  int dwDesiredAccess,  int dwShareMode,  int dwFlagsAndAttributes) {
        var mh$ = ReOpenFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hOriginalFile, dwDesiredAccess, dwShareMode, dwFlagsAndAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$361.SetFileAttributesTransactedA$MH,"SetFileAttributesTransactedA");
    }
    public static int SetFileAttributesTransactedA ( Addressable lpFileName,  int dwFileAttributes,  Addressable hTransaction) {
        var mh$ = SetFileAttributesTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileAttributesTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$362.SetFileAttributesTransactedW$MH,"SetFileAttributesTransactedW");
    }
    public static int SetFileAttributesTransactedW ( Addressable lpFileName,  int dwFileAttributes,  Addressable hTransaction) {
        var mh$ = SetFileAttributesTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, dwFileAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$362.GetFileAttributesTransactedA$MH,"GetFileAttributesTransactedA");
    }
    public static int GetFileAttributesTransactedA ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFileInformation,  Addressable hTransaction) {
        var mh$ = GetFileAttributesTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileAttributesTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$362.GetFileAttributesTransactedW$MH,"GetFileAttributesTransactedW");
    }
    public static int GetFileAttributesTransactedW ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFileInformation,  Addressable hTransaction) {
        var mh$ = GetFileAttributesTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, fInfoLevelId, lpFileInformation, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCompressedFileSizeTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$362.GetCompressedFileSizeTransactedA$MH,"GetCompressedFileSizeTransactedA");
    }
    public static int GetCompressedFileSizeTransactedA ( Addressable lpFileName,  Addressable lpFileSizeHigh,  Addressable hTransaction) {
        var mh$ = GetCompressedFileSizeTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpFileSizeHigh, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCompressedFileSizeTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$362.GetCompressedFileSizeTransactedW$MH,"GetCompressedFileSizeTransactedW");
    }
    public static int GetCompressedFileSizeTransactedW ( Addressable lpFileName,  Addressable lpFileSizeHigh,  Addressable hTransaction) {
        var mh$ = GetCompressedFileSizeTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpFileSizeHigh, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$362.DeleteFileTransactedA$MH,"DeleteFileTransactedA");
    }
    public static int DeleteFileTransactedA ( Addressable lpFileName,  Addressable hTransaction) {
        var mh$ = DeleteFileTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteFileTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$363.DeleteFileTransactedW$MH,"DeleteFileTransactedW");
    }
    public static int DeleteFileTransactedW ( Addressable lpFileName,  Addressable hTransaction) {
        var mh$ = DeleteFileTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckNameLegalDOS8Dot3A$MH() {
        return RuntimeHelper.requireNonNull(constants$363.CheckNameLegalDOS8Dot3A$MH,"CheckNameLegalDOS8Dot3A");
    }
    public static int CheckNameLegalDOS8Dot3A ( Addressable lpName,  Addressable lpOemName,  int OemNameSize,  Addressable pbNameContainsSpaces,  Addressable pbNameLegal) {
        var mh$ = CheckNameLegalDOS8Dot3A$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckNameLegalDOS8Dot3W$MH() {
        return RuntimeHelper.requireNonNull(constants$363.CheckNameLegalDOS8Dot3W$MH,"CheckNameLegalDOS8Dot3W");
    }
    public static int CheckNameLegalDOS8Dot3W ( Addressable lpName,  Addressable lpOemName,  int OemNameSize,  Addressable pbNameContainsSpaces,  Addressable pbNameLegal) {
        var mh$ = CheckNameLegalDOS8Dot3W$MH();
        try {
            return (int)mh$.invokeExact(lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$363.FindFirstFileTransactedA$MH,"FindFirstFileTransactedA");
    }
    public static MemoryAddress FindFirstFileTransactedA ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFindFileData,  int fSearchOp,  Addressable lpSearchFilter,  int dwAdditionalFlags,  Addressable hTransaction) {
        var mh$ = FindFirstFileTransactedA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$363.FindFirstFileTransactedW$MH,"FindFirstFileTransactedW");
    }
    public static MemoryAddress FindFirstFileTransactedW ( Addressable lpFileName,  int fInfoLevelId,  Addressable lpFindFileData,  int fSearchOp,  Addressable lpSearchFilter,  int dwAdditionalFlags,  Addressable hTransaction) {
        var mh$ = FindFirstFileTransactedW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$363.CopyFileA$MH,"CopyFileA");
    }
    public static int CopyFileA ( Addressable lpExistingFileName,  Addressable lpNewFileName,  int bFailIfExists) {
        var mh$ = CopyFileA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, bFailIfExists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$364.CopyFileW$MH,"CopyFileW");
    }
    public static int CopyFileW ( Addressable lpExistingFileName,  Addressable lpNewFileName,  int bFailIfExists) {
        var mh$ = CopyFileW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, bFailIfExists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileExA$MH() {
        return RuntimeHelper.requireNonNull(constants$364.CopyFileExA$MH,"CopyFileExA");
    }
    public static int CopyFileExA ( Addressable lpExistingFileName,  Addressable lpNewFileName,  Addressable lpProgressRoutine,  Addressable lpData,  Addressable pbCancel,  int dwCopyFlags) {
        var mh$ = CopyFileExA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileExW$MH() {
        return RuntimeHelper.requireNonNull(constants$364.CopyFileExW$MH,"CopyFileExW");
    }
    public static int CopyFileExW ( Addressable lpExistingFileName,  Addressable lpNewFileName,  Addressable lpProgressRoutine,  Addressable lpData,  Addressable pbCancel,  int dwCopyFlags) {
        var mh$ = CopyFileExW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$364.CopyFileTransactedA$MH,"CopyFileTransactedA");
    }
    public static int CopyFileTransactedA ( Addressable lpExistingFileName,  Addressable lpNewFileName,  Addressable lpProgressRoutine,  Addressable lpData,  Addressable pbCancel,  int dwCopyFlags,  Addressable hTransaction) {
        var mh$ = CopyFileTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyFileTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$365.CopyFileTransactedW$MH,"CopyFileTransactedW");
    }
    public static int CopyFileTransactedW ( Addressable lpExistingFileName,  Addressable lpNewFileName,  Addressable lpProgressRoutine,  Addressable lpData,  Addressable pbCancel,  int dwCopyFlags,  Addressable hTransaction) {
        var mh$ = CopyFileTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int COPYFILE2_CALLBACK_NONE() {
        return (int)0L;
    }
    public static int COPYFILE2_CALLBACK_CHUNK_STARTED() {
        return (int)1L;
    }
    public static int COPYFILE2_CALLBACK_CHUNK_FINISHED() {
        return (int)2L;
    }
    public static int COPYFILE2_CALLBACK_STREAM_STARTED() {
        return (int)3L;
    }
    public static int COPYFILE2_CALLBACK_STREAM_FINISHED() {
        return (int)4L;
    }
    public static int COPYFILE2_CALLBACK_POLL_CONTINUE() {
        return (int)5L;
    }
    public static int COPYFILE2_CALLBACK_ERROR() {
        return (int)6L;
    }
    public static int COPYFILE2_CALLBACK_MAX() {
        return (int)7L;
    }
    public static int COPYFILE2_PROGRESS_CONTINUE() {
        return (int)0L;
    }
    public static int COPYFILE2_PROGRESS_CANCEL() {
        return (int)1L;
    }
    public static int COPYFILE2_PROGRESS_STOP() {
        return (int)2L;
    }
    public static int COPYFILE2_PROGRESS_QUIET() {
        return (int)3L;
    }
    public static int COPYFILE2_PROGRESS_PAUSE() {
        return (int)4L;
    }
    public static int COPYFILE2_PHASE_NONE() {
        return (int)0L;
    }
    public static int COPYFILE2_PHASE_PREPARE_SOURCE() {
        return (int)1L;
    }
    public static int COPYFILE2_PHASE_PREPARE_DEST() {
        return (int)2L;
    }
    public static int COPYFILE2_PHASE_READ_SOURCE() {
        return (int)3L;
    }
    public static int COPYFILE2_PHASE_WRITE_DESTINATION() {
        return (int)4L;
    }
    public static int COPYFILE2_PHASE_SERVER_COPY() {
        return (int)5L;
    }
    public static int COPYFILE2_PHASE_NAMEGRAFT_COPY() {
        return (int)6L;
    }
    public static int COPYFILE2_PHASE_MAX() {
        return (int)7L;
    }
    public static MethodHandle CopyFile2$MH() {
        return RuntimeHelper.requireNonNull(constants$365.CopyFile2$MH,"CopyFile2");
    }
    public static int CopyFile2 ( Addressable pwszExistingFileName,  Addressable pwszNewFileName,  Addressable pExtendedParameters) {
        var mh$ = CopyFile2$MH();
        try {
            return (int)mh$.invokeExact(pwszExistingFileName, pwszNewFileName, pExtendedParameters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$365.MoveFileA$MH,"MoveFileA");
    }
    public static int MoveFileA ( Addressable lpExistingFileName,  Addressable lpNewFileName) {
        var mh$ = MoveFileA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$365.MoveFileW$MH,"MoveFileW");
    }
    public static int MoveFileW ( Addressable lpExistingFileName,  Addressable lpNewFileName) {
        var mh$ = MoveFileW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileExA$MH() {
        return RuntimeHelper.requireNonNull(constants$366.MoveFileExA$MH,"MoveFileExA");
    }
    public static int MoveFileExA ( Addressable lpExistingFileName,  Addressable lpNewFileName,  int dwFlags) {
        var mh$ = MoveFileExA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileExW$MH() {
        return RuntimeHelper.requireNonNull(constants$366.MoveFileExW$MH,"MoveFileExW");
    }
    public static int MoveFileExW ( Addressable lpExistingFileName,  Addressable lpNewFileName,  int dwFlags) {
        var mh$ = MoveFileExW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileWithProgressA$MH() {
        return RuntimeHelper.requireNonNull(constants$366.MoveFileWithProgressA$MH,"MoveFileWithProgressA");
    }
    public static int MoveFileWithProgressA ( Addressable lpExistingFileName,  Addressable lpNewFileName,  Addressable lpProgressRoutine,  Addressable lpData,  int dwFlags) {
        var mh$ = MoveFileWithProgressA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileWithProgressW$MH() {
        return RuntimeHelper.requireNonNull(constants$366.MoveFileWithProgressW$MH,"MoveFileWithProgressW");
    }
    public static int MoveFileWithProgressW ( Addressable lpExistingFileName,  Addressable lpNewFileName,  Addressable lpProgressRoutine,  Addressable lpData,  int dwFlags) {
        var mh$ = MoveFileWithProgressW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$366.MoveFileTransactedA$MH,"MoveFileTransactedA");
    }
    public static int MoveFileTransactedA ( Addressable lpExistingFileName,  Addressable lpNewFileName,  Addressable lpProgressRoutine,  Addressable lpData,  int dwFlags,  Addressable hTransaction) {
        var mh$ = MoveFileTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MoveFileTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$366.MoveFileTransactedW$MH,"MoveFileTransactedW");
    }
    public static int MoveFileTransactedW ( Addressable lpExistingFileName,  Addressable lpNewFileName,  Addressable lpProgressRoutine,  Addressable lpData,  int dwFlags,  Addressable hTransaction) {
        var mh$ = MoveFileTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$367.ReplaceFileA$MH,"ReplaceFileA");
    }
    public static int ReplaceFileA ( Addressable lpReplacedFileName,  Addressable lpReplacementFileName,  Addressable lpBackupFileName,  int dwReplaceFlags,  Addressable lpExclude,  Addressable lpReserved) {
        var mh$ = ReplaceFileA$MH();
        try {
            return (int)mh$.invokeExact(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplaceFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$367.ReplaceFileW$MH,"ReplaceFileW");
    }
    public static int ReplaceFileW ( Addressable lpReplacedFileName,  Addressable lpReplacementFileName,  Addressable lpBackupFileName,  int dwReplaceFlags,  Addressable lpExclude,  Addressable lpReserved) {
        var mh$ = ReplaceFileW$MH();
        try {
            return (int)mh$.invokeExact(lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHardLinkA$MH() {
        return RuntimeHelper.requireNonNull(constants$367.CreateHardLinkA$MH,"CreateHardLinkA");
    }
    public static int CreateHardLinkA ( Addressable lpFileName,  Addressable lpExistingFileName,  Addressable lpSecurityAttributes) {
        var mh$ = CreateHardLinkA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpExistingFileName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHardLinkW$MH() {
        return RuntimeHelper.requireNonNull(constants$367.CreateHardLinkW$MH,"CreateHardLinkW");
    }
    public static int CreateHardLinkW ( Addressable lpFileName,  Addressable lpExistingFileName,  Addressable lpSecurityAttributes) {
        var mh$ = CreateHardLinkW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpExistingFileName, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHardLinkTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$367.CreateHardLinkTransactedA$MH,"CreateHardLinkTransactedA");
    }
    public static int CreateHardLinkTransactedA ( Addressable lpFileName,  Addressable lpExistingFileName,  Addressable lpSecurityAttributes,  Addressable hTransaction) {
        var mh$ = CreateHardLinkTransactedA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHardLinkTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$367.CreateHardLinkTransactedW$MH,"CreateHardLinkTransactedW");
    }
    public static int CreateHardLinkTransactedW ( Addressable lpFileName,  Addressable lpExistingFileName,  Addressable lpSecurityAttributes,  Addressable hTransaction) {
        var mh$ = CreateHardLinkTransactedW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstStreamTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$368.FindFirstStreamTransactedW$MH,"FindFirstStreamTransactedW");
    }
    public static MemoryAddress FindFirstStreamTransactedW ( Addressable lpFileName,  int InfoLevel,  Addressable lpFindStreamData,  int dwFlags,  Addressable hTransaction) {
        var mh$ = FindFirstStreamTransactedW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, InfoLevel, lpFindStreamData, dwFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstFileNameTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$368.FindFirstFileNameTransactedW$MH,"FindFirstFileNameTransactedW");
    }
    public static MemoryAddress FindFirstFileNameTransactedW ( Addressable lpFileName,  int dwFlags,  Addressable StringLength,  Addressable LinkName,  Addressable hTransaction) {
        var mh$ = FindFirstFileNameTransactedW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpFileName, dwFlags, StringLength, LinkName, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateNamedPipeA$MH() {
        return RuntimeHelper.requireNonNull(constants$368.CreateNamedPipeA$MH,"CreateNamedPipeA");
    }
    public static MemoryAddress CreateNamedPipeA ( Addressable lpName,  int dwOpenMode,  int dwPipeMode,  int nMaxInstances,  int nOutBufferSize,  int nInBufferSize,  int nDefaultTimeOut,  Addressable lpSecurityAttributes) {
        var mh$ = CreateNamedPipeA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeHandleStateA$MH() {
        return RuntimeHelper.requireNonNull(constants$368.GetNamedPipeHandleStateA$MH,"GetNamedPipeHandleStateA");
    }
    public static int GetNamedPipeHandleStateA ( Addressable hNamedPipe,  Addressable lpState,  Addressable lpCurInstances,  Addressable lpMaxCollectionCount,  Addressable lpCollectDataTimeout,  Addressable lpUserName,  int nMaxUserNameSize) {
        var mh$ = GetNamedPipeHandleStateA$MH();
        try {
            return (int)mh$.invokeExact(hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CallNamedPipeA$MH() {
        return RuntimeHelper.requireNonNull(constants$368.CallNamedPipeA$MH,"CallNamedPipeA");
    }
    public static int CallNamedPipeA ( Addressable lpNamedPipeName,  Addressable lpInBuffer,  int nInBufferSize,  Addressable lpOutBuffer,  int nOutBufferSize,  Addressable lpBytesRead,  int nTimeOut) {
        var mh$ = CallNamedPipeA$MH();
        try {
            return (int)mh$.invokeExact(lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitNamedPipeA$MH() {
        return RuntimeHelper.requireNonNull(constants$368.WaitNamedPipeA$MH,"WaitNamedPipeA");
    }
    public static int WaitNamedPipeA ( Addressable lpNamedPipeName,  int nTimeOut) {
        var mh$ = WaitNamedPipeA$MH();
        try {
            return (int)mh$.invokeExact(lpNamedPipeName, nTimeOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeClientComputerNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$369.GetNamedPipeClientComputerNameA$MH,"GetNamedPipeClientComputerNameA");
    }
    public static int GetNamedPipeClientComputerNameA ( Addressable Pipe,  Addressable ClientComputerName,  int ClientComputerNameLength) {
        var mh$ = GetNamedPipeClientComputerNameA$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ClientComputerName, ClientComputerNameLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeClientProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$369.GetNamedPipeClientProcessId$MH,"GetNamedPipeClientProcessId");
    }
    public static int GetNamedPipeClientProcessId ( Addressable Pipe,  Addressable ClientProcessId) {
        var mh$ = GetNamedPipeClientProcessId$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ClientProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeClientSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$369.GetNamedPipeClientSessionId$MH,"GetNamedPipeClientSessionId");
    }
    public static int GetNamedPipeClientSessionId ( Addressable Pipe,  Addressable ClientSessionId) {
        var mh$ = GetNamedPipeClientSessionId$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ClientSessionId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeServerProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$369.GetNamedPipeServerProcessId$MH,"GetNamedPipeServerProcessId");
    }
    public static int GetNamedPipeServerProcessId ( Addressable Pipe,  Addressable ServerProcessId) {
        var mh$ = GetNamedPipeServerProcessId$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ServerProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNamedPipeServerSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$369.GetNamedPipeServerSessionId$MH,"GetNamedPipeServerSessionId");
    }
    public static int GetNamedPipeServerSessionId ( Addressable Pipe,  Addressable ServerSessionId) {
        var mh$ = GetNamedPipeServerSessionId$MH();
        try {
            return (int)mh$.invokeExact(Pipe, ServerSessionId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetVolumeLabelA$MH() {
        return RuntimeHelper.requireNonNull(constants$369.SetVolumeLabelA$MH,"SetVolumeLabelA");
    }
    public static int SetVolumeLabelA ( Addressable lpRootPathName,  Addressable lpVolumeName) {
        var mh$ = SetVolumeLabelA$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpVolumeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetVolumeLabelW$MH() {
        return RuntimeHelper.requireNonNull(constants$370.SetVolumeLabelW$MH,"SetVolumeLabelW");
    }
    public static int SetVolumeLabelW ( Addressable lpRootPathName,  Addressable lpVolumeName) {
        var mh$ = SetVolumeLabelW$MH();
        try {
            return (int)mh$.invokeExact(lpRootPathName, lpVolumeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileBandwidthReservation$MH() {
        return RuntimeHelper.requireNonNull(constants$370.SetFileBandwidthReservation$MH,"SetFileBandwidthReservation");
    }
    public static int SetFileBandwidthReservation ( Addressable hFile,  int nPeriodMilliseconds,  int nBytesPerPeriod,  int bDiscardable,  Addressable lpTransferSize,  Addressable lpNumOutstandingRequests) {
        var mh$ = SetFileBandwidthReservation$MH();
        try {
            return (int)mh$.invokeExact(hFile, nPeriodMilliseconds, nBytesPerPeriod, bDiscardable, lpTransferSize, lpNumOutstandingRequests);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileBandwidthReservation$MH() {
        return RuntimeHelper.requireNonNull(constants$370.GetFileBandwidthReservation$MH,"GetFileBandwidthReservation");
    }
    public static int GetFileBandwidthReservation ( Addressable hFile,  Addressable lpPeriodMilliseconds,  Addressable lpBytesPerPeriod,  Addressable pDiscardable,  Addressable lpTransferSize,  Addressable lpNumOutstandingRequests) {
        var mh$ = GetFileBandwidthReservation$MH();
        try {
            return (int)mh$.invokeExact(hFile, lpPeriodMilliseconds, lpBytesPerPeriod, pDiscardable, lpTransferSize, lpNumOutstandingRequests);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearEventLogA$MH() {
        return RuntimeHelper.requireNonNull(constants$370.ClearEventLogA$MH,"ClearEventLogA");
    }
    public static int ClearEventLogA ( Addressable hEventLog,  Addressable lpBackupFileName) {
        var mh$ = ClearEventLogA$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, lpBackupFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClearEventLogW$MH() {
        return RuntimeHelper.requireNonNull(constants$370.ClearEventLogW$MH,"ClearEventLogW");
    }
    public static int ClearEventLogW ( Addressable hEventLog,  Addressable lpBackupFileName) {
        var mh$ = ClearEventLogW$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, lpBackupFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BackupEventLogA$MH() {
        return RuntimeHelper.requireNonNull(constants$370.BackupEventLogA$MH,"BackupEventLogA");
    }
    public static int BackupEventLogA ( Addressable hEventLog,  Addressable lpBackupFileName) {
        var mh$ = BackupEventLogA$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, lpBackupFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BackupEventLogW$MH() {
        return RuntimeHelper.requireNonNull(constants$371.BackupEventLogW$MH,"BackupEventLogW");
    }
    public static int BackupEventLogW ( Addressable hEventLog,  Addressable lpBackupFileName) {
        var mh$ = BackupEventLogW$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, lpBackupFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseEventLog$MH() {
        return RuntimeHelper.requireNonNull(constants$371.CloseEventLog$MH,"CloseEventLog");
    }
    public static int CloseEventLog ( Addressable hEventLog) {
        var mh$ = CloseEventLog$MH();
        try {
            return (int)mh$.invokeExact(hEventLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeregisterEventSource$MH() {
        return RuntimeHelper.requireNonNull(constants$371.DeregisterEventSource$MH,"DeregisterEventSource");
    }
    public static int DeregisterEventSource ( Addressable hEventLog) {
        var mh$ = DeregisterEventSource$MH();
        try {
            return (int)mh$.invokeExact(hEventLog);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyChangeEventLog$MH() {
        return RuntimeHelper.requireNonNull(constants$371.NotifyChangeEventLog$MH,"NotifyChangeEventLog");
    }
    public static int NotifyChangeEventLog ( Addressable hEventLog,  Addressable hEvent) {
        var mh$ = NotifyChangeEventLog$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberOfEventLogRecords$MH() {
        return RuntimeHelper.requireNonNull(constants$371.GetNumberOfEventLogRecords$MH,"GetNumberOfEventLogRecords");
    }
    public static int GetNumberOfEventLogRecords ( Addressable hEventLog,  Addressable NumberOfRecords) {
        var mh$ = GetNumberOfEventLogRecords$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, NumberOfRecords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOldestEventLogRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$371.GetOldestEventLogRecord$MH,"GetOldestEventLogRecord");
    }
    public static int GetOldestEventLogRecord ( Addressable hEventLog,  Addressable OldestRecord) {
        var mh$ = GetOldestEventLogRecord$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, OldestRecord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEventLogA$MH() {
        return RuntimeHelper.requireNonNull(constants$372.OpenEventLogA$MH,"OpenEventLogA");
    }
    public static MemoryAddress OpenEventLogA ( Addressable lpUNCServerName,  Addressable lpSourceName) {
        var mh$ = OpenEventLogA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpUNCServerName, lpSourceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenEventLogW$MH() {
        return RuntimeHelper.requireNonNull(constants$372.OpenEventLogW$MH,"OpenEventLogW");
    }
    public static MemoryAddress OpenEventLogW ( Addressable lpUNCServerName,  Addressable lpSourceName) {
        var mh$ = OpenEventLogW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpUNCServerName, lpSourceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterEventSourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$372.RegisterEventSourceA$MH,"RegisterEventSourceA");
    }
    public static MemoryAddress RegisterEventSourceA ( Addressable lpUNCServerName,  Addressable lpSourceName) {
        var mh$ = RegisterEventSourceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpUNCServerName, lpSourceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterEventSourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$372.RegisterEventSourceW$MH,"RegisterEventSourceW");
    }
    public static MemoryAddress RegisterEventSourceW ( Addressable lpUNCServerName,  Addressable lpSourceName) {
        var mh$ = RegisterEventSourceW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpUNCServerName, lpSourceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenBackupEventLogA$MH() {
        return RuntimeHelper.requireNonNull(constants$372.OpenBackupEventLogA$MH,"OpenBackupEventLogA");
    }
    public static MemoryAddress OpenBackupEventLogA ( Addressable lpUNCServerName,  Addressable lpFileName) {
        var mh$ = OpenBackupEventLogA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpUNCServerName, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenBackupEventLogW$MH() {
        return RuntimeHelper.requireNonNull(constants$372.OpenBackupEventLogW$MH,"OpenBackupEventLogW");
    }
    public static MemoryAddress OpenBackupEventLogW ( Addressable lpUNCServerName,  Addressable lpFileName) {
        var mh$ = OpenBackupEventLogW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpUNCServerName, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadEventLogA$MH() {
        return RuntimeHelper.requireNonNull(constants$373.ReadEventLogA$MH,"ReadEventLogA");
    }
    public static int ReadEventLogA ( Addressable hEventLog,  int dwReadFlags,  int dwRecordOffset,  Addressable lpBuffer,  int nNumberOfBytesToRead,  Addressable pnBytesRead,  Addressable pnMinNumberOfBytesNeeded) {
        var mh$ = ReadEventLogA$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, dwReadFlags, dwRecordOffset, lpBuffer, nNumberOfBytesToRead, pnBytesRead, pnMinNumberOfBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadEventLogW$MH() {
        return RuntimeHelper.requireNonNull(constants$373.ReadEventLogW$MH,"ReadEventLogW");
    }
    public static int ReadEventLogW ( Addressable hEventLog,  int dwReadFlags,  int dwRecordOffset,  Addressable lpBuffer,  int nNumberOfBytesToRead,  Addressable pnBytesRead,  Addressable pnMinNumberOfBytesNeeded) {
        var mh$ = ReadEventLogW$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, dwReadFlags, dwRecordOffset, lpBuffer, nNumberOfBytesToRead, pnBytesRead, pnMinNumberOfBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReportEventA$MH() {
        return RuntimeHelper.requireNonNull(constants$373.ReportEventA$MH,"ReportEventA");
    }
    public static int ReportEventA ( Addressable hEventLog,  short wType,  short wCategory,  int dwEventID,  Addressable lpUserSid,  short wNumStrings,  int dwDataSize,  Addressable lpStrings,  Addressable lpRawData) {
        var mh$ = ReportEventA$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, wType, wCategory, dwEventID, lpUserSid, wNumStrings, dwDataSize, lpStrings, lpRawData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReportEventW$MH() {
        return RuntimeHelper.requireNonNull(constants$373.ReportEventW$MH,"ReportEventW");
    }
    public static int ReportEventW ( Addressable hEventLog,  short wType,  short wCategory,  int dwEventID,  Addressable lpUserSid,  short wNumStrings,  int dwDataSize,  Addressable lpStrings,  Addressable lpRawData) {
        var mh$ = ReportEventW$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, wType, wCategory, dwEventID, lpUserSid, wNumStrings, dwDataSize, lpStrings, lpRawData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPEVENTLOG_FULL_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetEventLogInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$373.GetEventLogInformation$MH,"GetEventLogInformation");
    }
    public static int GetEventLogInformation ( Addressable hEventLog,  int dwInfoLevel,  Addressable lpBuffer,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = GetEventLogInformation$MH();
        try {
            return (int)mh$.invokeExact(hEventLog, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress POPERATION_START_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POPERATION_END_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle OperationStart$MH() {
        return RuntimeHelper.requireNonNull(constants$373.OperationStart$MH,"OperationStart");
    }
    public static int OperationStart ( Addressable OperationStartParams) {
        var mh$ = OperationStart$MH();
        try {
            return (int)mh$.invokeExact(OperationStartParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OperationEnd$MH() {
        return RuntimeHelper.requireNonNull(constants$374.OperationEnd$MH,"OperationEnd");
    }
    public static int OperationEnd ( Addressable OperationEndParams) {
        var mh$ = OperationEnd$MH();
        try {
            return (int)mh$.invokeExact(OperationEndParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckAndAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$374.AccessCheckAndAuditAlarmA$MH,"AccessCheckAndAuditAlarmA");
    }
    public static int AccessCheckAndAuditAlarmA ( Addressable SubsystemName,  Addressable HandleId,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  int DesiredAccess,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccess,  Addressable AccessStatus,  Addressable pfGenerateOnClose) {
        var mh$ = AccessCheckAndAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeAndAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$374.AccessCheckByTypeAndAuditAlarmA$MH,"AccessCheckByTypeAndAuditAlarmA");
    }
    public static int AccessCheckByTypeAndAuditAlarmA ( Addressable SubsystemName,  Addressable HandleId,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  Addressable PrincipalSelfSid,  int DesiredAccess,  int AuditType,  int Flags,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccess,  Addressable AccessStatus,  Addressable pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeAndAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultListAndAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$374.AccessCheckByTypeResultListAndAuditAlarmA$MH,"AccessCheckByTypeResultListAndAuditAlarmA");
    }
    public static int AccessCheckByTypeResultListAndAuditAlarmA ( Addressable SubsystemName,  Addressable HandleId,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  Addressable PrincipalSelfSid,  int DesiredAccess,  int AuditType,  int Flags,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccess,  Addressable AccessStatusList,  Addressable pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeResultListAndAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH() {
        return RuntimeHelper.requireNonNull(constants$374.AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH,"AccessCheckByTypeResultListAndAuditAlarmByHandleA");
    }
    public static int AccessCheckByTypeResultListAndAuditAlarmByHandleA ( Addressable SubsystemName,  Addressable HandleId,  Addressable ClientToken,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable SecurityDescriptor,  Addressable PrincipalSelfSid,  int DesiredAccess,  int AuditType,  int Flags,  Addressable ObjectTypeList,  int ObjectTypeListLength,  Addressable GenericMapping,  int ObjectCreation,  Addressable GrantedAccess,  Addressable AccessStatusList,  Addressable pfGenerateOnClose) {
        var mh$ = AccessCheckByTypeResultListAndAuditAlarmByHandleA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, SecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectOpenAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$374.ObjectOpenAuditAlarmA$MH,"ObjectOpenAuditAlarmA");
    }
    public static int ObjectOpenAuditAlarmA ( Addressable SubsystemName,  Addressable HandleId,  Addressable ObjectTypeName,  Addressable ObjectName,  Addressable pSecurityDescriptor,  Addressable ClientToken,  int DesiredAccess,  int GrantedAccess,  Addressable Privileges,  int ObjectCreation,  int AccessGranted,  Addressable GenerateOnClose) {
        var mh$ = ObjectOpenAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess, Privileges, ObjectCreation, AccessGranted, GenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectPrivilegeAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$375.ObjectPrivilegeAuditAlarmA$MH,"ObjectPrivilegeAuditAlarmA");
    }
    public static int ObjectPrivilegeAuditAlarmA ( Addressable SubsystemName,  Addressable HandleId,  Addressable ClientToken,  int DesiredAccess,  Addressable Privileges,  int AccessGranted) {
        var mh$ = ObjectPrivilegeAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, ClientToken, DesiredAccess, Privileges, AccessGranted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectCloseAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$375.ObjectCloseAuditAlarmA$MH,"ObjectCloseAuditAlarmA");
    }
    public static int ObjectCloseAuditAlarmA ( Addressable SubsystemName,  Addressable HandleId,  int GenerateOnClose) {
        var mh$ = ObjectCloseAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, GenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ObjectDeleteAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$375.ObjectDeleteAuditAlarmA$MH,"ObjectDeleteAuditAlarmA");
    }
    public static int ObjectDeleteAuditAlarmA ( Addressable SubsystemName,  Addressable HandleId,  int GenerateOnClose) {
        var mh$ = ObjectDeleteAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, HandleId, GenerateOnClose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PrivilegedServiceAuditAlarmA$MH() {
        return RuntimeHelper.requireNonNull(constants$375.PrivilegedServiceAuditAlarmA$MH,"PrivilegedServiceAuditAlarmA");
    }
    public static int PrivilegedServiceAuditAlarmA ( Addressable SubsystemName,  Addressable ServiceName,  Addressable ClientToken,  Addressable Privileges,  int AccessGranted) {
        var mh$ = PrivilegedServiceAuditAlarmA$MH();
        try {
            return (int)mh$.invokeExact(SubsystemName, ServiceName, ClientToken, Privileges, AccessGranted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddConditionalAce$MH() {
        return RuntimeHelper.requireNonNull(constants$375.AddConditionalAce$MH,"AddConditionalAce");
    }
    public static int AddConditionalAce ( Addressable pAcl,  int dwAceRevision,  int AceFlags,  byte AceType,  int AccessMask,  Addressable pSid,  Addressable ConditionStr,  Addressable ReturnLength) {
        var mh$ = AddConditionalAce$MH();
        try {
            return (int)mh$.invokeExact(pAcl, dwAceRevision, AceFlags, AceType, AccessMask, pSid, ConditionStr, ReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetFileSecurityA$MH() {
        return RuntimeHelper.requireNonNull(constants$375.SetFileSecurityA$MH,"SetFileSecurityA");
    }
    public static int SetFileSecurityA ( Addressable lpFileName,  int SecurityInformation,  Addressable pSecurityDescriptor) {
        var mh$ = SetFileSecurityA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, SecurityInformation, pSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileSecurityA$MH() {
        return RuntimeHelper.requireNonNull(constants$376.GetFileSecurityA$MH,"GetFileSecurityA");
    }
    public static int GetFileSecurityA ( Addressable lpFileName,  int RequestedInformation,  Addressable pSecurityDescriptor,  int nLength,  Addressable lpnLengthNeeded) {
        var mh$ = GetFileSecurityA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadDirectoryChangesW$MH() {
        return RuntimeHelper.requireNonNull(constants$376.ReadDirectoryChangesW$MH,"ReadDirectoryChangesW");
    }
    public static int ReadDirectoryChangesW ( Addressable hDirectory,  Addressable lpBuffer,  int nBufferLength,  int bWatchSubtree,  int dwNotifyFilter,  Addressable lpBytesReturned,  Addressable lpOverlapped,  Addressable lpCompletionRoutine) {
        var mh$ = ReadDirectoryChangesW$MH();
        try {
            return (int)mh$.invokeExact(hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, lpOverlapped, lpCompletionRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadDirectoryChangesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$376.ReadDirectoryChangesExW$MH,"ReadDirectoryChangesExW");
    }
    public static int ReadDirectoryChangesExW ( Addressable hDirectory,  Addressable lpBuffer,  int nBufferLength,  int bWatchSubtree,  int dwNotifyFilter,  Addressable lpBytesReturned,  Addressable lpOverlapped,  Addressable lpCompletionRoutine,  int ReadDirectoryNotifyInformationClass) {
        var mh$ = ReadDirectoryChangesExW$MH();
        try {
            return (int)mh$.invokeExact(hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, lpOverlapped, lpCompletionRoutine, ReadDirectoryNotifyInformationClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapViewOfFileExNuma$MH() {
        return RuntimeHelper.requireNonNull(constants$376.MapViewOfFileExNuma$MH,"MapViewOfFileExNuma");
    }
    public static MemoryAddress MapViewOfFileExNuma ( Addressable hFileMappingObject,  int dwDesiredAccess,  int dwFileOffsetHigh,  int dwFileOffsetLow,  long dwNumberOfBytesToMap,  Addressable lpBaseAddress,  int nndPreferred) {
        var mh$ = MapViewOfFileExNuma$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress, nndPreferred);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadReadPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$376.IsBadReadPtr$MH,"IsBadReadPtr");
    }
    public static int IsBadReadPtr ( Addressable lp,  long ucb) {
        var mh$ = IsBadReadPtr$MH();
        try {
            return (int)mh$.invokeExact(lp, ucb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadWritePtr$MH() {
        return RuntimeHelper.requireNonNull(constants$376.IsBadWritePtr$MH,"IsBadWritePtr");
    }
    public static int IsBadWritePtr ( Addressable lp,  long ucb) {
        var mh$ = IsBadWritePtr$MH();
        try {
            return (int)mh$.invokeExact(lp, ucb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadHugeReadPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$377.IsBadHugeReadPtr$MH,"IsBadHugeReadPtr");
    }
    public static int IsBadHugeReadPtr ( Addressable lp,  long ucb) {
        var mh$ = IsBadHugeReadPtr$MH();
        try {
            return (int)mh$.invokeExact(lp, ucb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadHugeWritePtr$MH() {
        return RuntimeHelper.requireNonNull(constants$377.IsBadHugeWritePtr$MH,"IsBadHugeWritePtr");
    }
    public static int IsBadHugeWritePtr ( Addressable lp,  long ucb) {
        var mh$ = IsBadHugeWritePtr$MH();
        try {
            return (int)mh$.invokeExact(lp, ucb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadCodePtr$MH() {
        return RuntimeHelper.requireNonNull(constants$377.IsBadCodePtr$MH,"IsBadCodePtr");
    }
    public static int IsBadCodePtr ( Addressable lpfn) {
        var mh$ = IsBadCodePtr$MH();
        try {
            return (int)mh$.invokeExact(lpfn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadStringPtrA$MH() {
        return RuntimeHelper.requireNonNull(constants$377.IsBadStringPtrA$MH,"IsBadStringPtrA");
    }
    public static int IsBadStringPtrA ( Addressable lpsz,  long ucchMax) {
        var mh$ = IsBadStringPtrA$MH();
        try {
            return (int)mh$.invokeExact(lpsz, ucchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsBadStringPtrW$MH() {
        return RuntimeHelper.requireNonNull(constants$377.IsBadStringPtrW$MH,"IsBadStringPtrW");
    }
    public static int IsBadStringPtrW ( Addressable lpsz,  long ucchMax) {
        var mh$ = IsBadStringPtrW$MH();
        try {
            return (int)mh$.invokeExact(lpsz, ucchMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountSidA$MH() {
        return RuntimeHelper.requireNonNull(constants$377.LookupAccountSidA$MH,"LookupAccountSidA");
    }
    public static int LookupAccountSidA ( Addressable lpSystemName,  Addressable Sid,  Addressable Name,  Addressable cchName,  Addressable ReferencedDomainName,  Addressable cchReferencedDomainName,  Addressable peUse) {
        var mh$ = LookupAccountSidA$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, Sid, Name, cchName, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountSidW$MH() {
        return RuntimeHelper.requireNonNull(constants$378.LookupAccountSidW$MH,"LookupAccountSidW");
    }
    public static int LookupAccountSidW ( Addressable lpSystemName,  Addressable Sid,  Addressable Name,  Addressable cchName,  Addressable ReferencedDomainName,  Addressable cchReferencedDomainName,  Addressable peUse) {
        var mh$ = LookupAccountSidW$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, Sid, Name, cchName, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$378.LookupAccountNameA$MH,"LookupAccountNameA");
    }
    public static int LookupAccountNameA ( Addressable lpSystemName,  Addressable lpAccountName,  Addressable Sid,  Addressable cbSid,  Addressable ReferencedDomainName,  Addressable cchReferencedDomainName,  Addressable peUse) {
        var mh$ = LookupAccountNameA$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$378.LookupAccountNameW$MH,"LookupAccountNameW");
    }
    public static int LookupAccountNameW ( Addressable lpSystemName,  Addressable lpAccountName,  Addressable Sid,  Addressable cbSid,  Addressable ReferencedDomainName,  Addressable cchReferencedDomainName,  Addressable peUse) {
        var mh$ = LookupAccountNameW$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountNameLocalA$MH() {
        return RuntimeHelper.requireNonNull(constants$378.LookupAccountNameLocalA$MH,"LookupAccountNameLocalA");
    }
    public static int LookupAccountNameLocalA ( Addressable lpAccountName,  Addressable Sid,  Addressable cbSid,  Addressable ReferencedDomainName,  Addressable cchReferencedDomainName,  Addressable peUse) {
        var mh$ = LookupAccountNameLocalA$MH();
        try {
            return (int)mh$.invokeExact(lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountNameLocalW$MH() {
        return RuntimeHelper.requireNonNull(constants$378.LookupAccountNameLocalW$MH,"LookupAccountNameLocalW");
    }
    public static int LookupAccountNameLocalW ( Addressable lpAccountName,  Addressable Sid,  Addressable cbSid,  Addressable ReferencedDomainName,  Addressable cchReferencedDomainName,  Addressable peUse) {
        var mh$ = LookupAccountNameLocalW$MH();
        try {
            return (int)mh$.invokeExact(lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountSidLocalA$MH() {
        return RuntimeHelper.requireNonNull(constants$378.LookupAccountSidLocalA$MH,"LookupAccountSidLocalA");
    }
    public static int LookupAccountSidLocalA ( Addressable Sid,  Addressable Name,  Addressable cchName,  Addressable ReferencedDomainName,  Addressable cchReferencedDomainName,  Addressable peUse) {
        var mh$ = LookupAccountSidLocalA$MH();
        try {
            return (int)mh$.invokeExact(Sid, Name, cchName, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupAccountSidLocalW$MH() {
        return RuntimeHelper.requireNonNull(constants$379.LookupAccountSidLocalW$MH,"LookupAccountSidLocalW");
    }
    public static int LookupAccountSidLocalW ( Addressable Sid,  Addressable Name,  Addressable cchName,  Addressable ReferencedDomainName,  Addressable cchReferencedDomainName,  Addressable peUse) {
        var mh$ = LookupAccountSidLocalW$MH();
        try {
            return (int)mh$.invokeExact(Sid, Name, cchName, ReferencedDomainName, cchReferencedDomainName, peUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$379.LookupPrivilegeValueA$MH,"LookupPrivilegeValueA");
    }
    public static int LookupPrivilegeValueA ( Addressable lpSystemName,  Addressable lpName,  Addressable lpLuid) {
        var mh$ = LookupPrivilegeValueA$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpName, lpLuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$379.LookupPrivilegeValueW$MH,"LookupPrivilegeValueW");
    }
    public static int LookupPrivilegeValueW ( Addressable lpSystemName,  Addressable lpName,  Addressable lpLuid) {
        var mh$ = LookupPrivilegeValueW$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpName, lpLuid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$379.LookupPrivilegeNameA$MH,"LookupPrivilegeNameA");
    }
    public static int LookupPrivilegeNameA ( Addressable lpSystemName,  Addressable lpLuid,  Addressable lpName,  Addressable cchName) {
        var mh$ = LookupPrivilegeNameA$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpLuid, lpName, cchName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$379.LookupPrivilegeNameW$MH,"LookupPrivilegeNameW");
    }
    public static int LookupPrivilegeNameW ( Addressable lpSystemName,  Addressable lpLuid,  Addressable lpName,  Addressable cchName) {
        var mh$ = LookupPrivilegeNameW$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpLuid, lpName, cchName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeDisplayNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$379.LookupPrivilegeDisplayNameA$MH,"LookupPrivilegeDisplayNameA");
    }
    public static int LookupPrivilegeDisplayNameA ( Addressable lpSystemName,  Addressable lpName,  Addressable lpDisplayName,  Addressable cchDisplayName,  Addressable lpLanguageId) {
        var mh$ = LookupPrivilegeDisplayNameA$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LookupPrivilegeDisplayNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$380.LookupPrivilegeDisplayNameW$MH,"LookupPrivilegeDisplayNameW");
    }
    public static int LookupPrivilegeDisplayNameW ( Addressable lpSystemName,  Addressable lpName,  Addressable lpDisplayName,  Addressable cchDisplayName,  Addressable lpLanguageId) {
        var mh$ = LookupPrivilegeDisplayNameW$MH();
        try {
            return (int)mh$.invokeExact(lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BuildCommDCBA$MH() {
        return RuntimeHelper.requireNonNull(constants$380.BuildCommDCBA$MH,"BuildCommDCBA");
    }
    public static int BuildCommDCBA ( Addressable lpDef,  Addressable lpDCB) {
        var mh$ = BuildCommDCBA$MH();
        try {
            return (int)mh$.invokeExact(lpDef, lpDCB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BuildCommDCBW$MH() {
        return RuntimeHelper.requireNonNull(constants$380.BuildCommDCBW$MH,"BuildCommDCBW");
    }
    public static int BuildCommDCBW ( Addressable lpDef,  Addressable lpDCB) {
        var mh$ = BuildCommDCBW$MH();
        try {
            return (int)mh$.invokeExact(lpDef, lpDCB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BuildCommDCBAndTimeoutsA$MH() {
        return RuntimeHelper.requireNonNull(constants$380.BuildCommDCBAndTimeoutsA$MH,"BuildCommDCBAndTimeoutsA");
    }
    public static int BuildCommDCBAndTimeoutsA ( Addressable lpDef,  Addressable lpDCB,  Addressable lpCommTimeouts) {
        var mh$ = BuildCommDCBAndTimeoutsA$MH();
        try {
            return (int)mh$.invokeExact(lpDef, lpDCB, lpCommTimeouts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BuildCommDCBAndTimeoutsW$MH() {
        return RuntimeHelper.requireNonNull(constants$380.BuildCommDCBAndTimeoutsW$MH,"BuildCommDCBAndTimeoutsW");
    }
    public static int BuildCommDCBAndTimeoutsW ( Addressable lpDef,  Addressable lpDCB,  Addressable lpCommTimeouts) {
        var mh$ = BuildCommDCBAndTimeoutsW$MH();
        try {
            return (int)mh$.invokeExact(lpDef, lpDCB, lpCommTimeouts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CommConfigDialogA$MH() {
        return RuntimeHelper.requireNonNull(constants$380.CommConfigDialogA$MH,"CommConfigDialogA");
    }
    public static int CommConfigDialogA ( Addressable lpszName,  Addressable hWnd,  Addressable lpCC) {
        var mh$ = CommConfigDialogA$MH();
        try {
            return (int)mh$.invokeExact(lpszName, hWnd, lpCC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CommConfigDialogW$MH() {
        return RuntimeHelper.requireNonNull(constants$381.CommConfigDialogW$MH,"CommConfigDialogW");
    }
    public static int CommConfigDialogW ( Addressable lpszName,  Addressable hWnd,  Addressable lpCC) {
        var mh$ = CommConfigDialogW$MH();
        try {
            return (int)mh$.invokeExact(lpszName, hWnd, lpCC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDefaultCommConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$381.GetDefaultCommConfigA$MH,"GetDefaultCommConfigA");
    }
    public static int GetDefaultCommConfigA ( Addressable lpszName,  Addressable lpCC,  Addressable lpdwSize) {
        var mh$ = GetDefaultCommConfigA$MH();
        try {
            return (int)mh$.invokeExact(lpszName, lpCC, lpdwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDefaultCommConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$381.GetDefaultCommConfigW$MH,"GetDefaultCommConfigW");
    }
    public static int GetDefaultCommConfigW ( Addressable lpszName,  Addressable lpCC,  Addressable lpdwSize) {
        var mh$ = GetDefaultCommConfigW$MH();
        try {
            return (int)mh$.invokeExact(lpszName, lpCC, lpdwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDefaultCommConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$381.SetDefaultCommConfigA$MH,"SetDefaultCommConfigA");
    }
    public static int SetDefaultCommConfigA ( Addressable lpszName,  Addressable lpCC,  int dwSize) {
        var mh$ = SetDefaultCommConfigA$MH();
        try {
            return (int)mh$.invokeExact(lpszName, lpCC, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDefaultCommConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$381.SetDefaultCommConfigW$MH,"SetDefaultCommConfigW");
    }
    public static int SetDefaultCommConfigW ( Addressable lpszName,  Addressable lpCC,  int dwSize) {
        var mh$ = SetDefaultCommConfigW$MH();
        try {
            return (int)mh$.invokeExact(lpszName, lpCC, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetComputerNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$381.GetComputerNameA$MH,"GetComputerNameA");
    }
    public static int GetComputerNameA ( Addressable lpBuffer,  Addressable nSize) {
        var mh$ = GetComputerNameA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetComputerNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$382.GetComputerNameW$MH,"GetComputerNameW");
    }
    public static int GetComputerNameW ( Addressable lpBuffer,  Addressable nSize) {
        var mh$ = GetComputerNameW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DnsHostnameToComputerNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$382.DnsHostnameToComputerNameA$MH,"DnsHostnameToComputerNameA");
    }
    public static int DnsHostnameToComputerNameA ( Addressable Hostname,  Addressable ComputerName,  Addressable nSize) {
        var mh$ = DnsHostnameToComputerNameA$MH();
        try {
            return (int)mh$.invokeExact(Hostname, ComputerName, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DnsHostnameToComputerNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$382.DnsHostnameToComputerNameW$MH,"DnsHostnameToComputerNameW");
    }
    public static int DnsHostnameToComputerNameW ( Addressable Hostname,  Addressable ComputerName,  Addressable nSize) {
        var mh$ = DnsHostnameToComputerNameW$MH();
        try {
            return (int)mh$.invokeExact(Hostname, ComputerName, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$382.GetUserNameA$MH,"GetUserNameA");
    }
    public static int GetUserNameA ( Addressable lpBuffer,  Addressable pcbBuffer) {
        var mh$ = GetUserNameA$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, pcbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$382.GetUserNameW$MH,"GetUserNameW");
    }
    public static int GetUserNameW ( Addressable lpBuffer,  Addressable pcbBuffer) {
        var mh$ = GetUserNameW$MH();
        try {
            return (int)mh$.invokeExact(lpBuffer, pcbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogonUserA$MH() {
        return RuntimeHelper.requireNonNull(constants$382.LogonUserA$MH,"LogonUserA");
    }
    public static int LogonUserA ( Addressable lpszUsername,  Addressable lpszDomain,  Addressable lpszPassword,  int dwLogonType,  int dwLogonProvider,  Addressable phToken) {
        var mh$ = LogonUserA$MH();
        try {
            return (int)mh$.invokeExact(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogonUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$383.LogonUserW$MH,"LogonUserW");
    }
    public static int LogonUserW ( Addressable lpszUsername,  Addressable lpszDomain,  Addressable lpszPassword,  int dwLogonType,  int dwLogonProvider,  Addressable phToken) {
        var mh$ = LogonUserW$MH();
        try {
            return (int)mh$.invokeExact(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogonUserExA$MH() {
        return RuntimeHelper.requireNonNull(constants$383.LogonUserExA$MH,"LogonUserExA");
    }
    public static int LogonUserExA ( Addressable lpszUsername,  Addressable lpszDomain,  Addressable lpszPassword,  int dwLogonType,  int dwLogonProvider,  Addressable phToken,  Addressable ppLogonSid,  Addressable ppProfileBuffer,  Addressable pdwProfileLength,  Addressable pQuotaLimits) {
        var mh$ = LogonUserExA$MH();
        try {
            return (int)mh$.invokeExact(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, pQuotaLimits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LogonUserExW$MH() {
        return RuntimeHelper.requireNonNull(constants$383.LogonUserExW$MH,"LogonUserExW");
    }
    public static int LogonUserExW ( Addressable lpszUsername,  Addressable lpszDomain,  Addressable lpszPassword,  int dwLogonType,  int dwLogonProvider,  Addressable phToken,  Addressable ppLogonSid,  Addressable ppProfileBuffer,  Addressable pdwProfileLength,  Addressable pQuotaLimits) {
        var mh$ = LogonUserExW$MH();
        try {
            return (int)mh$.invokeExact(lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, pQuotaLimits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessWithLogonW$MH() {
        return RuntimeHelper.requireNonNull(constants$383.CreateProcessWithLogonW$MH,"CreateProcessWithLogonW");
    }
    public static int CreateProcessWithLogonW ( Addressable lpUsername,  Addressable lpDomain,  Addressable lpPassword,  int dwLogonFlags,  Addressable lpApplicationName,  Addressable lpCommandLine,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = CreateProcessWithLogonW$MH();
        try {
            return (int)mh$.invokeExact(lpUsername, lpDomain, lpPassword, dwLogonFlags, lpApplicationName, lpCommandLine, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateProcessWithTokenW$MH() {
        return RuntimeHelper.requireNonNull(constants$383.CreateProcessWithTokenW$MH,"CreateProcessWithTokenW");
    }
    public static int CreateProcessWithTokenW ( Addressable hToken,  int dwLogonFlags,  Addressable lpApplicationName,  Addressable lpCommandLine,  int dwCreationFlags,  Addressable lpEnvironment,  Addressable lpCurrentDirectory,  Addressable lpStartupInfo,  Addressable lpProcessInformation) {
        var mh$ = CreateProcessWithTokenW$MH();
        try {
            return (int)mh$.invokeExact(hToken, dwLogonFlags, lpApplicationName, lpCommandLine, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsTokenUntrusted$MH() {
        return RuntimeHelper.requireNonNull(constants$383.IsTokenUntrusted$MH,"IsTokenUntrusted");
    }
    public static int IsTokenUntrusted ( Addressable TokenHandle) {
        var mh$ = IsTokenUntrusted$MH();
        try {
            return (int)mh$.invokeExact(TokenHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterWaitForSingleObject$MH() {
        return RuntimeHelper.requireNonNull(constants$384.RegisterWaitForSingleObject$MH,"RegisterWaitForSingleObject");
    }
    public static int RegisterWaitForSingleObject ( Addressable phNewWaitObject,  Addressable hObject,  Addressable Callback,  Addressable Context,  int dwMilliseconds,  int dwFlags) {
        var mh$ = RegisterWaitForSingleObject$MH();
        try {
            return (int)mh$.invokeExact(phNewWaitObject, hObject, Callback, Context, dwMilliseconds, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterWait$MH() {
        return RuntimeHelper.requireNonNull(constants$384.UnregisterWait$MH,"UnregisterWait");
    }
    public static int UnregisterWait ( Addressable WaitHandle) {
        var mh$ = UnregisterWait$MH();
        try {
            return (int)mh$.invokeExact(WaitHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BindIoCompletionCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$384.BindIoCompletionCallback$MH,"BindIoCompletionCallback");
    }
    public static int BindIoCompletionCallback ( Addressable FileHandle,  Addressable Function,  int Flags) {
        var mh$ = BindIoCompletionCallback$MH();
        try {
            return (int)mh$.invokeExact(FileHandle, Function, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTimerQueueTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$384.SetTimerQueueTimer$MH,"SetTimerQueueTimer");
    }
    public static MemoryAddress SetTimerQueueTimer ( Addressable TimerQueue,  Addressable Callback,  Addressable Parameter,  int DueTime,  int Period,  int PreferIo) {
        var mh$ = SetTimerQueueTimer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(TimerQueue, Callback, Parameter, DueTime, Period, PreferIo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelTimerQueueTimer$MH() {
        return RuntimeHelper.requireNonNull(constants$384.CancelTimerQueueTimer$MH,"CancelTimerQueueTimer");
    }
    public static int CancelTimerQueueTimer ( Addressable TimerQueue,  Addressable Timer) {
        var mh$ = CancelTimerQueueTimer$MH();
        try {
            return (int)mh$.invokeExact(TimerQueue, Timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteTimerQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$384.DeleteTimerQueue$MH,"DeleteTimerQueue");
    }
    public static int DeleteTimerQueue ( Addressable TimerQueue) {
        var mh$ = DeleteTimerQueue$MH();
        try {
            return (int)mh$.invokeExact(TimerQueue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeThreadpoolEnvironment$MH() {
        return RuntimeHelper.requireNonNull(constants$385.InitializeThreadpoolEnvironment$MH,"InitializeThreadpoolEnvironment");
    }
    public static void InitializeThreadpoolEnvironment ( Addressable pcbe) {
        var mh$ = InitializeThreadpoolEnvironment$MH();
        try {
            mh$.invokeExact(pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolCallbackPool$MH() {
        return RuntimeHelper.requireNonNull(constants$385.SetThreadpoolCallbackPool$MH,"SetThreadpoolCallbackPool");
    }
    public static void SetThreadpoolCallbackPool ( Addressable pcbe,  Addressable ptpp) {
        var mh$ = SetThreadpoolCallbackPool$MH();
        try {
            mh$.invokeExact(pcbe, ptpp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolCallbackCleanupGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$385.SetThreadpoolCallbackCleanupGroup$MH,"SetThreadpoolCallbackCleanupGroup");
    }
    public static void SetThreadpoolCallbackCleanupGroup ( Addressable pcbe,  Addressable ptpcg,  Addressable pfng) {
        var mh$ = SetThreadpoolCallbackCleanupGroup$MH();
        try {
            mh$.invokeExact(pcbe, ptpcg, pfng);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolCallbackRunsLong$MH() {
        return RuntimeHelper.requireNonNull(constants$385.SetThreadpoolCallbackRunsLong$MH,"SetThreadpoolCallbackRunsLong");
    }
    public static void SetThreadpoolCallbackRunsLong ( Addressable pcbe) {
        var mh$ = SetThreadpoolCallbackRunsLong$MH();
        try {
            mh$.invokeExact(pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolCallbackLibrary$MH() {
        return RuntimeHelper.requireNonNull(constants$385.SetThreadpoolCallbackLibrary$MH,"SetThreadpoolCallbackLibrary");
    }
    public static void SetThreadpoolCallbackLibrary ( Addressable pcbe,  Addressable mod) {
        var mh$ = SetThreadpoolCallbackLibrary$MH();
        try {
            mh$.invokeExact(pcbe, mod);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolCallbackPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$385.SetThreadpoolCallbackPriority$MH,"SetThreadpoolCallbackPriority");
    }
    public static void SetThreadpoolCallbackPriority ( Addressable pcbe,  int Priority) {
        var mh$ = SetThreadpoolCallbackPriority$MH();
        try {
            mh$.invokeExact(pcbe, Priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DestroyThreadpoolEnvironment$MH() {
        return RuntimeHelper.requireNonNull(constants$386.DestroyThreadpoolEnvironment$MH,"DestroyThreadpoolEnvironment");
    }
    public static void DestroyThreadpoolEnvironment ( Addressable pcbe) {
        var mh$ = DestroyThreadpoolEnvironment$MH();
        try {
            mh$.invokeExact(pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadpoolCallbackPersistent$MH() {
        return RuntimeHelper.requireNonNull(constants$386.SetThreadpoolCallbackPersistent$MH,"SetThreadpoolCallbackPersistent");
    }
    public static void SetThreadpoolCallbackPersistent ( Addressable pcbe) {
        var mh$ = SetThreadpoolCallbackPersistent$MH();
        try {
            mh$.invokeExact(pcbe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePrivateNamespaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$386.CreatePrivateNamespaceA$MH,"CreatePrivateNamespaceA");
    }
    public static MemoryAddress CreatePrivateNamespaceA ( Addressable lpPrivateNamespaceAttributes,  Addressable lpBoundaryDescriptor,  Addressable lpAliasPrefix) {
        var mh$ = CreatePrivateNamespaceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpPrivateNamespaceAttributes, lpBoundaryDescriptor, lpAliasPrefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenPrivateNamespaceA$MH() {
        return RuntimeHelper.requireNonNull(constants$386.OpenPrivateNamespaceA$MH,"OpenPrivateNamespaceA");
    }
    public static MemoryAddress OpenPrivateNamespaceA ( Addressable lpBoundaryDescriptor,  Addressable lpAliasPrefix) {
        var mh$ = OpenPrivateNamespaceA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpBoundaryDescriptor, lpAliasPrefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBoundaryDescriptorA$MH() {
        return RuntimeHelper.requireNonNull(constants$386.CreateBoundaryDescriptorA$MH,"CreateBoundaryDescriptorA");
    }
    public static MemoryAddress CreateBoundaryDescriptorA ( Addressable Name,  int Flags) {
        var mh$ = CreateBoundaryDescriptorA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Name, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddIntegrityLabelToBoundaryDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$386.AddIntegrityLabelToBoundaryDescriptor$MH,"AddIntegrityLabelToBoundaryDescriptor");
    }
    public static int AddIntegrityLabelToBoundaryDescriptor ( Addressable BoundaryDescriptor,  Addressable IntegrityLabel) {
        var mh$ = AddIntegrityLabelToBoundaryDescriptor$MH();
        try {
            return (int)mh$.invokeExact(BoundaryDescriptor, IntegrityLabel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPHW_PROFILE_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHW_PROFILE_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHW_PROFILE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetCurrentHwProfileA$MH() {
        return RuntimeHelper.requireNonNull(constants$387.GetCurrentHwProfileA$MH,"GetCurrentHwProfileA");
    }
    public static int GetCurrentHwProfileA ( Addressable lpHwProfileInfo) {
        var mh$ = GetCurrentHwProfileA$MH();
        try {
            return (int)mh$.invokeExact(lpHwProfileInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentHwProfileW$MH() {
        return RuntimeHelper.requireNonNull(constants$387.GetCurrentHwProfileW$MH,"GetCurrentHwProfileW");
    }
    public static int GetCurrentHwProfileW ( Addressable lpHwProfileInfo) {
        var mh$ = GetCurrentHwProfileW$MH();
        try {
            return (int)mh$.invokeExact(lpHwProfileInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerifyVersionInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$387.VerifyVersionInfoA$MH,"VerifyVersionInfoA");
    }
    public static int VerifyVersionInfoA ( Addressable lpVersionInformation,  int dwTypeMask,  long dwlConditionMask) {
        var mh$ = VerifyVersionInfoA$MH();
        try {
            return (int)mh$.invokeExact(lpVersionInformation, dwTypeMask, dwlConditionMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerifyVersionInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$387.VerifyVersionInfoW$MH,"VerifyVersionInfoW");
    }
    public static int VerifyVersionInfoW ( Addressable lpVersionInformation,  int dwTypeMask,  long dwlConditionMask) {
        var mh$ = VerifyVersionInfoW$MH();
        try {
            return (int)mh$.invokeExact(lpVersionInformation, dwTypeMask, dwlConditionMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HRESULT_FROM_WIN32$MH() {
        return RuntimeHelper.requireNonNull(constants$387.HRESULT_FROM_WIN32$MH,"HRESULT_FROM_WIN32");
    }
    public static int HRESULT_FROM_WIN32 ( int x) {
        var mh$ = HRESULT_FROM_WIN32$MH();
        try {
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTIME_ZONE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTIME_ZONE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDYNAMIC_TIME_ZONE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SystemTimeToTzSpecificLocalTime$MH() {
        return RuntimeHelper.requireNonNull(constants$387.SystemTimeToTzSpecificLocalTime$MH,"SystemTimeToTzSpecificLocalTime");
    }
    public static int SystemTimeToTzSpecificLocalTime ( Addressable lpTimeZoneInformation,  Addressable lpUniversalTime,  Addressable lpLocalTime) {
        var mh$ = SystemTimeToTzSpecificLocalTime$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation, lpUniversalTime, lpLocalTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TzSpecificLocalTimeToSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$388.TzSpecificLocalTimeToSystemTime$MH,"TzSpecificLocalTimeToSystemTime");
    }
    public static int TzSpecificLocalTimeToSystemTime ( Addressable lpTimeZoneInformation,  Addressable lpLocalTime,  Addressable lpUniversalTime) {
        var mh$ = TzSpecificLocalTimeToSystemTime$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation, lpLocalTime, lpUniversalTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FileTimeToSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$388.FileTimeToSystemTime$MH,"FileTimeToSystemTime");
    }
    public static int FileTimeToSystemTime ( Addressable lpFileTime,  Addressable lpSystemTime) {
        var mh$ = FileTimeToSystemTime$MH();
        try {
            return (int)mh$.invokeExact(lpFileTime, lpSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemTimeToFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$388.SystemTimeToFileTime$MH,"SystemTimeToFileTime");
    }
    public static int SystemTimeToFileTime ( Addressable lpSystemTime,  Addressable lpFileTime) {
        var mh$ = SystemTimeToFileTime$MH();
        try {
            return (int)mh$.invokeExact(lpSystemTime, lpFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeZoneInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$388.GetTimeZoneInformation$MH,"GetTimeZoneInformation");
    }
    public static int GetTimeZoneInformation ( Addressable lpTimeZoneInformation) {
        var mh$ = GetTimeZoneInformation$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTimeZoneInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$388.SetTimeZoneInformation$MH,"SetTimeZoneInformation");
    }
    public static int SetTimeZoneInformation ( Addressable lpTimeZoneInformation) {
        var mh$ = SetTimeZoneInformation$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDynamicTimeZoneInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$388.SetDynamicTimeZoneInformation$MH,"SetDynamicTimeZoneInformation");
    }
    public static int SetDynamicTimeZoneInformation ( Addressable lpTimeZoneInformation) {
        var mh$ = SetDynamicTimeZoneInformation$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDynamicTimeZoneInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$389.GetDynamicTimeZoneInformation$MH,"GetDynamicTimeZoneInformation");
    }
    public static int GetDynamicTimeZoneInformation ( Addressable pTimeZoneInformation) {
        var mh$ = GetDynamicTimeZoneInformation$MH();
        try {
            return (int)mh$.invokeExact(pTimeZoneInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeZoneInformationForYear$MH() {
        return RuntimeHelper.requireNonNull(constants$389.GetTimeZoneInformationForYear$MH,"GetTimeZoneInformationForYear");
    }
    public static int GetTimeZoneInformationForYear ( short wYear,  Addressable pdtzi,  Addressable ptzi) {
        var mh$ = GetTimeZoneInformationForYear$MH();
        try {
            return (int)mh$.invokeExact(wYear, pdtzi, ptzi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDynamicTimeZoneInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$389.EnumDynamicTimeZoneInformation$MH,"EnumDynamicTimeZoneInformation");
    }
    public static int EnumDynamicTimeZoneInformation ( int dwIndex,  Addressable lpTimeZoneInformation) {
        var mh$ = EnumDynamicTimeZoneInformation$MH();
        try {
            return (int)mh$.invokeExact(dwIndex, lpTimeZoneInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDynamicTimeZoneInformationEffectiveYears$MH() {
        return RuntimeHelper.requireNonNull(constants$389.GetDynamicTimeZoneInformationEffectiveYears$MH,"GetDynamicTimeZoneInformationEffectiveYears");
    }
    public static int GetDynamicTimeZoneInformationEffectiveYears ( Addressable lpTimeZoneInformation,  Addressable FirstYear,  Addressable LastYear) {
        var mh$ = GetDynamicTimeZoneInformationEffectiveYears$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation, FirstYear, LastYear);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemTimeToTzSpecificLocalTimeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$389.SystemTimeToTzSpecificLocalTimeEx$MH,"SystemTimeToTzSpecificLocalTimeEx");
    }
    public static int SystemTimeToTzSpecificLocalTimeEx ( Addressable lpTimeZoneInformation,  Addressable lpUniversalTime,  Addressable lpLocalTime) {
        var mh$ = SystemTimeToTzSpecificLocalTimeEx$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation, lpUniversalTime, lpLocalTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TzSpecificLocalTimeToSystemTimeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$389.TzSpecificLocalTimeToSystemTimeEx$MH,"TzSpecificLocalTimeToSystemTimeEx");
    }
    public static int TzSpecificLocalTimeToSystemTimeEx ( Addressable lpTimeZoneInformation,  Addressable lpLocalTime,  Addressable lpUniversalTime) {
        var mh$ = TzSpecificLocalTimeToSystemTimeEx$MH();
        try {
            return (int)mh$.invokeExact(lpTimeZoneInformation, lpLocalTime, lpUniversalTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalFileTimeToLocalSystemTime$MH() {
        return RuntimeHelper.requireNonNull(constants$390.LocalFileTimeToLocalSystemTime$MH,"LocalFileTimeToLocalSystemTime");
    }
    public static int LocalFileTimeToLocalSystemTime ( Addressable timeZoneInformation,  Addressable localFileTime,  Addressable localSystemTime) {
        var mh$ = LocalFileTimeToLocalSystemTime$MH();
        try {
            return (int)mh$.invokeExact(timeZoneInformation, localFileTime, localSystemTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocalSystemTimeToLocalFileTime$MH() {
        return RuntimeHelper.requireNonNull(constants$390.LocalSystemTimeToLocalFileTime$MH,"LocalSystemTimeToLocalFileTime");
    }
    public static int LocalSystemTimeToLocalFileTime ( Addressable timeZoneInformation,  Addressable localSystemTime,  Addressable localFileTime) {
        var mh$ = LocalSystemTimeToLocalFileTime$MH();
        try {
            return (int)mh$.invokeExact(timeZoneInformation, localSystemTime, localFileTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemPowerState$MH() {
        return RuntimeHelper.requireNonNull(constants$390.SetSystemPowerState$MH,"SetSystemPowerState");
    }
    public static int SetSystemPowerState ( int fSuspend,  int fForce) {
        var mh$ = SetSystemPowerState$MH();
        try {
            return (int)mh$.invokeExact(fSuspend, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPSYSTEM_POWER_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetSystemPowerStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$390.GetSystemPowerStatus$MH,"GetSystemPowerStatus");
    }
    public static int GetSystemPowerStatus ( Addressable lpSystemPowerStatus) {
        var mh$ = GetSystemPowerStatus$MH();
        try {
            return (int)mh$.invokeExact(lpSystemPowerStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MapUserPhysicalPagesScatter$MH() {
        return RuntimeHelper.requireNonNull(constants$390.MapUserPhysicalPagesScatter$MH,"MapUserPhysicalPagesScatter");
    }
    public static int MapUserPhysicalPagesScatter ( Addressable VirtualAddresses,  long NumberOfPages,  Addressable PageArray) {
        var mh$ = MapUserPhysicalPagesScatter$MH();
        try {
            return (int)mh$.invokeExact(VirtualAddresses, NumberOfPages, PageArray);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateJobObjectA$MH() {
        return RuntimeHelper.requireNonNull(constants$390.CreateJobObjectA$MH,"CreateJobObjectA");
    }
    public static MemoryAddress CreateJobObjectA ( Addressable lpJobAttributes,  Addressable lpName) {
        var mh$ = CreateJobObjectA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpJobAttributes, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenJobObjectA$MH() {
        return RuntimeHelper.requireNonNull(constants$391.OpenJobObjectA$MH,"OpenJobObjectA");
    }
    public static MemoryAddress OpenJobObjectA ( int dwDesiredAccess,  int bInheritHandle,  Addressable lpName) {
        var mh$ = OpenJobObjectA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, bInheritHandle, lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateJobSet$MH() {
        return RuntimeHelper.requireNonNull(constants$391.CreateJobSet$MH,"CreateJobSet");
    }
    public static int CreateJobSet ( int NumJob,  Addressable UserJobSet,  int Flags) {
        var mh$ = CreateJobSet$MH();
        try {
            return (int)mh$.invokeExact(NumJob, UserJobSet, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstVolumeA$MH() {
        return RuntimeHelper.requireNonNull(constants$391.FindFirstVolumeA$MH,"FindFirstVolumeA");
    }
    public static MemoryAddress FindFirstVolumeA ( Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = FindFirstVolumeA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextVolumeA$MH() {
        return RuntimeHelper.requireNonNull(constants$391.FindNextVolumeA$MH,"FindNextVolumeA");
    }
    public static int FindNextVolumeA ( Addressable hFindVolume,  Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = FindNextVolumeA$MH();
        try {
            return (int)mh$.invokeExact(hFindVolume, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstVolumeMountPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$391.FindFirstVolumeMountPointA$MH,"FindFirstVolumeMountPointA");
    }
    public static MemoryAddress FindFirstVolumeMountPointA ( Addressable lpszRootPathName,  Addressable lpszVolumeMountPoint,  int cchBufferLength) {
        var mh$ = FindFirstVolumeMountPointA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszRootPathName, lpszVolumeMountPoint, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindFirstVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$391.FindFirstVolumeMountPointW$MH,"FindFirstVolumeMountPointW");
    }
    public static MemoryAddress FindFirstVolumeMountPointW ( Addressable lpszRootPathName,  Addressable lpszVolumeMountPoint,  int cchBufferLength) {
        var mh$ = FindFirstVolumeMountPointW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszRootPathName, lpszVolumeMountPoint, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextVolumeMountPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$392.FindNextVolumeMountPointA$MH,"FindNextVolumeMountPointA");
    }
    public static int FindNextVolumeMountPointA ( Addressable hFindVolumeMountPoint,  Addressable lpszVolumeMountPoint,  int cchBufferLength) {
        var mh$ = FindNextVolumeMountPointA$MH();
        try {
            return (int)mh$.invokeExact(hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNextVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$392.FindNextVolumeMountPointW$MH,"FindNextVolumeMountPointW");
    }
    public static int FindNextVolumeMountPointW ( Addressable hFindVolumeMountPoint,  Addressable lpszVolumeMountPoint,  int cchBufferLength) {
        var mh$ = FindNextVolumeMountPointW$MH();
        try {
            return (int)mh$.invokeExact(hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindVolumeMountPointClose$MH() {
        return RuntimeHelper.requireNonNull(constants$392.FindVolumeMountPointClose$MH,"FindVolumeMountPointClose");
    }
    public static int FindVolumeMountPointClose ( Addressable hFindVolumeMountPoint) {
        var mh$ = FindVolumeMountPointClose$MH();
        try {
            return (int)mh$.invokeExact(hFindVolumeMountPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetVolumeMountPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$392.SetVolumeMountPointA$MH,"SetVolumeMountPointA");
    }
    public static int SetVolumeMountPointA ( Addressable lpszVolumeMountPoint,  Addressable lpszVolumeName) {
        var mh$ = SetVolumeMountPointA$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint, lpszVolumeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetVolumeMountPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$392.SetVolumeMountPointW$MH,"SetVolumeMountPointW");
    }
    public static int SetVolumeMountPointW ( Addressable lpszVolumeMountPoint,  Addressable lpszVolumeName) {
        var mh$ = SetVolumeMountPointW$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint, lpszVolumeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteVolumeMountPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$392.DeleteVolumeMountPointA$MH,"DeleteVolumeMountPointA");
    }
    public static int DeleteVolumeMountPointA ( Addressable lpszVolumeMountPoint) {
        var mh$ = DeleteVolumeMountPointA$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumeNameForVolumeMountPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$393.GetVolumeNameForVolumeMountPointA$MH,"GetVolumeNameForVolumeMountPointA");
    }
    public static int GetVolumeNameForVolumeMountPointA ( Addressable lpszVolumeMountPoint,  Addressable lpszVolumeName,  int cchBufferLength) {
        var mh$ = GetVolumeNameForVolumeMountPointA$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeMountPoint, lpszVolumeName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$393.GetVolumePathNameA$MH,"GetVolumePathNameA");
    }
    public static int GetVolumePathNameA ( Addressable lpszFileName,  Addressable lpszVolumePathName,  int cchBufferLength) {
        var mh$ = GetVolumePathNameA$MH();
        try {
            return (int)mh$.invokeExact(lpszFileName, lpszVolumePathName, cchBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetVolumePathNamesForVolumeNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$393.GetVolumePathNamesForVolumeNameA$MH,"GetVolumePathNamesForVolumeNameA");
    }
    public static int GetVolumePathNamesForVolumeNameA ( Addressable lpszVolumeName,  Addressable lpszVolumePathNames,  int cchBufferLength,  Addressable lpcchReturnLength) {
        var mh$ = GetVolumePathNamesForVolumeNameA$MH();
        try {
            return (int)mh$.invokeExact(lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PACTCTXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTCTXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTCTX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTCTXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTCTXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTCTX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateActCtxA$MH() {
        return RuntimeHelper.requireNonNull(constants$393.CreateActCtxA$MH,"CreateActCtxA");
    }
    public static MemoryAddress CreateActCtxA ( Addressable pActCtx) {
        var mh$ = CreateActCtxA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateActCtxW$MH() {
        return RuntimeHelper.requireNonNull(constants$393.CreateActCtxW$MH,"CreateActCtxW");
    }
    public static MemoryAddress CreateActCtxW ( Addressable pActCtx) {
        var mh$ = CreateActCtxW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddRefActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$393.AddRefActCtx$MH,"AddRefActCtx");
    }
    public static void AddRefActCtx ( Addressable hActCtx) {
        var mh$ = AddRefActCtx$MH();
        try {
            mh$.invokeExact(hActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReleaseActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$394.ReleaseActCtx$MH,"ReleaseActCtx");
    }
    public static void ReleaseActCtx ( Addressable hActCtx) {
        var mh$ = ReleaseActCtx$MH();
        try {
            mh$.invokeExact(hActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ZombifyActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$394.ZombifyActCtx$MH,"ZombifyActCtx");
    }
    public static int ZombifyActCtx ( Addressable hActCtx) {
        var mh$ = ZombifyActCtx$MH();
        try {
            return (int)mh$.invokeExact(hActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ActivateActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$394.ActivateActCtx$MH,"ActivateActCtx");
    }
    public static int ActivateActCtx ( Addressable hActCtx,  Addressable lpCookie) {
        var mh$ = ActivateActCtx$MH();
        try {
            return (int)mh$.invokeExact(hActCtx, lpCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeactivateActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$394.DeactivateActCtx$MH,"DeactivateActCtx");
    }
    public static int DeactivateActCtx ( int dwFlags,  long ulCookie) {
        var mh$ = DeactivateActCtx$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, ulCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentActCtx$MH() {
        return RuntimeHelper.requireNonNull(constants$394.GetCurrentActCtx$MH,"GetCurrentActCtx");
    }
    public static int GetCurrentActCtx ( Addressable lphActCtx) {
        var mh$ = GetCurrentActCtx$MH();
        try {
            return (int)mh$.invokeExact(lphActCtx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PACTCTX_SECTION_KEYED_DATA_2600 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTCTX_SECTION_KEYED_DATA_2600 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTCTX_SECTION_KEYED_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTCTX_SECTION_KEYED_DATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FindActCtxSectionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$394.FindActCtxSectionStringA$MH,"FindActCtxSectionStringA");
    }
    public static int FindActCtxSectionStringA ( int dwFlags,  Addressable lpExtensionGuid,  int ulSectionId,  Addressable lpStringToFind,  Addressable ReturnedData) {
        var mh$ = FindActCtxSectionStringA$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpExtensionGuid, ulSectionId, lpStringToFind, ReturnedData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindActCtxSectionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$395.FindActCtxSectionStringW$MH,"FindActCtxSectionStringW");
    }
    public static int FindActCtxSectionStringW ( int dwFlags,  Addressable lpExtensionGuid,  int ulSectionId,  Addressable lpStringToFind,  Addressable ReturnedData) {
        var mh$ = FindActCtxSectionStringW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpExtensionGuid, ulSectionId, lpStringToFind, ReturnedData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindActCtxSectionGuid$MH() {
        return RuntimeHelper.requireNonNull(constants$395.FindActCtxSectionGuid$MH,"FindActCtxSectionGuid");
    }
    public static int FindActCtxSectionGuid ( int dwFlags,  Addressable lpExtensionGuid,  int ulSectionId,  Addressable lpGuidToFind,  Addressable ReturnedData) {
        var mh$ = FindActCtxSectionGuid$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, lpExtensionGuid, ulSectionId, lpGuidToFind, ReturnedData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PACTIVATION_CONTEXT_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle QueryActCtxW$MH() {
        return RuntimeHelper.requireNonNull(constants$395.QueryActCtxW$MH,"QueryActCtxW");
    }
    public static int QueryActCtxW ( int dwFlags,  Addressable hActCtx,  Addressable pvSubInstance,  int ulInfoClass,  Addressable pvBuffer,  long cbBuffer,  Addressable pcbWrittenOrRequired) {
        var mh$ = QueryActCtxW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, hActCtx, pvSubInstance, ulInfoClass, pvBuffer, cbBuffer, pcbWrittenOrRequired);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WTSGetActiveConsoleSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$395.WTSGetActiveConsoleSessionId$MH,"WTSGetActiveConsoleSessionId");
    }
    public static int WTSGetActiveConsoleSessionId () {
        var mh$ = WTSGetActiveConsoleSessionId$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WTSGetServiceSessionId$MH() {
        return RuntimeHelper.requireNonNull(constants$396.WTSGetServiceSessionId$MH,"WTSGetServiceSessionId");
    }
    public static int WTSGetServiceSessionId () {
        var mh$ = WTSGetServiceSessionId$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WTSIsServerContainer$MH() {
        return RuntimeHelper.requireNonNull(constants$396.WTSIsServerContainer$MH,"WTSIsServerContainer");
    }
    public static byte WTSIsServerContainer () {
        var mh$ = WTSIsServerContainer$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveProcessorGroupCount$MH() {
        return RuntimeHelper.requireNonNull(constants$396.GetActiveProcessorGroupCount$MH,"GetActiveProcessorGroupCount");
    }
    public static short GetActiveProcessorGroupCount () {
        var mh$ = GetActiveProcessorGroupCount$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMaximumProcessorGroupCount$MH() {
        return RuntimeHelper.requireNonNull(constants$396.GetMaximumProcessorGroupCount$MH,"GetMaximumProcessorGroupCount");
    }
    public static short GetMaximumProcessorGroupCount () {
        var mh$ = GetMaximumProcessorGroupCount$MH();
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetActiveProcessorCount$MH() {
        return RuntimeHelper.requireNonNull(constants$396.GetActiveProcessorCount$MH,"GetActiveProcessorCount");
    }
    public static int GetActiveProcessorCount ( short GroupNumber) {
        var mh$ = GetActiveProcessorCount$MH();
        try {
            return (int)mh$.invokeExact(GroupNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMaximumProcessorCount$MH() {
        return RuntimeHelper.requireNonNull(constants$396.GetMaximumProcessorCount$MH,"GetMaximumProcessorCount");
    }
    public static int GetMaximumProcessorCount ( short GroupNumber) {
        var mh$ = GetMaximumProcessorCount$MH();
        try {
            return (int)mh$.invokeExact(GroupNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaProcessorNode$MH() {
        return RuntimeHelper.requireNonNull(constants$397.GetNumaProcessorNode$MH,"GetNumaProcessorNode");
    }
    public static int GetNumaProcessorNode ( byte Processor,  Addressable NodeNumber) {
        var mh$ = GetNumaProcessorNode$MH();
        try {
            return (int)mh$.invokeExact(Processor, NodeNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaNodeNumberFromHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$397.GetNumaNodeNumberFromHandle$MH,"GetNumaNodeNumberFromHandle");
    }
    public static int GetNumaNodeNumberFromHandle ( Addressable hFile,  Addressable NodeNumber) {
        var mh$ = GetNumaNodeNumberFromHandle$MH();
        try {
            return (int)mh$.invokeExact(hFile, NodeNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaProcessorNodeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$397.GetNumaProcessorNodeEx$MH,"GetNumaProcessorNodeEx");
    }
    public static int GetNumaProcessorNodeEx ( Addressable Processor,  Addressable NodeNumber) {
        var mh$ = GetNumaProcessorNodeEx$MH();
        try {
            return (int)mh$.invokeExact(Processor, NodeNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaNodeProcessorMask$MH() {
        return RuntimeHelper.requireNonNull(constants$397.GetNumaNodeProcessorMask$MH,"GetNumaNodeProcessorMask");
    }
    public static int GetNumaNodeProcessorMask ( byte Node,  Addressable ProcessorMask) {
        var mh$ = GetNumaNodeProcessorMask$MH();
        try {
            return (int)mh$.invokeExact(Node, ProcessorMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaAvailableMemoryNode$MH() {
        return RuntimeHelper.requireNonNull(constants$397.GetNumaAvailableMemoryNode$MH,"GetNumaAvailableMemoryNode");
    }
    public static int GetNumaAvailableMemoryNode ( byte Node,  Addressable AvailableBytes) {
        var mh$ = GetNumaAvailableMemoryNode$MH();
        try {
            return (int)mh$.invokeExact(Node, AvailableBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaAvailableMemoryNodeEx$MH() {
        return RuntimeHelper.requireNonNull(constants$397.GetNumaAvailableMemoryNodeEx$MH,"GetNumaAvailableMemoryNodeEx");
    }
    public static int GetNumaAvailableMemoryNodeEx ( short Node,  Addressable AvailableBytes) {
        var mh$ = GetNumaAvailableMemoryNodeEx$MH();
        try {
            return (int)mh$.invokeExact(Node, AvailableBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumaProximityNode$MH() {
        return RuntimeHelper.requireNonNull(constants$398.GetNumaProximityNode$MH,"GetNumaProximityNode");
    }
    public static int GetNumaProximityNode ( int ProximityId,  Addressable NodeNumber) {
        var mh$ = GetNumaProximityNode$MH();
        try {
            return (int)mh$.invokeExact(ProximityId, NodeNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterApplicationRecoveryCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$398.RegisterApplicationRecoveryCallback$MH,"RegisterApplicationRecoveryCallback");
    }
    public static int RegisterApplicationRecoveryCallback ( Addressable pRecoveyCallback,  Addressable pvParameter,  int dwPingInterval,  int dwFlags) {
        var mh$ = RegisterApplicationRecoveryCallback$MH();
        try {
            return (int)mh$.invokeExact(pRecoveyCallback, pvParameter, dwPingInterval, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterApplicationRecoveryCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$398.UnregisterApplicationRecoveryCallback$MH,"UnregisterApplicationRecoveryCallback");
    }
    public static int UnregisterApplicationRecoveryCallback () {
        var mh$ = UnregisterApplicationRecoveryCallback$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterApplicationRestart$MH() {
        return RuntimeHelper.requireNonNull(constants$398.RegisterApplicationRestart$MH,"RegisterApplicationRestart");
    }
    public static int RegisterApplicationRestart ( Addressable pwzCommandline,  int dwFlags) {
        var mh$ = RegisterApplicationRestart$MH();
        try {
            return (int)mh$.invokeExact(pwzCommandline, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnregisterApplicationRestart$MH() {
        return RuntimeHelper.requireNonNull(constants$399.UnregisterApplicationRestart$MH,"UnregisterApplicationRestart");
    }
    public static int UnregisterApplicationRestart () {
        var mh$ = UnregisterApplicationRestart$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetApplicationRecoveryCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$399.GetApplicationRecoveryCallback$MH,"GetApplicationRecoveryCallback");
    }
    public static int GetApplicationRecoveryCallback ( Addressable hProcess,  Addressable pRecoveryCallback,  Addressable ppvParameter,  Addressable pdwPingInterval,  Addressable pdwFlags) {
        var mh$ = GetApplicationRecoveryCallback$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pRecoveryCallback, ppvParameter, pdwPingInterval, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetApplicationRestartSettings$MH() {
        return RuntimeHelper.requireNonNull(constants$399.GetApplicationRestartSettings$MH,"GetApplicationRestartSettings");
    }
    public static int GetApplicationRestartSettings ( Addressable hProcess,  Addressable pwzCommandline,  Addressable pcchSize,  Addressable pdwFlags) {
        var mh$ = GetApplicationRestartSettings$MH();
        try {
            return (int)mh$.invokeExact(hProcess, pwzCommandline, pcchSize, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ApplicationRecoveryInProgress$MH() {
        return RuntimeHelper.requireNonNull(constants$399.ApplicationRecoveryInProgress$MH,"ApplicationRecoveryInProgress");
    }
    public static int ApplicationRecoveryInProgress ( Addressable pbCancelled) {
        var mh$ = ApplicationRecoveryInProgress$MH();
        try {
            return (int)mh$.invokeExact(pbCancelled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ApplicationRecoveryFinished$MH() {
        return RuntimeHelper.requireNonNull(constants$399.ApplicationRecoveryFinished$MH,"ApplicationRecoveryFinished");
    }
    public static void ApplicationRecoveryFinished ( int bSuccess) {
        var mh$ = ApplicationRecoveryFinished$MH();
        try {
            mh$.invokeExact(bSuccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PFILE_BASIC_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_STANDARD_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_CASE_SENSITIVE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_RENAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ALLOCATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_END_OF_FILE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_STREAM_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_COMPRESSION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ATTRIBUTE_TAG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_DISPOSITION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_DISPOSITION_INFO_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ID_BOTH_DIR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_FULL_DIR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int IoPriorityHintVeryLow() {
        return (int)0L;
    }
    public static int IoPriorityHintLow() {
        return (int)1L;
    }
    public static int IoPriorityHintNormal() {
        return (int)2L;
    }
    public static int MaximumIoPriorityHintType() {
        return (int)3L;
    }
    public static OfAddress PFILE_IO_PRIORITY_HINT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ALIGNMENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_STORAGE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ID_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ID_EXTD_DIR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_REMOTE_PROTOCOL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetFileInformationByHandleEx$MH() {
        return RuntimeHelper.requireNonNull(constants$399.GetFileInformationByHandleEx$MH,"GetFileInformationByHandleEx");
    }
    public static int GetFileInformationByHandleEx ( Addressable hFile,  int FileInformationClass,  Addressable lpFileInformation,  int dwBufferSize) {
        var mh$ = GetFileInformationByHandleEx$MH();
        try {
            return (int)mh$.invokeExact(hFile, FileInformationClass, lpFileInformation, dwBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int FileIdType() {
        return (int)0L;
    }
    public static int ObjectIdType() {
        return (int)1L;
    }
    public static int ExtendedFileIdType() {
        return (int)2L;
    }
    public static int MaximumFileIdType() {
        return (int)3L;
    }
    public static OfAddress PFILE_ID_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFILE_ID_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle OpenFileById$MH() {
        return RuntimeHelper.requireNonNull(constants$400.OpenFileById$MH,"OpenFileById");
    }
    public static MemoryAddress OpenFileById ( Addressable hVolumeHint,  Addressable lpFileId,  int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwFlagsAndAttributes) {
        var mh$ = OpenFileById$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hVolumeHint, lpFileId, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlagsAndAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSymbolicLinkA$MH() {
        return RuntimeHelper.requireNonNull(constants$400.CreateSymbolicLinkA$MH,"CreateSymbolicLinkA");
    }
    public static byte CreateSymbolicLinkA ( Addressable lpSymlinkFileName,  Addressable lpTargetFileName,  int dwFlags) {
        var mh$ = CreateSymbolicLinkA$MH();
        try {
            return (byte)mh$.invokeExact(lpSymlinkFileName, lpTargetFileName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSymbolicLinkW$MH() {
        return RuntimeHelper.requireNonNull(constants$400.CreateSymbolicLinkW$MH,"CreateSymbolicLinkW");
    }
    public static byte CreateSymbolicLinkW ( Addressable lpSymlinkFileName,  Addressable lpTargetFileName,  int dwFlags) {
        var mh$ = CreateSymbolicLinkW$MH();
        try {
            return (byte)mh$.invokeExact(lpSymlinkFileName, lpTargetFileName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryActCtxSettingsW$MH() {
        return RuntimeHelper.requireNonNull(constants$400.QueryActCtxSettingsW$MH,"QueryActCtxSettingsW");
    }
    public static int QueryActCtxSettingsW ( int dwFlags,  Addressable hActCtx,  Addressable settingsNameSpace,  Addressable settingName,  Addressable pvBuffer,  long dwBuffer,  Addressable pdwWrittenOrRequired) {
        var mh$ = QueryActCtxSettingsW$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, hActCtx, settingsNameSpace, settingName, pvBuffer, dwBuffer, pdwWrittenOrRequired);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSymbolicLinkTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$400.CreateSymbolicLinkTransactedA$MH,"CreateSymbolicLinkTransactedA");
    }
    public static byte CreateSymbolicLinkTransactedA ( Addressable lpSymlinkFileName,  Addressable lpTargetFileName,  int dwFlags,  Addressable hTransaction) {
        var mh$ = CreateSymbolicLinkTransactedA$MH();
        try {
            return (byte)mh$.invokeExact(lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSymbolicLinkTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$400.CreateSymbolicLinkTransactedW$MH,"CreateSymbolicLinkTransactedW");
    }
    public static byte CreateSymbolicLinkTransactedW ( Addressable lpSymlinkFileName,  Addressable lpTargetFileName,  int dwFlags,  Addressable hTransaction) {
        var mh$ = CreateSymbolicLinkTransactedW$MH();
        try {
            return (byte)mh$.invokeExact(lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReplacePartitionUnit$MH() {
        return RuntimeHelper.requireNonNull(constants$401.ReplacePartitionUnit$MH,"ReplacePartitionUnit");
    }
    public static int ReplacePartitionUnit ( Addressable TargetPartition,  Addressable SparePartition,  int Flags) {
        var mh$ = ReplacePartitionUnit$MH();
        try {
            return (int)mh$.invokeExact(TargetPartition, SparePartition, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddSecureMemoryCacheCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$401.AddSecureMemoryCacheCallback$MH,"AddSecureMemoryCacheCallback");
    }
    public static int AddSecureMemoryCacheCallback ( Addressable pfnCallBack) {
        var mh$ = AddSecureMemoryCacheCallback$MH();
        try {
            return (int)mh$.invokeExact(pfnCallBack);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveSecureMemoryCacheCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$401.RemoveSecureMemoryCacheCallback$MH,"RemoveSecureMemoryCacheCallback");
    }
    public static int RemoveSecureMemoryCacheCallback ( Addressable pfnCallBack) {
        var mh$ = RemoveSecureMemoryCacheCallback$MH();
        try {
            return (int)mh$.invokeExact(pfnCallBack);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$401.CopyContext$MH,"CopyContext");
    }
    public static int CopyContext ( Addressable Destination,  int ContextFlags,  Addressable Source) {
        var mh$ = CopyContext$MH();
        try {
            return (int)mh$.invokeExact(Destination, ContextFlags, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeContext$MH() {
        return RuntimeHelper.requireNonNull(constants$401.InitializeContext$MH,"InitializeContext");
    }
    public static int InitializeContext ( Addressable Buffer,  int ContextFlags,  Addressable Context,  Addressable ContextLength) {
        var mh$ = InitializeContext$MH();
        try {
            return (int)mh$.invokeExact(Buffer, ContextFlags, Context, ContextLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitializeContext2$MH() {
        return RuntimeHelper.requireNonNull(constants$401.InitializeContext2$MH,"InitializeContext2");
    }
    public static int InitializeContext2 ( Addressable Buffer,  int ContextFlags,  Addressable Context,  Addressable ContextLength,  long XStateCompactionMask) {
        var mh$ = InitializeContext2$MH();
        try {
            return (int)mh$.invokeExact(Buffer, ContextFlags, Context, ContextLength, XStateCompactionMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnabledXStateFeatures$MH() {
        return RuntimeHelper.requireNonNull(constants$402.GetEnabledXStateFeatures$MH,"GetEnabledXStateFeatures");
    }
    public static long GetEnabledXStateFeatures () {
        var mh$ = GetEnabledXStateFeatures$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetXStateFeaturesMask$MH() {
        return RuntimeHelper.requireNonNull(constants$402.GetXStateFeaturesMask$MH,"GetXStateFeaturesMask");
    }
    public static int GetXStateFeaturesMask ( Addressable Context,  Addressable FeatureMask) {
        var mh$ = GetXStateFeaturesMask$MH();
        try {
            return (int)mh$.invokeExact(Context, FeatureMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocateXStateFeature$MH() {
        return RuntimeHelper.requireNonNull(constants$402.LocateXStateFeature$MH,"LocateXStateFeature");
    }
    public static MemoryAddress LocateXStateFeature ( Addressable Context,  int FeatureId,  Addressable Length) {
        var mh$ = LocateXStateFeature$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Context, FeatureId, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetXStateFeaturesMask$MH() {
        return RuntimeHelper.requireNonNull(constants$402.SetXStateFeaturesMask$MH,"SetXStateFeaturesMask");
    }
    public static int SetXStateFeaturesMask ( Addressable Context,  long FeatureMask) {
        var mh$ = SetXStateFeaturesMask$MH();
        try {
            return (int)mh$.invokeExact(Context, FeatureMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableThreadProfiling$MH() {
        return RuntimeHelper.requireNonNull(constants$402.EnableThreadProfiling$MH,"EnableThreadProfiling");
    }
    public static int EnableThreadProfiling ( Addressable ThreadHandle,  int Flags,  long HardwareCounters,  Addressable PerformanceDataHandle) {
        var mh$ = EnableThreadProfiling$MH();
        try {
            return (int)mh$.invokeExact(ThreadHandle, Flags, HardwareCounters, PerformanceDataHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisableThreadProfiling$MH() {
        return RuntimeHelper.requireNonNull(constants$402.DisableThreadProfiling$MH,"DisableThreadProfiling");
    }
    public static int DisableThreadProfiling ( Addressable PerformanceDataHandle) {
        var mh$ = DisableThreadProfiling$MH();
        try {
            return (int)mh$.invokeExact(PerformanceDataHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryThreadProfiling$MH() {
        return RuntimeHelper.requireNonNull(constants$403.QueryThreadProfiling$MH,"QueryThreadProfiling");
    }
    public static int QueryThreadProfiling ( Addressable ThreadHandle,  Addressable Enabled) {
        var mh$ = QueryThreadProfiling$MH();
        try {
            return (int)mh$.invokeExact(ThreadHandle, Enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadThreadProfilingData$MH() {
        return RuntimeHelper.requireNonNull(constants$403.ReadThreadProfilingData$MH,"ReadThreadProfilingData");
    }
    public static int ReadThreadProfilingData ( Addressable PerformanceDataHandle,  int Flags,  Addressable PerformanceData) {
        var mh$ = ReadThreadProfilingData$MH();
        try {
            return (int)mh$.invokeExact(PerformanceDataHandle, Flags, PerformanceData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RaiseCustomSystemEventTrigger$MH() {
        return RuntimeHelper.requireNonNull(constants$403.RaiseCustomSystemEventTrigger$MH,"RaiseCustomSystemEventTrigger");
    }
    public static int RaiseCustomSystemEventTrigger ( Addressable CustomSystemEventTriggerConfig) {
        var mh$ = RaiseCustomSystemEventTrigger$MH();
        try {
            return (int)mh$.invokeExact(CustomSystemEventTriggerConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PDRAWPATRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPSINJECTDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPSFEATURE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPSFEATURE_CUSTPAPER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPXFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBITMAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPBITMAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBITMAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRGBTRIPLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPRGBTRIPLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRGBTRIPLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRGBQUAD = Constants$root.C_POINTER$LAYOUT;
    public static OfInt LCSCSTYPE = Constants$root.C_LONG$LAYOUT;
    public static OfInt LCSGAMUTMATCH = Constants$root.C_LONG$LAYOUT;
    public static OfInt FXPT16DOT16 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress LPFXPT16DOT16 = Constants$root.C_POINTER$LAYOUT;
    public static OfInt FXPT2DOT30 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress LPFXPT2DOT30 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCIEXYZ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCIEXYZTRIPLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGCOLORSPACEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGCOLORSPACEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGCOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBITMAPCOREHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBITMAPCOREHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBITMAPINFOHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBITMAPINFOHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBITMAPV4HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBITMAPV4HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBITMAPV5HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBITMAPV5HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBITMAPINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBITMAPINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBITMAPCOREINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBITMAPCOREINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBITMAPFILEHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBITMAPFILEHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFONTSIGNATURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFONTSIGNATURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHARSETINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCHARSETINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCHARSETINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOCALESIGNATURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOCALESIGNATURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHANDLETABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHANDLETABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMETARECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMETARECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMETAFILEPICT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMETAHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMETAHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENHMETARECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENHMETARECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENHMETAHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENHMETAHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNEWTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPNEWTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNEWTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNEWTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPNEWTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNEWTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNEWTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPNEWTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNEWTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPELARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPELARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPELARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGBRUSH32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGBRUSH32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGBRUSH32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPATTERN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPATTERN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPATTERN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEXTLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXTLOGPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTLOGPEN32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEXTLOGPEN32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXTLOGPEN32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPALETTEENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPALETTEENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPANOSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEXTLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXTLOGFONTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEXTLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXTLOGFONTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPEXTLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXTLOGFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVMODEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDEVMODEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEVMODEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVMODEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDEVMODEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEVMODEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPDEVMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEVMODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISPLAY_DEVICEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISPLAY_DEVICEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISPLAY_DEVICEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISPLAY_DEVICEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISPLAY_DEVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISPLAY_DEVICE = Constants$root.C_POINTER$LAYOUT;
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15() {
        return (int)0L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI() {
        return (int)5L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS() {
        return (int)6L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN() {
        return (int)8L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI() {
        return (int)9L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL() {
        return (int)10L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED() {
        return (int)11L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL() {
        return (int)12L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED() {
        return (int)13L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE() {
        return (int)14L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST() {
        return (int)15L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED() {
        return (int)16L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL() {
        return (int)17L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL() {
        return (int)-2147483648L;
    }
    public static int DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED() {
        return (int)0L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_SCALING_IDENTITY() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_SCALING_CENTERED() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_SCALING_STRETCHED() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_SCALING_CUSTOM() {
        return (int)5L;
    }
    public static int DISPLAYCONFIG_SCALING_PREFERRED() {
        return (int)128L;
    }
    public static int DISPLAYCONFIG_SCALING_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_ROTATION_IDENTITY() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_ROTATION_ROTATE90() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_ROTATION_ROTATE180() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_ROTATION_ROTATE270() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_ROTATION_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_TARGET() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_8BPP() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_16BPP() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_24BPP() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_32BPP() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_NONGDI() {
        return (int)5L;
    }
    public static int DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_TOPOLOGY_INTERNAL() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_TOPOLOGY_CLONE() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_TOPOLOGY_EXTEND() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_TOPOLOGY_EXTERNAL() {
        return (int)8L;
    }
    public static int DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE() {
        return (int)5L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE() {
        return (int)6L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION() {
        return (int)7L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION() {
        return (int)8L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO() {
        return (int)9L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE() {
        return (int)10L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL() {
        return (int)11L;
    }
    public static int DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32() {
        return (int)-1L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_RGB() {
        return (int)0L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR444() {
        return (int)1L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR422() {
        return (int)2L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_YCBCR420() {
        return (int)3L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_INTENSITY() {
        return (int)4L;
    }
    public static int DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32() {
        return (int)-1L;
    }
    public static OfAddress PRGNDATAHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRGNDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPRGNDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRGNDATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PABC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPABC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPABC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PABCFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPABCFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPABCFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POUTLINETEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPOUTLINETEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOUTLINETEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POUTLINETEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPOUTLINETEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOUTLINETEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POUTLINETEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPOUTLINETEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOUTLINETEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOLYTEXTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPOLYTEXTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOLYTEXTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOLYTEXTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPOLYTEXTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOLYTEXTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOLYTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPOLYTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOLYTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMAT2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGLYPHMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOINTFX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTTPOLYCURVE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTTPOLYGONHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGCP_RESULTSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGCP_RESULTSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGCP_RESULTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRASTERIZER_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPIXELFORMATDESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPIXELFORMATDESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AddFontResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$405.AddFontResourceA$MH,"AddFontResourceA");
    }
    public static int AddFontResourceA ( Addressable x0) {
        var mh$ = AddFontResourceA$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFontResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$406.AddFontResourceW$MH,"AddFontResourceW");
    }
    public static int AddFontResourceW ( Addressable x0) {
        var mh$ = AddFontResourceW$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AnimatePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$406.AnimatePalette$MH,"AnimatePalette");
    }
    public static int AnimatePalette ( Addressable hPal,  int iStartIndex,  int cEntries,  Addressable ppe) {
        var mh$ = AnimatePalette$MH();
        try {
            return (int)mh$.invokeExact(hPal, iStartIndex, cEntries, ppe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Arc$MH() {
        return RuntimeHelper.requireNonNull(constants$406.Arc$MH,"Arc");
    }
    public static int Arc ( Addressable hdc,  int x1,  int y1,  int x2,  int y2,  int x3,  int y3,  int x4,  int y4) {
        var mh$ = Arc$MH();
        try {
            return (int)mh$.invokeExact(hdc, x1, y1, x2, y2, x3, y3, x4, y4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BitBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$406.BitBlt$MH,"BitBlt");
    }
    public static int BitBlt ( Addressable hdc,  int x,  int y,  int cx,  int cy,  Addressable hdcSrc,  int x1,  int y1,  int rop) {
        var mh$ = BitBlt$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, cx, cy, hdcSrc, x1, y1, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelDC$MH() {
        return RuntimeHelper.requireNonNull(constants$406.CancelDC$MH,"CancelDC");
    }
    public static int CancelDC ( Addressable hdc) {
        var mh$ = CancelDC$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Chord$MH() {
        return RuntimeHelper.requireNonNull(constants$406.Chord$MH,"Chord");
    }
    public static int Chord ( Addressable hdc,  int x1,  int y1,  int x2,  int y2,  int x3,  int y3,  int x4,  int y4) {
        var mh$ = Chord$MH();
        try {
            return (int)mh$.invokeExact(hdc, x1, y1, x2, y2, x3, y3, x4, y4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChoosePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$407.ChoosePixelFormat$MH,"ChoosePixelFormat");
    }
    public static int ChoosePixelFormat ( Addressable hdc,  Addressable ppfd) {
        var mh$ = ChoosePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$407.CloseMetaFile$MH,"CloseMetaFile");
    }
    public static MemoryAddress CloseMetaFile ( Addressable hdc) {
        var mh$ = CloseMetaFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CombineRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$407.CombineRgn$MH,"CombineRgn");
    }
    public static int CombineRgn ( Addressable hrgnDst,  Addressable hrgnSrc1,  Addressable hrgnSrc2,  int iMode) {
        var mh$ = CombineRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgnDst, hrgnSrc1, hrgnSrc2, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$407.CopyMetaFileA$MH,"CopyMetaFileA");
    }
    public static MemoryAddress CopyMetaFileA ( Addressable x0,  Addressable x1) {
        var mh$ = CopyMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$407.CopyMetaFileW$MH,"CopyMetaFileW");
    }
    public static MemoryAddress CopyMetaFileW ( Addressable x0,  Addressable x1) {
        var mh$ = CopyMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$407.CreateBitmap$MH,"CreateBitmap");
    }
    public static MemoryAddress CreateBitmap ( int nWidth,  int nHeight,  int nPlanes,  int nBitCount,  Addressable lpBits) {
        var mh$ = CreateBitmap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nWidth, nHeight, nPlanes, nBitCount, lpBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBitmapIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$408.CreateBitmapIndirect$MH,"CreateBitmapIndirect");
    }
    public static MemoryAddress CreateBitmapIndirect ( Addressable pbm) {
        var mh$ = CreateBitmapIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pbm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateBrushIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$408.CreateBrushIndirect$MH,"CreateBrushIndirect");
    }
    public static MemoryAddress CreateBrushIndirect ( Addressable plbrush) {
        var mh$ = CreateBrushIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(plbrush);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateCompatibleBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$408.CreateCompatibleBitmap$MH,"CreateCompatibleBitmap");
    }
    public static MemoryAddress CreateCompatibleBitmap ( Addressable hdc,  int cx,  int cy) {
        var mh$ = CreateCompatibleBitmap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, cx, cy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDiscardableBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$408.CreateDiscardableBitmap$MH,"CreateDiscardableBitmap");
    }
    public static MemoryAddress CreateDiscardableBitmap ( Addressable hdc,  int cx,  int cy) {
        var mh$ = CreateDiscardableBitmap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, cx, cy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateCompatibleDC$MH() {
        return RuntimeHelper.requireNonNull(constants$408.CreateCompatibleDC$MH,"CreateCompatibleDC");
    }
    public static MemoryAddress CreateCompatibleDC ( Addressable hdc) {
        var mh$ = CreateCompatibleDC$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDCA$MH() {
        return RuntimeHelper.requireNonNull(constants$408.CreateDCA$MH,"CreateDCA");
    }
    public static MemoryAddress CreateDCA ( Addressable pwszDriver,  Addressable pwszDevice,  Addressable pszPort,  Addressable pdm) {
        var mh$ = CreateDCA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszDriver, pwszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDCW$MH() {
        return RuntimeHelper.requireNonNull(constants$409.CreateDCW$MH,"CreateDCW");
    }
    public static MemoryAddress CreateDCW ( Addressable pwszDriver,  Addressable pwszDevice,  Addressable pszPort,  Addressable pdm) {
        var mh$ = CreateDCW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszDriver, pwszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$409.CreateDIBitmap$MH,"CreateDIBitmap");
    }
    public static MemoryAddress CreateDIBitmap ( Addressable hdc,  Addressable pbmih,  int flInit,  Addressable pjBits,  Addressable pbmi,  int iUsage) {
        var mh$ = CreateDIBitmap$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, pbmih, flInit, pjBits, pbmi, iUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBPatternBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$409.CreateDIBPatternBrush$MH,"CreateDIBPatternBrush");
    }
    public static MemoryAddress CreateDIBPatternBrush ( Addressable h,  int iUsage) {
        var mh$ = CreateDIBPatternBrush$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(h, iUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBPatternBrushPt$MH() {
        return RuntimeHelper.requireNonNull(constants$409.CreateDIBPatternBrushPt$MH,"CreateDIBPatternBrushPt");
    }
    public static MemoryAddress CreateDIBPatternBrushPt ( Addressable lpPackedDIB,  int iUsage) {
        var mh$ = CreateDIBPatternBrushPt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpPackedDIB, iUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEllipticRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$409.CreateEllipticRgn$MH,"CreateEllipticRgn");
    }
    public static MemoryAddress CreateEllipticRgn ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = CreateEllipticRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEllipticRgnIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$409.CreateEllipticRgnIndirect$MH,"CreateEllipticRgnIndirect");
    }
    public static MemoryAddress CreateEllipticRgnIndirect ( Addressable lprect) {
        var mh$ = CreateEllipticRgnIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontIndirectA$MH() {
        return RuntimeHelper.requireNonNull(constants$410.CreateFontIndirectA$MH,"CreateFontIndirectA");
    }
    public static MemoryAddress CreateFontIndirectA ( Addressable lplf) {
        var mh$ = CreateFontIndirectA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontIndirectW$MH() {
        return RuntimeHelper.requireNonNull(constants$410.CreateFontIndirectW$MH,"CreateFontIndirectW");
    }
    public static MemoryAddress CreateFontIndirectW ( Addressable lplf) {
        var mh$ = CreateFontIndirectW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$410.CreateFontA$MH,"CreateFontA");
    }
    public static MemoryAddress CreateFontA ( int cHeight,  int cWidth,  int cEscapement,  int cOrientation,  int cWeight,  int bItalic,  int bUnderline,  int bStrikeOut,  int iCharSet,  int iOutPrecision,  int iClipPrecision,  int iQuality,  int iPitchAndFamily,  Addressable pszFaceName) {
        var mh$ = CreateFontA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cHeight, cWidth, cEscapement, cOrientation, cWeight, bItalic, bUnderline, bStrikeOut, iCharSet, iOutPrecision, iClipPrecision, iQuality, iPitchAndFamily, pszFaceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$410.CreateFontW$MH,"CreateFontW");
    }
    public static MemoryAddress CreateFontW ( int cHeight,  int cWidth,  int cEscapement,  int cOrientation,  int cWeight,  int bItalic,  int bUnderline,  int bStrikeOut,  int iCharSet,  int iOutPrecision,  int iClipPrecision,  int iQuality,  int iPitchAndFamily,  Addressable pszFaceName) {
        var mh$ = CreateFontW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cHeight, cWidth, cEscapement, cOrientation, cWeight, bItalic, bUnderline, bStrikeOut, iCharSet, iOutPrecision, iClipPrecision, iQuality, iPitchAndFamily, pszFaceName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHatchBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$410.CreateHatchBrush$MH,"CreateHatchBrush");
    }
    public static MemoryAddress CreateHatchBrush ( int iHatch,  int color) {
        var mh$ = CreateHatchBrush$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iHatch, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateICA$MH() {
        return RuntimeHelper.requireNonNull(constants$410.CreateICA$MH,"CreateICA");
    }
    public static MemoryAddress CreateICA ( Addressable pszDriver,  Addressable pszDevice,  Addressable pszPort,  Addressable pdm) {
        var mh$ = CreateICA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszDriver, pszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateICW$MH() {
        return RuntimeHelper.requireNonNull(constants$411.CreateICW$MH,"CreateICW");
    }
    public static MemoryAddress CreateICW ( Addressable pszDriver,  Addressable pszDevice,  Addressable pszPort,  Addressable pdm) {
        var mh$ = CreateICW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszDriver, pszDevice, pszPort, pdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$411.CreateMetaFileA$MH,"CreateMetaFileA");
    }
    public static MemoryAddress CreateMetaFileA ( Addressable pszFile) {
        var mh$ = CreateMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$411.CreateMetaFileW$MH,"CreateMetaFileW");
    }
    public static MemoryAddress CreateMetaFileW ( Addressable pszFile) {
        var mh$ = CreateMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$411.CreatePalette$MH,"CreatePalette");
    }
    public static MemoryAddress CreatePalette ( Addressable plpal) {
        var mh$ = CreatePalette$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(plpal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePen$MH() {
        return RuntimeHelper.requireNonNull(constants$411.CreatePen$MH,"CreatePen");
    }
    public static MemoryAddress CreatePen ( int iStyle,  int cWidth,  int color) {
        var mh$ = CreatePen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iStyle, cWidth, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePenIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$411.CreatePenIndirect$MH,"CreatePenIndirect");
    }
    public static MemoryAddress CreatePenIndirect ( Addressable plpen) {
        var mh$ = CreatePenIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(plpen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePolyPolygonRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$412.CreatePolyPolygonRgn$MH,"CreatePolyPolygonRgn");
    }
    public static MemoryAddress CreatePolyPolygonRgn ( Addressable pptl,  Addressable pc,  int cPoly,  int iMode) {
        var mh$ = CreatePolyPolygonRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pptl, pc, cPoly, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePatternBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$412.CreatePatternBrush$MH,"CreatePatternBrush");
    }
    public static MemoryAddress CreatePatternBrush ( Addressable hbm) {
        var mh$ = CreatePatternBrush$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hbm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRectRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$412.CreateRectRgn$MH,"CreateRectRgn");
    }
    public static MemoryAddress CreateRectRgn ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = CreateRectRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRectRgnIndirect$MH() {
        return RuntimeHelper.requireNonNull(constants$412.CreateRectRgnIndirect$MH,"CreateRectRgnIndirect");
    }
    public static MemoryAddress CreateRectRgnIndirect ( Addressable lprect) {
        var mh$ = CreateRectRgnIndirect$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateRoundRectRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$412.CreateRoundRectRgn$MH,"CreateRoundRectRgn");
    }
    public static MemoryAddress CreateRoundRectRgn ( int x1,  int y1,  int x2,  int y2,  int w,  int h) {
        var mh$ = CreateRoundRectRgn$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x1, y1, x2, y2, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateScalableFontResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$412.CreateScalableFontResourceA$MH,"CreateScalableFontResourceA");
    }
    public static int CreateScalableFontResourceA ( int fdwHidden,  Addressable lpszFont,  Addressable lpszFile,  Addressable lpszPath) {
        var mh$ = CreateScalableFontResourceA$MH();
        try {
            return (int)mh$.invokeExact(fdwHidden, lpszFont, lpszFile, lpszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateScalableFontResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$413.CreateScalableFontResourceW$MH,"CreateScalableFontResourceW");
    }
    public static int CreateScalableFontResourceW ( int fdwHidden,  Addressable lpszFont,  Addressable lpszFile,  Addressable lpszPath) {
        var mh$ = CreateScalableFontResourceW$MH();
        try {
            return (int)mh$.invokeExact(fdwHidden, lpszFont, lpszFile, lpszPath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateSolidBrush$MH() {
        return RuntimeHelper.requireNonNull(constants$413.CreateSolidBrush$MH,"CreateSolidBrush");
    }
    public static MemoryAddress CreateSolidBrush ( int color) {
        var mh$ = CreateSolidBrush$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteDC$MH() {
        return RuntimeHelper.requireNonNull(constants$413.DeleteDC$MH,"DeleteDC");
    }
    public static int DeleteDC ( Addressable hdc) {
        var mh$ = DeleteDC$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$413.DeleteMetaFile$MH,"DeleteMetaFile");
    }
    public static int DeleteMetaFile ( Addressable hmf) {
        var mh$ = DeleteMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteObject$MH() {
        return RuntimeHelper.requireNonNull(constants$413.DeleteObject$MH,"DeleteObject");
    }
    public static int DeleteObject ( Addressable ho) {
        var mh$ = DeleteObject$MH();
        try {
            return (int)mh$.invokeExact(ho);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DescribePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$413.DescribePixelFormat$MH,"DescribePixelFormat");
    }
    public static int DescribePixelFormat ( Addressable hdc,  int iPixelFormat,  int nBytes,  Addressable ppfd) {
        var mh$ = DescribePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc, iPixelFormat, nBytes, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceCapabilitiesA$MH() {
        return RuntimeHelper.requireNonNull(constants$414.DeviceCapabilitiesA$MH,"DeviceCapabilitiesA");
    }
    public static int DeviceCapabilitiesA ( Addressable pDevice,  Addressable pPort,  short fwCapability,  Addressable pOutput,  Addressable pDevMode) {
        var mh$ = DeviceCapabilitiesA$MH();
        try {
            return (int)mh$.invokeExact(pDevice, pPort, fwCapability, pOutput, pDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceCapabilitiesW$MH() {
        return RuntimeHelper.requireNonNull(constants$414.DeviceCapabilitiesW$MH,"DeviceCapabilitiesW");
    }
    public static int DeviceCapabilitiesW ( Addressable pDevice,  Addressable pPort,  short fwCapability,  Addressable pOutput,  Addressable pDevMode) {
        var mh$ = DeviceCapabilitiesW$MH();
        try {
            return (int)mh$.invokeExact(pDevice, pPort, fwCapability, pOutput, pDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DrawEscape$MH() {
        return RuntimeHelper.requireNonNull(constants$415.DrawEscape$MH,"DrawEscape");
    }
    public static int DrawEscape ( Addressable hdc,  int iEscape,  int cjIn,  Addressable lpIn) {
        var mh$ = DrawEscape$MH();
        try {
            return (int)mh$.invokeExact(hdc, iEscape, cjIn, lpIn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ellipse$MH() {
        return RuntimeHelper.requireNonNull(constants$415.Ellipse$MH,"Ellipse");
    }
    public static int Ellipse ( Addressable hdc,  int left,  int top,  int right,  int bottom) {
        var mh$ = Ellipse$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesExA$MH() {
        return RuntimeHelper.requireNonNull(constants$415.EnumFontFamiliesExA$MH,"EnumFontFamiliesExA");
    }
    public static int EnumFontFamiliesExA ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam,  int dwFlags) {
        var mh$ = EnumFontFamiliesExA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesExW$MH() {
        return RuntimeHelper.requireNonNull(constants$415.EnumFontFamiliesExW$MH,"EnumFontFamiliesExW");
    }
    public static int EnumFontFamiliesExW ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam,  int dwFlags) {
        var mh$ = EnumFontFamiliesExW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesA$MH() {
        return RuntimeHelper.requireNonNull(constants$415.EnumFontFamiliesA$MH,"EnumFontFamiliesA");
    }
    public static int EnumFontFamiliesA ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam) {
        var mh$ = EnumFontFamiliesA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontFamiliesW$MH() {
        return RuntimeHelper.requireNonNull(constants$415.EnumFontFamiliesW$MH,"EnumFontFamiliesW");
    }
    public static int EnumFontFamiliesW ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam) {
        var mh$ = EnumFontFamiliesW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontsA$MH() {
        return RuntimeHelper.requireNonNull(constants$416.EnumFontsA$MH,"EnumFontsA");
    }
    public static int EnumFontsA ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam) {
        var mh$ = EnumFontsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumFontsW$MH() {
        return RuntimeHelper.requireNonNull(constants$416.EnumFontsW$MH,"EnumFontsW");
    }
    public static int EnumFontsW ( Addressable hdc,  Addressable lpLogfont,  Addressable lpProc,  long lParam) {
        var mh$ = EnumFontsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpLogfont, lpProc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumObjects$MH() {
        return RuntimeHelper.requireNonNull(constants$416.EnumObjects$MH,"EnumObjects");
    }
    public static int EnumObjects ( Addressable hdc,  int nType,  Addressable lpFunc,  long lParam) {
        var mh$ = EnumObjects$MH();
        try {
            return (int)mh$.invokeExact(hdc, nType, lpFunc, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EqualRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$416.EqualRgn$MH,"EqualRgn");
    }
    public static int EqualRgn ( Addressable hrgn1,  Addressable hrgn2) {
        var mh$ = EqualRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn1, hrgn2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Escape$MH() {
        return RuntimeHelper.requireNonNull(constants$416.Escape$MH,"Escape");
    }
    public static int Escape ( Addressable hdc,  int iEscape,  int cjIn,  Addressable pvIn,  Addressable pvOut) {
        var mh$ = Escape$MH();
        try {
            return (int)mh$.invokeExact(hdc, iEscape, cjIn, pvIn, pvOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtEscape$MH() {
        return RuntimeHelper.requireNonNull(constants$416.ExtEscape$MH,"ExtEscape");
    }
    public static int ExtEscape ( Addressable hdc,  int iEscape,  int cjInput,  Addressable lpInData,  int cjOutput,  Addressable lpOutData) {
        var mh$ = ExtEscape$MH();
        try {
            return (int)mh$.invokeExact(hdc, iEscape, cjInput, lpInData, cjOutput, lpOutData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExcludeClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$417.ExcludeClipRect$MH,"ExcludeClipRect");
    }
    public static int ExcludeClipRect ( Addressable hdc,  int left,  int top,  int right,  int bottom) {
        var mh$ = ExcludeClipRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtCreateRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$417.ExtCreateRegion$MH,"ExtCreateRegion");
    }
    public static MemoryAddress ExtCreateRegion ( Addressable lpx,  int nCount,  Addressable lpData) {
        var mh$ = ExtCreateRegion$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpx, nCount, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtFloodFill$MH() {
        return RuntimeHelper.requireNonNull(constants$417.ExtFloodFill$MH,"ExtFloodFill");
    }
    public static int ExtFloodFill ( Addressable hdc,  int x,  int y,  int color,  int type) {
        var mh$ = ExtFloodFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$417.FillRgn$MH,"FillRgn");
    }
    public static int FillRgn ( Addressable hdc,  Addressable hrgn,  Addressable hbr) {
        var mh$ = FillRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, hbr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FloodFill$MH() {
        return RuntimeHelper.requireNonNull(constants$417.FloodFill$MH,"FloodFill");
    }
    public static int FloodFill ( Addressable hdc,  int x,  int y,  int color) {
        var mh$ = FloodFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FrameRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$417.FrameRgn$MH,"FrameRgn");
    }
    public static int FrameRgn ( Addressable hdc,  Addressable hrgn,  Addressable hbr,  int w,  int h) {
        var mh$ = FrameRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, hbr, w, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetROP2$MH() {
        return RuntimeHelper.requireNonNull(constants$418.GetROP2$MH,"GetROP2");
    }
    public static int GetROP2 ( Addressable hdc) {
        var mh$ = GetROP2$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAspectRatioFilterEx$MH() {
        return RuntimeHelper.requireNonNull(constants$418.GetAspectRatioFilterEx$MH,"GetAspectRatioFilterEx");
    }
    public static int GetAspectRatioFilterEx ( Addressable hdc,  Addressable lpsize) {
        var mh$ = GetAspectRatioFilterEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBkColor$MH() {
        return RuntimeHelper.requireNonNull(constants$418.GetBkColor$MH,"GetBkColor");
    }
    public static int GetBkColor ( Addressable hdc) {
        var mh$ = GetBkColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCBrushColor$MH() {
        return RuntimeHelper.requireNonNull(constants$418.GetDCBrushColor$MH,"GetDCBrushColor");
    }
    public static int GetDCBrushColor ( Addressable hdc) {
        var mh$ = GetDCBrushColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDCPenColor$MH() {
        return RuntimeHelper.requireNonNull(constants$418.GetDCPenColor$MH,"GetDCPenColor");
    }
    public static int GetDCPenColor ( Addressable hdc) {
        var mh$ = GetDCPenColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBkMode$MH() {
        return RuntimeHelper.requireNonNull(constants$418.GetBkMode$MH,"GetBkMode");
    }
    public static int GetBkMode ( Addressable hdc) {
        var mh$ = GetBkMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBitmapBits$MH() {
        return RuntimeHelper.requireNonNull(constants$419.GetBitmapBits$MH,"GetBitmapBits");
    }
    public static int GetBitmapBits ( Addressable hbit,  int cb,  Addressable lpvBits) {
        var mh$ = GetBitmapBits$MH();
        try {
            return (int)mh$.invokeExact(hbit, cb, lpvBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBitmapDimensionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$419.GetBitmapDimensionEx$MH,"GetBitmapDimensionEx");
    }
    public static int GetBitmapDimensionEx ( Addressable hbit,  Addressable lpsize) {
        var mh$ = GetBitmapDimensionEx$MH();
        try {
            return (int)mh$.invokeExact(hbit, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBoundsRect$MH() {
        return RuntimeHelper.requireNonNull(constants$419.GetBoundsRect$MH,"GetBoundsRect");
    }
    public static int GetBoundsRect ( Addressable hdc,  Addressable lprect,  int flags) {
        var mh$ = GetBoundsRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetBrushOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$419.GetBrushOrgEx$MH,"GetBrushOrgEx");
    }
    public static int GetBrushOrgEx ( Addressable hdc,  Addressable lppt) {
        var mh$ = GetBrushOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthA$MH() {
        return RuntimeHelper.requireNonNull(constants$419.GetCharWidthA$MH,"GetCharWidthA");
    }
    public static int GetCharWidthA ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidthA$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthW$MH() {
        return RuntimeHelper.requireNonNull(constants$419.GetCharWidthW$MH,"GetCharWidthW");
    }
    public static int GetCharWidthW ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidthW$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidth32A$MH() {
        return RuntimeHelper.requireNonNull(constants$420.GetCharWidth32A$MH,"GetCharWidth32A");
    }
    public static int GetCharWidth32A ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidth32A$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidth32W$MH() {
        return RuntimeHelper.requireNonNull(constants$420.GetCharWidth32W$MH,"GetCharWidth32W");
    }
    public static int GetCharWidth32W ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidth32W$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthFloatA$MH() {
        return RuntimeHelper.requireNonNull(constants$420.GetCharWidthFloatA$MH,"GetCharWidthFloatA");
    }
    public static int GetCharWidthFloatA ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidthFloatA$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthFloatW$MH() {
        return RuntimeHelper.requireNonNull(constants$420.GetCharWidthFloatW$MH,"GetCharWidthFloatW");
    }
    public static int GetCharWidthFloatW ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpBuffer) {
        var mh$ = GetCharWidthFloatW$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsA$MH() {
        return RuntimeHelper.requireNonNull(constants$420.GetCharABCWidthsA$MH,"GetCharABCWidthsA");
    }
    public static int GetCharABCWidthsA ( Addressable hdc,  int wFirst,  int wLast,  Addressable lpABC) {
        var mh$ = GetCharABCWidthsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, wFirst, wLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsW$MH() {
        return RuntimeHelper.requireNonNull(constants$420.GetCharABCWidthsW$MH,"GetCharABCWidthsW");
    }
    public static int GetCharABCWidthsW ( Addressable hdc,  int wFirst,  int wLast,  Addressable lpABC) {
        var mh$ = GetCharABCWidthsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, wFirst, wLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsFloatA$MH() {
        return RuntimeHelper.requireNonNull(constants$421.GetCharABCWidthsFloatA$MH,"GetCharABCWidthsFloatA");
    }
    public static int GetCharABCWidthsFloatA ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpABC) {
        var mh$ = GetCharABCWidthsFloatA$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsFloatW$MH() {
        return RuntimeHelper.requireNonNull(constants$421.GetCharABCWidthsFloatW$MH,"GetCharABCWidthsFloatW");
    }
    public static int GetCharABCWidthsFloatW ( Addressable hdc,  int iFirst,  int iLast,  Addressable lpABC) {
        var mh$ = GetCharABCWidthsFloatW$MH();
        try {
            return (int)mh$.invokeExact(hdc, iFirst, iLast, lpABC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipBox$MH() {
        return RuntimeHelper.requireNonNull(constants$421.GetClipBox$MH,"GetClipBox");
    }
    public static int GetClipBox ( Addressable hdc,  Addressable lprect) {
        var mh$ = GetClipBox$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$421.GetClipRgn$MH,"GetClipRgn");
    }
    public static int GetClipRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = GetClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$421.GetMetaRgn$MH,"GetMetaRgn");
    }
    public static int GetMetaRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = GetMetaRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentObject$MH() {
        return RuntimeHelper.requireNonNull(constants$421.GetCurrentObject$MH,"GetCurrentObject");
    }
    public static MemoryAddress GetCurrentObject ( Addressable hdc,  int type) {
        var mh$ = GetCurrentObject$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentPositionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$422.GetCurrentPositionEx$MH,"GetCurrentPositionEx");
    }
    public static int GetCurrentPositionEx ( Addressable hdc,  Addressable lppt) {
        var mh$ = GetCurrentPositionEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDeviceCaps$MH() {
        return RuntimeHelper.requireNonNull(constants$422.GetDeviceCaps$MH,"GetDeviceCaps");
    }
    public static int GetDeviceCaps ( Addressable hdc,  int index) {
        var mh$ = GetDeviceCaps$MH();
        try {
            return (int)mh$.invokeExact(hdc, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$422.GetDIBits$MH,"GetDIBits");
    }
    public static int GetDIBits ( Addressable hdc,  Addressable hbm,  int start,  int cLines,  Addressable lpvBits,  Addressable lpbmi,  int usage) {
        var mh$ = GetDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbm, start, cLines, lpvBits, lpbmi, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFontData$MH() {
        return RuntimeHelper.requireNonNull(constants$422.GetFontData$MH,"GetFontData");
    }
    public static int GetFontData ( Addressable hdc,  int dwTable,  int dwOffset,  Addressable pvBuffer,  int cjBuffer) {
        var mh$ = GetFontData$MH();
        try {
            return (int)mh$.invokeExact(hdc, dwTable, dwOffset, pvBuffer, cjBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphOutlineA$MH() {
        return RuntimeHelper.requireNonNull(constants$422.GetGlyphOutlineA$MH,"GetGlyphOutlineA");
    }
    public static int GetGlyphOutlineA ( Addressable hdc,  int uChar,  int fuFormat,  Addressable lpgm,  int cjBuffer,  Addressable pvBuffer,  Addressable lpmat2) {
        var mh$ = GetGlyphOutlineA$MH();
        try {
            return (int)mh$.invokeExact(hdc, uChar, fuFormat, lpgm, cjBuffer, pvBuffer, lpmat2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphOutlineW$MH() {
        return RuntimeHelper.requireNonNull(constants$422.GetGlyphOutlineW$MH,"GetGlyphOutlineW");
    }
    public static int GetGlyphOutlineW ( Addressable hdc,  int uChar,  int fuFormat,  Addressable lpgm,  int cjBuffer,  Addressable pvBuffer,  Addressable lpmat2) {
        var mh$ = GetGlyphOutlineW$MH();
        try {
            return (int)mh$.invokeExact(hdc, uChar, fuFormat, lpgm, cjBuffer, pvBuffer, lpmat2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGraphicsMode$MH() {
        return RuntimeHelper.requireNonNull(constants$423.GetGraphicsMode$MH,"GetGraphicsMode");
    }
    public static int GetGraphicsMode ( Addressable hdc) {
        var mh$ = GetGraphicsMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMapMode$MH() {
        return RuntimeHelper.requireNonNull(constants$423.GetMapMode$MH,"GetMapMode");
    }
    public static int GetMapMode ( Addressable hdc) {
        var mh$ = GetMapMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaFileBitsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$423.GetMetaFileBitsEx$MH,"GetMetaFileBitsEx");
    }
    public static int GetMetaFileBitsEx ( Addressable hMF,  int cbBuffer,  Addressable lpData) {
        var mh$ = GetMetaFileBitsEx$MH();
        try {
            return (int)mh$.invokeExact(hMF, cbBuffer, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$423.GetMetaFileA$MH,"GetMetaFileA");
    }
    public static MemoryAddress GetMetaFileA ( Addressable lpName) {
        var mh$ = GetMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$423.GetMetaFileW$MH,"GetMetaFileW");
    }
    public static MemoryAddress GetMetaFileW ( Addressable lpName) {
        var mh$ = GetMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNearestColor$MH() {
        return RuntimeHelper.requireNonNull(constants$423.GetNearestColor$MH,"GetNearestColor");
    }
    public static int GetNearestColor ( Addressable hdc,  int color) {
        var mh$ = GetNearestColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNearestPaletteIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$424.GetNearestPaletteIndex$MH,"GetNearestPaletteIndex");
    }
    public static int GetNearestPaletteIndex ( Addressable h,  int color) {
        var mh$ = GetNearestPaletteIndex$MH();
        try {
            return (int)mh$.invokeExact(h, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetObjectType$MH() {
        return RuntimeHelper.requireNonNull(constants$424.GetObjectType$MH,"GetObjectType");
    }
    public static int GetObjectType ( Addressable h) {
        var mh$ = GetObjectType$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOutlineTextMetricsA$MH() {
        return RuntimeHelper.requireNonNull(constants$424.GetOutlineTextMetricsA$MH,"GetOutlineTextMetricsA");
    }
    public static int GetOutlineTextMetricsA ( Addressable hdc,  int cjCopy,  Addressable potm) {
        var mh$ = GetOutlineTextMetricsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, cjCopy, potm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOutlineTextMetricsW$MH() {
        return RuntimeHelper.requireNonNull(constants$424.GetOutlineTextMetricsW$MH,"GetOutlineTextMetricsW");
    }
    public static int GetOutlineTextMetricsW ( Addressable hdc,  int cjCopy,  Addressable potm) {
        var mh$ = GetOutlineTextMetricsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, cjCopy, potm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$424.GetPaletteEntries$MH,"GetPaletteEntries");
    }
    public static int GetPaletteEntries ( Addressable hpal,  int iStart,  int cEntries,  Addressable pPalEntries) {
        var mh$ = GetPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hpal, iStart, cEntries, pPalEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$424.GetPixel$MH,"GetPixel");
    }
    public static int GetPixel ( Addressable hdc,  int x,  int y) {
        var mh$ = GetPixel$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$425.GetPixelFormat$MH,"GetPixelFormat");
    }
    public static int GetPixelFormat ( Addressable hdc) {
        var mh$ = GetPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPolyFillMode$MH() {
        return RuntimeHelper.requireNonNull(constants$425.GetPolyFillMode$MH,"GetPolyFillMode");
    }
    public static int GetPolyFillMode ( Addressable hdc) {
        var mh$ = GetPolyFillMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRasterizerCaps$MH() {
        return RuntimeHelper.requireNonNull(constants$425.GetRasterizerCaps$MH,"GetRasterizerCaps");
    }
    public static int GetRasterizerCaps ( Addressable lpraststat,  int cjBytes) {
        var mh$ = GetRasterizerCaps$MH();
        try {
            return (int)mh$.invokeExact(lpraststat, cjBytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRandomRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$425.GetRandomRgn$MH,"GetRandomRgn");
    }
    public static int GetRandomRgn ( Addressable hdc,  Addressable hrgn,  int i) {
        var mh$ = GetRandomRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRegionData$MH() {
        return RuntimeHelper.requireNonNull(constants$425.GetRegionData$MH,"GetRegionData");
    }
    public static int GetRegionData ( Addressable hrgn,  int nCount,  Addressable lpRgnData) {
        var mh$ = GetRegionData$MH();
        try {
            return (int)mh$.invokeExact(hrgn, nCount, lpRgnData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRgnBox$MH() {
        return RuntimeHelper.requireNonNull(constants$425.GetRgnBox$MH,"GetRgnBox");
    }
    public static int GetRgnBox ( Addressable hrgn,  Addressable lprc) {
        var mh$ = GetRgnBox$MH();
        try {
            return (int)mh$.invokeExact(hrgn, lprc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStockObject$MH() {
        return RuntimeHelper.requireNonNull(constants$426.GetStockObject$MH,"GetStockObject");
    }
    public static MemoryAddress GetStockObject ( int i) {
        var mh$ = GetStockObject$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStretchBltMode$MH() {
        return RuntimeHelper.requireNonNull(constants$426.GetStretchBltMode$MH,"GetStretchBltMode");
    }
    public static int GetStretchBltMode ( Addressable hdc) {
        var mh$ = GetStretchBltMode$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$426.GetSystemPaletteEntries$MH,"GetSystemPaletteEntries");
    }
    public static int GetSystemPaletteEntries ( Addressable hdc,  int iStart,  int cEntries,  Addressable pPalEntries) {
        var mh$ = GetSystemPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, pPalEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemPaletteUse$MH() {
        return RuntimeHelper.requireNonNull(constants$426.GetSystemPaletteUse$MH,"GetSystemPaletteUse");
    }
    public static int GetSystemPaletteUse ( Addressable hdc) {
        var mh$ = GetSystemPaletteUse$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextCharacterExtra$MH() {
        return RuntimeHelper.requireNonNull(constants$426.GetTextCharacterExtra$MH,"GetTextCharacterExtra");
    }
    public static int GetTextCharacterExtra ( Addressable hdc) {
        var mh$ = GetTextCharacterExtra$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextAlign$MH() {
        return RuntimeHelper.requireNonNull(constants$426.GetTextAlign$MH,"GetTextAlign");
    }
    public static int GetTextAlign ( Addressable hdc) {
        var mh$ = GetTextAlign$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextColor$MH() {
        return RuntimeHelper.requireNonNull(constants$427.GetTextColor$MH,"GetTextColor");
    }
    public static int GetTextColor ( Addressable hdc) {
        var mh$ = GetTextColor$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$427.GetTextExtentPointA$MH,"GetTextExtentPointA");
    }
    public static int GetTextExtentPointA ( Addressable hdc,  Addressable lpString,  int c,  Addressable lpsz) {
        var mh$ = GetTextExtentPointA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$427.GetTextExtentPointW$MH,"GetTextExtentPointW");
    }
    public static int GetTextExtentPointW ( Addressable hdc,  Addressable lpString,  int c,  Addressable lpsz) {
        var mh$ = GetTextExtentPointW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, lpsz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPoint32A$MH() {
        return RuntimeHelper.requireNonNull(constants$427.GetTextExtentPoint32A$MH,"GetTextExtentPoint32A");
    }
    public static int GetTextExtentPoint32A ( Addressable hdc,  Addressable lpString,  int c,  Addressable psizl) {
        var mh$ = GetTextExtentPoint32A$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, psizl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPoint32W$MH() {
        return RuntimeHelper.requireNonNull(constants$427.GetTextExtentPoint32W$MH,"GetTextExtentPoint32W");
    }
    public static int GetTextExtentPoint32W ( Addressable hdc,  Addressable lpString,  int c,  Addressable psizl) {
        var mh$ = GetTextExtentPoint32W$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, c, psizl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentExPointA$MH() {
        return RuntimeHelper.requireNonNull(constants$427.GetTextExtentExPointA$MH,"GetTextExtentExPointA");
    }
    public static int GetTextExtentExPointA ( Addressable hdc,  Addressable lpszString,  int cchString,  int nMaxExtent,  Addressable lpnFit,  Addressable lpnDx,  Addressable lpSize) {
        var mh$ = GetTextExtentExPointA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpszString, cchString, nMaxExtent, lpnFit, lpnDx, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentExPointW$MH() {
        return RuntimeHelper.requireNonNull(constants$428.GetTextExtentExPointW$MH,"GetTextExtentExPointW");
    }
    public static int GetTextExtentExPointW ( Addressable hdc,  Addressable lpszString,  int cchString,  int nMaxExtent,  Addressable lpnFit,  Addressable lpnDx,  Addressable lpSize) {
        var mh$ = GetTextExtentExPointW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpszString, cchString, nMaxExtent, lpnFit, lpnDx, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextCharset$MH() {
        return RuntimeHelper.requireNonNull(constants$428.GetTextCharset$MH,"GetTextCharset");
    }
    public static int GetTextCharset ( Addressable hdc) {
        var mh$ = GetTextCharset$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextCharsetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$428.GetTextCharsetInfo$MH,"GetTextCharsetInfo");
    }
    public static int GetTextCharsetInfo ( Addressable hdc,  Addressable lpSig,  int dwFlags) {
        var mh$ = GetTextCharsetInfo$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpSig, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TranslateCharsetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$428.TranslateCharsetInfo$MH,"TranslateCharsetInfo");
    }
    public static int TranslateCharsetInfo ( Addressable lpSrc,  Addressable lpCs,  int dwFlags) {
        var mh$ = TranslateCharsetInfo$MH();
        try {
            return (int)mh$.invokeExact(lpSrc, lpCs, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFontLanguageInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$428.GetFontLanguageInfo$MH,"GetFontLanguageInfo");
    }
    public static int GetFontLanguageInfo ( Addressable hdc) {
        var mh$ = GetFontLanguageInfo$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharacterPlacementA$MH() {
        return RuntimeHelper.requireNonNull(constants$428.GetCharacterPlacementA$MH,"GetCharacterPlacementA");
    }
    public static int GetCharacterPlacementA ( Addressable hdc,  Addressable lpString,  int nCount,  int nMexExtent,  Addressable lpResults,  int dwFlags) {
        var mh$ = GetCharacterPlacementA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, nCount, nMexExtent, lpResults, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharacterPlacementW$MH() {
        return RuntimeHelper.requireNonNull(constants$429.GetCharacterPlacementW$MH,"GetCharacterPlacementW");
    }
    public static int GetCharacterPlacementW ( Addressable hdc,  Addressable lpString,  int nCount,  int nMexExtent,  Addressable lpResults,  int dwFlags) {
        var mh$ = GetCharacterPlacementW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpString, nCount, nMexExtent, lpResults, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWCRANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWCRANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGLYPHSET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGLYPHSET = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetFontUnicodeRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$429.GetFontUnicodeRanges$MH,"GetFontUnicodeRanges");
    }
    public static int GetFontUnicodeRanges ( Addressable hdc,  Addressable lpgs) {
        var mh$ = GetFontUnicodeRanges$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpgs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphIndicesA$MH() {
        return RuntimeHelper.requireNonNull(constants$429.GetGlyphIndicesA$MH,"GetGlyphIndicesA");
    }
    public static int GetGlyphIndicesA ( Addressable hdc,  Addressable lpstr,  int c,  Addressable pgi,  int fl) {
        var mh$ = GetGlyphIndicesA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpstr, c, pgi, fl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGlyphIndicesW$MH() {
        return RuntimeHelper.requireNonNull(constants$429.GetGlyphIndicesW$MH,"GetGlyphIndicesW");
    }
    public static int GetGlyphIndicesW ( Addressable hdc,  Addressable lpstr,  int c,  Addressable pgi,  int fl) {
        var mh$ = GetGlyphIndicesW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpstr, c, pgi, fl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentPointI$MH() {
        return RuntimeHelper.requireNonNull(constants$429.GetTextExtentPointI$MH,"GetTextExtentPointI");
    }
    public static int GetTextExtentPointI ( Addressable hdc,  Addressable pgiIn,  int cgi,  Addressable psize) {
        var mh$ = GetTextExtentPointI$MH();
        try {
            return (int)mh$.invokeExact(hdc, pgiIn, cgi, psize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextExtentExPointI$MH() {
        return RuntimeHelper.requireNonNull(constants$429.GetTextExtentExPointI$MH,"GetTextExtentExPointI");
    }
    public static int GetTextExtentExPointI ( Addressable hdc,  Addressable lpwszString,  int cwchString,  int nMaxExtent,  Addressable lpnFit,  Addressable lpnDx,  Addressable lpSize) {
        var mh$ = GetTextExtentExPointI$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpwszString, cwchString, nMaxExtent, lpnFit, lpnDx, lpSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharWidthI$MH() {
        return RuntimeHelper.requireNonNull(constants$430.GetCharWidthI$MH,"GetCharWidthI");
    }
    public static int GetCharWidthI ( Addressable hdc,  int giFirst,  int cgi,  Addressable pgi,  Addressable piWidths) {
        var mh$ = GetCharWidthI$MH();
        try {
            return (int)mh$.invokeExact(hdc, giFirst, cgi, pgi, piWidths);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCharABCWidthsI$MH() {
        return RuntimeHelper.requireNonNull(constants$430.GetCharABCWidthsI$MH,"GetCharABCWidthsI");
    }
    public static int GetCharABCWidthsI ( Addressable hdc,  int giFirst,  int cgi,  Addressable pgi,  Addressable pabc) {
        var mh$ = GetCharABCWidthsI$MH();
        try {
            return (int)mh$.invokeExact(hdc, giFirst, cgi, pgi, pabc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PDESIGNVECTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDESIGNVECTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AddFontResourceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$430.AddFontResourceExA$MH,"AddFontResourceExA");
    }
    public static int AddFontResourceExA ( Addressable name,  int fl,  Addressable res) {
        var mh$ = AddFontResourceExA$MH();
        try {
            return (int)mh$.invokeExact(name, fl, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFontResourceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$430.AddFontResourceExW$MH,"AddFontResourceExW");
    }
    public static int AddFontResourceExW ( Addressable name,  int fl,  Addressable res) {
        var mh$ = AddFontResourceExW$MH();
        try {
            return (int)mh$.invokeExact(name, fl, res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$430.RemoveFontResourceExA$MH,"RemoveFontResourceExA");
    }
    public static int RemoveFontResourceExA ( Addressable name,  int fl,  Addressable pdv) {
        var mh$ = RemoveFontResourceExA$MH();
        try {
            return (int)mh$.invokeExact(name, fl, pdv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$430.RemoveFontResourceExW$MH,"RemoveFontResourceExW");
    }
    public static int RemoveFontResourceExW ( Addressable name,  int fl,  Addressable pdv) {
        var mh$ = RemoveFontResourceExW$MH();
        try {
            return (int)mh$.invokeExact(name, fl, pdv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddFontMemResourceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$431.AddFontMemResourceEx$MH,"AddFontMemResourceEx");
    }
    public static MemoryAddress AddFontMemResourceEx ( Addressable pFileView,  int cjSize,  Addressable pvResrved,  Addressable pNumFonts) {
        var mh$ = AddFontMemResourceEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pFileView, cjSize, pvResrved, pNumFonts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontMemResourceEx$MH() {
        return RuntimeHelper.requireNonNull(constants$431.RemoveFontMemResourceEx$MH,"RemoveFontMemResourceEx");
    }
    public static int RemoveFontMemResourceEx ( Addressable h) {
        var mh$ = RemoveFontMemResourceEx$MH();
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PAXISINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXISINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXISINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXISINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXISINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXISINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXESLISTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXESLISTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXESLISTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXESLISTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAXESLIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAXESLIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMLOGFONTEXDVA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXDVA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMLOGFONTEXDVW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXDVW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMLOGFONTEXDV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMLOGFONTEXDV = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CreateFontIndirectExA$MH() {
        return RuntimeHelper.requireNonNull(constants$431.CreateFontIndirectExA$MH,"CreateFontIndirectExA");
    }
    public static MemoryAddress CreateFontIndirectExA ( Addressable x0) {
        var mh$ = CreateFontIndirectExA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateFontIndirectExW$MH() {
        return RuntimeHelper.requireNonNull(constants$431.CreateFontIndirectExW$MH,"CreateFontIndirectExW");
    }
    public static MemoryAddress CreateFontIndirectExW ( Addressable x0) {
        var mh$ = CreateFontIndirectExW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PENUMTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMTEXTMETRICA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMTEXTMETRICW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENUMTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUMTEXTMETRIC = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetViewportExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$431.GetViewportExtEx$MH,"GetViewportExtEx");
    }
    public static int GetViewportExtEx ( Addressable hdc,  Addressable lpsize) {
        var mh$ = GetViewportExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetViewportOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$431.GetViewportOrgEx$MH,"GetViewportOrgEx");
    }
    public static int GetViewportOrgEx ( Addressable hdc,  Addressable lppoint) {
        var mh$ = GetViewportOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowExtEx$MH() {
        return RuntimeHelper.requireNonNull(constants$432.GetWindowExtEx$MH,"GetWindowExtEx");
    }
    public static int GetWindowExtEx ( Addressable hdc,  Addressable lpsize) {
        var mh$ = GetWindowExtEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowOrgEx$MH() {
        return RuntimeHelper.requireNonNull(constants$432.GetWindowOrgEx$MH,"GetWindowOrgEx");
    }
    public static int GetWindowOrgEx ( Addressable hdc,  Addressable lppoint) {
        var mh$ = GetWindowOrgEx$MH();
        try {
            return (int)mh$.invokeExact(hdc, lppoint);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IntersectClipRect$MH() {
        return RuntimeHelper.requireNonNull(constants$432.IntersectClipRect$MH,"IntersectClipRect");
    }
    public static int IntersectClipRect ( Addressable hdc,  int left,  int top,  int right,  int bottom) {
        var mh$ = IntersectClipRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InvertRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$432.InvertRgn$MH,"InvertRgn");
    }
    public static int InvertRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = InvertRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LineDDA$MH() {
        return RuntimeHelper.requireNonNull(constants$432.LineDDA$MH,"LineDDA");
    }
    public static int LineDDA ( int xStart,  int yStart,  int xEnd,  int yEnd,  Addressable lpProc,  long data) {
        var mh$ = LineDDA$MH();
        try {
            return (int)mh$.invokeExact(xStart, yStart, xEnd, yEnd, lpProc, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LineTo$MH() {
        return RuntimeHelper.requireNonNull(constants$432.LineTo$MH,"LineTo");
    }
    public static int LineTo ( Addressable hdc,  int x,  int y) {
        var mh$ = LineTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MaskBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$433.MaskBlt$MH,"MaskBlt");
    }
    public static int MaskBlt ( Addressable hdcDest,  int xDest,  int yDest,  int width,  int height,  Addressable hdcSrc,  int xSrc,  int ySrc,  Addressable hbmMask,  int xMask,  int yMask,  int rop) {
        var mh$ = MaskBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xDest, yDest, width, height, hdcSrc, xSrc, ySrc, hbmMask, xMask, yMask, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlgBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$433.PlgBlt$MH,"PlgBlt");
    }
    public static int PlgBlt ( Addressable hdcDest,  Addressable lpPoint,  Addressable hdcSrc,  int xSrc,  int ySrc,  int width,  int height,  Addressable hbmMask,  int xMask,  int yMask) {
        var mh$ = PlgBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, lpPoint, hdcSrc, xSrc, ySrc, width, height, hbmMask, xMask, yMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$433.OffsetClipRgn$MH,"OffsetClipRgn");
    }
    public static int OffsetClipRgn ( Addressable hdc,  int x,  int y) {
        var mh$ = OffsetClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OffsetRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$433.OffsetRgn$MH,"OffsetRgn");
    }
    public static int OffsetRgn ( Addressable hrgn,  int x,  int y) {
        var mh$ = OffsetRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PatBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$433.PatBlt$MH,"PatBlt");
    }
    public static int PatBlt ( Addressable hdc,  int x,  int y,  int w,  int h,  int rop) {
        var mh$ = PatBlt$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, w, h, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Pie$MH() {
        return RuntimeHelper.requireNonNull(constants$433.Pie$MH,"Pie");
    }
    public static int Pie ( Addressable hdc,  int left,  int top,  int right,  int bottom,  int xr1,  int yr1,  int xr2,  int yr2) {
        var mh$ = Pie$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, xr1, yr1, xr2, yr2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$434.PlayMetaFile$MH,"PlayMetaFile");
    }
    public static int PlayMetaFile ( Addressable hdc,  Addressable hmf) {
        var mh$ = PlayMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PaintRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$434.PaintRgn$MH,"PaintRgn");
    }
    public static int PaintRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = PaintRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyPolygon$MH() {
        return RuntimeHelper.requireNonNull(constants$434.PolyPolygon$MH,"PolyPolygon");
    }
    public static int PolyPolygon ( Addressable hdc,  Addressable apt,  Addressable asz,  int csz) {
        var mh$ = PolyPolygon$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, asz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$434.PtInRegion$MH,"PtInRegion");
    }
    public static int PtInRegion ( Addressable hrgn,  int x,  int y) {
        var mh$ = PtInRegion$MH();
        try {
            return (int)mh$.invokeExact(hrgn, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$434.PtVisible$MH,"PtVisible");
    }
    public static int PtVisible ( Addressable hdc,  int x,  int y) {
        var mh$ = PtVisible$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RectInRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$434.RectInRegion$MH,"RectInRegion");
    }
    public static int RectInRegion ( Addressable hrgn,  Addressable lprect) {
        var mh$ = RectInRegion$MH();
        try {
            return (int)mh$.invokeExact(hrgn, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RectVisible$MH() {
        return RuntimeHelper.requireNonNull(constants$435.RectVisible$MH,"RectVisible");
    }
    public static int RectVisible ( Addressable hdc,  Addressable lprect) {
        var mh$ = RectVisible$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Rectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$435.Rectangle$MH,"Rectangle");
    }
    public static int Rectangle ( Addressable hdc,  int left,  int top,  int right,  int bottom) {
        var mh$ = Rectangle$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RestoreDC$MH() {
        return RuntimeHelper.requireNonNull(constants$435.RestoreDC$MH,"RestoreDC");
    }
    public static int RestoreDC ( Addressable hdc,  int nSavedDC) {
        var mh$ = RestoreDC$MH();
        try {
            return (int)mh$.invokeExact(hdc, nSavedDC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetDCA$MH() {
        return RuntimeHelper.requireNonNull(constants$435.ResetDCA$MH,"ResetDCA");
    }
    public static MemoryAddress ResetDCA ( Addressable hdc,  Addressable lpdm) {
        var mh$ = ResetDCA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResetDCW$MH() {
        return RuntimeHelper.requireNonNull(constants$435.ResetDCW$MH,"ResetDCW");
    }
    public static MemoryAddress ResetDCW ( Addressable hdc,  Addressable lpdm) {
        var mh$ = ResetDCW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpdm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealizePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$435.RealizePalette$MH,"RealizePalette");
    }
    public static int RealizePalette ( Addressable hdc) {
        var mh$ = RealizePalette$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$436.RemoveFontResourceA$MH,"RemoveFontResourceA");
    }
    public static int RemoveFontResourceA ( Addressable lpFileName) {
        var mh$ = RemoveFontResourceA$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveFontResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$436.RemoveFontResourceW$MH,"RemoveFontResourceW");
    }
    public static int RemoveFontResourceW ( Addressable lpFileName) {
        var mh$ = RemoveFontResourceW$MH();
        try {
            return (int)mh$.invokeExact(lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RoundRect$MH() {
        return RuntimeHelper.requireNonNull(constants$436.RoundRect$MH,"RoundRect");
    }
    public static int RoundRect ( Addressable hdc,  int left,  int top,  int right,  int bottom,  int width,  int height) {
        var mh$ = RoundRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResizePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$436.ResizePalette$MH,"ResizePalette");
    }
    public static int ResizePalette ( Addressable hpal,  int n) {
        var mh$ = ResizePalette$MH();
        try {
            return (int)mh$.invokeExact(hpal, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SaveDC$MH() {
        return RuntimeHelper.requireNonNull(constants$436.SaveDC$MH,"SaveDC");
    }
    public static int SaveDC ( Addressable hdc) {
        var mh$ = SaveDC$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$436.SelectClipRgn$MH,"SelectClipRgn");
    }
    public static int SelectClipRgn ( Addressable hdc,  Addressable hrgn) {
        var mh$ = SelectClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExtSelectClipRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$437.ExtSelectClipRgn$MH,"ExtSelectClipRgn");
    }
    public static int ExtSelectClipRgn ( Addressable hdc,  Addressable hrgn,  int mode) {
        var mh$ = ExtSelectClipRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc, hrgn, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMetaRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$437.SetMetaRgn$MH,"SetMetaRgn");
    }
    public static int SetMetaRgn ( Addressable hdc) {
        var mh$ = SetMetaRgn$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectObject$MH() {
        return RuntimeHelper.requireNonNull(constants$437.SelectObject$MH,"SelectObject");
    }
    public static MemoryAddress SelectObject ( Addressable hdc,  Addressable h) {
        var mh$ = SelectObject$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SelectPalette$MH() {
        return RuntimeHelper.requireNonNull(constants$437.SelectPalette$MH,"SelectPalette");
    }
    public static MemoryAddress SelectPalette ( Addressable hdc,  Addressable hPal,  int bForceBkgd) {
        var mh$ = SelectPalette$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, hPal, bForceBkgd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBkColor$MH() {
        return RuntimeHelper.requireNonNull(constants$437.SetBkColor$MH,"SetBkColor");
    }
    public static int SetBkColor ( Addressable hdc,  int color) {
        var mh$ = SetBkColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDCBrushColor$MH() {
        return RuntimeHelper.requireNonNull(constants$437.SetDCBrushColor$MH,"SetDCBrushColor");
    }
    public static int SetDCBrushColor ( Addressable hdc,  int color) {
        var mh$ = SetDCBrushColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDCPenColor$MH() {
        return RuntimeHelper.requireNonNull(constants$438.SetDCPenColor$MH,"SetDCPenColor");
    }
    public static int SetDCPenColor ( Addressable hdc,  int color) {
        var mh$ = SetDCPenColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBkMode$MH() {
        return RuntimeHelper.requireNonNull(constants$438.SetBkMode$MH,"SetBkMode");
    }
    public static int SetBkMode ( Addressable hdc,  int mode) {
        var mh$ = SetBkMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBitmapBits$MH() {
        return RuntimeHelper.requireNonNull(constants$438.SetBitmapBits$MH,"SetBitmapBits");
    }
    public static int SetBitmapBits ( Addressable hbm,  int cb,  Addressable pvBits) {
        var mh$ = SetBitmapBits$MH();
        try {
            return (int)mh$.invokeExact(hbm, cb, pvBits);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetBoundsRect$MH() {
        return RuntimeHelper.requireNonNull(constants$438.SetBoundsRect$MH,"SetBoundsRect");
    }
    public static int SetBoundsRect ( Addressable hdc,  Addressable lprect,  int flags) {
        var mh$ = SetBoundsRect$MH();
        try {
            return (int)mh$.invokeExact(hdc, lprect, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$438.SetDIBits$MH,"SetDIBits");
    }
    public static int SetDIBits ( Addressable hdc,  Addressable hbm,  int start,  int cLines,  Addressable lpBits,  Addressable lpbmi,  int ColorUse) {
        var mh$ = SetDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, hbm, start, cLines, lpBits, lpbmi, ColorUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBitsToDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$438.SetDIBitsToDevice$MH,"SetDIBitsToDevice");
    }
    public static int SetDIBitsToDevice ( Addressable hdc,  int xDest,  int yDest,  int w,  int h,  int xSrc,  int ySrc,  int StartScan,  int cLines,  Addressable lpvBits,  Addressable lpbmi,  int ColorUse) {
        var mh$ = SetDIBitsToDevice$MH();
        try {
            return (int)mh$.invokeExact(hdc, xDest, yDest, w, h, xSrc, ySrc, StartScan, cLines, lpvBits, lpbmi, ColorUse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMapperFlags$MH() {
        return RuntimeHelper.requireNonNull(constants$439.SetMapperFlags$MH,"SetMapperFlags");
    }
    public static int SetMapperFlags ( Addressable hdc,  int flags) {
        var mh$ = SetMapperFlags$MH();
        try {
            return (int)mh$.invokeExact(hdc, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetGraphicsMode$MH() {
        return RuntimeHelper.requireNonNull(constants$439.SetGraphicsMode$MH,"SetGraphicsMode");
    }
    public static int SetGraphicsMode ( Addressable hdc,  int iMode) {
        var mh$ = SetGraphicsMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMapMode$MH() {
        return RuntimeHelper.requireNonNull(constants$439.SetMapMode$MH,"SetMapMode");
    }
    public static int SetMapMode ( Addressable hdc,  int iMode) {
        var mh$ = SetMapMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, iMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$439.SetLayout$MH,"SetLayout");
    }
    public static int SetLayout ( Addressable hdc,  int l) {
        var mh$ = SetLayout$MH();
        try {
            return (int)mh$.invokeExact(hdc, l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$439.GetLayout$MH,"GetLayout");
    }
    public static int GetLayout ( Addressable hdc) {
        var mh$ = GetLayout$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetMetaFileBitsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$439.SetMetaFileBitsEx$MH,"SetMetaFileBitsEx");
    }
    public static MemoryAddress SetMetaFileBitsEx ( int cbBuffer,  Addressable lpData) {
        var mh$ = SetMetaFileBitsEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cbBuffer, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$440.SetPaletteEntries$MH,"SetPaletteEntries");
    }
    public static int SetPaletteEntries ( Addressable hpal,  int iStart,  int cEntries,  Addressable pPalEntries) {
        var mh$ = SetPaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hpal, iStart, cEntries, pPalEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixel$MH() {
        return RuntimeHelper.requireNonNull(constants$440.SetPixel$MH,"SetPixel");
    }
    public static int SetPixel ( Addressable hdc,  int x,  int y,  int color) {
        var mh$ = SetPixel$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixelV$MH() {
        return RuntimeHelper.requireNonNull(constants$440.SetPixelV$MH,"SetPixelV");
    }
    public static int SetPixelV ( Addressable hdc,  int x,  int y,  int color) {
        var mh$ = SetPixelV$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$440.SetPixelFormat$MH,"SetPixelFormat");
    }
    public static int SetPixelFormat ( Addressable hdc,  int format,  Addressable ppfd) {
        var mh$ = SetPixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hdc, format, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetPolyFillMode$MH() {
        return RuntimeHelper.requireNonNull(constants$440.SetPolyFillMode$MH,"SetPolyFillMode");
    }
    public static int SetPolyFillMode ( Addressable hdc,  int mode) {
        var mh$ = SetPolyFillMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StretchBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$440.StretchBlt$MH,"StretchBlt");
    }
    public static int StretchBlt ( Addressable hdcDest,  int xDest,  int yDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xSrc,  int ySrc,  int wSrc,  int hSrc,  int rop) {
        var mh$ = StretchBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xDest, yDest, wDest, hDest, hdcSrc, xSrc, ySrc, wSrc, hSrc, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetRectRgn$MH() {
        return RuntimeHelper.requireNonNull(constants$441.SetRectRgn$MH,"SetRectRgn");
    }
    public static int SetRectRgn ( Addressable hrgn,  int left,  int top,  int right,  int bottom) {
        var mh$ = SetRectRgn$MH();
        try {
            return (int)mh$.invokeExact(hrgn, left, top, right, bottom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StretchDIBits$MH() {
        return RuntimeHelper.requireNonNull(constants$441.StretchDIBits$MH,"StretchDIBits");
    }
    public static int StretchDIBits ( Addressable hdc,  int xDest,  int yDest,  int DestWidth,  int DestHeight,  int xSrc,  int ySrc,  int SrcWidth,  int SrcHeight,  Addressable lpBits,  Addressable lpbmi,  int iUsage,  int rop) {
        var mh$ = StretchDIBits$MH();
        try {
            return (int)mh$.invokeExact(hdc, xDest, yDest, DestWidth, DestHeight, xSrc, ySrc, SrcWidth, SrcHeight, lpBits, lpbmi, iUsage, rop);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetROP2$MH() {
        return RuntimeHelper.requireNonNull(constants$441.SetROP2$MH,"SetROP2");
    }
    public static int SetROP2 ( Addressable hdc,  int rop2) {
        var mh$ = SetROP2$MH();
        try {
            return (int)mh$.invokeExact(hdc, rop2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStretchBltMode$MH() {
        return RuntimeHelper.requireNonNull(constants$441.SetStretchBltMode$MH,"SetStretchBltMode");
    }
    public static int SetStretchBltMode ( Addressable hdc,  int mode) {
        var mh$ = SetStretchBltMode$MH();
        try {
            return (int)mh$.invokeExact(hdc, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetSystemPaletteUse$MH() {
        return RuntimeHelper.requireNonNull(constants$441.SetSystemPaletteUse$MH,"SetSystemPaletteUse");
    }
    public static int SetSystemPaletteUse ( Addressable hdc,  int use) {
        var mh$ = SetSystemPaletteUse$MH();
        try {
            return (int)mh$.invokeExact(hdc, use);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextCharacterExtra$MH() {
        return RuntimeHelper.requireNonNull(constants$441.SetTextCharacterExtra$MH,"SetTextCharacterExtra");
    }
    public static int SetTextCharacterExtra ( Addressable hdc,  int extra) {
        var mh$ = SetTextCharacterExtra$MH();
        try {
            return (int)mh$.invokeExact(hdc, extra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextColor$MH() {
        return RuntimeHelper.requireNonNull(constants$442.SetTextColor$MH,"SetTextColor");
    }
    public static int SetTextColor ( Addressable hdc,  int color) {
        var mh$ = SetTextColor$MH();
        try {
            return (int)mh$.invokeExact(hdc, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextAlign$MH() {
        return RuntimeHelper.requireNonNull(constants$442.SetTextAlign$MH,"SetTextAlign");
    }
    public static int SetTextAlign ( Addressable hdc,  int align) {
        var mh$ = SetTextAlign$MH();
        try {
            return (int)mh$.invokeExact(hdc, align);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetTextJustification$MH() {
        return RuntimeHelper.requireNonNull(constants$442.SetTextJustification$MH,"SetTextJustification");
    }
    public static int SetTextJustification ( Addressable hdc,  int extra,  int count) {
        var mh$ = SetTextJustification$MH();
        try {
            return (int)mh$.invokeExact(hdc, extra, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UpdateColors$MH() {
        return RuntimeHelper.requireNonNull(constants$442.UpdateColors$MH,"UpdateColors");
    }
    public static int UpdateColors ( Addressable hdc) {
        var mh$ = UpdateColors$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTRIVERTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTRIVERTEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGRADIENT_TRIANGLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGRADIENT_TRIANGLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGRADIENT_RECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGRADIENT_RECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBLENDFUNCTION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AlphaBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$442.AlphaBlend$MH,"AlphaBlend");
    }
    public static int AlphaBlend ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  MemorySegment ftn) {
        var mh$ = AlphaBlend$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, ftn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TransparentBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$442.TransparentBlt$MH,"TransparentBlt");
    }
    public static int TransparentBlt ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  int crTransparent) {
        var mh$ = TransparentBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GradientFill$MH() {
        return RuntimeHelper.requireNonNull(constants$443.GradientFill$MH,"GradientFill");
    }
    public static int GradientFill ( Addressable hdc,  Addressable pVertex,  int nVertex,  Addressable pMesh,  int nMesh,  int ulMode) {
        var mh$ = GradientFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, pVertex, nVertex, pMesh, nMesh, ulMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiAlphaBlend$MH() {
        return RuntimeHelper.requireNonNull(constants$443.GdiAlphaBlend$MH,"GdiAlphaBlend");
    }
    public static int GdiAlphaBlend ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  MemorySegment ftn) {
        var mh$ = GdiAlphaBlend$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, ftn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiTransparentBlt$MH() {
        return RuntimeHelper.requireNonNull(constants$443.GdiTransparentBlt$MH,"GdiTransparentBlt");
    }
    public static int GdiTransparentBlt ( Addressable hdcDest,  int xoriginDest,  int yoriginDest,  int wDest,  int hDest,  Addressable hdcSrc,  int xoriginSrc,  int yoriginSrc,  int wSrc,  int hSrc,  int crTransparent) {
        var mh$ = GdiTransparentBlt$MH();
        try {
            return (int)mh$.invokeExact(hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiGradientFill$MH() {
        return RuntimeHelper.requireNonNull(constants$443.GdiGradientFill$MH,"GdiGradientFill");
    }
    public static int GdiGradientFill ( Addressable hdc,  Addressable pVertex,  int nVertex,  Addressable pMesh,  int nCount,  int ulMode) {
        var mh$ = GdiGradientFill$MH();
        try {
            return (int)mh$.invokeExact(hdc, pVertex, nVertex, pMesh, nCount, ulMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayMetaFileRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$443.PlayMetaFileRecord$MH,"PlayMetaFileRecord");
    }
    public static int PlayMetaFileRecord ( Addressable hdc,  Addressable lpHandleTable,  Addressable lpMR,  int noObjs) {
        var mh$ = PlayMetaFileRecord$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpHandleTable, lpMR, noObjs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$444.EnumMetaFile$MH,"EnumMetaFile");
    }
    public static int EnumMetaFile ( Addressable hdc,  Addressable hmf,  Addressable proc,  long param) {
        var mh$ = EnumMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, proc, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$444.CloseEnhMetaFile$MH,"CloseEnhMetaFile");
    }
    public static MemoryAddress CloseEnhMetaFile ( Addressable hdc) {
        var mh$ = CloseEnhMetaFile$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$444.CopyEnhMetaFileA$MH,"CopyEnhMetaFileA");
    }
    public static MemoryAddress CopyEnhMetaFileA ( Addressable hEnh,  Addressable lpFileName) {
        var mh$ = CopyEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hEnh, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CopyEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$445.CopyEnhMetaFileW$MH,"CopyEnhMetaFileW");
    }
    public static MemoryAddress CopyEnhMetaFileW ( Addressable hEnh,  Addressable lpFileName) {
        var mh$ = CopyEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hEnh, lpFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$445.CreateEnhMetaFileA$MH,"CreateEnhMetaFileA");
    }
    public static MemoryAddress CreateEnhMetaFileA ( Addressable hdc,  Addressable lpFilename,  Addressable lprc,  Addressable lpDesc) {
        var mh$ = CreateEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpFilename, lprc, lpDesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$445.CreateEnhMetaFileW$MH,"CreateEnhMetaFileW");
    }
    public static MemoryAddress CreateEnhMetaFileW ( Addressable hdc,  Addressable lpFilename,  Addressable lprc,  Addressable lpDesc) {
        var mh$ = CreateEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, lpFilename, lprc, lpDesc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$445.DeleteEnhMetaFile$MH,"DeleteEnhMetaFile");
    }
    public static int DeleteEnhMetaFile ( Addressable hmf) {
        var mh$ = DeleteEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hmf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$445.EnumEnhMetaFile$MH,"EnumEnhMetaFile");
    }
    public static int EnumEnhMetaFile ( Addressable hdc,  Addressable hmf,  Addressable proc,  Addressable param,  Addressable lpRect) {
        var mh$ = EnumEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, proc, param, lpRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$445.GetEnhMetaFileA$MH,"GetEnhMetaFileA");
    }
    public static MemoryAddress GetEnhMetaFileA ( Addressable lpName) {
        var mh$ = GetEnhMetaFileA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$446.GetEnhMetaFileW$MH,"GetEnhMetaFileW");
    }
    public static MemoryAddress GetEnhMetaFileW ( Addressable lpName) {
        var mh$ = GetEnhMetaFileW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$446.GetEnhMetaFileBits$MH,"GetEnhMetaFileBits");
    }
    public static int GetEnhMetaFileBits ( Addressable hEMF,  int nSize,  Addressable lpData) {
        var mh$ = GetEnhMetaFileBits$MH();
        try {
            return (int)mh$.invokeExact(hEMF, nSize, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileDescriptionA$MH() {
        return RuntimeHelper.requireNonNull(constants$446.GetEnhMetaFileDescriptionA$MH,"GetEnhMetaFileDescriptionA");
    }
    public static int GetEnhMetaFileDescriptionA ( Addressable hemf,  int cchBuffer,  Addressable lpDescription) {
        var mh$ = GetEnhMetaFileDescriptionA$MH();
        try {
            return (int)mh$.invokeExact(hemf, cchBuffer, lpDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileDescriptionW$MH() {
        return RuntimeHelper.requireNonNull(constants$446.GetEnhMetaFileDescriptionW$MH,"GetEnhMetaFileDescriptionW");
    }
    public static int GetEnhMetaFileDescriptionW ( Addressable hemf,  int cchBuffer,  Addressable lpDescription) {
        var mh$ = GetEnhMetaFileDescriptionW$MH();
        try {
            return (int)mh$.invokeExact(hemf, cchBuffer, lpDescription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFileHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$446.GetEnhMetaFileHeader$MH,"GetEnhMetaFileHeader");
    }
    public static int GetEnhMetaFileHeader ( Addressable hemf,  int nSize,  Addressable lpEnhMetaHeader) {
        var mh$ = GetEnhMetaFileHeader$MH();
        try {
            return (int)mh$.invokeExact(hemf, nSize, lpEnhMetaHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFilePaletteEntries$MH() {
        return RuntimeHelper.requireNonNull(constants$446.GetEnhMetaFilePaletteEntries$MH,"GetEnhMetaFilePaletteEntries");
    }
    public static int GetEnhMetaFilePaletteEntries ( Addressable hemf,  int nNumEntries,  Addressable lpPaletteEntries) {
        var mh$ = GetEnhMetaFilePaletteEntries$MH();
        try {
            return (int)mh$.invokeExact(hemf, nNumEntries, lpPaletteEntries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEnhMetaFilePixelFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$447.GetEnhMetaFilePixelFormat$MH,"GetEnhMetaFilePixelFormat");
    }
    public static int GetEnhMetaFilePixelFormat ( Addressable hemf,  int cbBuffer,  Addressable ppfd) {
        var mh$ = GetEnhMetaFilePixelFormat$MH();
        try {
            return (int)mh$.invokeExact(hemf, cbBuffer, ppfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWinMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$447.GetWinMetaFileBits$MH,"GetWinMetaFileBits");
    }
    public static int GetWinMetaFileBits ( Addressable hemf,  int cbData16,  Addressable pData16,  int iMapMode,  Addressable hdcRef) {
        var mh$ = GetWinMetaFileBits$MH();
        try {
            return (int)mh$.invokeExact(hemf, cbData16, pData16, iMapMode, hdcRef);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayEnhMetaFile$MH() {
        return RuntimeHelper.requireNonNull(constants$447.PlayEnhMetaFile$MH,"PlayEnhMetaFile");
    }
    public static int PlayEnhMetaFile ( Addressable hdc,  Addressable hmf,  Addressable lprect) {
        var mh$ = PlayEnhMetaFile$MH();
        try {
            return (int)mh$.invokeExact(hdc, hmf, lprect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PlayEnhMetaFileRecord$MH() {
        return RuntimeHelper.requireNonNull(constants$447.PlayEnhMetaFileRecord$MH,"PlayEnhMetaFileRecord");
    }
    public static int PlayEnhMetaFileRecord ( Addressable hdc,  Addressable pht,  Addressable pmr,  int cht) {
        var mh$ = PlayEnhMetaFileRecord$MH();
        try {
            return (int)mh$.invokeExact(hdc, pht, pmr, cht);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnhMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$447.SetEnhMetaFileBits$MH,"SetEnhMetaFileBits");
    }
    public static MemoryAddress SetEnhMetaFileBits ( int nSize,  Addressable pb) {
        var mh$ = SetEnhMetaFileBits$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nSize, pb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWinMetaFileBits$MH() {
        return RuntimeHelper.requireNonNull(constants$447.SetWinMetaFileBits$MH,"SetWinMetaFileBits");
    }
    public static MemoryAddress SetWinMetaFileBits ( int nSize,  Addressable lpMeta16Data,  Addressable hdcRef,  Addressable lpMFP) {
        var mh$ = SetWinMetaFileBits$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(nSize, lpMeta16Data, hdcRef, lpMFP);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GdiComment$MH() {
        return RuntimeHelper.requireNonNull(constants$448.GdiComment$MH,"GdiComment");
    }
    public static int GdiComment ( Addressable hdc,  int nSize,  Addressable lpData) {
        var mh$ = GdiComment$MH();
        try {
            return (int)mh$.invokeExact(hdc, nSize, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextMetricsA$MH() {
        return RuntimeHelper.requireNonNull(constants$448.GetTextMetricsA$MH,"GetTextMetricsA");
    }
    public static int GetTextMetricsA ( Addressable hdc,  Addressable lptm) {
        var mh$ = GetTextMetricsA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lptm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTextMetricsW$MH() {
        return RuntimeHelper.requireNonNull(constants$448.GetTextMetricsW$MH,"GetTextMetricsW");
    }
    public static int GetTextMetricsW ( Addressable hdc,  Addressable lptm) {
        var mh$ = GetTextMetricsW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lptm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDIBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDIBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AngleArc$MH() {
        return RuntimeHelper.requireNonNull(constants$448.AngleArc$MH,"AngleArc");
    }
    public static int AngleArc ( Addressable hdc,  int x,  int y,  int r,  float StartAngle,  float SweepAngle) {
        var mh$ = AngleArc$MH();
        try {
            return (int)mh$.invokeExact(hdc, x, y, r, StartAngle, SweepAngle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PolyPolyline$MH() {
        return RuntimeHelper.requireNonNull(constants$448.PolyPolyline$MH,"PolyPolyline");
    }
    public static int PolyPolyline ( Addressable hdc,  Addressable apt,  Addressable asz,  int csz) {
        var mh$ = PolyPolyline$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, asz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$448.GetWorldTransform$MH,"GetWorldTransform");
    }
    public static int GetWorldTransform ( Addressable hdc,  Addressable lpxf) {
        var mh$ = GetWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$449.SetWorldTransform$MH,"SetWorldTransform");
    }
    public static int SetWorldTransform ( Addressable hdc,  Addressable lpxf) {
        var mh$ = SetWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ModifyWorldTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$449.ModifyWorldTransform$MH,"ModifyWorldTransform");
    }
    public static int ModifyWorldTransform ( Addressable hdc,  Addressable lpxf,  int mode) {
        var mh$ = ModifyWorldTransform$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpxf, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CombineTransform$MH() {
        return RuntimeHelper.requireNonNull(constants$449.CombineTransform$MH,"CombineTransform");
    }
    public static int CombineTransform ( Addressable lpxfOut,  Addressable lpxf1,  Addressable lpxf2) {
        var mh$ = CombineTransform$MH();
        try {
            return (int)mh$.invokeExact(lpxfOut, lpxf1, lpxf2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateDIBSection$MH() {
        return RuntimeHelper.requireNonNull(constants$449.CreateDIBSection$MH,"CreateDIBSection");
    }
    public static MemoryAddress CreateDIBSection ( Addressable hdc,  Addressable pbmi,  int usage,  Addressable ppvBits,  Addressable hSection,  int offset) {
        var mh$ = CreateDIBSection$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc, pbmi, usage, ppvBits, hSection, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDIBColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$449.GetDIBColorTable$MH,"GetDIBColorTable");
    }
    public static int GetDIBColorTable ( Addressable hdc,  int iStart,  int cEntries,  Addressable prgbq) {
        var mh$ = GetDIBColorTable$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, prgbq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDIBColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$449.SetDIBColorTable$MH,"SetDIBColorTable");
    }
    public static int SetDIBColorTable ( Addressable hdc,  int iStart,  int cEntries,  Addressable prgbq) {
        var mh$ = SetDIBColorTable$MH();
        try {
            return (int)mh$.invokeExact(hdc, iStart, cEntries, prgbq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCOLORADJUSTMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOLORADJUSTMENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetColorAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$450.SetColorAdjustment$MH,"SetColorAdjustment");
    }
    public static int SetColorAdjustment ( Addressable hdc,  Addressable lpca) {
        var mh$ = SetColorAdjustment$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetColorAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$450.GetColorAdjustment$MH,"GetColorAdjustment");
    }
    public static int GetColorAdjustment ( Addressable hdc,  Addressable lpca) {
        var mh$ = GetColorAdjustment$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpca);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateHalftonePalette$MH() {
        return RuntimeHelper.requireNonNull(constants$450.CreateHalftonePalette$MH,"CreateHalftonePalette");
    }
    public static MemoryAddress CreateHalftonePalette ( Addressable hdc) {
        var mh$ = CreateHalftonePalette$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDOCINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOCINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDOCINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle StartDocA$MH() {
        return RuntimeHelper.requireNonNull(constants$450.StartDocA$MH,"StartDocA");
    }
    public static int StartDocA ( Addressable hdc,  Addressable lpdi) {
        var mh$ = StartDocA$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpdi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartDocW$MH() {
        return RuntimeHelper.requireNonNull(constants$451.StartDocW$MH,"StartDocW");
    }
    public static int StartDocW ( Addressable hdc,  Addressable lpdi) {
        var mh$ = StartDocW$MH();
        try {
            return (int)mh$.invokeExact(hdc, lpdi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndDoc$MH() {
        return RuntimeHelper.requireNonNull(constants$451.EndDoc$MH,"EndDoc");
    }
    public static int EndDoc ( Addressable hdc) {
        var mh$ = EndDoc$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartPage$MH() {
        return RuntimeHelper.requireNonNull(constants$451.StartPage$MH,"StartPage");
    }
    public static int StartPage ( Addressable hdc) {
        var mh$ = StartPage$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPage$MH() {
        return RuntimeHelper.requireNonNull(constants$451.EndPage$MH,"EndPage");
    }
    public static int EndPage ( Addressable hdc) {
        var mh$ = EndPage$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortDoc$MH() {
        return RuntimeHelper.requireNonNull(constants$451.AbortDoc$MH,"AbortDoc");
    }
    public static int AbortDoc ( Addressable hdc) {
        var mh$ = AbortDoc$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetAbortProc$MH() {
        return RuntimeHelper.requireNonNull(constants$451.SetAbortProc$MH,"SetAbortProc");
    }
    public static int SetAbortProc ( Addressable hdc,  Addressable proc) {
        var mh$ = SetAbortProc$MH();
        try {
            return (int)mh$.invokeExact(hdc, proc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortPath$MH() {
        return RuntimeHelper.requireNonNull(constants$452.AbortPath$MH,"AbortPath");
    }
    public static int AbortPath ( Addressable hdc) {
        var mh$ = AbortPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ArcTo$MH() {
        return RuntimeHelper.requireNonNull(constants$452.ArcTo$MH,"ArcTo");
    }
    public static int ArcTo ( Addressable hdc,  int left,  int top,  int right,  int bottom,  int xr1,  int yr1,  int xr2,  int yr2) {
        var mh$ = ArcTo$MH();
        try {
            return (int)mh$.invokeExact(hdc, left, top, right, bottom, xr1, yr1, xr2, yr2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BeginPath$MH() {
        return RuntimeHelper.requireNonNull(constants$452.BeginPath$MH,"BeginPath");
    }
    public static int BeginPath ( Addressable hdc) {
        var mh$ = BeginPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseFigure$MH() {
        return RuntimeHelper.requireNonNull(constants$452.CloseFigure$MH,"CloseFigure");
    }
    public static int CloseFigure ( Addressable hdc) {
        var mh$ = CloseFigure$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EndPath$MH() {
        return RuntimeHelper.requireNonNull(constants$452.EndPath$MH,"EndPath");
    }
    public static int EndPath ( Addressable hdc) {
        var mh$ = EndPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillPath$MH() {
        return RuntimeHelper.requireNonNull(constants$452.FillPath$MH,"FillPath");
    }
    public static int FillPath ( Addressable hdc) {
        var mh$ = FillPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlattenPath$MH() {
        return RuntimeHelper.requireNonNull(constants$453.FlattenPath$MH,"FlattenPath");
    }
    public static int FlattenPath ( Addressable hdc) {
        var mh$ = FlattenPath$MH();
        try {
            return (int)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPath$MH() {
        return RuntimeHelper.requireNonNull(constants$453.GetPath$MH,"GetPath");
    }
    public static int GetPath ( Addressable hdc,  Addressable apt,  Addressable aj,  int cpt) {
        var mh$ = GetPath$MH();
        try {
            return (int)mh$.invokeExact(hdc, apt, aj, cpt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PathToRegion$MH() {
        return RuntimeHelper.requireNonNull(constants$453.PathToRegion$MH,"PathToRegion");
    }
    public static MemoryAddress PathToRegion ( Addressable hdc) {
        var mh$ = PathToRegion$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hdc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


