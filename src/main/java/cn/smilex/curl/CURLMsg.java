// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class CURLMsg {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("msg"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("easy_handle"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("whatever"),
            Constants$root.C_LONG$LAYOUT.withName("result")
        ).withName("data")
    ).withName("CURLMsg");
    public static MemoryLayout $LAYOUT() {
        return CURLMsg.$struct$LAYOUT;
    }
    static final VarHandle msg$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("msg"));
    public static VarHandle msg$VH() {
        return CURLMsg.msg$VH;
    }
    public static int msg$get(MemorySegment seg) {
        return (int)CURLMsg.msg$VH.get(seg);
    }
    public static void msg$set( MemorySegment seg, int x) {
        CURLMsg.msg$VH.set(seg, x);
    }
    public static int msg$get(MemorySegment seg, long index) {
        return (int)CURLMsg.msg$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void msg$set(MemorySegment seg, long index, int x) {
        CURLMsg.msg$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle easy_handle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("easy_handle"));
    public static VarHandle easy_handle$VH() {
        return CURLMsg.easy_handle$VH;
    }
    public static MemoryAddress easy_handle$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)CURLMsg.easy_handle$VH.get(seg);
    }
    public static void easy_handle$set( MemorySegment seg, MemoryAddress x) {
        CURLMsg.easy_handle$VH.set(seg, x);
    }
    public static MemoryAddress easy_handle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)CURLMsg.easy_handle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void easy_handle$set(MemorySegment seg, long index, MemoryAddress x) {
        CURLMsg.easy_handle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class data {

        static final  GroupLayout data$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("whatever"),
            Constants$root.C_LONG$LAYOUT.withName("result")
        );
        public static MemoryLayout $LAYOUT() {
            return data.data$union$LAYOUT;
        }
        static final VarHandle whatever$VH = data$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("whatever"));
        public static VarHandle whatever$VH() {
            return data.whatever$VH;
        }
        public static MemoryAddress whatever$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)data.whatever$VH.get(seg);
        }
        public static void whatever$set( MemorySegment seg, MemoryAddress x) {
            data.whatever$VH.set(seg, x);
        }
        public static MemoryAddress whatever$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)data.whatever$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void whatever$set(MemorySegment seg, long index, MemoryAddress x) {
            data.whatever$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle result$VH = data$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("result"));
        public static VarHandle result$VH() {
            return data.result$VH;
        }
        public static int result$get(MemorySegment seg) {
            return (int)data.result$VH.get(seg);
        }
        public static void result$set( MemorySegment seg, int x) {
            data.result$VH.set(seg, x);
        }
        public static int result$get(MemorySegment seg, long index) {
            return (int)data.result$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void result$set(MemorySegment seg, long index, int x) {
            data.result$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


