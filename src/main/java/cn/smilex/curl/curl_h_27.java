// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class curl_h_27 extends curl_h_26 {

    public static int CURLOPT_DOH_SSL_VERIFYHOST() {
        return (int)307L;
    }
    public static int CURLOPT_DOH_SSL_VERIFYSTATUS() {
        return (int)308L;
    }
    public static int CURLOPT_CAINFO_BLOB() {
        return (int)40309L;
    }
    public static int CURLOPT_PROXY_CAINFO_BLOB() {
        return (int)40310L;
    }
    public static int CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256() {
        return (int)10311L;
    }
    public static int CURLOPT_PREREQFUNCTION() {
        return (int)20312L;
    }
    public static int CURLOPT_PREREQDATA() {
        return (int)10313L;
    }
    public static int CURLOPT_MAXLIFETIME_CONN() {
        return (int)314L;
    }
    public static int CURLOPT_MIME_OPTIONS() {
        return (int)315L;
    }
    public static int CURLOPT_SSH_HOSTKEYFUNCTION() {
        return (int)20316L;
    }
    public static int CURLOPT_SSH_HOSTKEYDATA() {
        return (int)10317L;
    }
    public static int CURLOPT_PROTOCOLS_STR() {
        return (int)10318L;
    }
    public static int CURLOPT_REDIR_PROTOCOLS_STR() {
        return (int)10319L;
    }
    public static int CURLOPT_WS_OPTIONS() {
        return (int)320L;
    }
    public static int CURLOPT_LASTENTRY() {
        return (int)321L;
    }
    public static int CURL_HTTP_VERSION_NONE() {
        return (int)0L;
    }
    public static int CURL_HTTP_VERSION_1_0() {
        return (int)1L;
    }
    public static int CURL_HTTP_VERSION_1_1() {
        return (int)2L;
    }
    public static int CURL_HTTP_VERSION_2_0() {
        return (int)3L;
    }
    public static int CURL_HTTP_VERSION_2TLS() {
        return (int)4L;
    }
    public static int CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE() {
        return (int)5L;
    }
    public static int CURL_HTTP_VERSION_3() {
        return (int)30L;
    }
    public static int CURL_HTTP_VERSION_LAST() {
        return (int)31L;
    }
    public static int CURL_RTSPREQ_NONE() {
        return (int)0L;
    }
    public static int CURL_RTSPREQ_OPTIONS() {
        return (int)1L;
    }
    public static int CURL_RTSPREQ_DESCRIBE() {
        return (int)2L;
    }
    public static int CURL_RTSPREQ_ANNOUNCE() {
        return (int)3L;
    }
    public static int CURL_RTSPREQ_SETUP() {
        return (int)4L;
    }
    public static int CURL_RTSPREQ_PLAY() {
        return (int)5L;
    }
    public static int CURL_RTSPREQ_PAUSE() {
        return (int)6L;
    }
    public static int CURL_RTSPREQ_TEARDOWN() {
        return (int)7L;
    }
    public static int CURL_RTSPREQ_GET_PARAMETER() {
        return (int)8L;
    }
    public static int CURL_RTSPREQ_SET_PARAMETER() {
        return (int)9L;
    }
    public static int CURL_RTSPREQ_RECORD() {
        return (int)10L;
    }
    public static int CURL_RTSPREQ_RECEIVE() {
        return (int)11L;
    }
    public static int CURL_RTSPREQ_LAST() {
        return (int)12L;
    }
    public static int CURL_NETRC_IGNORED() {
        return (int)0L;
    }
    public static int CURL_NETRC_OPTIONAL() {
        return (int)1L;
    }
    public static int CURL_NETRC_REQUIRED() {
        return (int)2L;
    }
    public static int CURL_NETRC_LAST() {
        return (int)3L;
    }
    public static int CURL_SSLVERSION_DEFAULT() {
        return (int)0L;
    }
    public static int CURL_SSLVERSION_TLSv1() {
        return (int)1L;
    }
    public static int CURL_SSLVERSION_SSLv2() {
        return (int)2L;
    }
    public static int CURL_SSLVERSION_SSLv3() {
        return (int)3L;
    }
    public static int CURL_SSLVERSION_TLSv1_0() {
        return (int)4L;
    }
    public static int CURL_SSLVERSION_TLSv1_1() {
        return (int)5L;
    }
    public static int CURL_SSLVERSION_TLSv1_2() {
        return (int)6L;
    }
    public static int CURL_SSLVERSION_TLSv1_3() {
        return (int)7L;
    }
    public static int CURL_SSLVERSION_LAST() {
        return (int)8L;
    }
    public static int CURL_SSLVERSION_MAX_NONE() {
        return (int)0L;
    }
    public static int CURL_SSLVERSION_MAX_DEFAULT() {
        return (int)65536L;
    }
    public static int CURL_SSLVERSION_MAX_TLSv1_0() {
        return (int)262144L;
    }
    public static int CURL_SSLVERSION_MAX_TLSv1_1() {
        return (int)327680L;
    }
    public static int CURL_SSLVERSION_MAX_TLSv1_2() {
        return (int)393216L;
    }
    public static int CURL_SSLVERSION_MAX_TLSv1_3() {
        return (int)458752L;
    }
    public static int CURL_SSLVERSION_MAX_LAST() {
        return (int)524288L;
    }
    public static int CURL_TLSAUTH_NONE() {
        return (int)0L;
    }
    public static int CURL_TLSAUTH_SRP() {
        return (int)1L;
    }
    public static int CURL_TLSAUTH_LAST() {
        return (int)2L;
    }
    public static int CURL_TIMECOND_NONE() {
        return (int)0L;
    }
    public static int CURL_TIMECOND_IFMODSINCE() {
        return (int)1L;
    }
    public static int CURL_TIMECOND_IFUNMODSINCE() {
        return (int)2L;
    }
    public static int CURL_TIMECOND_LASTMOD() {
        return (int)3L;
    }
    public static int CURL_TIMECOND_LAST() {
        return (int)4L;
    }
    public static MethodHandle curl_strequal$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.curl_strequal$MH,"curl_strequal");
    }
    public static int curl_strequal ( Addressable s1,  Addressable s2) {
        var mh$ = curl_strequal$MH();
        try {
            return (int)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_strnequal$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.curl_strnequal$MH,"curl_strnequal");
    }
    public static int curl_strnequal ( Addressable s1,  Addressable s2,  long n) {
        var mh$ = curl_strnequal$MH();
        try {
            return (int)mh$.invokeExact(s1, s2, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.curl_mime_init$MH,"curl_mime_init");
    }
    public static MemoryAddress curl_mime_init ( Addressable easy) {
        var mh$ = curl_mime_init$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(easy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1390.curl_mime_free$MH,"curl_mime_free");
    }
    public static void curl_mime_free ( Addressable mime) {
        var mh$ = curl_mime_free$MH();
        try {
            mh$.invokeExact(mime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_addpart$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.curl_mime_addpart$MH,"curl_mime_addpart");
    }
    public static MemoryAddress curl_mime_addpart ( Addressable mime) {
        var mh$ = curl_mime_addpart$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.curl_mime_name$MH,"curl_mime_name");
    }
    public static int curl_mime_name ( Addressable part,  Addressable name) {
        var mh$ = curl_mime_name$MH();
        try {
            return (int)mh$.invokeExact(part, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.curl_mime_filename$MH,"curl_mime_filename");
    }
    public static int curl_mime_filename ( Addressable part,  Addressable filename) {
        var mh$ = curl_mime_filename$MH();
        try {
            return (int)mh$.invokeExact(part, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.curl_mime_type$MH,"curl_mime_type");
    }
    public static int curl_mime_type ( Addressable part,  Addressable mimetype) {
        var mh$ = curl_mime_type$MH();
        try {
            return (int)mh$.invokeExact(part, mimetype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_encoder$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.curl_mime_encoder$MH,"curl_mime_encoder");
    }
    public static int curl_mime_encoder ( Addressable part,  Addressable encoding) {
        var mh$ = curl_mime_encoder$MH();
        try {
            return (int)mh$.invokeExact(part, encoding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_data$MH() {
        return RuntimeHelper.requireNonNull(constants$1391.curl_mime_data$MH,"curl_mime_data");
    }
    public static int curl_mime_data ( Addressable part,  Addressable data,  long datasize) {
        var mh$ = curl_mime_data$MH();
        try {
            return (int)mh$.invokeExact(part, data, datasize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_filedata$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.curl_mime_filedata$MH,"curl_mime_filedata");
    }
    public static int curl_mime_filedata ( Addressable part,  Addressable filename) {
        var mh$ = curl_mime_filedata$MH();
        try {
            return (int)mh$.invokeExact(part, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_data_cb$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.curl_mime_data_cb$MH,"curl_mime_data_cb");
    }
    public static int curl_mime_data_cb ( Addressable part,  long datasize,  Addressable readfunc,  Addressable seekfunc,  Addressable freefunc,  Addressable arg) {
        var mh$ = curl_mime_data_cb$MH();
        try {
            return (int)mh$.invokeExact(part, datasize, readfunc, seekfunc, freefunc, arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_subparts$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.curl_mime_subparts$MH,"curl_mime_subparts");
    }
    public static int curl_mime_subparts ( Addressable part,  Addressable subparts) {
        var mh$ = curl_mime_subparts$MH();
        try {
            return (int)mh$.invokeExact(part, subparts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_mime_headers$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.curl_mime_headers$MH,"curl_mime_headers");
    }
    public static int curl_mime_headers ( Addressable part,  Addressable headers,  int take_ownership) {
        var mh$ = curl_mime_headers$MH();
        try {
            return (int)mh$.invokeExact(part, headers, take_ownership);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CURLFORM_NOTHING() {
        return (int)0L;
    }
    public static int CURLFORM_COPYNAME() {
        return (int)1L;
    }
    public static int CURLFORM_PTRNAME() {
        return (int)2L;
    }
    public static int CURLFORM_NAMELENGTH() {
        return (int)3L;
    }
    public static int CURLFORM_COPYCONTENTS() {
        return (int)4L;
    }
    public static int CURLFORM_PTRCONTENTS() {
        return (int)5L;
    }
    public static int CURLFORM_CONTENTSLENGTH() {
        return (int)6L;
    }
    public static int CURLFORM_FILECONTENT() {
        return (int)7L;
    }
    public static int CURLFORM_ARRAY() {
        return (int)8L;
    }
    public static int CURLFORM_OBSOLETE() {
        return (int)9L;
    }
    public static int CURLFORM_FILE() {
        return (int)10L;
    }
    public static int CURLFORM_BUFFER() {
        return (int)11L;
    }
    public static int CURLFORM_BUFFERPTR() {
        return (int)12L;
    }
    public static int CURLFORM_BUFFERLENGTH() {
        return (int)13L;
    }
    public static int CURLFORM_CONTENTTYPE() {
        return (int)14L;
    }
    public static int CURLFORM_CONTENTHEADER() {
        return (int)15L;
    }
    public static int CURLFORM_FILENAME() {
        return (int)16L;
    }
    public static int CURLFORM_END() {
        return (int)17L;
    }
    public static int CURLFORM_OBSOLETE2() {
        return (int)18L;
    }
    public static int CURLFORM_STREAM() {
        return (int)19L;
    }
    public static int CURLFORM_CONTENTLEN() {
        return (int)20L;
    }
    public static int CURLFORM_LASTENTRY() {
        return (int)21L;
    }
    public static int CURL_FORMADD_OK() {
        return (int)0L;
    }
    public static int CURL_FORMADD_MEMORY() {
        return (int)1L;
    }
    public static int CURL_FORMADD_OPTION_TWICE() {
        return (int)2L;
    }
    public static int CURL_FORMADD_NULL() {
        return (int)3L;
    }
    public static int CURL_FORMADD_UNKNOWN_OPTION() {
        return (int)4L;
    }
    public static int CURL_FORMADD_INCOMPLETE() {
        return (int)5L;
    }
    public static int CURL_FORMADD_ILLEGAL_ARRAY() {
        return (int)6L;
    }
    public static int CURL_FORMADD_DISABLED() {
        return (int)7L;
    }
    public static int CURL_FORMADD_LAST() {
        return (int)8L;
    }
    public static MethodHandle curl_formadd$MH() {
        return RuntimeHelper.requireNonNull(constants$1392.curl_formadd$MH,"curl_formadd");
    }
    public static int curl_formadd ( Addressable httppost,  Addressable last_post, Object... x2) {
        var mh$ = curl_formadd$MH();
        try {
            return (int)mh$.invokeExact(httppost, last_post, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_formget$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.curl_formget$MH,"curl_formget");
    }
    public static int curl_formget ( Addressable form,  Addressable arg,  Addressable append) {
        var mh$ = curl_formget$MH();
        try {
            return (int)mh$.invokeExact(form, arg, append);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_formfree$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.curl_formfree$MH,"curl_formfree");
    }
    public static void curl_formfree ( Addressable form) {
        var mh$ = curl_formfree$MH();
        try {
            mh$.invokeExact(form);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.curl_getenv$MH,"curl_getenv");
    }
    public static MemoryAddress curl_getenv ( Addressable variable) {
        var mh$ = curl_getenv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(variable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.curl_version$MH,"curl_version");
    }
    public static MemoryAddress curl_version () {
        var mh$ = curl_version$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_escape$MH() {
        return RuntimeHelper.requireNonNull(constants$1393.curl_easy_escape$MH,"curl_easy_escape");
    }
    public static MemoryAddress curl_easy_escape ( Addressable handle,  Addressable string,  int length) {
        var mh$ = curl_easy_escape$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(handle, string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_escape$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.curl_escape$MH,"curl_escape");
    }
    public static MemoryAddress curl_escape ( Addressable string,  int length) {
        var mh$ = curl_escape$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_unescape$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.curl_easy_unescape$MH,"curl_easy_unescape");
    }
    public static MemoryAddress curl_easy_unescape ( Addressable handle,  Addressable string,  int length,  Addressable outlength) {
        var mh$ = curl_easy_unescape$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(handle, string, length, outlength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_unescape$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.curl_unescape$MH,"curl_unescape");
    }
    public static MemoryAddress curl_unescape ( Addressable string,  int length) {
        var mh$ = curl_unescape$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.curl_free$MH,"curl_free");
    }
    public static void curl_free ( Addressable p) {
        var mh$ = curl_free$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_global_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.curl_global_init$MH,"curl_global_init");
    }
    public static int curl_global_init ( int flags) {
        var mh$ = curl_global_init$MH();
        try {
            return (int)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_global_init_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$1394.curl_global_init_mem$MH,"curl_global_init_mem");
    }
    public static int curl_global_init_mem ( int flags,  Addressable m,  Addressable f,  Addressable r,  Addressable s,  Addressable c) {
        var mh$ = curl_global_init_mem$MH();
        try {
            return (int)mh$.invokeExact(flags, m, f, r, s, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_global_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.curl_global_cleanup$MH,"curl_global_cleanup");
    }
    public static void curl_global_cleanup () {
        var mh$ = curl_global_cleanup$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CURLSSLSET_OK() {
        return (int)0L;
    }
    public static int CURLSSLSET_UNKNOWN_BACKEND() {
        return (int)1L;
    }
    public static int CURLSSLSET_TOO_LATE() {
        return (int)2L;
    }
    public static int CURLSSLSET_NO_BACKENDS() {
        return (int)3L;
    }
    public static MethodHandle curl_global_sslset$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.curl_global_sslset$MH,"curl_global_sslset");
    }
    public static int curl_global_sslset ( int id,  Addressable name,  Addressable avail) {
        var mh$ = curl_global_sslset$MH();
        try {
            return (int)mh$.invokeExact(id, name, avail);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_slist_append$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.curl_slist_append$MH,"curl_slist_append");
    }
    public static MemoryAddress curl_slist_append ( Addressable x0,  Addressable x1) {
        var mh$ = curl_slist_append$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_slist_free_all$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.curl_slist_free_all$MH,"curl_slist_free_all");
    }
    public static void curl_slist_free_all ( Addressable x0) {
        var mh$ = curl_slist_free_all$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_getdate$MH() {
        return RuntimeHelper.requireNonNull(constants$1395.curl_getdate$MH,"curl_getdate");
    }
    public static long curl_getdate ( Addressable p,  Addressable unused) {
        var mh$ = curl_getdate$MH();
        try {
            return (long)mh$.invokeExact(p, unused);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CURLINFO_NONE() {
        return (int)0L;
    }
    public static int CURLINFO_EFFECTIVE_URL() {
        return (int)1048577L;
    }
    public static int CURLINFO_RESPONSE_CODE() {
        return (int)2097154L;
    }
    public static int CURLINFO_TOTAL_TIME() {
        return (int)3145731L;
    }
    public static int CURLINFO_NAMELOOKUP_TIME() {
        return (int)3145732L;
    }
    public static int CURLINFO_CONNECT_TIME() {
        return (int)3145733L;
    }
    public static int CURLINFO_PRETRANSFER_TIME() {
        return (int)3145734L;
    }
    public static int CURLINFO_SIZE_UPLOAD() {
        return (int)3145735L;
    }
    public static int CURLINFO_SIZE_UPLOAD_T() {
        return (int)6291463L;
    }
    public static int CURLINFO_SIZE_DOWNLOAD() {
        return (int)3145736L;
    }
    public static int CURLINFO_SIZE_DOWNLOAD_T() {
        return (int)6291464L;
    }
    public static int CURLINFO_SPEED_DOWNLOAD() {
        return (int)3145737L;
    }
    public static int CURLINFO_SPEED_DOWNLOAD_T() {
        return (int)6291465L;
    }
    public static int CURLINFO_SPEED_UPLOAD() {
        return (int)3145738L;
    }
    public static int CURLINFO_SPEED_UPLOAD_T() {
        return (int)6291466L;
    }
    public static int CURLINFO_HEADER_SIZE() {
        return (int)2097163L;
    }
    public static int CURLINFO_REQUEST_SIZE() {
        return (int)2097164L;
    }
    public static int CURLINFO_SSL_VERIFYRESULT() {
        return (int)2097165L;
    }
    public static int CURLINFO_FILETIME() {
        return (int)2097166L;
    }
    public static int CURLINFO_FILETIME_T() {
        return (int)6291470L;
    }
    public static int CURLINFO_CONTENT_LENGTH_DOWNLOAD() {
        return (int)3145743L;
    }
    public static int CURLINFO_CONTENT_LENGTH_DOWNLOAD_T() {
        return (int)6291471L;
    }
    public static int CURLINFO_CONTENT_LENGTH_UPLOAD() {
        return (int)3145744L;
    }
    public static int CURLINFO_CONTENT_LENGTH_UPLOAD_T() {
        return (int)6291472L;
    }
    public static int CURLINFO_STARTTRANSFER_TIME() {
        return (int)3145745L;
    }
    public static int CURLINFO_CONTENT_TYPE() {
        return (int)1048594L;
    }
    public static int CURLINFO_REDIRECT_TIME() {
        return (int)3145747L;
    }
    public static int CURLINFO_REDIRECT_COUNT() {
        return (int)2097172L;
    }
    public static int CURLINFO_PRIVATE() {
        return (int)1048597L;
    }
    public static int CURLINFO_HTTP_CONNECTCODE() {
        return (int)2097174L;
    }
    public static int CURLINFO_HTTPAUTH_AVAIL() {
        return (int)2097175L;
    }
    public static int CURLINFO_PROXYAUTH_AVAIL() {
        return (int)2097176L;
    }
    public static int CURLINFO_OS_ERRNO() {
        return (int)2097177L;
    }
    public static int CURLINFO_NUM_CONNECTS() {
        return (int)2097178L;
    }
    public static int CURLINFO_SSL_ENGINES() {
        return (int)4194331L;
    }
    public static int CURLINFO_COOKIELIST() {
        return (int)4194332L;
    }
    public static int CURLINFO_LASTSOCKET() {
        return (int)2097181L;
    }
    public static int CURLINFO_FTP_ENTRY_PATH() {
        return (int)1048606L;
    }
    public static int CURLINFO_REDIRECT_URL() {
        return (int)1048607L;
    }
    public static int CURLINFO_PRIMARY_IP() {
        return (int)1048608L;
    }
    public static int CURLINFO_APPCONNECT_TIME() {
        return (int)3145761L;
    }
    public static int CURLINFO_CERTINFO() {
        return (int)4194338L;
    }
    public static int CURLINFO_CONDITION_UNMET() {
        return (int)2097187L;
    }
    public static int CURLINFO_RTSP_SESSION_ID() {
        return (int)1048612L;
    }
    public static int CURLINFO_RTSP_CLIENT_CSEQ() {
        return (int)2097189L;
    }
    public static int CURLINFO_RTSP_SERVER_CSEQ() {
        return (int)2097190L;
    }
    public static int CURLINFO_RTSP_CSEQ_RECV() {
        return (int)2097191L;
    }
    public static int CURLINFO_PRIMARY_PORT() {
        return (int)2097192L;
    }
    public static int CURLINFO_LOCAL_IP() {
        return (int)1048617L;
    }
    public static int CURLINFO_LOCAL_PORT() {
        return (int)2097194L;
    }
    public static int CURLINFO_TLS_SESSION() {
        return (int)4194347L;
    }
    public static int CURLINFO_ACTIVESOCKET() {
        return (int)5242924L;
    }
    public static int CURLINFO_TLS_SSL_PTR() {
        return (int)4194349L;
    }
    public static int CURLINFO_HTTP_VERSION() {
        return (int)2097198L;
    }
    public static int CURLINFO_PROXY_SSL_VERIFYRESULT() {
        return (int)2097199L;
    }
    public static int CURLINFO_PROTOCOL() {
        return (int)2097200L;
    }
    public static int CURLINFO_SCHEME() {
        return (int)1048625L;
    }
    public static int CURLINFO_TOTAL_TIME_T() {
        return (int)6291506L;
    }
    public static int CURLINFO_NAMELOOKUP_TIME_T() {
        return (int)6291507L;
    }
    public static int CURLINFO_CONNECT_TIME_T() {
        return (int)6291508L;
    }
    public static int CURLINFO_PRETRANSFER_TIME_T() {
        return (int)6291509L;
    }
    public static int CURLINFO_STARTTRANSFER_TIME_T() {
        return (int)6291510L;
    }
    public static int CURLINFO_REDIRECT_TIME_T() {
        return (int)6291511L;
    }
    public static int CURLINFO_APPCONNECT_TIME_T() {
        return (int)6291512L;
    }
    public static int CURLINFO_RETRY_AFTER() {
        return (int)6291513L;
    }
    public static int CURLINFO_EFFECTIVE_METHOD() {
        return (int)1048634L;
    }
    public static int CURLINFO_PROXY_ERROR() {
        return (int)2097211L;
    }
    public static int CURLINFO_REFERER() {
        return (int)1048636L;
    }
    public static int CURLINFO_CAINFO() {
        return (int)1048637L;
    }
    public static int CURLINFO_CAPATH() {
        return (int)1048638L;
    }
    public static int CURLINFO_LASTONE() {
        return (int)62L;
    }
    public static int CURLCLOSEPOLICY_NONE() {
        return (int)0L;
    }
    public static int CURLCLOSEPOLICY_OLDEST() {
        return (int)1L;
    }
    public static int CURLCLOSEPOLICY_LEAST_RECENTLY_USED() {
        return (int)2L;
    }
    public static int CURLCLOSEPOLICY_LEAST_TRAFFIC() {
        return (int)3L;
    }
    public static int CURLCLOSEPOLICY_SLOWEST() {
        return (int)4L;
    }
    public static int CURLCLOSEPOLICY_CALLBACK() {
        return (int)5L;
    }
    public static int CURLCLOSEPOLICY_LAST() {
        return (int)6L;
    }
    public static int CURL_LOCK_DATA_NONE() {
        return (int)0L;
    }
    public static int CURL_LOCK_DATA_SHARE() {
        return (int)1L;
    }
    public static int CURL_LOCK_DATA_COOKIE() {
        return (int)2L;
    }
    public static int CURL_LOCK_DATA_DNS() {
        return (int)3L;
    }
    public static int CURL_LOCK_DATA_SSL_SESSION() {
        return (int)4L;
    }
    public static int CURL_LOCK_DATA_CONNECT() {
        return (int)5L;
    }
    public static int CURL_LOCK_DATA_PSL() {
        return (int)6L;
    }
    public static int CURL_LOCK_DATA_LAST() {
        return (int)7L;
    }
    public static int CURL_LOCK_ACCESS_NONE() {
        return (int)0L;
    }
    public static int CURL_LOCK_ACCESS_SHARED() {
        return (int)1L;
    }
    public static int CURL_LOCK_ACCESS_SINGLE() {
        return (int)2L;
    }
    public static int CURL_LOCK_ACCESS_LAST() {
        return (int)3L;
    }
    public static int CURLSHE_OK() {
        return (int)0L;
    }
    public static int CURLSHE_BAD_OPTION() {
        return (int)1L;
    }
    public static int CURLSHE_IN_USE() {
        return (int)2L;
    }
    public static int CURLSHE_INVALID() {
        return (int)3L;
    }
    public static int CURLSHE_NOMEM() {
        return (int)4L;
    }
    public static int CURLSHE_NOT_BUILT_IN() {
        return (int)5L;
    }
    public static int CURLSHE_LAST() {
        return (int)6L;
    }
    public static int CURLSHOPT_NONE() {
        return (int)0L;
    }
    public static int CURLSHOPT_SHARE() {
        return (int)1L;
    }
    public static int CURLSHOPT_UNSHARE() {
        return (int)2L;
    }
    public static int CURLSHOPT_LOCKFUNC() {
        return (int)3L;
    }
    public static int CURLSHOPT_UNLOCKFUNC() {
        return (int)4L;
    }
    public static int CURLSHOPT_USERDATA() {
        return (int)5L;
    }
    public static int CURLSHOPT_LAST() {
        return (int)6L;
    }
    public static MethodHandle curl_share_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.curl_share_init$MH,"curl_share_init");
    }
    public static MemoryAddress curl_share_init () {
        var mh$ = curl_share_init$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_share_setopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.curl_share_setopt$MH,"curl_share_setopt");
    }
    public static int curl_share_setopt ( Addressable x0,  int option, Object... x2) {
        var mh$ = curl_share_setopt$MH();
        try {
            return (int)mh$.invokeExact(x0, option, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_share_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1396.curl_share_cleanup$MH,"curl_share_cleanup");
    }
    public static int curl_share_cleanup ( Addressable x0) {
        var mh$ = curl_share_cleanup$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CURLVERSION_FIRST() {
        return (int)0L;
    }
    public static int CURLVERSION_SECOND() {
        return (int)1L;
    }
    public static int CURLVERSION_THIRD() {
        return (int)2L;
    }
    public static int CURLVERSION_FOURTH() {
        return (int)3L;
    }
    public static int CURLVERSION_FIFTH() {
        return (int)4L;
    }
    public static int CURLVERSION_SIXTH() {
        return (int)5L;
    }
    public static int CURLVERSION_SEVENTH() {
        return (int)6L;
    }
    public static int CURLVERSION_EIGHTH() {
        return (int)7L;
    }
    public static int CURLVERSION_NINTH() {
        return (int)8L;
    }
    public static int CURLVERSION_TENTH() {
        return (int)9L;
    }
    public static int CURLVERSION_LAST() {
        return (int)10L;
    }
    public static MethodHandle curl_version_info$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.curl_version_info$MH,"curl_version_info");
    }
    public static MemoryAddress curl_version_info ( int x0) {
        var mh$ = curl_version_info$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.curl_easy_strerror$MH,"curl_easy_strerror");
    }
    public static MemoryAddress curl_easy_strerror ( int x0) {
        var mh$ = curl_easy_strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_share_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.curl_share_strerror$MH,"curl_share_strerror");
    }
    public static MemoryAddress curl_share_strerror ( int x0) {
        var mh$ = curl_share_strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.curl_easy_pause$MH,"curl_easy_pause");
    }
    public static int curl_easy_pause ( Addressable handle,  int bitmask) {
        var mh$ = curl_easy_pause$MH();
        try {
            return (int)mh$.invokeExact(handle, bitmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.curl_easy_init$MH,"curl_easy_init");
    }
    public static MemoryAddress curl_easy_init () {
        var mh$ = curl_easy_init$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_setopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1397.curl_easy_setopt$MH,"curl_easy_setopt");
    }
    public static int curl_easy_setopt ( Addressable curl,  int option, Object... x2) {
        var mh$ = curl_easy_setopt$MH();
        try {
            return (int)mh$.invokeExact(curl, option, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_perform$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.curl_easy_perform$MH,"curl_easy_perform");
    }
    public static int curl_easy_perform ( Addressable curl) {
        var mh$ = curl_easy_perform$MH();
        try {
            return (int)mh$.invokeExact(curl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.curl_easy_cleanup$MH,"curl_easy_cleanup");
    }
    public static void curl_easy_cleanup ( Addressable curl) {
        var mh$ = curl_easy_cleanup$MH();
        try {
            mh$.invokeExact(curl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_getinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.curl_easy_getinfo$MH,"curl_easy_getinfo");
    }
    public static int curl_easy_getinfo ( Addressable curl,  int info, Object... x2) {
        var mh$ = curl_easy_getinfo$MH();
        try {
            return (int)mh$.invokeExact(curl, info, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_duphandle$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.curl_easy_duphandle$MH,"curl_easy_duphandle");
    }
    public static MemoryAddress curl_easy_duphandle ( Addressable curl) {
        var mh$ = curl_easy_duphandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(curl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.curl_easy_reset$MH,"curl_easy_reset");
    }
    public static void curl_easy_reset ( Addressable curl) {
        var mh$ = curl_easy_reset$MH();
        try {
            mh$.invokeExact(curl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_recv$MH() {
        return RuntimeHelper.requireNonNull(constants$1398.curl_easy_recv$MH,"curl_easy_recv");
    }
    public static int curl_easy_recv ( Addressable curl,  Addressable buffer,  long buflen,  Addressable n) {
        var mh$ = curl_easy_recv$MH();
        try {
            return (int)mh$.invokeExact(curl, buffer, buflen, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_send$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.curl_easy_send$MH,"curl_easy_send");
    }
    public static int curl_easy_send ( Addressable curl,  Addressable buffer,  long buflen,  Addressable n) {
        var mh$ = curl_easy_send$MH();
        try {
            return (int)mh$.invokeExact(curl, buffer, buflen, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_upkeep$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.curl_easy_upkeep$MH,"curl_easy_upkeep");
    }
    public static int curl_easy_upkeep ( Addressable curl) {
        var mh$ = curl_easy_upkeep$MH();
        try {
            return (int)mh$.invokeExact(curl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CURLM_CALL_MULTI_PERFORM() {
        return (int)-1L;
    }
    public static int CURLM_OK() {
        return (int)0L;
    }
    public static int CURLM_BAD_HANDLE() {
        return (int)1L;
    }
    public static int CURLM_BAD_EASY_HANDLE() {
        return (int)2L;
    }
    public static int CURLM_OUT_OF_MEMORY() {
        return (int)3L;
    }
    public static int CURLM_INTERNAL_ERROR() {
        return (int)4L;
    }
    public static int CURLM_BAD_SOCKET() {
        return (int)5L;
    }
    public static int CURLM_UNKNOWN_OPTION() {
        return (int)6L;
    }
    public static int CURLM_ADDED_ALREADY() {
        return (int)7L;
    }
    public static int CURLM_RECURSIVE_API_CALL() {
        return (int)8L;
    }
    public static int CURLM_WAKEUP_FAILURE() {
        return (int)9L;
    }
    public static int CURLM_BAD_FUNCTION_ARGUMENT() {
        return (int)10L;
    }
    public static int CURLM_ABORTED_BY_CALLBACK() {
        return (int)11L;
    }
    public static int CURLM_UNRECOVERABLE_POLL() {
        return (int)12L;
    }
    public static int CURLM_LAST() {
        return (int)13L;
    }
    public static int CURLMSG_NONE() {
        return (int)0L;
    }
    public static int CURLMSG_DONE() {
        return (int)1L;
    }
    public static int CURLMSG_LAST() {
        return (int)2L;
    }
    public static MethodHandle curl_multi_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.curl_multi_init$MH,"curl_multi_init");
    }
    public static MemoryAddress curl_multi_init () {
        var mh$ = curl_multi_init$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_add_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.curl_multi_add_handle$MH,"curl_multi_add_handle");
    }
    public static int curl_multi_add_handle ( Addressable multi_handle,  Addressable curl_handle) {
        var mh$ = curl_multi_add_handle$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, curl_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_remove_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.curl_multi_remove_handle$MH,"curl_multi_remove_handle");
    }
    public static int curl_multi_remove_handle ( Addressable multi_handle,  Addressable curl_handle) {
        var mh$ = curl_multi_remove_handle$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, curl_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_fdset$MH() {
        return RuntimeHelper.requireNonNull(constants$1399.curl_multi_fdset$MH,"curl_multi_fdset");
    }
    public static int curl_multi_fdset ( Addressable multi_handle,  Addressable read_fd_set,  Addressable write_fd_set,  Addressable exc_fd_set,  Addressable max_fd) {
        var mh$ = curl_multi_fdset$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, read_fd_set, write_fd_set, exc_fd_set, max_fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.curl_multi_wait$MH,"curl_multi_wait");
    }
    public static int curl_multi_wait ( Addressable multi_handle,  Addressable extra_fds,  int extra_nfds,  int timeout_ms,  Addressable ret) {
        var mh$ = curl_multi_wait$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, extra_fds, extra_nfds, timeout_ms, ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_poll$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.curl_multi_poll$MH,"curl_multi_poll");
    }
    public static int curl_multi_poll ( Addressable multi_handle,  Addressable extra_fds,  int extra_nfds,  int timeout_ms,  Addressable ret) {
        var mh$ = curl_multi_poll$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, extra_fds, extra_nfds, timeout_ms, ret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_wakeup$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.curl_multi_wakeup$MH,"curl_multi_wakeup");
    }
    public static int curl_multi_wakeup ( Addressable multi_handle) {
        var mh$ = curl_multi_wakeup$MH();
        try {
            return (int)mh$.invokeExact(multi_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_perform$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.curl_multi_perform$MH,"curl_multi_perform");
    }
    public static int curl_multi_perform ( Addressable multi_handle,  Addressable running_handles) {
        var mh$ = curl_multi_perform$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, running_handles);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.curl_multi_cleanup$MH,"curl_multi_cleanup");
    }
    public static int curl_multi_cleanup ( Addressable multi_handle) {
        var mh$ = curl_multi_cleanup$MH();
        try {
            return (int)mh$.invokeExact(multi_handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_info_read$MH() {
        return RuntimeHelper.requireNonNull(constants$1400.curl_multi_info_read$MH,"curl_multi_info_read");
    }
    public static MemoryAddress curl_multi_info_read ( Addressable multi_handle,  Addressable msgs_in_queue) {
        var mh$ = curl_multi_info_read$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(multi_handle, msgs_in_queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.curl_multi_strerror$MH,"curl_multi_strerror");
    }
    public static MemoryAddress curl_multi_strerror ( int x0) {
        var mh$ = curl_multi_strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_socket$MH() {
        return RuntimeHelper.requireNonNull(constants$1401.curl_multi_socket$MH,"curl_multi_socket");
    }
    public static int curl_multi_socket ( Addressable multi_handle,  long s,  Addressable running_handles) {
        var mh$ = curl_multi_socket$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, s, running_handles);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_socket_action$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.curl_multi_socket_action$MH,"curl_multi_socket_action");
    }
    public static int curl_multi_socket_action ( Addressable multi_handle,  long s,  int ev_bitmask,  Addressable running_handles) {
        var mh$ = curl_multi_socket_action$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, s, ev_bitmask, running_handles);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_socket_all$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.curl_multi_socket_all$MH,"curl_multi_socket_all");
    }
    public static int curl_multi_socket_all ( Addressable multi_handle,  Addressable running_handles) {
        var mh$ = curl_multi_socket_all$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, running_handles);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.curl_multi_timeout$MH,"curl_multi_timeout");
    }
    public static int curl_multi_timeout ( Addressable multi_handle,  Addressable milliseconds) {
        var mh$ = curl_multi_timeout$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, milliseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CURLMOPT_SOCKETFUNCTION() {
        return (int)20001L;
    }
    public static int CURLMOPT_SOCKETDATA() {
        return (int)10002L;
    }
    public static int CURLMOPT_PIPELINING() {
        return (int)3L;
    }
    public static int CURLMOPT_TIMERFUNCTION() {
        return (int)20004L;
    }
    public static int CURLMOPT_TIMERDATA() {
        return (int)10005L;
    }
    public static int CURLMOPT_MAXCONNECTS() {
        return (int)6L;
    }
    public static int CURLMOPT_MAX_HOST_CONNECTIONS() {
        return (int)7L;
    }
    public static int CURLMOPT_MAX_PIPELINE_LENGTH() {
        return (int)8L;
    }
    public static int CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE() {
        return (int)30009L;
    }
    public static int CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE() {
        return (int)30010L;
    }
    public static int CURLMOPT_PIPELINING_SITE_BL() {
        return (int)10011L;
    }
    public static int CURLMOPT_PIPELINING_SERVER_BL() {
        return (int)10012L;
    }
    public static int CURLMOPT_MAX_TOTAL_CONNECTIONS() {
        return (int)13L;
    }
    public static int CURLMOPT_PUSHFUNCTION() {
        return (int)20014L;
    }
    public static int CURLMOPT_PUSHDATA() {
        return (int)10015L;
    }
    public static int CURLMOPT_MAX_CONCURRENT_STREAMS() {
        return (int)16L;
    }
    public static int CURLMOPT_LASTENTRY() {
        return (int)17L;
    }
    public static MethodHandle curl_multi_setopt$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.curl_multi_setopt$MH,"curl_multi_setopt");
    }
    public static int curl_multi_setopt ( Addressable multi_handle,  int option, Object... x2) {
        var mh$ = curl_multi_setopt$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, option, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_multi_assign$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.curl_multi_assign$MH,"curl_multi_assign");
    }
    public static int curl_multi_assign ( Addressable multi_handle,  long sockfd,  Addressable sockp) {
        var mh$ = curl_multi_assign$MH();
        try {
            return (int)mh$.invokeExact(multi_handle, sockfd, sockp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_pushheader_bynum$MH() {
        return RuntimeHelper.requireNonNull(constants$1402.curl_pushheader_bynum$MH,"curl_pushheader_bynum");
    }
    public static MemoryAddress curl_pushheader_bynum ( Addressable h,  long num) {
        var mh$ = curl_pushheader_bynum$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(h, num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_pushheader_byname$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.curl_pushheader_byname$MH,"curl_pushheader_byname");
    }
    public static MemoryAddress curl_pushheader_byname ( Addressable h,  Addressable name) {
        var mh$ = curl_pushheader_byname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(h, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CURLUE_OK() {
        return (int)0L;
    }
    public static int CURLUE_BAD_HANDLE() {
        return (int)1L;
    }
    public static int CURLUE_BAD_PARTPOINTER() {
        return (int)2L;
    }
    public static int CURLUE_MALFORMED_INPUT() {
        return (int)3L;
    }
    public static int CURLUE_BAD_PORT_NUMBER() {
        return (int)4L;
    }
    public static int CURLUE_UNSUPPORTED_SCHEME() {
        return (int)5L;
    }
    public static int CURLUE_URLDECODE() {
        return (int)6L;
    }
    public static int CURLUE_OUT_OF_MEMORY() {
        return (int)7L;
    }
    public static int CURLUE_USER_NOT_ALLOWED() {
        return (int)8L;
    }
    public static int CURLUE_UNKNOWN_PART() {
        return (int)9L;
    }
    public static int CURLUE_NO_SCHEME() {
        return (int)10L;
    }
    public static int CURLUE_NO_USER() {
        return (int)11L;
    }
    public static int CURLUE_NO_PASSWORD() {
        return (int)12L;
    }
    public static int CURLUE_NO_OPTIONS() {
        return (int)13L;
    }
    public static int CURLUE_NO_HOST() {
        return (int)14L;
    }
    public static int CURLUE_NO_PORT() {
        return (int)15L;
    }
    public static int CURLUE_NO_QUERY() {
        return (int)16L;
    }
    public static int CURLUE_NO_FRAGMENT() {
        return (int)17L;
    }
    public static int CURLUE_NO_ZONEID() {
        return (int)18L;
    }
    public static int CURLUE_BAD_FILE_URL() {
        return (int)19L;
    }
    public static int CURLUE_BAD_FRAGMENT() {
        return (int)20L;
    }
    public static int CURLUE_BAD_HOSTNAME() {
        return (int)21L;
    }
    public static int CURLUE_BAD_IPV6() {
        return (int)22L;
    }
    public static int CURLUE_BAD_LOGIN() {
        return (int)23L;
    }
    public static int CURLUE_BAD_PASSWORD() {
        return (int)24L;
    }
    public static int CURLUE_BAD_PATH() {
        return (int)25L;
    }
    public static int CURLUE_BAD_QUERY() {
        return (int)26L;
    }
    public static int CURLUE_BAD_SCHEME() {
        return (int)27L;
    }
    public static int CURLUE_BAD_SLASHES() {
        return (int)28L;
    }
    public static int CURLUE_BAD_USER() {
        return (int)29L;
    }
    public static int CURLUE_LAST() {
        return (int)30L;
    }
    public static int CURLUPART_URL() {
        return (int)0L;
    }
    public static int CURLUPART_SCHEME() {
        return (int)1L;
    }
    public static int CURLUPART_USER() {
        return (int)2L;
    }
    public static int CURLUPART_PASSWORD() {
        return (int)3L;
    }
    public static int CURLUPART_OPTIONS() {
        return (int)4L;
    }
    public static int CURLUPART_HOST() {
        return (int)5L;
    }
    public static int CURLUPART_PORT() {
        return (int)6L;
    }
    public static int CURLUPART_PATH() {
        return (int)7L;
    }
    public static int CURLUPART_QUERY() {
        return (int)8L;
    }
    public static int CURLUPART_FRAGMENT() {
        return (int)9L;
    }
    public static int CURLUPART_ZONEID() {
        return (int)10L;
    }
    public static MethodHandle curl_url$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.curl_url$MH,"curl_url");
    }
    public static MemoryAddress curl_url () {
        var mh$ = curl_url$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_url_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.curl_url_cleanup$MH,"curl_url_cleanup");
    }
    public static void curl_url_cleanup ( Addressable handle) {
        var mh$ = curl_url_cleanup$MH();
        try {
            mh$.invokeExact(handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_url_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$1403.curl_url_dup$MH,"curl_url_dup");
    }
    public static MemoryAddress curl_url_dup ( Addressable in) {
        var mh$ = curl_url_dup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(in);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_url_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.curl_url_get$MH,"curl_url_get");
    }
    public static int curl_url_get ( Addressable handle,  int what,  Addressable part,  int flags) {
        var mh$ = curl_url_get$MH();
        try {
            return (int)mh$.invokeExact(handle, what, part, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_url_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.curl_url_set$MH,"curl_url_set");
    }
    public static int curl_url_set ( Addressable handle,  int what,  Addressable part,  int flags) {
        var mh$ = curl_url_set$MH();
        try {
            return (int)mh$.invokeExact(handle, what, part, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_url_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.curl_url_strerror$MH,"curl_url_strerror");
    }
    public static MemoryAddress curl_url_strerror ( int x0) {
        var mh$ = curl_url_strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CURLOT_LONG() {
        return (int)0L;
    }
    public static int CURLOT_VALUES() {
        return (int)1L;
    }
    public static int CURLOT_OFF_T() {
        return (int)2L;
    }
    public static int CURLOT_OBJECT() {
        return (int)3L;
    }
    public static int CURLOT_STRING() {
        return (int)4L;
    }
    public static int CURLOT_SLIST() {
        return (int)5L;
    }
    public static int CURLOT_CBPTR() {
        return (int)6L;
    }
    public static int CURLOT_BLOB() {
        return (int)7L;
    }
    public static int CURLOT_FUNCTION() {
        return (int)8L;
    }
    public static MethodHandle curl_easy_option_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.curl_easy_option_by_name$MH,"curl_easy_option_by_name");
    }
    public static MemoryAddress curl_easy_option_by_name ( Addressable name) {
        var mh$ = curl_easy_option_by_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_option_by_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.curl_easy_option_by_id$MH,"curl_easy_option_by_id");
    }
    public static MemoryAddress curl_easy_option_by_id ( int id) {
        var mh$ = curl_easy_option_by_id$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_option_next$MH() {
        return RuntimeHelper.requireNonNull(constants$1404.curl_easy_option_next$MH,"curl_easy_option_next");
    }
    public static MemoryAddress curl_easy_option_next ( Addressable prev) {
        var mh$ = curl_easy_option_next$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(prev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int CURLHE_OK() {
        return (int)0L;
    }
    public static int CURLHE_BADINDEX() {
        return (int)1L;
    }
    public static int CURLHE_MISSING() {
        return (int)2L;
    }
    public static int CURLHE_NOHEADERS() {
        return (int)3L;
    }
    public static int CURLHE_NOREQUEST() {
        return (int)4L;
    }
    public static int CURLHE_OUT_OF_MEMORY() {
        return (int)5L;
    }
    public static int CURLHE_BAD_ARGUMENT() {
        return (int)6L;
    }
    public static int CURLHE_NOT_BUILT_IN() {
        return (int)7L;
    }
    public static MethodHandle curl_easy_header$MH() {
        return RuntimeHelper.requireNonNull(constants$1405.curl_easy_header$MH,"curl_easy_header");
    }
    public static int curl_easy_header ( Addressable easy,  Addressable name,  long index,  int origin,  int request,  Addressable hout) {
        var mh$ = curl_easy_header$MH();
        try {
            return (int)mh$.invokeExact(easy, name, index, origin, request, hout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_easy_nextheader$MH() {
        return RuntimeHelper.requireNonNull(constants$1405.curl_easy_nextheader$MH,"curl_easy_nextheader");
    }
    public static MemoryAddress curl_easy_nextheader ( Addressable easy,  int origin,  int request,  Addressable prev) {
        var mh$ = curl_easy_nextheader$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(easy, origin, request, prev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_ws_recv$MH() {
        return RuntimeHelper.requireNonNull(constants$1405.curl_ws_recv$MH,"curl_ws_recv");
    }
    public static int curl_ws_recv ( Addressable curl,  Addressable buffer,  long buflen,  Addressable recv,  Addressable metap) {
        var mh$ = curl_ws_recv$MH();
        try {
            return (int)mh$.invokeExact(curl, buffer, buflen, recv, metap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_ws_send$MH() {
        return RuntimeHelper.requireNonNull(constants$1405.curl_ws_send$MH,"curl_ws_send");
    }
    public static int curl_ws_send ( Addressable curl,  Addressable buffer,  long buflen,  Addressable sent,  long framesize,  int sendflags) {
        var mh$ = curl_ws_send$MH();
        try {
            return (int)mh$.invokeExact(curl, buffer, buflen, sent, framesize, sendflags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle curl_ws_meta$MH() {
        return RuntimeHelper.requireNonNull(constants$1405.curl_ws_meta$MH,"curl_ws_meta");
    }
    public static MemoryAddress curl_ws_meta ( Addressable curl) {
        var mh$ = curl_ws_meta$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(curl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment LIBCURL_COPYRIGHT() {
        return constants$1405.LIBCURL_COPYRIGHT$SEGMENT;
    }
    public static MemorySegment LIBCURL_VERSION() {
        return constants$1406.LIBCURL_VERSION$SEGMENT;
    }
    public static MemorySegment LIBCURL_TIMESTAMP() {
        return constants$1406.LIBCURL_TIMESTAMP$SEGMENT;
    }
    public static MemorySegment CURL_FORMAT_CURL_OFF_T() {
        return constants$1406.CURL_FORMAT_CURL_OFF_T$SEGMENT;
    }
    public static MemorySegment CURL_FORMAT_CURL_OFF_TU() {
        return constants$1406.CURL_FORMAT_CURL_OFF_TU$SEGMENT;
    }
    public static int _VCRUNTIME_DISABLED_WARNINGS() {
        return (int)4514L;
    }
    public static MemoryAddress NULL() {
        return constants$1406.NULL$ADDR;
    }
    public static int _UCRT_DISABLED_WARNINGS() {
        return (int)4324L;
    }
    public static long _TRUNCATE() {
        return -1L;
    }
    public static long _CRT_SIZE_MAX() {
        return -1L;
    }
    public static MemorySegment __FILEW__() {
        return constants$1406.__FILEW__$SEGMENT;
    }
    public static int __STDC_SECURE_LIB__() {
        return (int)200411L;
    }
    public static int __GOT_SECURE_LIB__() {
        return (int)200411L;
    }
    public static MemorySegment _CRT_INTERNAL_STDIO_SYMBOL_PREFIX() {
        return constants$1407._CRT_INTERNAL_STDIO_SYMBOL_PREFIX$SEGMENT;
    }
    public static long _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION() {
        return 1L;
    }
    public static long _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR() {
        return 2L;
    }
    public static long _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS() {
        return 4L;
    }
    public static long _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY() {
        return 8L;
    }
    public static long _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS() {
        return 16L;
    }
    public static long _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING() {
        return 32L;
    }
    public static long _CRT_INTERNAL_SCANF_SECURECRT() {
        return 1L;
    }
    public static long _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS() {
        return 2L;
    }
    public static long _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY() {
        return 4L;
    }
    public static short WEOF() {
        return (short)65535L;
    }
    public static int _NFILE() {
        return (int)512L;
    }
    public static int EOF() {
        return (int)-1L;
    }
    public static int L_tmpnam_s() {
        return (int)260L;
    }
    public static int TMP_MAX() {
        return (int)2147483647L;
    }
    public static int TMP_MAX_S() {
        return (int)2147483647L;
    }
    public static int _TMP_MAX_S() {
        return (int)2147483647L;
    }
    public static int SYS_OPEN() {
        return (int)20L;
    }
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    public static int CHAR_MAX() {
        return (int)127L;
    }
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    public static int LONG_MIN() {
        return (int)-2147483648L;
    }
    public static int LONG_MAX() {
        return (int)2147483647L;
    }
    public static int ULONG_MAX() {
        return (int)4294967295L;
    }
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    public static long ULLONG_MAX() {
        return -1L;
    }
    public static int _I8_MIN() {
        return (int)-128L;
    }
    public static byte _I8_MAX() {
        return (byte)127L;
    }
    public static byte _UI8_MAX() {
        return (byte)255L;
    }
    public static int _I16_MIN() {
        return (int)-32768L;
    }
    public static short _I16_MAX() {
        return (short)32767L;
    }
    public static short _UI16_MAX() {
        return (short)65535L;
    }
    public static int _I32_MIN() {
        return (int)-2147483648L;
    }
    public static int _I32_MAX() {
        return (int)2147483647L;
    }
    public static int _UI32_MAX() {
        return (int)4294967295L;
    }
    public static long _I64_MIN() {
        return -9223372036854775808L;
    }
    public static long _I64_MAX() {
        return 9223372036854775807L;
    }
    public static long _UI64_MAX() {
        return -1L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }
    public static long LONG_LONG_MAX() {
        return 9223372036854775807L;
    }
    public static long LONG_LONG_MIN() {
        return -9223372036854775808L;
    }
    public static long ULONG_LONG_MAX() {
        return -1L;
    }
    public static int CLOCKS_PER_SEC() {
        return (int)1000L;
    }
    public static int CLK_TCK() {
        return (int)1000L;
    }
    public static int WINAPI_PARTITION_SERVER() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WINTRUST() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WEBSERVICES() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_EVENTLOGSERVICE() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_VHD() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_PERFCOUNTER() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_SECURESTARTUP() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_REMOTEFS() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_BOOTABLESKU() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_CMDTOOLS() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_DISM() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_CORESETUP() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_APPRUNTIME() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_ESENT() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WINMGMT() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WNV() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_CLUSTER() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_VSS() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_TRAFFIC() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_ISCSI() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_STORAGE() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_MPSSVC() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_APPXDEPLOYMENT() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PKG_WER() {
        return (int)0L;
    }
    public static int WINAPI_FAMILY_APP() {
        return (int)2L;
    }
    public static int WINAPI_FAMILY() {
        return (int)100L;
    }
    public static int WINAPI_PARTITION_DESKTOP() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_APP() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_PC_APP() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_PHONE_APP() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_GAMES() {
        return (int)1L;
    }
    public static int WINAPI_PARTITION_SYSTEM() {
        return (int)0L;
    }
    public static int WINAPI_PARTITION_PHONE() {
        return (int)0L;
    }
    public static int _WIN32_IE_NT4() {
        return (int)512L;
    }
    public static int _WIN32_IE_NT4SP1() {
        return (int)512L;
    }
    public static int _WIN32_IE_NT4SP2() {
        return (int)512L;
    }
    public static int _WIN32_IE_NT4SP3() {
        return (int)770L;
    }
    public static int _WIN32_IE_NT4SP4() {
        return (int)1025L;
    }
    public static int _WIN32_IE_NT4SP5() {
        return (int)1025L;
    }
    public static int _WIN32_IE_NT4SP6() {
        return (int)1280L;
    }
    public static int _WIN32_IE_WIN98() {
        return (int)1025L;
    }
    public static int _WIN32_IE_WIN98SE() {
        return (int)1280L;
    }
    public static int _WIN32_IE_WINME() {
        return (int)1360L;
    }
    public static int _WIN32_IE_WIN2K() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP1() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP2() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP3() {
        return (int)1281L;
    }
    public static int _WIN32_IE_WIN2KSP4() {
        return (int)1281L;
    }
    public static int _WIN32_IE_XP() {
        return (int)1536L;
    }
    public static int _WIN32_IE_XPSP1() {
        return (int)1537L;
    }
    public static int _WIN32_IE_XPSP2() {
        return (int)1539L;
    }
    public static int _WIN32_IE_WS03SP1() {
        return (int)1539L;
    }
    public static int _WIN32_IE_WIN6() {
        return (int)1792L;
    }
    public static int _WIN32_IE_LONGHORN() {
        return (int)1792L;
    }
    public static int _WIN32_IE_WIN7() {
        return (int)2048L;
    }
    public static int _WIN32_IE_WIN8() {
        return (int)2560L;
    }
    public static int _WIN32_IE_WINBLUE() {
        return (int)2560L;
    }
    public static int _WIN32_IE_WINTHRESHOLD() {
        return (int)2560L;
    }
    public static int _WIN32_IE_WIN10() {
        return (int)2560L;
    }
    public static int NTDDI_VISTA() {
        return (int)100663296L;
    }
    public static int NTDDI_VISTASP1() {
        return (int)100663552L;
    }
    public static int NTDDI_VISTASP2() {
        return (int)100663808L;
    }
    public static int NTDDI_VISTASP3() {
        return (int)100664064L;
    }
    public static int NTDDI_VISTASP4() {
        return (int)100664320L;
    }
    public static int NTDDI_LONGHORN() {
        return (int)100663296L;
    }
    public static int NTDDI_WS08() {
        return (int)100663552L;
    }
    public static int NTDDI_WS08SP2() {
        return (int)100663808L;
    }
    public static int NTDDI_WS08SP3() {
        return (int)100664064L;
    }
    public static int NTDDI_WS08SP4() {
        return (int)100664320L;
    }
    public static int WDK_NTDDI_VERSION() {
        return (int)167772168L;
    }
    public static int OSVERSION_MASK() {
        return (int)4294901760L;
    }
    public static int NTDDI_VERSION() {
        return (int)167772168L;
    }
    public static int WINVER() {
        return (int)2560L;
    }
    public static int EXCEPTION_CONTINUE_EXECUTION() {
        return (int)-1L;
    }
    public static int _ALPHA() {
        return (int)259L;
    }
    public static long MAX_NATURAL_ALIGNMENT() {
        return 8L;
    }
    public static long ADDRESS_TAG_BIT() {
        return 4398046511104L;
    }
    public static long MAXUINT_PTR() {
        return -1L;
    }
    public static long MAXINT_PTR() {
        return 9223372036854775807L;
    }
    public static long MININT_PTR() {
        return -9223372036854775808L;
    }
    public static long MAXULONG_PTR() {
        return -1L;
    }
    public static long MAXLONG_PTR() {
        return 9223372036854775807L;
    }
    public static long MINLONG_PTR() {
        return -9223372036854775808L;
    }
    public static int MAXUHALF_PTR() {
        return (int)4294967295L;
    }
    public static int MAXHALF_PTR() {
        return (int)2147483647L;
    }
    public static int MINHALF_PTR() {
        return (int)-2147483648L;
    }
    public static byte MAXUINT8() {
        return (byte)255L;
    }
    public static byte MAXINT8() {
        return (byte)127L;
    }
    public static byte MININT8() {
        return (byte)-128L;
    }
    public static short MAXUINT16() {
        return (short)65535L;
    }
    public static short MAXINT16() {
        return (short)32767L;
    }
    public static short MININT16() {
        return (short)-32768L;
    }
    public static int MAXUINT32() {
        return (int)4294967295L;
    }
    public static int MAXINT32() {
        return (int)2147483647L;
    }
    public static int MININT32() {
        return (int)-2147483648L;
    }
    public static long MAXUINT64() {
        return -1L;
    }
    public static long MAXINT64() {
        return 9223372036854775807L;
    }
    public static long MININT64() {
        return -9223372036854775808L;
    }
    public static int MAXULONG32() {
        return (int)4294967295L;
    }
    public static int MAXLONG32() {
        return (int)2147483647L;
    }
    public static int MINLONG32() {
        return (int)-2147483648L;
    }
    public static long MAXULONG64() {
        return -1L;
    }
    public static long MAXLONG64() {
        return 9223372036854775807L;
    }
    public static long MINLONG64() {
        return -9223372036854775808L;
    }
    public static long MAXULONGLONG() {
        return -1L;
    }
    public static long MINLONGLONG() {
        return -9223372036854775808L;
    }
    public static long MAXSIZE_T() {
        return -1L;
    }
    public static long MAXSSIZE_T() {
        return 9223372036854775807L;
    }
    public static long MINSSIZE_T() {
        return -9223372036854775808L;
    }
    public static int MAXUINT() {
        return (int)4294967295L;
    }
    public static int MAXINT() {
        return (int)2147483647L;
    }
    public static int MININT() {
        return (int)-2147483648L;
    }
    public static int MAXDWORD32() {
        return (int)4294967295L;
    }
    public static long MAXDWORD64() {
        return -1L;
    }
    public static int UCSCHAR_INVALID_CHARACTER() {
        return (int)4294967295L;
    }
    public static int MIN_UCSCHAR() {
        return (int)0L;
    }
    public static int MAX_UCSCHAR() {
        return (int)1114111L;
    }
    public static int MAXIMUM_PROCESSORS() {
        return (int)64L;
    }
    public static int ERROR_SEVERITY_WARNING() {
        return (int)2147483648L;
    }
    public static int ERROR_SEVERITY_ERROR() {
        return (int)3221225472L;
    }
    public static long MAXLONGLONG() {
        return 9223372036854775807L;
    }
    public static byte ANSI_NULL() {
        return (byte)0L;
    }
    public static short UNICODE_NULL() {
        return (short)0L;
    }
    public static short UNICODE_STRING_MAX_BYTES() {
        return (short)65534L;
    }
    public static int UNICODE_STRING_MAX_CHARS() {
        return (int)32767L;
    }
    public static int EDEADLOCK() {
        return (int)36L;
    }
    public static int _NLSCMPERROR() {
        return (int)2147483647L;
    }
    public static int MINLONG() {
        return (int)2147483648L;
    }
    public static int MAXDWORD() {
        return (int)4294967295L;
    }
    public static int VER_SERVER_NT() {
        return (int)2147483648L;
    }
    public static int PRODUCT_UNLICENSED() {
        return (int)2882382797L;
    }
    public static int LANG_SYSTEM_DEFAULT() {
        return (int)2048L;
    }
    public static int LANG_USER_DEFAULT() {
        return (int)1024L;
    }
    public static int LOCALE_SYSTEM_DEFAULT() {
        return (int)2048L;
    }
    public static int LOCALE_USER_DEFAULT() {
        return (int)1024L;
    }
    public static int LOCALE_CUSTOM_DEFAULT() {
        return (int)3072L;
    }
    public static int LOCALE_CUSTOM_UNSPECIFIED() {
        return (int)4096L;
    }
    public static int LOCALE_CUSTOM_UI_DEFAULT() {
        return (int)5120L;
    }
    public static int LOCALE_NEUTRAL() {
        return (int)0L;
    }
    public static int LOCALE_INVARIANT() {
        return (int)127L;
    }
    public static int LOCALE_UNASSIGNED_LCID() {
        return (int)4096L;
    }
    public static int STATUS_WAIT_0() {
        return (int)0L;
    }
    public static int STATUS_ABANDONED_WAIT_0() {
        return (int)128L;
    }
    public static int STATUS_USER_APC() {
        return (int)192L;
    }
    public static int STATUS_TIMEOUT() {
        return (int)258L;
    }
    public static int STATUS_PENDING() {
        return (int)259L;
    }
    public static int DBG_EXCEPTION_HANDLED() {
        return (int)65537L;
    }
    public static int DBG_CONTINUE() {
        return (int)65538L;
    }
    public static int STATUS_SEGMENT_NOTIFICATION() {
        return (int)1073741829L;
    }
    public static int STATUS_FATAL_APP_EXIT() {
        return (int)1073741845L;
    }
    public static int DBG_REPLY_LATER() {
        return (int)1073807361L;
    }
    public static int DBG_TERMINATE_THREAD() {
        return (int)1073807363L;
    }
    public static int DBG_TERMINATE_PROCESS() {
        return (int)1073807364L;
    }
    public static int DBG_CONTROL_C() {
        return (int)1073807365L;
    }
    public static int DBG_PRINTEXCEPTION_C() {
        return (int)1073807366L;
    }
    public static int DBG_RIPEXCEPTION() {
        return (int)1073807367L;
    }
    public static int DBG_CONTROL_BREAK() {
        return (int)1073807368L;
    }
    public static int DBG_COMMAND_EXCEPTION() {
        return (int)1073807369L;
    }
    public static int DBG_PRINTEXCEPTION_WIDE_C() {
        return (int)1073807370L;
    }
    public static int STATUS_GUARD_PAGE_VIOLATION() {
        return (int)2147483649L;
    }
    public static int STATUS_DATATYPE_MISALIGNMENT() {
        return (int)2147483650L;
    }
    public static int STATUS_BREAKPOINT() {
        return (int)2147483651L;
    }
    public static int STATUS_SINGLE_STEP() {
        return (int)2147483652L;
    }
    public static int STATUS_LONGJUMP() {
        return (int)2147483686L;
    }
    public static int STATUS_UNWIND_CONSOLIDATE() {
        return (int)2147483689L;
    }
    public static int DBG_EXCEPTION_NOT_HANDLED() {
        return (int)2147549185L;
    }
    public static int STATUS_ACCESS_VIOLATION() {
        return (int)3221225477L;
    }
    public static int STATUS_IN_PAGE_ERROR() {
        return (int)3221225478L;
    }
    public static int STATUS_INVALID_HANDLE() {
        return (int)3221225480L;
    }
    public static int STATUS_INVALID_PARAMETER() {
        return (int)3221225485L;
    }
    public static int STATUS_NO_MEMORY() {
        return (int)3221225495L;
    }
    public static int STATUS_ILLEGAL_INSTRUCTION() {
        return (int)3221225501L;
    }
    public static int STATUS_NONCONTINUABLE_EXCEPTION() {
        return (int)3221225509L;
    }
    public static int STATUS_INVALID_DISPOSITION() {
        return (int)3221225510L;
    }
    public static int STATUS_ARRAY_BOUNDS_EXCEEDED() {
        return (int)3221225612L;
    }
    public static int STATUS_FLOAT_DENORMAL_OPERAND() {
        return (int)3221225613L;
    }
    public static int STATUS_FLOAT_DIVIDE_BY_ZERO() {
        return (int)3221225614L;
    }
    public static int STATUS_FLOAT_INEXACT_RESULT() {
        return (int)3221225615L;
    }
    public static int STATUS_FLOAT_INVALID_OPERATION() {
        return (int)3221225616L;
    }
    public static int STATUS_FLOAT_OVERFLOW() {
        return (int)3221225617L;
    }
    public static int STATUS_FLOAT_STACK_CHECK() {
        return (int)3221225618L;
    }
    public static int STATUS_FLOAT_UNDERFLOW() {
        return (int)3221225619L;
    }
    public static int STATUS_INTEGER_DIVIDE_BY_ZERO() {
        return (int)3221225620L;
    }
    public static int STATUS_INTEGER_OVERFLOW() {
        return (int)3221225621L;
    }
    public static int STATUS_PRIVILEGED_INSTRUCTION() {
        return (int)3221225622L;
    }
    public static int STATUS_STACK_OVERFLOW() {
        return (int)3221225725L;
    }
    public static int STATUS_DLL_NOT_FOUND() {
        return (int)3221225781L;
    }
    public static int STATUS_ORDINAL_NOT_FOUND() {
        return (int)3221225784L;
    }
    public static int STATUS_ENTRYPOINT_NOT_FOUND() {
        return (int)3221225785L;
    }
    public static int STATUS_CONTROL_C_EXIT() {
        return (int)3221225786L;
    }
    public static int STATUS_DLL_INIT_FAILED() {
        return (int)3221225794L;
    }
    public static int STATUS_CONTROL_STACK_VIOLATION() {
        return (int)3221225906L;
    }
    public static int STATUS_FLOAT_MULTIPLE_FAULTS() {
        return (int)3221226164L;
    }
    public static int STATUS_FLOAT_MULTIPLE_TRAPS() {
        return (int)3221226165L;
    }
    public static int STATUS_REG_NAT_CONSUMPTION() {
        return (int)3221226185L;
    }
    public static int STATUS_HEAP_CORRUPTION() {
        return (int)3221226356L;
    }
    public static int STATUS_STACK_BUFFER_OVERRUN() {
        return (int)3221226505L;
    }
    public static int STATUS_INVALID_CRUNTIME_PARAMETER() {
        return (int)3221226519L;
    }
    public static int STATUS_ASSERTION_FAILURE() {
        return (int)3221226528L;
    }
    public static int STATUS_ENCLAVE_VIOLATION() {
        return (int)3221226658L;
    }
    public static int STATUS_INTERRUPTED() {
        return (int)3221226773L;
    }
    public static int STATUS_THREAD_NOT_RUNNING() {
        return (int)3221226774L;
    }
    public static int STATUS_ALREADY_REGISTERED() {
        return (int)3221227288L;
    }
    public static int STATUS_SXS_EARLY_DEACTIVATION() {
        return (int)3222601743L;
    }
    public static int STATUS_SXS_INVALID_DEACTIVATION() {
        return (int)3222601744L;
    }
    public static int MAXIMUM_SUSPEND_COUNT() {
        return (int)127L;
    }
    public static int PF_TEMPORAL_LEVEL_1() {
        return (int)1L;
    }
    public static int PF_TEMPORAL_LEVEL_2() {
        return (int)2L;
    }
    public static int PF_TEMPORAL_LEVEL_3() {
        return (int)3L;
    }
    public static int PF_NON_TEMPORAL_LEVEL_ALL() {
        return (int)0L;
    }
    public static int CONTEXT_AMD64() {
        return (int)1048576L;
    }
    public static int CONTEXT_CONTROL() {
        return (int)1048577L;
    }
    public static int CONTEXT_INTEGER() {
        return (int)1048578L;
    }
    public static int CONTEXT_SEGMENTS() {
        return (int)1048580L;
    }
    public static int CONTEXT_FLOATING_POINT() {
        return (int)1048584L;
    }
    public static int CONTEXT_DEBUG_REGISTERS() {
        return (int)1048592L;
    }
    public static int CONTEXT_FULL() {
        return (int)1048587L;
    }
    public static int CONTEXT_ALL() {
        return (int)1048607L;
    }
    public static int CONTEXT_XSTATE() {
        return (int)1048640L;
    }
    public static int CONTEXT_EXCEPTION_ACTIVE() {
        return (int)134217728L;
    }
    public static int CONTEXT_SERVICE_ACTIVE() {
        return (int)268435456L;
    }
    public static int CONTEXT_EXCEPTION_REQUEST() {
        return (int)1073741824L;
    }
    public static int CONTEXT_EXCEPTION_REPORTING() {
        return (int)2147483648L;
    }
    public static int UNW_FLAG_NO_EPILOGUE() {
        return (int)2147483648L;
    }
    public static MemorySegment OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME() {
        return constants$1407.OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME$SEGMENT;
    }
    public static int WOW64_CONTEXT_CONTROL() {
        return (int)65537L;
    }
    public static int WOW64_CONTEXT_INTEGER() {
        return (int)65538L;
    }
    public static int WOW64_CONTEXT_SEGMENTS() {
        return (int)65540L;
    }
    public static int WOW64_CONTEXT_FLOATING_POINT() {
        return (int)65544L;
    }
    public static int WOW64_CONTEXT_DEBUG_REGISTERS() {
        return (int)65552L;
    }
    public static int WOW64_CONTEXT_EXTENDED_REGISTERS() {
        return (int)65568L;
    }
    public static int WOW64_CONTEXT_FULL() {
        return (int)65543L;
    }
    public static int WOW64_CONTEXT_ALL() {
        return (int)65599L;
    }
    public static int WOW64_CONTEXT_XSTATE() {
        return (int)65600L;
    }
    public static int WOW64_CONTEXT_EXCEPTION_REPORTING() {
        return (int)2147483648L;
    }
    public static int EXCEPTION_UNWIND() {
        return (int)102L;
    }
    public static int DELETE() {
        return (int)65536L;
    }
    public static int READ_CONTROL() {
        return (int)131072L;
    }
    public static int WRITE_DAC() {
        return (int)262144L;
    }
    public static int WRITE_OWNER() {
        return (int)524288L;
    }
    public static int SYNCHRONIZE() {
        return (int)1048576L;
    }
    public static int STANDARD_RIGHTS_REQUIRED() {
        return (int)983040L;
    }
    public static int STANDARD_RIGHTS_READ() {
        return (int)131072L;
    }
    public static int STANDARD_RIGHTS_WRITE() {
        return (int)131072L;
    }
    public static int STANDARD_RIGHTS_EXECUTE() {
        return (int)131072L;
    }
    public static int STANDARD_RIGHTS_ALL() {
        return (int)2031616L;
    }
    public static int SPECIFIC_RIGHTS_ALL() {
        return (int)65535L;
    }
    public static int ACCESS_SYSTEM_SECURITY() {
        return (int)16777216L;
    }
    public static int MAXIMUM_ALLOWED() {
        return (int)33554432L;
    }
    public static int GENERIC_READ() {
        return (int)2147483648L;
    }
    public static int GENERIC_WRITE() {
        return (int)1073741824L;
    }
    public static int GENERIC_EXECUTE() {
        return (int)536870912L;
    }
    public static int GENERIC_ALL() {
        return (int)268435456L;
    }
    public static int SID_REVISION() {
        return (int)1L;
    }
    public static int SID_MAX_SUB_AUTHORITIES() {
        return (int)15L;
    }
    public static int SID_RECOMMENDED_SUB_AUTHORITIES() {
        return (int)1L;
    }
    public static long SECURITY_MAX_SID_SIZE() {
        return 68L;
    }
    public static int SECURITY_MAX_SID_STRING_CHARACTERS() {
        return (int)187L;
    }
    public static int SECURITY_NULL_RID() {
        return (int)0L;
    }
    public static int SECURITY_WORLD_RID() {
        return (int)0L;
    }
    public static int SECURITY_LOCAL_RID() {
        return (int)0L;
    }
    public static int SECURITY_LOCAL_LOGON_RID() {
        return (int)1L;
    }
    public static int SECURITY_CREATOR_OWNER_RID() {
        return (int)0L;
    }
    public static int SECURITY_CREATOR_GROUP_RID() {
        return (int)1L;
    }
    public static int SECURITY_CREATOR_OWNER_SERVER_RID() {
        return (int)2L;
    }
    public static int SECURITY_CREATOR_GROUP_SERVER_RID() {
        return (int)3L;
    }
    public static int SECURITY_CREATOR_OWNER_RIGHTS_RID() {
        return (int)4L;
    }
    public static int SECURITY_DIALUP_RID() {
        return (int)1L;
    }
    public static int SECURITY_NETWORK_RID() {
        return (int)2L;
    }
    public static int SECURITY_BATCH_RID() {
        return (int)3L;
    }
    public static int SECURITY_INTERACTIVE_RID() {
        return (int)4L;
    }
    public static int SECURITY_LOGON_IDS_RID() {
        return (int)5L;
    }
    public static int SECURITY_LOGON_IDS_RID_COUNT() {
        return (int)3L;
    }
    public static int SECURITY_SERVICE_RID() {
        return (int)6L;
    }
    public static int SECURITY_ANONYMOUS_LOGON_RID() {
        return (int)7L;
    }
    public static int SECURITY_PROXY_RID() {
        return (int)8L;
    }
    public static int SECURITY_ENTERPRISE_CONTROLLERS_RID() {
        return (int)9L;
    }
    public static int SECURITY_SERVER_LOGON_RID() {
        return (int)9L;
    }
    public static int SECURITY_PRINCIPAL_SELF_RID() {
        return (int)10L;
    }
    public static int SECURITY_AUTHENTICATED_USER_RID() {
        return (int)11L;
    }
    public static int SECURITY_RESTRICTED_CODE_RID() {
        return (int)12L;
    }
    public static int SECURITY_TERMINAL_SERVER_RID() {
        return (int)13L;
    }
    public static int SECURITY_REMOTE_LOGON_RID() {
        return (int)14L;
    }
    public static int SECURITY_THIS_ORGANIZATION_RID() {
        return (int)15L;
    }
    public static int SECURITY_IUSER_RID() {
        return (int)17L;
    }
    public static int SECURITY_LOCAL_SYSTEM_RID() {
        return (int)18L;
    }
    public static int SECURITY_LOCAL_SERVICE_RID() {
        return (int)19L;
    }
    public static int SECURITY_NETWORK_SERVICE_RID() {
        return (int)20L;
    }
    public static int SECURITY_NT_NON_UNIQUE() {
        return (int)21L;
    }
    public static int SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT() {
        return (int)3L;
    }
    public static int SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID() {
        return (int)22L;
    }
    public static int SECURITY_BUILTIN_DOMAIN_RID() {
        return (int)32L;
    }
    public static int SECURITY_WRITE_RESTRICTED_CODE_RID() {
        return (int)33L;
    }
    public static int SECURITY_PACKAGE_BASE_RID() {
        return (int)64L;
    }
    public static int SECURITY_PACKAGE_RID_COUNT() {
        return (int)2L;
    }
    public static int SECURITY_PACKAGE_NTLM_RID() {
        return (int)10L;
    }
    public static int SECURITY_PACKAGE_SCHANNEL_RID() {
        return (int)14L;
    }
    public static int SECURITY_PACKAGE_DIGEST_RID() {
        return (int)21L;
    }
    public static int SECURITY_CRED_TYPE_BASE_RID() {
        return (int)65L;
    }
    public static int SECURITY_CRED_TYPE_RID_COUNT() {
        return (int)2L;
    }
    public static int SECURITY_CRED_TYPE_THIS_ORG_CERT_RID() {
        return (int)1L;
    }
    public static int SECURITY_MIN_BASE_RID() {
        return (int)80L;
    }
    public static int SECURITY_SERVICE_ID_BASE_RID() {
        return (int)80L;
    }
    public static int SECURITY_SERVICE_ID_RID_COUNT() {
        return (int)6L;
    }
    public static int SECURITY_RESERVED_ID_BASE_RID() {
        return (int)81L;
    }
    public static int SECURITY_APPPOOL_ID_BASE_RID() {
        return (int)82L;
    }
    public static int SECURITY_APPPOOL_ID_RID_COUNT() {
        return (int)6L;
    }
    public static int SECURITY_VIRTUALSERVER_ID_BASE_RID() {
        return (int)83L;
    }
    public static int SECURITY_VIRTUALSERVER_ID_RID_COUNT() {
        return (int)6L;
    }
    public static int SECURITY_USERMODEDRIVERHOST_ID_BASE_RID() {
        return (int)84L;
    }
    public static int SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT() {
        return (int)6L;
    }
    public static int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID() {
        return (int)85L;
    }
    public static int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT() {
        return (int)6L;
    }
    public static int SECURITY_WMIHOST_ID_BASE_RID() {
        return (int)86L;
    }
    public static int SECURITY_WMIHOST_ID_RID_COUNT() {
        return (int)6L;
    }
    public static int SECURITY_TASK_ID_BASE_RID() {
        return (int)87L;
    }
    public static int SECURITY_NFS_ID_BASE_RID() {
        return (int)88L;
    }
    public static int SECURITY_COM_ID_BASE_RID() {
        return (int)89L;
    }
    public static int SECURITY_WINDOW_MANAGER_BASE_RID() {
        return (int)90L;
    }
    public static int SECURITY_RDV_GFX_BASE_RID() {
        return (int)91L;
    }
    public static int SECURITY_DASHOST_ID_BASE_RID() {
        return (int)92L;
    }
    public static int SECURITY_DASHOST_ID_RID_COUNT() {
        return (int)6L;
    }
    public static int SECURITY_USERMANAGER_ID_BASE_RID() {
        return (int)93L;
    }
    public static int SECURITY_USERMANAGER_ID_RID_COUNT() {
        return (int)6L;
    }
    public static int SECURITY_WINRM_ID_BASE_RID() {
        return (int)94L;
    }
    public static int SECURITY_WINRM_ID_RID_COUNT() {
        return (int)6L;
    }
    public static int SECURITY_CCG_ID_BASE_RID() {
        return (int)95L;
    }
    public static int SECURITY_UMFD_BASE_RID() {
        return (int)96L;
    }
    public static int SECURITY_VIRTUALACCOUNT_ID_RID_COUNT() {
        return (int)6L;
    }
    public static int SECURITY_MAX_BASE_RID() {
        return (int)111L;
    }
    public static int SECURITY_MAX_ALWAYS_FILTERED() {
        return (int)999L;
    }
    public static int SECURITY_MIN_NEVER_FILTERED() {
        return (int)1000L;
    }
    public static int SECURITY_OTHER_ORGANIZATION_RID() {
        return (int)1000L;
    }
    public static int SECURITY_WINDOWSMOBILE_ID_BASE_RID() {
        return (int)112L;
    }
    public static int SECURITY_INSTALLER_GROUP_CAPABILITY_BASE() {
        return (int)32L;
    }
    public static int SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT() {
        return (int)9L;
    }
    public static int SECURITY_INSTALLER_CAPABILITY_RID_COUNT() {
        return (int)10L;
    }
    public static int SECURITY_LOCAL_ACCOUNT_RID() {
        return (int)113L;
    }
    public static int SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID() {
        return (int)114L;
    }
    public static int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED() {
        return (int)496L;
    }
    public static int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS() {
        return (int)497L;
    }
    public static int DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS() {
        return (int)498L;
    }
    public static int FOREST_USER_RID_MAX() {
        return (int)499L;
    }
    public static int DOMAIN_USER_RID_ADMIN() {
        return (int)500L;
    }
    public static int DOMAIN_USER_RID_GUEST() {
        return (int)501L;
    }
    public static int DOMAIN_USER_RID_KRBTGT() {
        return (int)502L;
    }
    public static int DOMAIN_USER_RID_DEFAULT_ACCOUNT() {
        return (int)503L;
    }
    public static int DOMAIN_USER_RID_WDAG_ACCOUNT() {
        return (int)504L;
    }
    public static int DOMAIN_USER_RID_MAX() {
        return (int)999L;
    }
    public static int DOMAIN_GROUP_RID_ADMINS() {
        return (int)512L;
    }
    public static int DOMAIN_GROUP_RID_USERS() {
        return (int)513L;
    }
    public static int DOMAIN_GROUP_RID_GUESTS() {
        return (int)514L;
    }
    public static int DOMAIN_GROUP_RID_COMPUTERS() {
        return (int)515L;
    }
    public static int DOMAIN_GROUP_RID_CONTROLLERS() {
        return (int)516L;
    }
    public static int DOMAIN_GROUP_RID_CERT_ADMINS() {
        return (int)517L;
    }
    public static int DOMAIN_GROUP_RID_SCHEMA_ADMINS() {
        return (int)518L;
    }
    public static int DOMAIN_GROUP_RID_ENTERPRISE_ADMINS() {
        return (int)519L;
    }
    public static int DOMAIN_GROUP_RID_POLICY_ADMINS() {
        return (int)520L;
    }
    public static int DOMAIN_GROUP_RID_READONLY_CONTROLLERS() {
        return (int)521L;
    }
    public static int DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS() {
        return (int)522L;
    }
    public static int DOMAIN_GROUP_RID_CDC_RESERVED() {
        return (int)524L;
    }
    public static int DOMAIN_GROUP_RID_PROTECTED_USERS() {
        return (int)525L;
    }
    public static int DOMAIN_GROUP_RID_KEY_ADMINS() {
        return (int)526L;
    }
    public static int DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS() {
        return (int)527L;
    }
    public static int DOMAIN_ALIAS_RID_ADMINS() {
        return (int)544L;
    }
    public static int DOMAIN_ALIAS_RID_USERS() {
        return (int)545L;
    }
    public static int DOMAIN_ALIAS_RID_GUESTS() {
        return (int)546L;
    }
    public static int DOMAIN_ALIAS_RID_POWER_USERS() {
        return (int)547L;
    }
    public static int DOMAIN_ALIAS_RID_ACCOUNT_OPS() {
        return (int)548L;
    }
    public static int DOMAIN_ALIAS_RID_SYSTEM_OPS() {
        return (int)549L;
    }
    public static int DOMAIN_ALIAS_RID_PRINT_OPS() {
        return (int)550L;
    }
    public static int DOMAIN_ALIAS_RID_BACKUP_OPS() {
        return (int)551L;
    }
    public static int DOMAIN_ALIAS_RID_REPLICATOR() {
        return (int)552L;
    }
    public static int DOMAIN_ALIAS_RID_RAS_SERVERS() {
        return (int)553L;
    }
    public static int DOMAIN_ALIAS_RID_PREW2KCOMPACCESS() {
        return (int)554L;
    }
    public static int DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS() {
        return (int)555L;
    }
    public static int DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS() {
        return (int)556L;
    }
    public static int DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS() {
        return (int)557L;
    }
    public static int DOMAIN_ALIAS_RID_MONITORING_USERS() {
        return (int)558L;
    }
    public static int DOMAIN_ALIAS_RID_LOGGING_USERS() {
        return (int)559L;
    }
    public static int DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS() {
        return (int)560L;
    }
    public static int DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS() {
        return (int)561L;
    }
    public static int DOMAIN_ALIAS_RID_DCOM_USERS() {
        return (int)562L;
    }
    public static int DOMAIN_ALIAS_RID_IUSERS() {
        return (int)568L;
    }
    public static int DOMAIN_ALIAS_RID_CRYPTO_OPERATORS() {
        return (int)569L;
    }
    public static int DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP() {
        return (int)571L;
    }
    public static int DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP() {
        return (int)572L;
    }
    public static int DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP() {
        return (int)573L;
    }
    public static int DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP() {
        return (int)574L;
    }
    public static int DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS() {
        return (int)575L;
    }
    public static int DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS() {
        return (int)576L;
    }
    public static int DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS() {
        return (int)577L;
    }
    public static int DOMAIN_ALIAS_RID_HYPER_V_ADMINS() {
        return (int)578L;
    }
    public static int DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS() {
        return (int)579L;
    }
    public static int DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS() {
        return (int)580L;
    }
    public static int DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT() {
        return (int)581L;
    }
    public static int DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS() {
        return (int)582L;
    }
    public static int DOMAIN_ALIAS_RID_DEVICE_OWNERS() {
        return (int)583L;
    }
    public static int SECURITY_APP_PACKAGE_BASE_RID() {
        return (int)2L;
    }
    public static int SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT() {
        return (int)2L;
    }
    public static int SECURITY_APP_PACKAGE_RID_COUNT() {
        return (int)8L;
    }
    public static int SECURITY_CAPABILITY_BASE_RID() {
        return (int)3L;
    }
    public static int SECURITY_CAPABILITY_APP_RID() {
        return (int)1024L;
    }
    public static int SECURITY_BUILTIN_CAPABILITY_RID_COUNT() {
        return (int)2L;
    }
    public static int SECURITY_CAPABILITY_RID_COUNT() {
        return (int)5L;
    }
    public static int SECURITY_PARENT_PACKAGE_RID_COUNT() {
        return (int)8L;
    }
    public static int SECURITY_CHILD_PACKAGE_RID_COUNT() {
        return (int)12L;
    }
    public static int SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE() {
        return (int)1L;
    }
    public static int SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE() {
        return (int)2L;
    }
    public static int SECURITY_CAPABILITY_INTERNET_CLIENT() {
        return (int)1L;
    }
    public static int SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER() {
        return (int)2L;
    }
    public static int SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER() {
        return (int)3L;
    }
    public static int SECURITY_CAPABILITY_PICTURES_LIBRARY() {
        return (int)4L;
    }
    public static int SECURITY_CAPABILITY_VIDEOS_LIBRARY() {
        return (int)5L;
    }
    public static int SECURITY_CAPABILITY_MUSIC_LIBRARY() {
        return (int)6L;
    }
    public static int SECURITY_CAPABILITY_DOCUMENTS_LIBRARY() {
        return (int)7L;
    }
    public static int SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION() {
        return (int)8L;
    }
    public static int SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES() {
        return (int)9L;
    }
    public static int SECURITY_CAPABILITY_REMOVABLE_STORAGE() {
        return (int)10L;
    }
    public static int SECURITY_CAPABILITY_APPOINTMENTS() {
        return (int)11L;
    }
    public static int SECURITY_CAPABILITY_CONTACTS() {
        return (int)12L;
    }
    public static int SECURITY_CAPABILITY_INTERNET_EXPLORER() {
        return (int)4096L;
    }
    public static int SECURITY_MANDATORY_UNTRUSTED_RID() {
        return (int)0L;
    }
    public static int SECURITY_MANDATORY_LOW_RID() {
        return (int)4096L;
    }
    public static int SECURITY_MANDATORY_MEDIUM_RID() {
        return (int)8192L;
    }
    public static int SECURITY_MANDATORY_MEDIUM_PLUS_RID() {
        return (int)8448L;
    }
    public static int SECURITY_MANDATORY_HIGH_RID() {
        return (int)12288L;
    }
    public static int SECURITY_MANDATORY_SYSTEM_RID() {
        return (int)16384L;
    }
    public static int SECURITY_MANDATORY_PROTECTED_PROCESS_RID() {
        return (int)20480L;
    }
    public static int SECURITY_MANDATORY_MAXIMUM_USER_RID() {
        return (int)16384L;
    }
    public static int SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT() {
        return (int)1L;
    }
    public static int SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID() {
        return (int)1L;
    }
    public static int SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID() {
        return (int)2L;
    }
    public static int SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID() {
        return (int)3L;
    }
    public static int SECURITY_AUTHENTICATION_KEY_TRUST_RID() {
        return (int)4L;
    }
    public static int SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID() {
        return (int)5L;
    }
    public static int SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID() {
        return (int)6L;
    }
    public static int SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT() {
        return (int)2L;
    }
    public static int SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID() {
        return (int)1024L;
    }
    public static int SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID() {
        return (int)512L;
    }
    public static int SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID() {
        return (int)0L;
    }
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID() {
        return (int)8192L;
    }
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID() {
        return (int)4096L;
    }
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID() {
        return (int)2048L;
    }
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID() {
        return (int)1536L;
    }
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID() {
        return (int)1024L;
    }
    public static int SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID() {
        return (int)0L;
    }
    public static long SECURITY_TRUSTED_INSTALLER_RID2() {
        return 3418522649L;
    }
    public static long SECURITY_TRUSTED_INSTALLER_RID5() {
        return 2271478464L;
    }
    public static int SE_GROUP_MANDATORY() {
        return (int)1L;
    }
    public static int SE_GROUP_ENABLED_BY_DEFAULT() {
        return (int)2L;
    }
    public static int SE_GROUP_ENABLED() {
        return (int)4L;
    }
    public static int SE_GROUP_OWNER() {
        return (int)8L;
    }
    public static int SE_GROUP_USE_FOR_DENY_ONLY() {
        return (int)16L;
    }
    public static int SE_GROUP_INTEGRITY() {
        return (int)32L;
    }
    public static int SE_GROUP_INTEGRITY_ENABLED() {
        return (int)64L;
    }
    public static int SE_GROUP_LOGON_ID() {
        return (int)3221225472L;
    }
    public static int SE_GROUP_RESOURCE() {
        return (int)536870912L;
    }
    public static int SE_GROUP_VALID_ATTRIBUTES() {
        return (int)3758096511L;
    }
    public static int ACL_REVISION() {
        return (int)2L;
    }
    public static int ACL_REVISION_DS() {
        return (int)4L;
    }
    public static int ACL_REVISION1() {
        return (int)1L;
    }
    public static int MIN_ACL_REVISION() {
        return (int)2L;
    }
    public static int ACL_REVISION2() {
        return (int)2L;
    }
    public static int ACL_REVISION3() {
        return (int)3L;
    }
    public static int ACL_REVISION4() {
        return (int)4L;
    }
    public static int MAX_ACL_REVISION() {
        return (int)4L;
    }
    public static int ACCESS_MIN_MS_ACE_TYPE() {
        return (int)0L;
    }
    public static int ACCESS_ALLOWED_ACE_TYPE() {
        return (int)0L;
    }
    public static int ACCESS_DENIED_ACE_TYPE() {
        return (int)1L;
    }
    public static int SYSTEM_AUDIT_ACE_TYPE() {
        return (int)2L;
    }
    public static int SYSTEM_ALARM_ACE_TYPE() {
        return (int)3L;
    }
    public static int ACCESS_MAX_MS_V2_ACE_TYPE() {
        return (int)3L;
    }
    public static int ACCESS_ALLOWED_COMPOUND_ACE_TYPE() {
        return (int)4L;
    }
    public static int ACCESS_MAX_MS_V3_ACE_TYPE() {
        return (int)4L;
    }
    public static int ACCESS_MIN_MS_OBJECT_ACE_TYPE() {
        return (int)5L;
    }
    public static int ACCESS_ALLOWED_OBJECT_ACE_TYPE() {
        return (int)5L;
    }
    public static int ACCESS_DENIED_OBJECT_ACE_TYPE() {
        return (int)6L;
    }
    public static int SYSTEM_AUDIT_OBJECT_ACE_TYPE() {
        return (int)7L;
    }
    public static int SYSTEM_ALARM_OBJECT_ACE_TYPE() {
        return (int)8L;
    }
    public static int ACCESS_MAX_MS_OBJECT_ACE_TYPE() {
        return (int)8L;
    }
    public static int ACCESS_MAX_MS_V4_ACE_TYPE() {
        return (int)8L;
    }
    public static int ACCESS_MAX_MS_ACE_TYPE() {
        return (int)8L;
    }
    public static int ACCESS_ALLOWED_CALLBACK_ACE_TYPE() {
        return (int)9L;
    }
    public static int ACCESS_DENIED_CALLBACK_ACE_TYPE() {
        return (int)10L;
    }
    public static int ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE() {
        return (int)11L;
    }
    public static int ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE() {
        return (int)12L;
    }
    public static int SYSTEM_AUDIT_CALLBACK_ACE_TYPE() {
        return (int)13L;
    }
    public static int SYSTEM_ALARM_CALLBACK_ACE_TYPE() {
        return (int)14L;
    }
    public static int SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE() {
        return (int)15L;
    }
    public static int SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE() {
        return (int)16L;
    }
    public static int SYSTEM_MANDATORY_LABEL_ACE_TYPE() {
        return (int)17L;
    }
    public static int SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE() {
        return (int)18L;
    }
    public static int SYSTEM_SCOPED_POLICY_ID_ACE_TYPE() {
        return (int)19L;
    }
    public static int SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE() {
        return (int)20L;
    }
    public static int SYSTEM_ACCESS_FILTER_ACE_TYPE() {
        return (int)21L;
    }
    public static int ACCESS_MAX_MS_V5_ACE_TYPE() {
        return (int)21L;
    }
    public static int OBJECT_INHERIT_ACE() {
        return (int)1L;
    }
    public static int CONTAINER_INHERIT_ACE() {
        return (int)2L;
    }
    public static int NO_PROPAGATE_INHERIT_ACE() {
        return (int)4L;
    }
    public static int INHERIT_ONLY_ACE() {
        return (int)8L;
    }
    public static int INHERITED_ACE() {
        return (int)16L;
    }
    public static int VALID_INHERIT_FLAGS() {
        return (int)31L;
    }
    public static int CRITICAL_ACE_FLAG() {
        return (int)32L;
    }
    public static int SUCCESSFUL_ACCESS_ACE_FLAG() {
        return (int)64L;
    }
    public static int FAILED_ACCESS_ACE_FLAG() {
        return (int)128L;
    }
    public static int TRUST_PROTECTED_FILTER_ACE_FLAG() {
        return (int)64L;
    }
    public static int SYSTEM_MANDATORY_LABEL_VALID_MASK() {
        return (int)7L;
    }
    public static int SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK() {
        return (int)4294967295L;
    }
    public static int SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK() {
        return (int)4294967295L;
    }
    public static int SECURITY_DESCRIPTOR_REVISION() {
        return (int)1L;
    }
    public static int SECURITY_DESCRIPTOR_REVISION1() {
        return (int)1L;
    }
    public static long SECURITY_DESCRIPTOR_MIN_LENGTH() {
        return 40L;
    }
    public static int SE_OWNER_DEFAULTED() {
        return (int)1L;
    }
    public static int SE_GROUP_DEFAULTED() {
        return (int)2L;
    }
    public static int SE_DACL_PRESENT() {
        return (int)4L;
    }
    public static int SE_DACL_DEFAULTED() {
        return (int)8L;
    }
    public static int SE_SACL_PRESENT() {
        return (int)16L;
    }
    public static int SE_SACL_DEFAULTED() {
        return (int)32L;
    }
    public static int SE_DACL_AUTO_INHERIT_REQ() {
        return (int)256L;
    }
    public static int SE_SACL_AUTO_INHERIT_REQ() {
        return (int)512L;
    }
    public static int SE_DACL_AUTO_INHERITED() {
        return (int)1024L;
    }
    public static int SE_SACL_AUTO_INHERITED() {
        return (int)2048L;
    }
    public static int SE_DACL_PROTECTED() {
        return (int)4096L;
    }
    public static int SE_SACL_PROTECTED() {
        return (int)8192L;
    }
    public static int SE_RM_CONTROL_VALID() {
        return (int)16384L;
    }
    public static int SE_SELF_RELATIVE() {
        return (int)32768L;
    }
    public static MemorySegment ACCESS_DS_SOURCE_A() {
        return constants$1407.ACCESS_DS_SOURCE_A$SEGMENT;
    }
    public static MemorySegment ACCESS_DS_SOURCE_W() {
        return constants$1407.ACCESS_DS_SOURCE_W$SEGMENT;
    }
    public static MemorySegment ACCESS_DS_OBJECT_TYPE_NAME_A() {
        return constants$1407.ACCESS_DS_OBJECT_TYPE_NAME_A$SEGMENT;
    }
    public static MemorySegment ACCESS_DS_OBJECT_TYPE_NAME_W() {
        return constants$1407.ACCESS_DS_OBJECT_TYPE_NAME_W$SEGMENT;
    }
    public static int SE_PRIVILEGE_ENABLED_BY_DEFAULT() {
        return (int)1L;
    }
    public static int SE_PRIVILEGE_ENABLED() {
        return (int)2L;
    }
    public static int SE_PRIVILEGE_REMOVED() {
        return (int)4L;
    }
    public static int SE_PRIVILEGE_USED_FOR_ACCESS() {
        return (int)2147483648L;
    }
    public static int SE_PRIVILEGE_VALID_ATTRIBUTES() {
        return (int)2147483655L;
    }
    public static int PRIVILEGE_SET_ALL_NECESSARY() {
        return (int)1L;
    }
    public static int ACCESS_REASON_STAGING_MASK() {
        return (int)2147483648L;
    }
    public static MemorySegment SE_CREATE_TOKEN_NAME() {
        return constants$1408.SE_CREATE_TOKEN_NAME$SEGMENT;
    }
    public static MemorySegment SE_ASSIGNPRIMARYTOKEN_NAME() {
        return constants$1408.SE_ASSIGNPRIMARYTOKEN_NAME$SEGMENT;
    }
    public static MemorySegment SE_LOCK_MEMORY_NAME() {
        return constants$1408.SE_LOCK_MEMORY_NAME$SEGMENT;
    }
    public static MemorySegment SE_INCREASE_QUOTA_NAME() {
        return constants$1408.SE_INCREASE_QUOTA_NAME$SEGMENT;
    }
    public static MemorySegment SE_UNSOLICITED_INPUT_NAME() {
        return constants$1408.SE_UNSOLICITED_INPUT_NAME$SEGMENT;
    }
    public static MemorySegment SE_MACHINE_ACCOUNT_NAME() {
        return constants$1408.SE_MACHINE_ACCOUNT_NAME$SEGMENT;
    }
    public static MemorySegment SE_TCB_NAME() {
        return constants$1409.SE_TCB_NAME$SEGMENT;
    }
    public static MemorySegment SE_SECURITY_NAME() {
        return constants$1409.SE_SECURITY_NAME$SEGMENT;
    }
    public static MemorySegment SE_TAKE_OWNERSHIP_NAME() {
        return constants$1409.SE_TAKE_OWNERSHIP_NAME$SEGMENT;
    }
    public static MemorySegment SE_LOAD_DRIVER_NAME() {
        return constants$1409.SE_LOAD_DRIVER_NAME$SEGMENT;
    }
}


