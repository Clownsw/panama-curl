// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class curl_h_21 extends curl_h_20 {

    public static int MSHLFLAGS_RESERVED4() {
        return (int)64L;
    }
    public static int MSHCTX_LOCAL() {
        return (int)0L;
    }
    public static int MSHCTX_NOSHAREDMEM() {
        return (int)1L;
    }
    public static int MSHCTX_DIFFERENTMACHINE() {
        return (int)2L;
    }
    public static int MSHCTX_INPROC() {
        return (int)3L;
    }
    public static int MSHCTX_CROSSCTX() {
        return (int)4L;
    }
    public static int MSHCTX_RESERVED1() {
        return (int)5L;
    }
    public static OfAddress UP_BYTE_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_WORD_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_DWORD_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_FLAGGED_BYTE_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress UP_FLAGGED_WORD_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static MemoryLayout IWinTypesBase_v0_1_c_ifspec$LAYOUT() {
        return constants$922.IWinTypesBase_v0_1_c_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypesBase_v0_1_c_ifspec$VH() {
        return constants$922.IWinTypesBase_v0_1_c_ifspec$VH;
    }
    public static MemorySegment IWinTypesBase_v0_1_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$922.IWinTypesBase_v0_1_c_ifspec$SEGMENT,"IWinTypesBase_v0_1_c_ifspec");
    }
    public static MemoryAddress IWinTypesBase_v0_1_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$922.IWinTypesBase_v0_1_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$922.IWinTypesBase_v0_1_c_ifspec$SEGMENT, "IWinTypesBase_v0_1_c_ifspec"));
    }
    public static void IWinTypesBase_v0_1_c_ifspec$set( MemoryAddress x) {
        constants$922.IWinTypesBase_v0_1_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$922.IWinTypesBase_v0_1_c_ifspec$SEGMENT, "IWinTypesBase_v0_1_c_ifspec"), x);
    }
    public static MemoryLayout IWinTypesBase_v0_1_s_ifspec$LAYOUT() {
        return constants$922.IWinTypesBase_v0_1_s_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypesBase_v0_1_s_ifspec$VH() {
        return constants$922.IWinTypesBase_v0_1_s_ifspec$VH;
    }
    public static MemorySegment IWinTypesBase_v0_1_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$922.IWinTypesBase_v0_1_s_ifspec$SEGMENT,"IWinTypesBase_v0_1_s_ifspec");
    }
    public static MemoryAddress IWinTypesBase_v0_1_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$922.IWinTypesBase_v0_1_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$922.IWinTypesBase_v0_1_s_ifspec$SEGMENT, "IWinTypesBase_v0_1_s_ifspec"));
    }
    public static void IWinTypesBase_v0_1_s_ifspec$set( MemoryAddress x) {
        constants$922.IWinTypesBase_v0_1_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$922.IWinTypesBase_v0_1_s_ifspec$SEGMENT, "IWinTypesBase_v0_1_s_ifspec"), x);
    }
    public static OfAddress LPBLOB = Constants$root.C_POINTER$LAYOUT;
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$LAYOUT() {
        return constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH() {
        return constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$LAYOUT() {
        return constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH() {
        return constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$LAYOUT() {
        return constants$922.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH() {
        return constants$922.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$922.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$922.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$LAYOUT() {
        return constants$923.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH() {
        return constants$923.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$923.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$923.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$923.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$923.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$923.__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec"), x);
    }
    public static int DVASPECT_CONTENT() {
        return (int)1L;
    }
    public static int DVASPECT_THUMBNAIL() {
        return (int)2L;
    }
    public static int DVASPECT_ICON() {
        return (int)4L;
    }
    public static int DVASPECT_DOCPRINT() {
        return (int)8L;
    }
    public static int STGC_DEFAULT() {
        return (int)0L;
    }
    public static int STGC_OVERWRITE() {
        return (int)1L;
    }
    public static int STGC_ONLYIFCURRENT() {
        return (int)2L;
    }
    public static int STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE() {
        return (int)4L;
    }
    public static int STGC_CONSOLIDATE() {
        return (int)8L;
    }
    public static int STGMOVE_MOVE() {
        return (int)0L;
    }
    public static int STGMOVE_COPY() {
        return (int)1L;
    }
    public static int STGMOVE_SHALLOWCOPY() {
        return (int)2L;
    }
    public static int STATFLAG_DEFAULT() {
        return (int)0L;
    }
    public static int STATFLAG_NONAME() {
        return (int)1L;
    }
    public static int STATFLAG_NOOPEN() {
        return (int)2L;
    }
    public static OfAddress HCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireCLIPFORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHGLOBAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHWND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHACCEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHICON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMONITOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHBITMAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHENHMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireHMETAFILEPICT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMETAFILEPICT = Constants$root.C_POINTER$LAYOUT;
    public static MemoryLayout IWinTypes_v0_1_c_ifspec$LAYOUT() {
        return constants$923.IWinTypes_v0_1_c_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypes_v0_1_c_ifspec$VH() {
        return constants$923.IWinTypes_v0_1_c_ifspec$VH;
    }
    public static MemorySegment IWinTypes_v0_1_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$923.IWinTypes_v0_1_c_ifspec$SEGMENT,"IWinTypes_v0_1_c_ifspec");
    }
    public static MemoryAddress IWinTypes_v0_1_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$923.IWinTypes_v0_1_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$923.IWinTypes_v0_1_c_ifspec$SEGMENT, "IWinTypes_v0_1_c_ifspec"));
    }
    public static void IWinTypes_v0_1_c_ifspec$set( MemoryAddress x) {
        constants$923.IWinTypes_v0_1_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$923.IWinTypes_v0_1_c_ifspec$SEGMENT, "IWinTypes_v0_1_c_ifspec"), x);
    }
    public static MemoryLayout IWinTypes_v0_1_s_ifspec$LAYOUT() {
        return constants$923.IWinTypes_v0_1_s_ifspec$LAYOUT;
    }
    public static VarHandle IWinTypes_v0_1_s_ifspec$VH() {
        return constants$923.IWinTypes_v0_1_s_ifspec$VH;
    }
    public static MemorySegment IWinTypes_v0_1_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$923.IWinTypes_v0_1_s_ifspec$SEGMENT,"IWinTypes_v0_1_s_ifspec");
    }
    public static MemoryAddress IWinTypes_v0_1_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$923.IWinTypes_v0_1_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$923.IWinTypes_v0_1_s_ifspec$SEGMENT, "IWinTypes_v0_1_s_ifspec"));
    }
    public static void IWinTypes_v0_1_s_ifspec$set( MemoryAddress x) {
        constants$923.IWinTypes_v0_1_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$923.IWinTypes_v0_1_s_ifspec$SEGMENT, "IWinTypes_v0_1_s_ifspec"), x);
    }
    public static OfDouble DATE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress LPCY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDECIMAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress wireBSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress BSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfShort VARIANT_BOOL = Constants$root.C_SHORT$LAYOUT;
    public static OfAddress LPBSTRBLOB = Constants$root.C_POINTER$LAYOUT;
    public static int VT_EMPTY() {
        return (int)0L;
    }
    public static int VT_NULL() {
        return (int)1L;
    }
    public static int VT_I2() {
        return (int)2L;
    }
    public static int VT_I4() {
        return (int)3L;
    }
    public static int VT_R4() {
        return (int)4L;
    }
    public static int VT_R8() {
        return (int)5L;
    }
    public static int VT_CY() {
        return (int)6L;
    }
    public static int VT_DATE() {
        return (int)7L;
    }
    public static int VT_BSTR() {
        return (int)8L;
    }
    public static int VT_DISPATCH() {
        return (int)9L;
    }
    public static int VT_ERROR() {
        return (int)10L;
    }
    public static int VT_BOOL() {
        return (int)11L;
    }
    public static int VT_VARIANT() {
        return (int)12L;
    }
    public static int VT_UNKNOWN() {
        return (int)13L;
    }
    public static int VT_DECIMAL() {
        return (int)14L;
    }
    public static int VT_I1() {
        return (int)16L;
    }
    public static int VT_UI1() {
        return (int)17L;
    }
    public static int VT_UI2() {
        return (int)18L;
    }
    public static int VT_UI4() {
        return (int)19L;
    }
    public static int VT_I8() {
        return (int)20L;
    }
    public static int VT_UI8() {
        return (int)21L;
    }
    public static int VT_INT() {
        return (int)22L;
    }
    public static int VT_UINT() {
        return (int)23L;
    }
    public static int VT_VOID() {
        return (int)24L;
    }
    public static int VT_HRESULT() {
        return (int)25L;
    }
    public static int VT_PTR() {
        return (int)26L;
    }
    public static int VT_SAFEARRAY() {
        return (int)27L;
    }
    public static int VT_CARRAY() {
        return (int)28L;
    }
    public static int VT_USERDEFINED() {
        return (int)29L;
    }
    public static int VT_LPSTR() {
        return (int)30L;
    }
    public static int VT_LPWSTR() {
        return (int)31L;
    }
    public static int VT_RECORD() {
        return (int)36L;
    }
    public static int VT_INT_PTR() {
        return (int)37L;
    }
    public static int VT_UINT_PTR() {
        return (int)38L;
    }
    public static int VT_FILETIME() {
        return (int)64L;
    }
    public static int VT_BLOB() {
        return (int)65L;
    }
    public static int VT_STREAM() {
        return (int)66L;
    }
    public static int VT_STORAGE() {
        return (int)67L;
    }
    public static int VT_STREAMED_OBJECT() {
        return (int)68L;
    }
    public static int VT_STORED_OBJECT() {
        return (int)69L;
    }
    public static int VT_BLOB_OBJECT() {
        return (int)70L;
    }
    public static int VT_CF() {
        return (int)71L;
    }
    public static int VT_CLSID() {
        return (int)72L;
    }
    public static int VT_VERSIONED_STREAM() {
        return (int)73L;
    }
    public static int VT_BSTR_BLOB() {
        return (int)4095L;
    }
    public static int VT_VECTOR() {
        return (int)4096L;
    }
    public static int VT_ARRAY() {
        return (int)8192L;
    }
    public static int VT_BYREF() {
        return (int)16384L;
    }
    public static int VT_RESERVED() {
        return (int)32768L;
    }
    public static int VT_ILLEGAL() {
        return (int)65535L;
    }
    public static int VT_ILLEGALMASKED() {
        return (int)4095L;
    }
    public static int VT_TYPEMASK() {
        return (int)4095L;
    }
    public static int TYSPEC_CLSID() {
        return (int)0L;
    }
    public static int TYSPEC_FILEEXT() {
        return (int)1L;
    }
    public static int TYSPEC_MIMETYPE() {
        return (int)2L;
    }
    public static int TYSPEC_FILENAME() {
        return (int)3L;
    }
    public static int TYSPEC_PROGID() {
        return (int)4L;
    }
    public static int TYSPEC_PACKAGENAME() {
        return (int)5L;
    }
    public static int TYSPEC_OBJECTID() {
        return (int)6L;
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$LAYOUT() {
        return constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH() {
        return constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$LAYOUT() {
        return constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH() {
        return constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$923.__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec"), x);
    }
    public static MemorySegment GUID_DEVINTERFACE_DISK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$923.GUID_DEVINTERFACE_DISK$SEGMENT,"GUID_DEVINTERFACE_DISK");
    }
    public static MemorySegment GUID_DEVINTERFACE_CDROM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$924.GUID_DEVINTERFACE_CDROM$SEGMENT,"GUID_DEVINTERFACE_CDROM");
    }
    public static MemorySegment GUID_DEVINTERFACE_PARTITION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$924.GUID_DEVINTERFACE_PARTITION$SEGMENT,"GUID_DEVINTERFACE_PARTITION");
    }
    public static MemorySegment GUID_DEVINTERFACE_TAPE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$924.GUID_DEVINTERFACE_TAPE$SEGMENT,"GUID_DEVINTERFACE_TAPE");
    }
    public static MemorySegment GUID_DEVINTERFACE_WRITEONCEDISK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$924.GUID_DEVINTERFACE_WRITEONCEDISK$SEGMENT,"GUID_DEVINTERFACE_WRITEONCEDISK");
    }
    public static MemorySegment GUID_DEVINTERFACE_VOLUME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$924.GUID_DEVINTERFACE_VOLUME$SEGMENT,"GUID_DEVINTERFACE_VOLUME");
    }
    public static MemorySegment GUID_DEVINTERFACE_MEDIUMCHANGER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$924.GUID_DEVINTERFACE_MEDIUMCHANGER$SEGMENT,"GUID_DEVINTERFACE_MEDIUMCHANGER");
    }
    public static MemorySegment GUID_DEVINTERFACE_FLOPPY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$925.GUID_DEVINTERFACE_FLOPPY$SEGMENT,"GUID_DEVINTERFACE_FLOPPY");
    }
    public static MemorySegment GUID_DEVINTERFACE_CDCHANGER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$925.GUID_DEVINTERFACE_CDCHANGER$SEGMENT,"GUID_DEVINTERFACE_CDCHANGER");
    }
    public static MemorySegment GUID_DEVINTERFACE_STORAGEPORT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$925.GUID_DEVINTERFACE_STORAGEPORT$SEGMENT,"GUID_DEVINTERFACE_STORAGEPORT");
    }
    public static MemorySegment GUID_DEVINTERFACE_VMLUN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$925.GUID_DEVINTERFACE_VMLUN$SEGMENT,"GUID_DEVINTERFACE_VMLUN");
    }
    public static MemorySegment GUID_DEVINTERFACE_SES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$925.GUID_DEVINTERFACE_SES$SEGMENT,"GUID_DEVINTERFACE_SES");
    }
    public static MemorySegment GUID_DEVINTERFACE_SERVICE_VOLUME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$925.GUID_DEVINTERFACE_SERVICE_VOLUME$SEGMENT,"GUID_DEVINTERFACE_SERVICE_VOLUME");
    }
    public static MemorySegment GUID_DEVINTERFACE_HIDDEN_VOLUME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$926.GUID_DEVINTERFACE_HIDDEN_VOLUME$SEGMENT,"GUID_DEVINTERFACE_HIDDEN_VOLUME");
    }
    public static MemorySegment GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$926.GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB$SEGMENT,"GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB");
    }
    public static MemorySegment GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$926.GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE$SEGMENT,"GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE");
    }
    public static MemorySegment GUID_SCM_PD_HEALTH_NOTIFICATION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$926.GUID_SCM_PD_HEALTH_NOTIFICATION$SEGMENT,"GUID_SCM_PD_HEALTH_NOTIFICATION");
    }
    public static MemorySegment GUID_SCM_PD_PASSTHROUGH_INVDIMM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$926.GUID_SCM_PD_PASSTHROUGH_INVDIMM$SEGMENT,"GUID_SCM_PD_PASSTHROUGH_INVDIMM");
    }
    public static MemorySegment GUID_DEVINTERFACE_COMPORT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$926.GUID_DEVINTERFACE_COMPORT$SEGMENT,"GUID_DEVINTERFACE_COMPORT");
    }
    public static MemorySegment GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$927.GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR$SEGMENT,"GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR");
    }
    public static OfAddress PSTORAGE_HOTPLUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMBERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMBER_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_BUS_RESET_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_BREAK_RESERVATION_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPREVENT_MEDIA_REMOVAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLASS_MEDIA_CHANGE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static int DDS_4mm() {
        return (int)32L;
    }
    public static int MiniQic() {
        return (int)33L;
    }
    public static int Travan() {
        return (int)34L;
    }
    public static int QIC() {
        return (int)35L;
    }
    public static int MP_8mm() {
        return (int)36L;
    }
    public static int AME_8mm() {
        return (int)37L;
    }
    public static int AIT1_8mm() {
        return (int)38L;
    }
    public static int DLT() {
        return (int)39L;
    }
    public static int NCTP() {
        return (int)40L;
    }
    public static int IBM_3480() {
        return (int)41L;
    }
    public static int IBM_3490E() {
        return (int)42L;
    }
    public static int IBM_Magstar_3590() {
        return (int)43L;
    }
    public static int IBM_Magstar_MP() {
        return (int)44L;
    }
    public static int STK_DATA_D3() {
        return (int)45L;
    }
    public static int SONY_DTF() {
        return (int)46L;
    }
    public static int DV_6mm() {
        return (int)47L;
    }
    public static int DMI() {
        return (int)48L;
    }
    public static int SONY_D2() {
        return (int)49L;
    }
    public static int CLEANER_CARTRIDGE() {
        return (int)50L;
    }
    public static int CD_ROM() {
        return (int)51L;
    }
    public static int CD_R() {
        return (int)52L;
    }
    public static int CD_RW() {
        return (int)53L;
    }
    public static int DVD_ROM() {
        return (int)54L;
    }
    public static int DVD_R() {
        return (int)55L;
    }
    public static int DVD_RW() {
        return (int)56L;
    }
    public static int MO_3_RW() {
        return (int)57L;
    }
    public static int MO_5_WO() {
        return (int)58L;
    }
    public static int MO_5_RW() {
        return (int)59L;
    }
    public static int MO_5_LIMDOW() {
        return (int)60L;
    }
    public static int PC_5_WO() {
        return (int)61L;
    }
    public static int PC_5_RW() {
        return (int)62L;
    }
    public static int PD_5_RW() {
        return (int)63L;
    }
    public static int ABL_5_WO() {
        return (int)64L;
    }
    public static int PINNACLE_APEX_5_RW() {
        return (int)65L;
    }
    public static int SONY_12_WO() {
        return (int)66L;
    }
    public static int PHILIPS_12_WO() {
        return (int)67L;
    }
    public static int HITACHI_12_WO() {
        return (int)68L;
    }
    public static int CYGNET_12_WO() {
        return (int)69L;
    }
    public static int KODAK_14_WO() {
        return (int)70L;
    }
    public static int MO_NFR_525() {
        return (int)71L;
    }
    public static int NIKON_12_RW() {
        return (int)72L;
    }
    public static int IOMEGA_ZIP() {
        return (int)73L;
    }
    public static int IOMEGA_JAZ() {
        return (int)74L;
    }
    public static int SYQUEST_EZ135() {
        return (int)75L;
    }
    public static int SYQUEST_EZFLYER() {
        return (int)76L;
    }
    public static int SYQUEST_SYJET() {
        return (int)77L;
    }
    public static int AVATAR_F2() {
        return (int)78L;
    }
    public static int MP2_8mm() {
        return (int)79L;
    }
    public static int DST_S() {
        return (int)80L;
    }
    public static int DST_M() {
        return (int)81L;
    }
    public static int DST_L() {
        return (int)82L;
    }
    public static int VXATape_1() {
        return (int)83L;
    }
    public static int VXATape_2() {
        return (int)84L;
    }
    public static int STK_9840() {
        return (int)85L;
    }
    public static int LTO_Ultrium() {
        return (int)86L;
    }
    public static int LTO_Accelis() {
        return (int)87L;
    }
    public static int DVD_RAM() {
        return (int)88L;
    }
    public static int AIT_8mm() {
        return (int)89L;
    }
    public static int ADR_1() {
        return (int)90L;
    }
    public static int ADR_2() {
        return (int)91L;
    }
    public static int STK_9940() {
        return (int)92L;
    }
    public static int SAIT() {
        return (int)93L;
    }
    public static int VXATape() {
        return (int)94L;
    }
    public static OfAddress PSTORAGE_MEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int BusTypeUnknown() {
        return (int)0L;
    }
    public static int BusTypeScsi() {
        return (int)1L;
    }
    public static int BusTypeAtapi() {
        return (int)2L;
    }
    public static int BusTypeAta() {
        return (int)3L;
    }
    public static int BusType1394() {
        return (int)4L;
    }
    public static int BusTypeSsa() {
        return (int)5L;
    }
    public static int BusTypeFibre() {
        return (int)6L;
    }
    public static int BusTypeUsb() {
        return (int)7L;
    }
    public static int BusTypeRAID() {
        return (int)8L;
    }
    public static int BusTypeiScsi() {
        return (int)9L;
    }
    public static int BusTypeSas() {
        return (int)10L;
    }
    public static int BusTypeSata() {
        return (int)11L;
    }
    public static int BusTypeSd() {
        return (int)12L;
    }
    public static int BusTypeMmc() {
        return (int)13L;
    }
    public static int BusTypeVirtual() {
        return (int)14L;
    }
    public static int BusTypeFileBackedVirtual() {
        return (int)15L;
    }
    public static int BusTypeSpaces() {
        return (int)16L;
    }
    public static int BusTypeNvme() {
        return (int)17L;
    }
    public static int BusTypeSCM() {
        return (int)18L;
    }
    public static int BusTypeUfs() {
        return (int)19L;
    }
    public static int BusTypeMax() {
        return (int)20L;
    }
    public static int BusTypeMaxReserved() {
        return (int)127L;
    }
    public static OfAddress PSTORAGE_BUS_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_MEDIA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_MEDIA_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PREDICT_FAILURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_FAILURE_PREDICTION_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static int PropertyStandardQuery() {
        return (int)0L;
    }
    public static int PropertyExistsQuery() {
        return (int)1L;
    }
    public static int PropertyMaskQuery() {
        return (int)2L;
    }
    public static int PropertyQueryMaxDefined() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_QUERY_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int PropertyStandardSet() {
        return (int)0L;
    }
    public static int PropertyExistsSet() {
        return (int)1L;
    }
    public static int PropertySetMaxDefined() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_SET_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDeviceProperty() {
        return (int)0L;
    }
    public static int StorageAdapterProperty() {
        return (int)1L;
    }
    public static int StorageDeviceIdProperty() {
        return (int)2L;
    }
    public static int StorageDeviceUniqueIdProperty() {
        return (int)3L;
    }
    public static int StorageDeviceWriteCacheProperty() {
        return (int)4L;
    }
    public static int StorageMiniportProperty() {
        return (int)5L;
    }
    public static int StorageAccessAlignmentProperty() {
        return (int)6L;
    }
    public static int StorageDeviceSeekPenaltyProperty() {
        return (int)7L;
    }
    public static int StorageDeviceTrimProperty() {
        return (int)8L;
    }
    public static int StorageDeviceWriteAggregationProperty() {
        return (int)9L;
    }
    public static int StorageDeviceDeviceTelemetryProperty() {
        return (int)10L;
    }
    public static int StorageDeviceLBProvisioningProperty() {
        return (int)11L;
    }
    public static int StorageDevicePowerProperty() {
        return (int)12L;
    }
    public static int StorageDeviceCopyOffloadProperty() {
        return (int)13L;
    }
    public static int StorageDeviceResiliencyProperty() {
        return (int)14L;
    }
    public static int StorageDeviceMediumProductType() {
        return (int)15L;
    }
    public static int StorageAdapterRpmbProperty() {
        return (int)16L;
    }
    public static int StorageAdapterCryptoProperty() {
        return (int)17L;
    }
    public static int StorageDeviceIoCapabilityProperty() {
        return (int)48L;
    }
    public static int StorageAdapterProtocolSpecificProperty() {
        return (int)49L;
    }
    public static int StorageDeviceProtocolSpecificProperty() {
        return (int)50L;
    }
    public static int StorageAdapterTemperatureProperty() {
        return (int)51L;
    }
    public static int StorageDeviceTemperatureProperty() {
        return (int)52L;
    }
    public static int StorageAdapterPhysicalTopologyProperty() {
        return (int)53L;
    }
    public static int StorageDevicePhysicalTopologyProperty() {
        return (int)54L;
    }
    public static int StorageDeviceAttributesProperty() {
        return (int)55L;
    }
    public static int StorageDeviceManagementStatus() {
        return (int)56L;
    }
    public static int StorageAdapterSerialNumberProperty() {
        return (int)57L;
    }
    public static int StorageDeviceLocationProperty() {
        return (int)58L;
    }
    public static int StorageDeviceNumaProperty() {
        return (int)59L;
    }
    public static int StorageDeviceZonedDeviceProperty() {
        return (int)60L;
    }
    public static int StorageDeviceUnsafeShutdownCount() {
        return (int)61L;
    }
    public static int StorageDeviceEnduranceProperty() {
        return (int)62L;
    }
    public static OfAddress PSTORAGE_PROPERTY_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROPERTY_QUERY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROPERTY_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DESCRIPTOR_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ADAPTER_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StoragePortCodeSetReserved() {
        return (int)0L;
    }
    public static int StoragePortCodeSetStorport() {
        return (int)1L;
    }
    public static int StoragePortCodeSetSCSIport() {
        return (int)2L;
    }
    public static int StoragePortCodeSetSpaceport() {
        return (int)3L;
    }
    public static int StoragePortCodeSetATAport() {
        return (int)4L;
    }
    public static int StoragePortCodeSetUSBport() {
        return (int)5L;
    }
    public static int StoragePortCodeSetSBP2port() {
        return (int)6L;
    }
    public static int StoragePortCodeSetSDport() {
        return (int)7L;
    }
    public static OfAddress PSTORAGE_PORT_CODE_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_MINIPORT_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdCodeSetReserved() {
        return (int)0L;
    }
    public static int StorageIdCodeSetBinary() {
        return (int)1L;
    }
    public static int StorageIdCodeSetAscii() {
        return (int)2L;
    }
    public static int StorageIdCodeSetUtf8() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_IDENTIFIER_CODE_SET = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdTypeVendorSpecific() {
        return (int)0L;
    }
    public static int StorageIdTypeVendorId() {
        return (int)1L;
    }
    public static int StorageIdTypeEUI64() {
        return (int)2L;
    }
    public static int StorageIdTypeFCPHName() {
        return (int)3L;
    }
    public static int StorageIdTypePortRelative() {
        return (int)4L;
    }
    public static int StorageIdTypeTargetPortGroup() {
        return (int)5L;
    }
    public static int StorageIdTypeLogicalUnitGroup() {
        return (int)6L;
    }
    public static int StorageIdTypeMD5LogicalUnitIdentifier() {
        return (int)7L;
    }
    public static int StorageIdTypeScsiNameString() {
        return (int)8L;
    }
    public static OfAddress PSTORAGE_IDENTIFIER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdNAAFormatIEEEExtended() {
        return (int)2L;
    }
    public static int StorageIdNAAFormatIEEERegistered() {
        return (int)3L;
    }
    public static int StorageIdNAAFormatIEEEERegisteredExtended() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_ID_NAA_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static int StorageIdAssocDevice() {
        return (int)0L;
    }
    public static int StorageIdAssocPort() {
        return (int)1L;
    }
    public static int StorageIdAssocTarget() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_ASSOCIATION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDENTIFIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_ID_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_SEEK_PENALTY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_WRITE_AGGREGATION_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_TRIM_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_LB_PROVISIONING_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_LB_PROVISIONING_MAP_RESOURCES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_POWER_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_COPY_OFFLOAD_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageRpmbFrameTypeUnknown() {
        return (int)0L;
    }
    public static int StorageRpmbFrameTypeStandard() {
        return (int)1L;
    }
    public static int StorageRpmbFrameTypeMax() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_RPMB_FRAME_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_RPMB_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageCryptoAlgorithmUnknown() {
        return (int)0L;
    }
    public static int StorageCryptoAlgorithmXTSAES() {
        return (int)1L;
    }
    public static int StorageCryptoAlgorithmBitlockerAESCBC() {
        return (int)2L;
    }
    public static int StorageCryptoAlgorithmAESECB() {
        return (int)3L;
    }
    public static int StorageCryptoAlgorithmESSIVAESCBC() {
        return (int)4L;
    }
    public static int StorageCryptoAlgorithmMax() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_CRYPTO_ALGORITHM_ID = Constants$root.C_POINTER$LAYOUT;
    public static int StorageCryptoKeySizeUnknown() {
        return (int)0L;
    }
    public static int StorageCryptoKeySize128Bits() {
        return (int)1L;
    }
    public static int StorageCryptoKeySize192Bits() {
        return (int)2L;
    }
    public static int StorageCryptoKeySize256Bits() {
        return (int)3L;
    }
    public static int StorageCryptoKeySize512Bits() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_CRYPTO_KEY_SIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_CRYPTO_CAPABILITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_CRYPTO_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int StorageTierMediaTypeUnspecified() {
        return (int)0L;
    }
    public static int StorageTierMediaTypeDisk() {
        return (int)1L;
    }
    public static int StorageTierMediaTypeSsd() {
        return (int)2L;
    }
    public static int StorageTierMediaTypeScm() {
        return (int)4L;
    }
    public static int StorageTierMediaTypeMax() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_TIER_MEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int StorageTierClassUnspecified() {
        return (int)0L;
    }
    public static int StorageTierClassCapacity() {
        return (int)1L;
    }
    public static int StorageTierClassPerformance() {
        return (int)2L;
    }
    public static int StorageTierClassMax() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_TIER_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_TIERING_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int ProtocolTypeUnknown() {
        return (int)0L;
    }
    public static int ProtocolTypeScsi() {
        return (int)1L;
    }
    public static int ProtocolTypeAta() {
        return (int)2L;
    }
    public static int ProtocolTypeNvme() {
        return (int)3L;
    }
    public static int ProtocolTypeSd() {
        return (int)4L;
    }
    public static int ProtocolTypeUfs() {
        return (int)5L;
    }
    public static int ProtocolTypeProprietary() {
        return (int)126L;
    }
    public static int ProtocolTypeMaxReserved() {
        return (int)127L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int NVMeDataTypeUnknown() {
        return (int)0L;
    }
    public static int NVMeDataTypeIdentify() {
        return (int)1L;
    }
    public static int NVMeDataTypeLogPage() {
        return (int)2L;
    }
    public static int NVMeDataTypeFeature() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_NVME_DATA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int AtaDataTypeUnknown() {
        return (int)0L;
    }
    public static int AtaDataTypeIdentify() {
        return (int)1L;
    }
    public static int AtaDataTypeLogPage() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_ATA_DATA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int UfsDataTypeUnknown() {
        return (int)0L;
    }
    public static int UfsDataTypeQueryDescriptor() {
        return (int)1L;
    }
    public static int UfsDataTypeMax() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_PROTOCOL_UFS_DATA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_SPECIFIC_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_DATA_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TEMPERATURE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TEMPERATURE_THRESHOLD = Constants$root.C_POINTER$LAYOUT;
    public static int FormFactorUnknown() {
        return (int)0L;
    }
    public static int FormFactor3_5() {
        return (int)1L;
    }
    public static int FormFactor2_5() {
        return (int)2L;
    }
    public static int FormFactor1_8() {
        return (int)3L;
    }
    public static int FormFactor1_8Less() {
        return (int)4L;
    }
    public static int FormFactorEmbedded() {
        return (int)5L;
    }
    public static int FormFactorMemoryCard() {
        return (int)6L;
    }
    public static int FormFactormSata() {
        return (int)7L;
    }
    public static int FormFactorM_2() {
        return (int)8L;
    }
    public static int FormFactorPCIeBoard() {
        return (int)9L;
    }
    public static int FormFactorDimm() {
        return (int)10L;
    }
    public static OfAddress PSTORAGE_DEVICE_FORM_FACTOR = Constants$root.C_POINTER$LAYOUT;
    public static int HealthStatusUnknown() {
        return (int)0L;
    }
    public static int HealthStatusNormal() {
        return (int)1L;
    }
    public static int HealthStatusThrottled() {
        return (int)2L;
    }
    public static int HealthStatusWarning() {
        return (int)3L;
    }
    public static int HealthStatusDisabled() {
        return (int)4L;
    }
    public static int HealthStatusFailed() {
        return (int)5L;
    }
    public static OfAddress PSTORAGE_COMPONENT_HEALTH_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_SPEC_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_DEVICE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_ADAPTER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_NODE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static int DiskHealthUnknown() {
        return (int)0L;
    }
    public static int DiskHealthUnhealthy() {
        return (int)1L;
    }
    public static int DiskHealthWarning() {
        return (int)2L;
    }
    public static int DiskHealthHealthy() {
        return (int)3L;
    }
    public static int DiskHealthMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_DISK_HEALTH_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int DiskOpStatusNone() {
        return (int)0L;
    }
    public static int DiskOpStatusUnknown() {
        return (int)1L;
    }
    public static int DiskOpStatusOk() {
        return (int)2L;
    }
    public static int DiskOpStatusPredictingFailure() {
        return (int)3L;
    }
    public static int DiskOpStatusInService() {
        return (int)4L;
    }
    public static int DiskOpStatusHardwareError() {
        return (int)5L;
    }
    public static int DiskOpStatusNotUsable() {
        return (int)6L;
    }
    public static int DiskOpStatusTransientError() {
        return (int)7L;
    }
    public static int DiskOpStatusMissing() {
        return (int)8L;
    }
    public static OfAddress PSTORAGE_DISK_OPERATIONAL_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int DiskOpReasonUnknown() {
        return (int)0L;
    }
    public static int DiskOpReasonScsiSenseCode() {
        return (int)1L;
    }
    public static int DiskOpReasonMedia() {
        return (int)2L;
    }
    public static int DiskOpReasonIo() {
        return (int)3L;
    }
    public static int DiskOpReasonThresholdExceeded() {
        return (int)4L;
    }
    public static int DiskOpReasonLostData() {
        return (int)5L;
    }
    public static int DiskOpReasonEnergySource() {
        return (int)6L;
    }
    public static int DiskOpReasonConfiguration() {
        return (int)7L;
    }
    public static int DiskOpReasonDeviceController() {
        return (int)8L;
    }
    public static int DiskOpReasonMediaController() {
        return (int)9L;
    }
    public static int DiskOpReasonComponent() {
        return (int)10L;
    }
    public static int DiskOpReasonNVDIMM_N() {
        return (int)11L;
    }
    public static int DiskOpReasonBackgroundOperation() {
        return (int)12L;
    }
    public static int DiskOpReasonInvalidFirmware() {
        return (int)13L;
    }
    public static int DiskOpReasonHealthCheck() {
        return (int)14L;
    }
    public static int DiskOpReasonLostDataPersistence() {
        return (int)15L;
    }
    public static int DiskOpReasonDisabledByPlatform() {
        return (int)16L;
    }
    public static int DiskOpReasonLostWritePersistence() {
        return (int)17L;
    }
    public static int DiskOpReasonDataPersistenceLossImminent() {
        return (int)18L;
    }
    public static int DiskOpReasonWritePersistenceLossImminent() {
        return (int)19L;
    }
    public static int DiskOpReasonMax() {
        return (int)20L;
    }
    public static OfAddress PSTORAGE_OPERATIONAL_STATUS_REASON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OPERATIONAL_REASON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_MANAGEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ADAPTER_SERIAL_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static int ZonedDeviceTypeUnknown() {
        return (int)0L;
    }
    public static int ZonedDeviceTypeHostManaged() {
        return (int)1L;
    }
    public static int ZonedDeviceTypeHostAware() {
        return (int)2L;
    }
    public static int ZonedDeviceTypeDeviceManaged() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_ZONED_DEVICE_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static int ZoneTypeUnknown() {
        return (int)0L;
    }
    public static int ZoneTypeConventional() {
        return (int)1L;
    }
    public static int ZoneTypeSequentialWriteRequired() {
        return (int)2L;
    }
    public static int ZoneTypeSequentialWritePreferred() {
        return (int)3L;
    }
    public static int ZoneTypeMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_ZONE_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ZONE_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ZONED_DEVICE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_LOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_LOCATION_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_NUMA_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_ENDURANCE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_MANAGE_DATA_SET_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_DEFINITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_NOTIFICATION_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OFFLOAD_TOKEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_OFFLOAD_READ_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OFFLOAD_READ_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_OFFLOAD_WRITE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_LBP_STATE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_ALLOCATION_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_LB_PROVISIONING_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_ALLOCATION_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_ALLOCATION_OUTPUT2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_REPAIR_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPAIR_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_REPAIR_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPAIR_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_SCRUB_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_SCRUB_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_SCRUB_EX_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_SCRUB_OUTPUT2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TIERING_QUERY_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TIERING_QUERY_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_TIER_REGION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TIERING_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_STORAGE_ADDRESS_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPORT_ZONES_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static int ZonesAttributeTypeAndLengthMayDifferent() {
        return (int)0L;
    }
    public static int ZonesAttributeTypeSameLengthSame() {
        return (int)1L;
    }
    public static int ZonesAttributeTypeSameLastZoneLengthDifferent() {
        return (int)2L;
    }
    public static int ZonesAttributeTypeMayDifferentLengthSame() {
        return (int)3L;
    }
    public static OfAddress PSTORAGE_ZONES_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static int ZoneConditionConventional() {
        return (int)0L;
    }
    public static int ZoneConditionEmpty() {
        return (int)1L;
    }
    public static int ZoneConditionImplicitlyOpened() {
        return (int)2L;
    }
    public static int ZoneConditionExplicitlyOpened() {
        return (int)3L;
    }
    public static int ZoneConditionClosed() {
        return (int)4L;
    }
    public static int ZoneConditionReadOnly() {
        return (int)13L;
    }
    public static int ZoneConditionFull() {
        return (int)14L;
    }
    public static int ZoneConditionOffline() {
        return (int)15L;
    }
    public static OfAddress PSTORAGE_ZONE_CONDITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ZONE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPORT_ZONES_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_REPORT_ZONES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_STORAGE_RANGE_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_RANGE_ERROR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_RANGE_ERROR_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_LOST_QUERY_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_LOST_QUERY_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_FREE_SPACE_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_DSM_CONVERSION_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle DeviceDsmParameterBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$927.DeviceDsmParameterBlock$MH,"DeviceDsmParameterBlock");
    }
    public static MemoryAddress DeviceDsmParameterBlock ( Addressable Input) {
        var mh$ = DeviceDsmParameterBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmDataSetRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$927.DeviceDsmDataSetRanges$MH,"DeviceDsmDataSetRanges");
    }
    public static MemoryAddress DeviceDsmDataSetRanges ( Addressable Input) {
        var mh$ = DeviceDsmDataSetRanges$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmNumberOfDataSetRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$927.DeviceDsmNumberOfDataSetRanges$MH,"DeviceDsmNumberOfDataSetRanges");
    }
    public static int DeviceDsmNumberOfDataSetRanges ( Addressable Input) {
        var mh$ = DeviceDsmNumberOfDataSetRanges$MH();
        try {
            return (int)mh$.invokeExact(Input);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetInputLength$MH() {
        return RuntimeHelper.requireNonNull(constants$927.DeviceDsmGetInputLength$MH,"DeviceDsmGetInputLength");
    }
    public static int DeviceDsmGetInputLength ( Addressable Definition,  int ParameterBlockLength,  int NumberOfDataSetRanges) {
        var mh$ = DeviceDsmGetInputLength$MH();
        try {
            return (int)mh$.invokeExact(Definition, ParameterBlockLength, NumberOfDataSetRanges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetNumberOfDataSetRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$927.DeviceDsmGetNumberOfDataSetRanges$MH,"DeviceDsmGetNumberOfDataSetRanges");
    }
    public static int DeviceDsmGetNumberOfDataSetRanges ( Addressable Definition,  int InputLength,  int ParameterBlockLength) {
        var mh$ = DeviceDsmGetNumberOfDataSetRanges$MH();
        try {
            return (int)mh$.invokeExact(Definition, InputLength, ParameterBlockLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmInitializeInput$MH() {
        return RuntimeHelper.requireNonNull(constants$928.DeviceDsmInitializeInput$MH,"DeviceDsmInitializeInput");
    }
    public static void DeviceDsmInitializeInput ( Addressable Definition,  Addressable Input,  int InputLength,  int Flags,  Addressable Parameters,  int ParameterBlockLength) {
        var mh$ = DeviceDsmInitializeInput$MH();
        try {
            mh$.invokeExact(Definition, Input, InputLength, Flags, Parameters, ParameterBlockLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmAddDataSetRange$MH() {
        return RuntimeHelper.requireNonNull(constants$928.DeviceDsmAddDataSetRange$MH,"DeviceDsmAddDataSetRange");
    }
    public static byte DeviceDsmAddDataSetRange ( Addressable Input,  int InputLength,  long Offset,  long Length) {
        var mh$ = DeviceDsmAddDataSetRange$MH();
        try {
            return (byte)mh$.invokeExact(Input, InputLength, Offset, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmValidateInput$MH() {
        return RuntimeHelper.requireNonNull(constants$928.DeviceDsmValidateInput$MH,"DeviceDsmValidateInput");
    }
    public static byte DeviceDsmValidateInput ( Addressable Definition,  Addressable Input,  int InputLength) {
        var mh$ = DeviceDsmValidateInput$MH();
        try {
            return (byte)mh$.invokeExact(Definition, Input, InputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmOutputBlock$MH() {
        return RuntimeHelper.requireNonNull(constants$928.DeviceDsmOutputBlock$MH,"DeviceDsmOutputBlock");
    }
    public static MemoryAddress DeviceDsmOutputBlock ( Addressable Output) {
        var mh$ = DeviceDsmOutputBlock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Output);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetOutputLength$MH() {
        return RuntimeHelper.requireNonNull(constants$928.DeviceDsmGetOutputLength$MH,"DeviceDsmGetOutputLength");
    }
    public static int DeviceDsmGetOutputLength ( Addressable Definition,  int OutputBlockLength) {
        var mh$ = DeviceDsmGetOutputLength$MH();
        try {
            return (int)mh$.invokeExact(Definition, OutputBlockLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmValidateOutputLength$MH() {
        return RuntimeHelper.requireNonNull(constants$928.DeviceDsmValidateOutputLength$MH,"DeviceDsmValidateOutputLength");
    }
    public static byte DeviceDsmValidateOutputLength ( Addressable Definition,  int OutputLength) {
        var mh$ = DeviceDsmValidateOutputLength$MH();
        try {
            return (byte)mh$.invokeExact(Definition, OutputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmGetOutputBlockLength$MH() {
        return RuntimeHelper.requireNonNull(constants$929.DeviceDsmGetOutputBlockLength$MH,"DeviceDsmGetOutputBlockLength");
    }
    public static int DeviceDsmGetOutputBlockLength ( Addressable Definition,  int OutputLength) {
        var mh$ = DeviceDsmGetOutputBlockLength$MH();
        try {
            return (int)mh$.invokeExact(Definition, OutputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmInitializeOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$929.DeviceDsmInitializeOutput$MH,"DeviceDsmInitializeOutput");
    }
    public static void DeviceDsmInitializeOutput ( Addressable Definition,  Addressable Output,  int OutputLength,  int Flags) {
        var mh$ = DeviceDsmInitializeOutput$MH();
        try {
            mh$.invokeExact(Definition, Output, OutputLength, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeviceDsmValidateOutput$MH() {
        return RuntimeHelper.requireNonNull(constants$929.DeviceDsmValidateOutput$MH,"DeviceDsmValidateOutput");
    }
    public static byte DeviceDsmValidateOutput ( Addressable Definition,  Addressable Output,  int OutputLength) {
        var mh$ = DeviceDsmValidateOutput$MH();
        try {
            return (byte)mh$.invokeExact(Definition, Output, OutputLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSTORAGE_GET_BC_PROPERTIES_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ALLOCATE_BC_STREAM_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PRIORITY_HINT_SUPPORT = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDiagnosticLevelDefault() {
        return (int)0L;
    }
    public static int StorageDiagnosticLevelMax() {
        return (int)1L;
    }
    public static OfAddress PSTORAGE_DIAGNOSTIC_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDiagnosticTargetTypeUndefined() {
        return (int)0L;
    }
    public static int StorageDiagnosticTargetTypePort() {
        return (int)1L;
    }
    public static int StorageDiagnosticTargetTypeMiniport() {
        return (int)2L;
    }
    public static int StorageDiagnosticTargetTypeHbaFirmware() {
        return (int)3L;
    }
    public static int StorageDiagnosticTargetTypeMax() {
        return (int)4L;
    }
    public static OfAddress PSTORAGE_DIAGNOSTIC_TARGET_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DIAGNOSTIC_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DIAGNOSTIC_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPHYSICAL_ELEMENT_STATUS_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPHYSICAL_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static int DeviceInternalStatusDataRequestTypeUndefined() {
        return (int)0L;
    }
    public static int DeviceCurrentInternalStatusDataHeader() {
        return (int)1L;
    }
    public static int DeviceCurrentInternalStatusData() {
        return (int)2L;
    }
    public static OfAddress PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int DeviceStatusDataSetUndefined() {
        return (int)0L;
    }
    public static int DeviceStatusDataSet1() {
        return (int)1L;
    }
    public static int DeviceStatusDataSet2() {
        return (int)2L;
    }
    public static int DeviceStatusDataSet3() {
        return (int)3L;
    }
    public static int DeviceStatusDataSet4() {
        return (int)4L;
    }
    public static int DeviceStatusDataSetMax() {
        return (int)5L;
    }
    public static OfAddress PDEVICE_INTERNAL_STATUS_DATA_SET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICE_INTERNAL_STATUS_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_MEDIA_SERIAL_NUMBER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_READ_CAPACITY = Constants$root.C_POINTER$LAYOUT;
    public static int WriteCacheTypeUnknown() {
        return (int)0L;
    }
    public static int WriteCacheTypeNone() {
        return (int)1L;
    }
    public static int WriteCacheTypeWriteBack() {
        return (int)2L;
    }
    public static int WriteCacheTypeWriteThrough() {
        return (int)3L;
    }
    public static int WriteCacheEnableUnknown() {
        return (int)0L;
    }
    public static int WriteCacheDisabled() {
        return (int)1L;
    }
    public static int WriteCacheEnabled() {
        return (int)2L;
    }
    public static int WriteCacheChangeUnknown() {
        return (int)0L;
    }
    public static int WriteCacheNotChangeable() {
        return (int)1L;
    }
    public static int WriteCacheChangeable() {
        return (int)2L;
    }
    public static int WriteThroughUnknown() {
        return (int)0L;
    }
    public static int WriteThroughNotSupported() {
        return (int)1L;
    }
    public static int WriteThroughSupported() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_WRITE_CACHE_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERSISTENT_RESERVE_COMMAND = Constants$root.C_POINTER$LAYOUT;
    public static int TCCollectionBugCheck() {
        return (int)1L;
    }
    public static int TCCollectionApplicationRequested() {
        return (int)2L;
    }
    public static int TCCollectionDeviceRequested() {
        return (int)3L;
    }
    public static OfAddress PDEVICEDUMP_COLLECTION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_SUBSECTION_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STRUCTURE_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_SECTION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGP_LOG_PAGE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_PUBLIC_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_RESTRICTED_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_PRIVATE_SUBSECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGEDEVICE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDLE_POWER = Constants$root.C_POINTER$LAYOUT;
    public static int StoragePowerupUnknown() {
        return (int)0L;
    }
    public static int StoragePowerupIO() {
        return (int)1L;
    }
    public static int StoragePowerupDeviceAttention() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_POWERUP_REASON_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_IDLE_POWERUP_REASON = Constants$root.C_POINTER$LAYOUT;
    public static int StorageDevicePowerCapUnitsPercent() {
        return (int)0L;
    }
    public static int StorageDevicePowerCapUnitsMilliwatts() {
        return (int)1L;
    }
    public static OfAddress PSTORAGE_DEVICE_POWER_CAP_UNITS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_DEVICE_POWER_CAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_RPMB_DATA_FRAME = Constants$root.C_POINTER$LAYOUT;
    public static int StorRpmbProgramAuthKey() {
        return (int)1L;
    }
    public static int StorRpmbQueryWriteCounter() {
        return (int)2L;
    }
    public static int StorRpmbAuthenticatedWrite() {
        return (int)3L;
    }
    public static int StorRpmbAuthenticatedRead() {
        return (int)4L;
    }
    public static int StorRpmbReadResultRequest() {
        return (int)5L;
    }
    public static int StorRpmbAuthenticatedDeviceConfigWrite() {
        return (int)6L;
    }
    public static int StorRpmbAuthenticatedDeviceConfigRead() {
        return (int)7L;
    }
    public static OfAddress PSTORAGE_RPMB_COMMAND_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_EVENT_NOTIFICATION = Constants$root.C_POINTER$LAYOUT;
    public static int StorageCounterTypeUnknown() {
        return (int)0L;
    }
    public static int StorageCounterTypeTemperatureCelsius() {
        return (int)1L;
    }
    public static int StorageCounterTypeTemperatureCelsiusMax() {
        return (int)2L;
    }
    public static int StorageCounterTypeReadErrorsTotal() {
        return (int)3L;
    }
    public static int StorageCounterTypeReadErrorsCorrected() {
        return (int)4L;
    }
    public static int StorageCounterTypeReadErrorsUncorrected() {
        return (int)5L;
    }
    public static int StorageCounterTypeWriteErrorsTotal() {
        return (int)6L;
    }
    public static int StorageCounterTypeWriteErrorsCorrected() {
        return (int)7L;
    }
    public static int StorageCounterTypeWriteErrorsUncorrected() {
        return (int)8L;
    }
    public static int StorageCounterTypeManufactureDate() {
        return (int)9L;
    }
    public static int StorageCounterTypeStartStopCycleCount() {
        return (int)10L;
    }
    public static int StorageCounterTypeStartStopCycleCountMax() {
        return (int)11L;
    }
    public static int StorageCounterTypeLoadUnloadCycleCount() {
        return (int)12L;
    }
    public static int StorageCounterTypeLoadUnloadCycleCountMax() {
        return (int)13L;
    }
    public static int StorageCounterTypeWearPercentage() {
        return (int)14L;
    }
    public static int StorageCounterTypeWearPercentageWarning() {
        return (int)15L;
    }
    public static int StorageCounterTypeWearPercentageMax() {
        return (int)16L;
    }
    public static int StorageCounterTypePowerOnHours() {
        return (int)17L;
    }
    public static int StorageCounterTypeReadLatency100NSMax() {
        return (int)18L;
    }
    public static int StorageCounterTypeWriteLatency100NSMax() {
        return (int)19L;
    }
    public static int StorageCounterTypeFlushLatency100NSMax() {
        return (int)20L;
    }
    public static int StorageCounterTypeMax() {
        return (int)21L;
    }
    public static OfAddress PSTORAGE_COUNTER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_COUNTER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_COUNTERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_INFO_QUERY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_SLOT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_DOWNLOAD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_HW_FIRMWARE_ACTIVATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_PROTOCOL_COMMAND = Constants$root.C_POINTER$LAYOUT;
    public static int StorAttributeMgmt_ClearAttribute() {
        return (int)0L;
    }
    public static int StorAttributeMgmt_SetAttribute() {
        return (int)1L;
    }
    public static int StorAttributeMgmt_ResetAttribute() {
        return (int)2L;
    }
    public static OfAddress PSTORAGE_ATTRIBUTE_MGMT_ACTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_ATTRIBUTE_MGMT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_HEALTH_NOTIFICATION_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_LOGICAL_DEVICE_INSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_LOGICAL_DEVICES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PHYSICAL_DEVICE_INSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PHYSICAL_DEVICES = Constants$root.C_POINTER$LAYOUT;
    public static int ScmRegionFlagNone() {
        return (int)0L;
    }
    public static int ScmRegionFlagLabel() {
        return (int)1L;
    }
    public static OfAddress PSCM_REGION_FLAG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_REGION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_REGIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_INTERLEAVED_PD_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_LD_INTERLEAVE_SET_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceQuery_Descriptor() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceQuery_IsSupported() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceQuery_Max() {
        return (int)2L;
    }
    public static OfAddress PSCM_PD_QUERY_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceProperty_DeviceInfo() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceProperty_ManagementStatus() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceProperty_FirmwareInfo() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceProperty_LocationString() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceProperty_DeviceSpecificInfo() {
        return (int)4L;
    }
    public static int ScmPhysicalDeviceProperty_DeviceHandle() {
        return (int)5L;
    }
    public static int ScmPhysicalDeviceProperty_Max() {
        return (int)6L;
    }
    public static OfAddress PSCM_PD_PROPERTY_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PROPERTY_QUERY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DESCRIPTOR_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_SPECIFIC_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_DEVICE_SPECIFIC_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_SLOT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceHealth_Unknown() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceHealth_Unhealthy() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceHealth_Warning() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceHealth_Healthy() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceHealth_Max() {
        return (int)4L;
    }
    public static OfAddress PSCM_PD_HEALTH_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceOpStatus_Unknown() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceOpStatus_Ok() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceOpStatus_PredictingFailure() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceOpStatus_InService() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceOpStatus_HardwareError() {
        return (int)4L;
    }
    public static int ScmPhysicalDeviceOpStatus_NotUsable() {
        return (int)5L;
    }
    public static int ScmPhysicalDeviceOpStatus_TransientError() {
        return (int)6L;
    }
    public static int ScmPhysicalDeviceOpStatus_Missing() {
        return (int)7L;
    }
    public static int ScmPhysicalDeviceOpStatus_Max() {
        return (int)8L;
    }
    public static OfAddress PSCM_PD_OPERATIONAL_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceOpReason_Unknown() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceOpReason_Media() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceOpReason_ThresholdExceeded() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceOpReason_LostData() {
        return (int)3L;
    }
    public static int ScmPhysicalDeviceOpReason_EnergySource() {
        return (int)4L;
    }
    public static int ScmPhysicalDeviceOpReason_Configuration() {
        return (int)5L;
    }
    public static int ScmPhysicalDeviceOpReason_DeviceController() {
        return (int)6L;
    }
    public static int ScmPhysicalDeviceOpReason_MediaController() {
        return (int)7L;
    }
    public static int ScmPhysicalDeviceOpReason_Component() {
        return (int)8L;
    }
    public static int ScmPhysicalDeviceOpReason_BackgroundOperation() {
        return (int)9L;
    }
    public static int ScmPhysicalDeviceOpReason_InvalidFirmware() {
        return (int)10L;
    }
    public static int ScmPhysicalDeviceOpReason_HealthCheck() {
        return (int)11L;
    }
    public static int ScmPhysicalDeviceOpReason_LostDataPersistence() {
        return (int)12L;
    }
    public static int ScmPhysicalDeviceOpReason_DisabledByPlatform() {
        return (int)13L;
    }
    public static int ScmPhysicalDeviceOpReason_PermanentError() {
        return (int)14L;
    }
    public static int ScmPhysicalDeviceOpReason_LostWritePersistence() {
        return (int)15L;
    }
    public static int ScmPhysicalDeviceOpReason_FatalError() {
        return (int)16L;
    }
    public static int ScmPhysicalDeviceOpReason_DataPersistenceLossImminent() {
        return (int)17L;
    }
    public static int ScmPhysicalDeviceOpReason_WritePersistenceLossImminent() {
        return (int)18L;
    }
    public static int ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock() {
        return (int)19L;
    }
    public static int ScmPhysicalDeviceOpReason_PerformanceDegradation() {
        return (int)20L;
    }
    public static int ScmPhysicalDeviceOpReason_ExcessiveTemperature() {
        return (int)21L;
    }
    public static int ScmPhysicalDeviceOpReason_Max() {
        return (int)22L;
    }
    public static OfAddress PSCM_PD_OPERATIONAL_STATUS_REASON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_MANAGEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_LOCATION_STRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_DOWNLOAD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_FIRMWARE_ACTIVATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_INVDIMM_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_REINITIALIZE_MEDIA_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static int ScmPhysicalDeviceReinit_Success() {
        return (int)0L;
    }
    public static int ScmPhysicalDeviceReinit_RebootNeeded() {
        return (int)1L;
    }
    public static int ScmPhysicalDeviceReinit_ColdBootNeeded() {
        return (int)2L;
    }
    public static int ScmPhysicalDeviceReinit_Max() {
        return (int)3L;
    }
    public static OfAddress PSCM_PD_MEDIA_REINITIALIZATION_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCM_PD_REINITIALIZE_MEDIA_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int Unknown() {
        return (int)0L;
    }
    public static int F5_1Pt2_512() {
        return (int)1L;
    }
    public static int F3_1Pt44_512() {
        return (int)2L;
    }
    public static int F3_2Pt88_512() {
        return (int)3L;
    }
    public static int F3_20Pt8_512() {
        return (int)4L;
    }
    public static int F3_720_512() {
        return (int)5L;
    }
    public static int F5_360_512() {
        return (int)6L;
    }
    public static int F5_320_512() {
        return (int)7L;
    }
    public static int F5_320_1024() {
        return (int)8L;
    }
    public static int F5_180_512() {
        return (int)9L;
    }
    public static int F5_160_512() {
        return (int)10L;
    }
    public static int RemovableMedia() {
        return (int)11L;
    }
    public static int FixedMedia() {
        return (int)12L;
    }
    public static int F3_120M_512() {
        return (int)13L;
    }
    public static int F3_640_512() {
        return (int)14L;
    }
    public static int F5_640_512() {
        return (int)15L;
    }
    public static int F5_720_512() {
        return (int)16L;
    }
    public static int F3_1Pt2_512() {
        return (int)17L;
    }
    public static int F3_1Pt23_1024() {
        return (int)18L;
    }
    public static int F5_1Pt23_1024() {
        return (int)19L;
    }
    public static int F3_128Mb_512() {
        return (int)20L;
    }
    public static int F3_230Mb_512() {
        return (int)21L;
    }
    public static int F8_256_128() {
        return (int)22L;
    }
    public static int F3_200Mb_512() {
        return (int)23L;
    }
    public static int F3_240M_512() {
        return (int)24L;
    }
    public static int F3_32M_512() {
        return (int)25L;
    }
    public static OfAddress PMEDIA_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBAD_TRACK_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_EX_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_GEOMETRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARTITION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_PARTITION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVERIFY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREASSIGN_BLOCKS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREASSIGN_BLOCKS_EX = Constants$root.C_POINTER$LAYOUT;
    public static int PARTITION_STYLE_MBR() {
        return (int)0L;
    }
    public static int PARTITION_STYLE_GPT() {
        return (int)1L;
    }
    public static int PARTITION_STYLE_RAW() {
        return (int)2L;
    }
    public static OfAddress PPARTITION_INFORMATION_GPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARTITION_INFORMATION_MBR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_PARTITION_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_DISK_GPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_DISK_MBR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_DISK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_LENGTH_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARTITION_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION_GPT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION_MBR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVE_LAYOUT_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static int DetectNone() {
        return (int)0L;
    }
    public static int DetectInt13() {
        return (int)1L;
    }
    public static int DetectExInt13() {
        return (int)2L;
    }
    public static OfAddress PDISK_INT13_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_EX_INT13_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_DETECTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_PARTITION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_GEOMETRY_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_CONTROLLER_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static int EqualPriority() {
        return (int)0L;
    }
    public static int KeepPrefetchedData() {
        return (int)1L;
    }
    public static int KeepReadData() {
        return (int)2L;
    }
    public static OfAddress PDISK_CACHE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_GROW_PARTITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHISTOGRAM_BUCKET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_HISTOGRAM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_PERFORMANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISK_LOGGING = Constants$root.C_POINTER$LAYOUT;
    public static int RequestSize() {
        return (int)0L;
    }
    public static int RequestLocation() {
        return (int)1L;
    }
    public static OfAddress PBIN_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERF_BIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIN_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBIN_RESULTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGETVERSIONINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGETVERSIONINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIDEREGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIDEREGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSENDCMDINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSENDCMDINPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDRIVERSTATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDRIVERSTATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSENDCMDOUTPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSENDCMDOUTPARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_DISK_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSET_DISK_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static int AllElements() {
        return (int)0L;
    }
    public static int ChangerTransport() {
        return (int)1L;
    }
    public static int ChangerSlot() {
        return (int)2L;
    }
    public static int ChangerIEPort() {
        return (int)3L;
    }
    public static int ChangerDrive() {
        return (int)4L;
    }
    public static int ChangerDoor() {
        return (int)5L;
    }
    public static int ChangerKeypad() {
        return (int)6L;
    }
    public static int ChangerMaxElement() {
        return (int)7L;
    }
    public static OfAddress PELEMENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGET_CHANGER_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_PRODUCT_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_SET_ACCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_READ_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_ELEMENT_STATUS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_INITIALIZE_ELEMENT_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_SET_POSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_EXCHANGE_MEDIUM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_MOVE_MEDIUM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHANGER_SEND_VOLUME_TAG_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_ELEMENT_ADDRESS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static int DeviceProblemNone() {
        return (int)0L;
    }
    public static int DeviceProblemHardware() {
        return (int)1L;
    }
    public static int DeviceProblemCHMError() {
        return (int)2L;
    }
    public static int DeviceProblemDoorOpen() {
        return (int)3L;
    }
    public static int DeviceProblemCalibrationError() {
        return (int)4L;
    }
    public static int DeviceProblemTargetFailure() {
        return (int)5L;
    }
    public static int DeviceProblemCHMMoveError() {
        return (int)6L;
    }
    public static int DeviceProblemCHMZeroError() {
        return (int)7L;
    }
    public static int DeviceProblemCartridgeInsertError() {
        return (int)8L;
    }
    public static int DeviceProblemPositionError() {
        return (int)9L;
    }
    public static int DeviceProblemSensorError() {
        return (int)10L;
    }
    public static int DeviceProblemCartridgeEjectError() {
        return (int)11L;
    }
    public static int DeviceProblemGripperError() {
        return (int)12L;
    }
    public static int DeviceProblemDriveError() {
        return (int)13L;
    }
    public static OfAddress PCHANGER_DEVICE_PROBLEM_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPATHNAME_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFSCTL_QUERY_FAT_BPB_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_VOLUME_DATA_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_EXTENDED_VOLUME_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREFS_VOLUME_DATA_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTARTING_LCN_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTARTING_LCN_INPUT_BUFFER_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOLUME_BITMAP_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTARTING_VCN_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTERS_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTER_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_FILE_RECORD_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_FILE_RECORD_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOVE_FILE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOVE_FILE_RECORD_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOVE_FILE_DATA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFIND_BY_SID_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFIND_BY_SID_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMFT_ENUM_DATA_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMFT_ENUM_DATA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMFT_ENUM_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCREATE_USN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_FILE_USN_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_USN_JOURNAL_DATA_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_USN_JOURNAL_DATA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREAD_USN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_TRACK_MODIFIED_RANGES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RANGE_TRACK_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_V3 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_COMMON_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_EXTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_V4 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_RECORD_UNION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA_V0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDELETE_USN_JOURNAL_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMARK_HANDLE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMARK_HANDLE_INFO32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBULK_SECURITY_TEST_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PREFETCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_PREFETCH_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILESYSTEM_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFAT_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXFAT_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILESYSTEM_STATISTICS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNTFS_STATISTICS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_OBJECTID_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SET_SPARSE_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ZERO_DATA_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ZERO_DATA_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ALLOCATED_RANGE_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDECRYPTION_STATUS_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREQUEST_RAW_ENCRYPTED_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTED_DATA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXTENDED_ENCRYPTED_DATA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPLEX_READ_DATA_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSI_COPYFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_MAKE_COMPATIBLE_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SET_DEFECT_MGMT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_QUERY_SPARING_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_INITIATE_REPAIR_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static int ShrinkPrepare() {
        return (int)1L;
    }
    public static int ShrinkCommit() {
        return (int)2L;
    }
    public static int ShrinkAbort() {
        return (int)3L;
    }
    public static OfAddress PSHRINK_VOLUME_REQUEST_TYPES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSHRINK_VOLUME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_MODIFY_RM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_QUERY_RM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_ROLLFORWARD_REDO_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_START_RM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_GET_METADATA_INFO_OUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTION_LOCKED_FILES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTIONS_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_LIST_TRANSACTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_READ_BACKUP_INFORMATION_OUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_WRITE_BACKUP_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_GET_TRANSACTED_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_SAVEPOINT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_CREATE_MINIVERSION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTXFS_TRANSACTION_ACTIVE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBOOT_AREA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRETRIEVAL_POINTER_BASE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_FS_PERSISTENT_VOLUME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SYSTEM_RECOGNITION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREQUEST_OPLOCK_INPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREQUEST_OPLOCK_OUTPUT_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIRTUAL_STORAGE_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_CHANGE_MACHINE_SID_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_CHANGE_MACHINE_SID_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_QUERY_STATS_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_QUERY_STATS_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_ENUM_SDS_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSD_ENUM_SDS_ENTRY = Constants$root.C_POINTER$LAYOUT;
}


