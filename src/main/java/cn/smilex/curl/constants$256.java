// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$256 {

    static final FunctionDescriptor GetSystemTime$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSystemTime$MH = RuntimeHelper.downcallHandle(
        "GetSystemTime",
        constants$256.GetSystemTime$FUNC
    );
    static final FunctionDescriptor GetSystemTimeAsFileTime$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSystemTimeAsFileTime$MH = RuntimeHelper.downcallHandle(
        "GetSystemTimeAsFileTime",
        constants$256.GetSystemTimeAsFileTime$FUNC
    );
    static final FunctionDescriptor GetLocalTime$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetLocalTime$MH = RuntimeHelper.downcallHandle(
        "GetLocalTime",
        constants$256.GetLocalTime$FUNC
    );
    static final FunctionDescriptor IsUserCetAvailableInEnvironment$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle IsUserCetAvailableInEnvironment$MH = RuntimeHelper.downcallHandle(
        "IsUserCetAvailableInEnvironment",
        constants$256.IsUserCetAvailableInEnvironment$FUNC
    );
    static final FunctionDescriptor GetSystemLeapSecondInformation$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetSystemLeapSecondInformation$MH = RuntimeHelper.downcallHandle(
        "GetSystemLeapSecondInformation",
        constants$256.GetSystemLeapSecondInformation$FUNC
    );
    static final FunctionDescriptor GetVersion$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT);
    static final MethodHandle GetVersion$MH = RuntimeHelper.downcallHandle(
        "GetVersion",
        constants$256.GetVersion$FUNC
    );
}


