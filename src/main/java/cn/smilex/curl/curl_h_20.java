// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class curl_h_20 extends curl_h_19 {

    public static int DSA_HASH_ALGORITHM_SHA512() {
        return (int)2L;
    }
    public static int DSA_FIPS186_2() {
        return (int)0L;
    }
    public static int DSA_FIPS186_3() {
        return (int)1L;
    }
    public static OfAddress PBCRYPT_DSA_KEY_BLOB_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBCRYPT_KEY_DATA_BLOB_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static int BCRYPT_HASH_OPERATION_HASH_DATA() {
        return (int)1L;
    }
    public static int BCRYPT_HASH_OPERATION_FINISH_HASH() {
        return (int)2L;
    }
    public static int BCRYPT_OPERATION_TYPE_HASH() {
        return (int)1L;
    }
    public static MethodHandle BCryptOpenAlgorithmProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$793.BCryptOpenAlgorithmProvider$MH,"BCryptOpenAlgorithmProvider");
    }
    public static int BCryptOpenAlgorithmProvider ( Addressable phAlgorithm,  Addressable pszAlgId,  Addressable pszImplementation,  int dwFlags) {
        var mh$ = BCryptOpenAlgorithmProvider$MH();
        try {
            return (int)mh$.invokeExact(phAlgorithm, pszAlgId, pszImplementation, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumAlgorithms$MH() {
        return RuntimeHelper.requireNonNull(constants$793.BCryptEnumAlgorithms$MH,"BCryptEnumAlgorithms");
    }
    public static int BCryptEnumAlgorithms ( int dwAlgOperations,  Addressable pAlgCount,  Addressable ppAlgList,  int dwFlags) {
        var mh$ = BCryptEnumAlgorithms$MH();
        try {
            return (int)mh$.invokeExact(dwAlgOperations, pAlgCount, ppAlgList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$794.BCryptEnumProviders$MH,"BCryptEnumProviders");
    }
    public static int BCryptEnumProviders ( Addressable pszAlgId,  Addressable pImplCount,  Addressable ppImplList,  int dwFlags) {
        var mh$ = BCryptEnumProviders$MH();
        try {
            return (int)mh$.invokeExact(pszAlgId, pImplCount, ppImplList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$794.BCryptGetProperty$MH,"BCryptGetProperty");
    }
    public static int BCryptGetProperty ( Addressable hObject,  Addressable pszProperty,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptGetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$794.BCryptSetProperty$MH,"BCryptSetProperty");
    }
    public static int BCryptSetProperty ( Addressable hObject,  Addressable pszProperty,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = BCryptSetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCloseAlgorithmProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$794.BCryptCloseAlgorithmProvider$MH,"BCryptCloseAlgorithmProvider");
    }
    public static int BCryptCloseAlgorithmProvider ( Addressable hAlgorithm,  int dwFlags) {
        var mh$ = BCryptCloseAlgorithmProvider$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$794.BCryptFreeBuffer$MH,"BCryptFreeBuffer");
    }
    public static void BCryptFreeBuffer ( Addressable pvBuffer) {
        var mh$ = BCryptFreeBuffer$MH();
        try {
            mh$.invokeExact(pvBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenerateSymmetricKey$MH() {
        return RuntimeHelper.requireNonNull(constants$794.BCryptGenerateSymmetricKey$MH,"BCryptGenerateSymmetricKey");
    }
    public static int BCryptGenerateSymmetricKey ( Addressable hAlgorithm,  Addressable phKey,  Addressable pbKeyObject,  int cbKeyObject,  Addressable pbSecret,  int cbSecret,  int dwFlags) {
        var mh$ = BCryptGenerateSymmetricKey$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phKey, pbKeyObject, cbKeyObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenerateKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BCryptGenerateKeyPair$MH,"BCryptGenerateKeyPair");
    }
    public static int BCryptGenerateKeyPair ( Addressable hAlgorithm,  Addressable phKey,  int dwLength,  int dwFlags) {
        var mh$ = BCryptGenerateKeyPair$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phKey, dwLength, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BCryptEncrypt$MH,"BCryptEncrypt");
    }
    public static int BCryptEncrypt ( Addressable hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbIV,  int cbIV,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptEncrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BCryptDecrypt$MH,"BCryptDecrypt");
    }
    public static int BCryptDecrypt ( Addressable hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbIV,  int cbIV,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptDecrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbIV, cbIV, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BCryptExportKey$MH,"BCryptExportKey");
    }
    public static int BCryptExportKey ( Addressable hKey,  Addressable hExportKey,  Addressable pszBlobType,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptExportKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, hExportKey, pszBlobType, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BCryptImportKey$MH,"BCryptImportKey");
    }
    public static int BCryptImportKey ( Addressable hAlgorithm,  Addressable hImportKey,  Addressable pszBlobType,  Addressable phKey,  Addressable pbKeyObject,  int cbKeyObject,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = BCryptImportKey$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, hImportKey, pszBlobType, phKey, pbKeyObject, cbKeyObject, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptImportKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$795.BCryptImportKeyPair$MH,"BCryptImportKeyPair");
    }
    public static int BCryptImportKeyPair ( Addressable hAlgorithm,  Addressable hImportKey,  Addressable pszBlobType,  Addressable phKey,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = BCryptImportKeyPair$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, hImportKey, pszBlobType, phKey, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDuplicateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$796.BCryptDuplicateKey$MH,"BCryptDuplicateKey");
    }
    public static int BCryptDuplicateKey ( Addressable hKey,  Addressable phNewKey,  Addressable pbKeyObject,  int cbKeyObject,  int dwFlags) {
        var mh$ = BCryptDuplicateKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, phNewKey, pbKeyObject, cbKeyObject, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFinalizeKeyPair$MH() {
        return RuntimeHelper.requireNonNull(constants$796.BCryptFinalizeKeyPair$MH,"BCryptFinalizeKeyPair");
    }
    public static int BCryptFinalizeKeyPair ( Addressable hKey,  int dwFlags) {
        var mh$ = BCryptFinalizeKeyPair$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroyKey$MH() {
        return RuntimeHelper.requireNonNull(constants$796.BCryptDestroyKey$MH,"BCryptDestroyKey");
    }
    public static int BCryptDestroyKey ( Addressable hKey) {
        var mh$ = BCryptDestroyKey$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroySecret$MH() {
        return RuntimeHelper.requireNonNull(constants$796.BCryptDestroySecret$MH,"BCryptDestroySecret");
    }
    public static int BCryptDestroySecret ( Addressable hSecret) {
        var mh$ = BCryptDestroySecret$MH();
        try {
            return (int)mh$.invokeExact(hSecret);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSignHash$MH() {
        return RuntimeHelper.requireNonNull(constants$796.BCryptSignHash$MH,"BCryptSignHash");
    }
    public static int BCryptSignHash ( Addressable hKey,  Addressable pPaddingInfo,  Addressable pbInput,  int cbInput,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptSignHash$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbInput, cbInput, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptVerifySignature$MH() {
        return RuntimeHelper.requireNonNull(constants$796.BCryptVerifySignature$MH,"BCryptVerifySignature");
    }
    public static int BCryptVerifySignature ( Addressable hKey,  Addressable pPaddingInfo,  Addressable pbHash,  int cbHash,  Addressable pbSignature,  int cbSignature,  int dwFlags) {
        var mh$ = BCryptVerifySignature$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHash, cbHash, pbSignature, cbSignature, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSecretAgreement$MH() {
        return RuntimeHelper.requireNonNull(constants$797.BCryptSecretAgreement$MH,"BCryptSecretAgreement");
    }
    public static int BCryptSecretAgreement ( Addressable hPrivKey,  Addressable hPubKey,  Addressable phAgreedSecret,  int dwFlags) {
        var mh$ = BCryptSecretAgreement$MH();
        try {
            return (int)mh$.invokeExact(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$797.BCryptDeriveKey$MH,"BCryptDeriveKey");
    }
    public static int BCryptDeriveKey ( Addressable hSharedSecret,  Addressable pwszKDF,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptDeriveKey$MH();
        try {
            return (int)mh$.invokeExact(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptKeyDerivation$MH() {
        return RuntimeHelper.requireNonNull(constants$797.BCryptKeyDerivation$MH,"BCryptKeyDerivation");
    }
    public static int BCryptKeyDerivation ( Addressable hKey,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = BCryptKeyDerivation$MH();
        try {
            return (int)mh$.invokeExact(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$797.BCryptCreateHash$MH,"BCryptCreateHash");
    }
    public static int BCryptCreateHash ( Addressable hAlgorithm,  Addressable phHash,  Addressable pbHashObject,  int cbHashObject,  Addressable pbSecret,  int cbSecret,  int dwFlags) {
        var mh$ = BCryptCreateHash$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phHash, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptHashData$MH() {
        return RuntimeHelper.requireNonNull(constants$797.BCryptHashData$MH,"BCryptHashData");
    }
    public static int BCryptHashData ( Addressable hHash,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = BCryptHashData$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptFinishHash$MH() {
        return RuntimeHelper.requireNonNull(constants$797.BCryptFinishHash$MH,"BCryptFinishHash");
    }
    public static int BCryptFinishHash ( Addressable hHash,  Addressable pbOutput,  int cbOutput,  int dwFlags) {
        var mh$ = BCryptFinishHash$MH();
        try {
            return (int)mh$.invokeExact(hHash, pbOutput, cbOutput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateMultiHash$MH() {
        return RuntimeHelper.requireNonNull(constants$798.BCryptCreateMultiHash$MH,"BCryptCreateMultiHash");
    }
    public static int BCryptCreateMultiHash ( Addressable hAlgorithm,  Addressable phHash,  int nHashes,  Addressable pbHashObject,  int cbHashObject,  Addressable pbSecret,  int cbSecret,  int dwFlags) {
        var mh$ = BCryptCreateMultiHash$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, phHash, nHashes, pbHashObject, cbHashObject, pbSecret, cbSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptProcessMultiOperations$MH() {
        return RuntimeHelper.requireNonNull(constants$798.BCryptProcessMultiOperations$MH,"BCryptProcessMultiOperations");
    }
    public static int BCryptProcessMultiOperations ( Addressable hObject,  int operationType,  Addressable pOperations,  int cbOperations,  int dwFlags) {
        var mh$ = BCryptProcessMultiOperations$MH();
        try {
            return (int)mh$.invokeExact(hObject, operationType, pOperations, cbOperations, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDuplicateHash$MH() {
        return RuntimeHelper.requireNonNull(constants$798.BCryptDuplicateHash$MH,"BCryptDuplicateHash");
    }
    public static int BCryptDuplicateHash ( Addressable hHash,  Addressable phNewHash,  Addressable pbHashObject,  int cbHashObject,  int dwFlags) {
        var mh$ = BCryptDuplicateHash$MH();
        try {
            return (int)mh$.invokeExact(hHash, phNewHash, pbHashObject, cbHashObject, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDestroyHash$MH() {
        return RuntimeHelper.requireNonNull(constants$798.BCryptDestroyHash$MH,"BCryptDestroyHash");
    }
    public static int BCryptDestroyHash ( Addressable hHash) {
        var mh$ = BCryptDestroyHash$MH();
        try {
            return (int)mh$.invokeExact(hHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptHash$MH() {
        return RuntimeHelper.requireNonNull(constants$798.BCryptHash$MH,"BCryptHash");
    }
    public static int BCryptHash ( Addressable hAlgorithm,  Addressable pbSecret,  int cbSecret,  Addressable pbInput,  int cbInput,  Addressable pbOutput,  int cbOutput) {
        var mh$ = BCryptHash$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, pbSecret, cbSecret, pbInput, cbInput, pbOutput, cbOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGenRandom$MH() {
        return RuntimeHelper.requireNonNull(constants$798.BCryptGenRandom$MH,"BCryptGenRandom");
    }
    public static int BCryptGenRandom ( Addressable hAlgorithm,  Addressable pbBuffer,  int cbBuffer,  int dwFlags) {
        var mh$ = BCryptGenRandom$MH();
        try {
            return (int)mh$.invokeExact(hAlgorithm, pbBuffer, cbBuffer, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKeyCapi$MH() {
        return RuntimeHelper.requireNonNull(constants$799.BCryptDeriveKeyCapi$MH,"BCryptDeriveKeyCapi");
    }
    public static int BCryptDeriveKeyCapi ( Addressable hHash,  Addressable hTargetAlg,  Addressable pbDerivedKey,  int cbDerivedKey,  int dwFlags) {
        var mh$ = BCryptDeriveKeyCapi$MH();
        try {
            return (int)mh$.invokeExact(hHash, hTargetAlg, pbDerivedKey, cbDerivedKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeriveKeyPBKDF2$MH() {
        return RuntimeHelper.requireNonNull(constants$799.BCryptDeriveKeyPBKDF2$MH,"BCryptDeriveKeyPBKDF2");
    }
    public static int BCryptDeriveKeyPBKDF2 ( Addressable hPrf,  Addressable pbPassword,  int cbPassword,  Addressable pbSalt,  int cbSalt,  long cIterations,  Addressable pbDerivedKey,  int cbDerivedKey,  int dwFlags) {
        var mh$ = BCryptDeriveKeyPBKDF2$MH();
        try {
            return (int)mh$.invokeExact(hPrf, pbPassword, cbPassword, pbSalt, cbSalt, cIterations, pbDerivedKey, cbDerivedKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBCRYPT_INTERFACE_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_INTERFACE_REG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_IMAGE_REG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PROVIDER_REG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PROVIDERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTEXT_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTEXT_FUNCTION_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTEXTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTEXT_FUNCTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTEXT_FUNCTION_PROVIDERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PROPERTY_REF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_IMAGE_REF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PROVIDER_REF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PROVIDER_REFS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle BCryptQueryProviderRegistration$MH() {
        return RuntimeHelper.requireNonNull(constants$799.BCryptQueryProviderRegistration$MH,"BCryptQueryProviderRegistration");
    }
    public static int BCryptQueryProviderRegistration ( Addressable pszProvider,  int dwMode,  int dwInterface,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptQueryProviderRegistration$MH();
        try {
            return (int)mh$.invokeExact(pszProvider, dwMode, dwInterface, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumRegisteredProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$799.BCryptEnumRegisteredProviders$MH,"BCryptEnumRegisteredProviders");
    }
    public static int BCryptEnumRegisteredProviders ( Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptEnumRegisteredProviders$MH();
        try {
            return (int)mh$.invokeExact(pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$799.BCryptCreateContext$MH,"BCryptCreateContext");
    }
    public static int BCryptCreateContext ( int dwTable,  Addressable pszContext,  Addressable pConfig) {
        var mh$ = BCryptCreateContext$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, pConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptDeleteContext$MH() {
        return RuntimeHelper.requireNonNull(constants$799.BCryptDeleteContext$MH,"BCryptDeleteContext");
    }
    public static int BCryptDeleteContext ( int dwTable,  Addressable pszContext) {
        var mh$ = BCryptDeleteContext$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContexts$MH() {
        return RuntimeHelper.requireNonNull(constants$800.BCryptEnumContexts$MH,"BCryptEnumContexts");
    }
    public static int BCryptEnumContexts ( int dwTable,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptEnumContexts$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptConfigureContext$MH() {
        return RuntimeHelper.requireNonNull(constants$800.BCryptConfigureContext$MH,"BCryptConfigureContext");
    }
    public static int BCryptConfigureContext ( int dwTable,  Addressable pszContext,  Addressable pConfig) {
        var mh$ = BCryptConfigureContext$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, pConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextConfiguration$MH() {
        return RuntimeHelper.requireNonNull(constants$800.BCryptQueryContextConfiguration$MH,"BCryptQueryContextConfiguration");
    }
    public static int BCryptQueryContextConfiguration ( int dwTable,  Addressable pszContext,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptQueryContextConfiguration$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptAddContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$800.BCryptAddContextFunction$MH,"BCryptAddContextFunction");
    }
    public static int BCryptAddContextFunction ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  int dwPosition) {
        var mh$ = BCryptAddContextFunction$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, dwPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptRemoveContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$800.BCryptRemoveContextFunction$MH,"BCryptRemoveContextFunction");
    }
    public static int BCryptRemoveContextFunction ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction) {
        var mh$ = BCryptRemoveContextFunction$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContextFunctions$MH() {
        return RuntimeHelper.requireNonNull(constants$800.BCryptEnumContextFunctions$MH,"BCryptEnumContextFunctions");
    }
    public static int BCryptEnumContextFunctions ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptEnumContextFunctions$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptConfigureContextFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$801.BCryptConfigureContextFunction$MH,"BCryptConfigureContextFunction");
    }
    public static int BCryptConfigureContextFunction ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pConfig) {
        var mh$ = BCryptConfigureContextFunction$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextFunctionConfiguration$MH() {
        return RuntimeHelper.requireNonNull(constants$801.BCryptQueryContextFunctionConfiguration$MH,"BCryptQueryContextFunctionConfiguration");
    }
    public static int BCryptQueryContextFunctionConfiguration ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptQueryContextFunctionConfiguration$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptEnumContextFunctionProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$801.BCryptEnumContextFunctionProviders$MH,"BCryptEnumContextFunctionProviders");
    }
    public static int BCryptEnumContextFunctionProviders ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptEnumContextFunctionProviders$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptSetContextFunctionProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$801.BCryptSetContextFunctionProperty$MH,"BCryptSetContextFunctionProperty");
    }
    public static int BCryptSetContextFunctionProperty ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pszProperty,  int cbValue,  Addressable pbValue) {
        var mh$ = BCryptSetContextFunctionProperty$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pszProperty, cbValue, pbValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptQueryContextFunctionProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$801.BCryptQueryContextFunctionProperty$MH,"BCryptQueryContextFunctionProperty");
    }
    public static int BCryptQueryContextFunctionProperty ( int dwTable,  Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pszProperty,  Addressable pcbValue,  Addressable ppbValue) {
        var mh$ = BCryptQueryContextFunctionProperty$MH();
        try {
            return (int)mh$.invokeExact(dwTable, pszContext, dwInterface, pszFunction, pszProperty, pcbValue, ppbValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptRegisterConfigChangeNotify$MH() {
        return RuntimeHelper.requireNonNull(constants$801.BCryptRegisterConfigChangeNotify$MH,"BCryptRegisterConfigChangeNotify");
    }
    public static int BCryptRegisterConfigChangeNotify ( Addressable phEvent) {
        var mh$ = BCryptRegisterConfigChangeNotify$MH();
        try {
            return (int)mh$.invokeExact(phEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptUnregisterConfigChangeNotify$MH() {
        return RuntimeHelper.requireNonNull(constants$802.BCryptUnregisterConfigChangeNotify$MH,"BCryptUnregisterConfigChangeNotify");
    }
    public static int BCryptUnregisterConfigChangeNotify ( Addressable hEvent) {
        var mh$ = BCryptUnregisterConfigChangeNotify$MH();
        try {
            return (int)mh$.invokeExact(hEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptResolveProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$802.BCryptResolveProviders$MH,"BCryptResolveProviders");
    }
    public static int BCryptResolveProviders ( Addressable pszContext,  int dwInterface,  Addressable pszFunction,  Addressable pszProvider,  int dwMode,  int dwFlags,  Addressable pcbBuffer,  Addressable ppBuffer) {
        var mh$ = BCryptResolveProviders$MH();
        try {
            return (int)mh$.invokeExact(pszContext, dwInterface, pszFunction, pszProvider, dwMode, dwFlags, pcbBuffer, ppBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BCryptGetFipsAlgorithmMode$MH() {
        return RuntimeHelper.requireNonNull(constants$802.BCryptGetFipsAlgorithmMode$MH,"BCryptGetFipsAlgorithmMode");
    }
    public static int BCryptGetFipsAlgorithmMode ( Addressable pfEnabled) {
        var mh$ = BCryptGetFipsAlgorithmMode$MH();
        try {
            return (int)mh$.invokeExact(pfEnabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CngGetFipsAlgorithmMode$MH() {
        return RuntimeHelper.requireNonNull(constants$802.CngGetFipsAlgorithmMode$MH,"CngGetFipsAlgorithmMode");
    }
    public static byte CngGetFipsAlgorithmMode () {
        var mh$ = CngGetFipsAlgorithmMode$MH();
        try {
            return (byte)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt SECURITY_STATUS = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PNCryptBuffer = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCryptBufferDesc = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_CIPHER_PADDING_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_VSM_KEY_ATTESTATION_STATEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_EXPORTED_ISOLATED_KEY_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NCryptOpenStorageProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$803.NCryptOpenStorageProvider$MH,"NCryptOpenStorageProvider");
    }
    public static int NCryptOpenStorageProvider ( Addressable phProvider,  Addressable pszProviderName,  int dwFlags) {
        var mh$ = NCryptOpenStorageProvider$MH();
        try {
            return (int)mh$.invokeExact(phProvider, pszProviderName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumAlgorithms$MH() {
        return RuntimeHelper.requireNonNull(constants$803.NCryptEnumAlgorithms$MH,"NCryptEnumAlgorithms");
    }
    public static int NCryptEnumAlgorithms ( long hProvider,  int dwAlgOperations,  Addressable pdwAlgCount,  Addressable ppAlgList,  int dwFlags) {
        var mh$ = NCryptEnumAlgorithms$MH();
        try {
            return (int)mh$.invokeExact(hProvider, dwAlgOperations, pdwAlgCount, ppAlgList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptIsAlgSupported$MH() {
        return RuntimeHelper.requireNonNull(constants$803.NCryptIsAlgSupported$MH,"NCryptIsAlgSupported");
    }
    public static int NCryptIsAlgSupported ( long hProvider,  Addressable pszAlgId,  int dwFlags) {
        var mh$ = NCryptIsAlgSupported$MH();
        try {
            return (int)mh$.invokeExact(hProvider, pszAlgId, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumKeys$MH() {
        return RuntimeHelper.requireNonNull(constants$803.NCryptEnumKeys$MH,"NCryptEnumKeys");
    }
    public static int NCryptEnumKeys ( long hProvider,  Addressable pszScope,  Addressable ppKeyName,  Addressable ppEnumState,  int dwFlags) {
        var mh$ = NCryptEnumKeys$MH();
        try {
            return (int)mh$.invokeExact(hProvider, pszScope, ppKeyName, ppEnumState, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEnumStorageProviders$MH() {
        return RuntimeHelper.requireNonNull(constants$804.NCryptEnumStorageProviders$MH,"NCryptEnumStorageProviders");
    }
    public static int NCryptEnumStorageProviders ( Addressable pdwProviderCount,  Addressable ppProviderList,  int dwFlags) {
        var mh$ = NCryptEnumStorageProviders$MH();
        try {
            return (int)mh$.invokeExact(pdwProviderCount, ppProviderList, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$804.NCryptFreeBuffer$MH,"NCryptFreeBuffer");
    }
    public static int NCryptFreeBuffer ( Addressable pvInput) {
        var mh$ = NCryptFreeBuffer$MH();
        try {
            return (int)mh$.invokeExact(pvInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptOpenKey$MH() {
        return RuntimeHelper.requireNonNull(constants$804.NCryptOpenKey$MH,"NCryptOpenKey");
    }
    public static int NCryptOpenKey ( long hProvider,  Addressable phKey,  Addressable pszKeyName,  int dwLegacyKeySpec,  int dwFlags) {
        var mh$ = NCryptOpenKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, phKey, pszKeyName, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptCreatePersistedKey$MH() {
        return RuntimeHelper.requireNonNull(constants$804.NCryptCreatePersistedKey$MH,"NCryptCreatePersistedKey");
    }
    public static int NCryptCreatePersistedKey ( long hProvider,  Addressable phKey,  Addressable pszAlgId,  Addressable pszKeyName,  int dwLegacyKeySpec,  int dwFlags) {
        var mh$ = NCryptCreatePersistedKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, phKey, pszAlgId, pszKeyName, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$804.NCryptGetProperty$MH,"NCryptGetProperty");
    }
    public static int NCryptGetProperty ( long hObject,  Addressable pszProperty,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptGetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$804.NCryptSetProperty$MH,"NCryptSetProperty");
    }
    public static int NCryptSetProperty ( long hObject,  Addressable pszProperty,  Addressable pbInput,  int cbInput,  int dwFlags) {
        var mh$ = NCryptSetProperty$MH();
        try {
            return (int)mh$.invokeExact(hObject, pszProperty, pbInput, cbInput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFinalizeKey$MH() {
        return RuntimeHelper.requireNonNull(constants$805.NCryptFinalizeKey$MH,"NCryptFinalizeKey");
    }
    public static int NCryptFinalizeKey ( long hKey,  int dwFlags) {
        var mh$ = NCryptFinalizeKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptEncrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$805.NCryptEncrypt$MH,"NCryptEncrypt");
    }
    public static int NCryptEncrypt ( long hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptEncrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDecrypt$MH() {
        return RuntimeHelper.requireNonNull(constants$805.NCryptDecrypt$MH,"NCryptDecrypt");
    }
    public static int NCryptDecrypt ( long hKey,  Addressable pbInput,  int cbInput,  Addressable pPaddingInfo,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptDecrypt$MH();
        try {
            return (int)mh$.invokeExact(hKey, pbInput, cbInput, pPaddingInfo, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PNCRYPT_KEY_BLOB_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NCryptImportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$805.NCryptImportKey$MH,"NCryptImportKey");
    }
    public static int NCryptImportKey ( long hProvider,  long hImportKey,  Addressable pszBlobType,  Addressable pParameterList,  Addressable phKey,  Addressable pbData,  int cbData,  int dwFlags) {
        var mh$ = NCryptImportKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, hImportKey, pszBlobType, pParameterList, phKey, pbData, cbData, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptExportKey$MH() {
        return RuntimeHelper.requireNonNull(constants$805.NCryptExportKey$MH,"NCryptExportKey");
    }
    public static int NCryptExportKey ( long hKey,  long hExportKey,  Addressable pszBlobType,  Addressable pParameterList,  Addressable pbOutput,  int cbOutput,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptExportKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, hExportKey, pszBlobType, pParameterList, pbOutput, cbOutput, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSignHash$MH() {
        return RuntimeHelper.requireNonNull(constants$805.NCryptSignHash$MH,"NCryptSignHash");
    }
    public static int NCryptSignHash ( long hKey,  Addressable pPaddingInfo,  Addressable pbHashValue,  int cbHashValue,  Addressable pbSignature,  int cbSignature,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptSignHash$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptVerifySignature$MH() {
        return RuntimeHelper.requireNonNull(constants$806.NCryptVerifySignature$MH,"NCryptVerifySignature");
    }
    public static int NCryptVerifySignature ( long hKey,  Addressable pPaddingInfo,  Addressable pbHashValue,  int cbHashValue,  Addressable pbSignature,  int cbSignature,  int dwFlags) {
        var mh$ = NCryptVerifySignature$MH();
        try {
            return (int)mh$.invokeExact(hKey, pPaddingInfo, pbHashValue, cbHashValue, pbSignature, cbSignature, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDeleteKey$MH() {
        return RuntimeHelper.requireNonNull(constants$806.NCryptDeleteKey$MH,"NCryptDeleteKey");
    }
    public static int NCryptDeleteKey ( long hKey,  int dwFlags) {
        var mh$ = NCryptDeleteKey$MH();
        try {
            return (int)mh$.invokeExact(hKey, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptFreeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$806.NCryptFreeObject$MH,"NCryptFreeObject");
    }
    public static int NCryptFreeObject ( long hObject) {
        var mh$ = NCryptFreeObject$MH();
        try {
            return (int)mh$.invokeExact(hObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptIsKeyHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$806.NCryptIsKeyHandle$MH,"NCryptIsKeyHandle");
    }
    public static int NCryptIsKeyHandle ( long hKey) {
        var mh$ = NCryptIsKeyHandle$MH();
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptTranslateHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$806.NCryptTranslateHandle$MH,"NCryptTranslateHandle");
    }
    public static int NCryptTranslateHandle ( Addressable phProvider,  Addressable phKey,  long hLegacyProv,  long hLegacyKey,  int dwLegacyKeySpec,  int dwFlags) {
        var mh$ = NCryptTranslateHandle$MH();
        try {
            return (int)mh$.invokeExact(phProvider, phKey, hLegacyProv, hLegacyKey, dwLegacyKeySpec, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptNotifyChangeKey$MH() {
        return RuntimeHelper.requireNonNull(constants$806.NCryptNotifyChangeKey$MH,"NCryptNotifyChangeKey");
    }
    public static int NCryptNotifyChangeKey ( long hProvider,  Addressable phEvent,  int dwFlags) {
        var mh$ = NCryptNotifyChangeKey$MH();
        try {
            return (int)mh$.invokeExact(hProvider, phEvent, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptSecretAgreement$MH() {
        return RuntimeHelper.requireNonNull(constants$807.NCryptSecretAgreement$MH,"NCryptSecretAgreement");
    }
    public static int NCryptSecretAgreement ( long hPrivKey,  long hPubKey,  Addressable phAgreedSecret,  int dwFlags) {
        var mh$ = NCryptSecretAgreement$MH();
        try {
            return (int)mh$.invokeExact(hPrivKey, hPubKey, phAgreedSecret, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptDeriveKey$MH() {
        return RuntimeHelper.requireNonNull(constants$807.NCryptDeriveKey$MH,"NCryptDeriveKey");
    }
    public static int NCryptDeriveKey ( long hSharedSecret,  Addressable pwszKDF,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptDeriveKey$MH();
        try {
            return (int)mh$.invokeExact(hSharedSecret, pwszKDF, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptKeyDerivation$MH() {
        return RuntimeHelper.requireNonNull(constants$807.NCryptKeyDerivation$MH,"NCryptKeyDerivation");
    }
    public static int NCryptKeyDerivation ( long hKey,  Addressable pParameterList,  Addressable pbDerivedKey,  int cbDerivedKey,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptKeyDerivation$MH();
        try {
            return (int)mh$.invokeExact(hKey, pParameterList, pbDerivedKey, cbDerivedKey, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptCreateClaim$MH() {
        return RuntimeHelper.requireNonNull(constants$807.NCryptCreateClaim$MH,"NCryptCreateClaim");
    }
    public static int NCryptCreateClaim ( long hSubjectKey,  long hAuthorityKey,  int dwClaimType,  Addressable pParameterList,  Addressable pbClaimBlob,  int cbClaimBlob,  Addressable pcbResult,  int dwFlags) {
        var mh$ = NCryptCreateClaim$MH();
        try {
            return (int)mh$.invokeExact(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pcbResult, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NCryptVerifyClaim$MH() {
        return RuntimeHelper.requireNonNull(constants$807.NCryptVerifyClaim$MH,"NCryptVerifyClaim");
    }
    public static int NCryptVerifyClaim ( long hSubjectKey,  long hAuthorityKey,  int dwClaimType,  Addressable pParameterList,  Addressable pbClaimBlob,  int cbClaimBlob,  Addressable pOutput,  int dwFlags) {
        var mh$ = NCryptVerifyClaim$MH();
        try {
            return (int)mh$.invokeExact(hSubjectKey, hAuthorityKey, dwClaimType, pParameterList, pbClaimBlob, cbClaimBlob, pOutput, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_BIT_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ALGORITHM_IDENTIFIER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_OBJID_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_HASH_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_EXTENSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_EXTENSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ATTRIBUTE_TYPE_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ATTRIBUTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_RDN_ATTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_RDN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_NAME_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_PUBLIC_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ECC_PRIVATE_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PRIVATE_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PKCS8_IMPORT_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PKCS8_EXPORT_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_OR_CRL_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_OR_CRL_BUNDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REQUEST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_KEYGEN_REQUEST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SIGNED_CONTENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_USAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ENHKEY_USAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCTL_USAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_ENHKEY_USAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIME_STAMP_REQUEST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ENROLLMENT_NAME_VALUE_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CSP_PROVIDER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptFormatObject$MH() {
        return RuntimeHelper.requireNonNull(constants$808.CryptFormatObject$MH,"CryptFormatObject");
    }
    public static int CryptFormatObject ( int dwCertEncodingType,  int dwFormatType,  int dwFormatStrType,  Addressable pFormatStruct,  Addressable lpszStructType,  Addressable pbEncoded,  int cbEncoded,  Addressable pbFormat,  Addressable pcbFormat) {
        var mh$ = CryptFormatObject$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, dwFormatType, dwFormatStrType, pFormatStruct, lpszStructType, pbEncoded, cbEncoded, pbFormat, pcbFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_ENCODE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptEncodeObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$809.CryptEncodeObjectEx$MH,"CryptEncodeObjectEx");
    }
    public static int CryptEncodeObjectEx ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pvStructInfo,  int dwFlags,  Addressable pEncodePara,  Addressable pvEncoded,  Addressable pcbEncoded) {
        var mh$ = CryptEncodeObjectEx$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pvStructInfo, dwFlags, pEncodePara, pvEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncodeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$809.CryptEncodeObject$MH,"CryptEncodeObject");
    }
    public static int CryptEncodeObject ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pvStructInfo,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = CryptEncodeObject$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pvStructInfo, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_DECODE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptDecodeObjectEx$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CryptDecodeObjectEx$MH,"CryptDecodeObjectEx");
    }
    public static int CryptDecodeObjectEx ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pbEncoded,  int cbEncoded,  int dwFlags,  Addressable pDecodePara,  Addressable pvStructInfo,  Addressable pcbStructInfo) {
        var mh$ = CryptDecodeObjectEx$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pDecodePara, pvStructInfo, pcbStructInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecodeObject$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CryptDecodeObject$MH,"CryptDecodeObject");
    }
    public static int CryptDecodeObject ( int dwCertEncodingType,  Addressable lpszStructType,  Addressable pbEncoded,  int cbEncoded,  int dwFlags,  Addressable pvStructInfo,  Addressable pcbStructInfo) {
        var mh$ = CryptDecodeObject$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pvStructInfo, pcbStructInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_EXTENSIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_AUTHORITY_KEY_ID_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_PRIVATE_KEY_VALIDITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_KEY_ATTRIBUTES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_KEY_USAGE_RESTRICTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_OTHER_NAME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ALT_NAME_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ALT_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_BASIC_CONSTRAINTS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_BASIC_CONSTRAINTS2_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_QUALIFIER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICIES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_QUALIFIER_USER_NOTICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCPS_URLS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY95_QUALIFIER1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_MAPPING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_MAPPINGS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_POLICY_CONSTRAINTS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CONTENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_SEQUENCE_OF_ANY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_AUTHORITY_KEY_ID2_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ACCESS_DESCRIPTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_AUTHORITY_INFO_ACCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SUBJECT_INFO_ACCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_DIST_POINT_NAME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_DIST_POINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_DIST_POINTS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCROSS_CERT_DIST_POINTS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_ISSUING_DIST_POINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_GENERAL_SUBTREE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_NAME_CONSTRAINTS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_DSS_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_DH_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ECC_SIGNATURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_X942_DH_VALIDATION_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_X942_DH_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_X942_OTHER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ECC_CMS_SHARED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_RC2_CBC_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_SMIME_CAPABILITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_SMIME_CAPABILITIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_QC_STATEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_QC_STATEMENTS_EXT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_MASK_GEN_ALGORITHM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_RSA_SSA_PSS_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PSOURCE_ALGORITHM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_RSAES_OAEP_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_TAGGED_ATTRIBUTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_TAGGED_CERT_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_TAGGED_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_TAGGED_CONTENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_TAGGED_OTHER_MSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_DATA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_RESPONSE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_PEND_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_STATUS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_ADD_EXTENSIONS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMC_ADD_ATTRIBUTES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_TEMPLATE_EXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_HASHED_URL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_DETAILS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_REFERENCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_IMAGE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_IMAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_AUDIO_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_AUDIO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_OTHER_LOGOTYPE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LOGOTYPE_EXT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_BIOMETRIC_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_BIOMETRIC_EXT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_SIGNATURE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_SIGNED_REQUEST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_CERT_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_REQUEST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_REQUEST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_RESPONSE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_BASIC_SIGNED_RESPONSE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_BASIC_REVOKED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_BASIC_RESPONSE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POCSP_BASIC_RESPONSE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SUPPORTED_ALGORITHM_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_TPM_SPECIFICATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCRYPTOIDFUNCSET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCRYPTOIDFUNCADDR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_OID_FUNC_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptInstallOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CryptInstallOIDFunctionAddress$MH,"CryptInstallOIDFunctionAddress");
    }
    public static int CryptInstallOIDFunctionAddress ( Addressable hModule,  int dwEncodingType,  Addressable pszFuncName,  int cFuncEntry,  Addressable rgFuncEntry,  int dwFlags) {
        var mh$ = CryptInstallOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hModule, dwEncodingType, pszFuncName, cFuncEntry, rgFuncEntry, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptInitOIDFunctionSet$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CryptInitOIDFunctionSet$MH,"CryptInitOIDFunctionSet");
    }
    public static MemoryAddress CryptInitOIDFunctionSet ( Addressable pszFuncName,  int dwFlags) {
        var mh$ = CryptInitOIDFunctionSet$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszFuncName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CryptGetOIDFunctionAddress$MH,"CryptGetOIDFunctionAddress");
    }
    public static int CryptGetOIDFunctionAddress ( Addressable hFuncSet,  int dwEncodingType,  Addressable pszOID,  int dwFlags,  Addressable ppvFuncAddr,  Addressable phFuncAddr) {
        var mh$ = CryptGetOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hFuncSet, dwEncodingType, pszOID, dwFlags, ppvFuncAddr, phFuncAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultOIDDllList$MH() {
        return RuntimeHelper.requireNonNull(constants$810.CryptGetDefaultOIDDllList$MH,"CryptGetDefaultOIDDllList");
    }
    public static int CryptGetDefaultOIDDllList ( Addressable hFuncSet,  int dwEncodingType,  Addressable pwszDllList,  Addressable pcchDllList) {
        var mh$ = CryptGetDefaultOIDDllList$MH();
        try {
            return (int)mh$.invokeExact(hFuncSet, dwEncodingType, pwszDllList, pcchDllList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetDefaultOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CryptGetDefaultOIDFunctionAddress$MH,"CryptGetDefaultOIDFunctionAddress");
    }
    public static int CryptGetDefaultOIDFunctionAddress ( Addressable hFuncSet,  int dwEncodingType,  Addressable pwszDll,  int dwFlags,  Addressable ppvFuncAddr,  Addressable phFuncAddr) {
        var mh$ = CryptGetDefaultOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hFuncSet, dwEncodingType, pwszDll, dwFlags, ppvFuncAddr, phFuncAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFreeOIDFunctionAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CryptFreeOIDFunctionAddress$MH,"CryptFreeOIDFunctionAddress");
    }
    public static int CryptFreeOIDFunctionAddress ( Addressable hFuncAddr,  int dwFlags) {
        var mh$ = CryptFreeOIDFunctionAddress$MH();
        try {
            return (int)mh$.invokeExact(hFuncAddr, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CryptRegisterOIDFunction$MH,"CryptRegisterOIDFunction");
    }
    public static int CryptRegisterOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  Addressable pwszDll,  Addressable pszOverrideFuncName) {
        var mh$ = CryptRegisterOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, pwszDll, pszOverrideFuncName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CryptUnregisterOIDFunction$MH,"CryptUnregisterOIDFunction");
    }
    public static int CryptUnregisterOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID) {
        var mh$ = CryptUnregisterOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterDefaultOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CryptRegisterDefaultOIDFunction$MH,"CryptRegisterDefaultOIDFunction");
    }
    public static int CryptRegisterDefaultOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  int dwIndex,  Addressable pwszDll) {
        var mh$ = CryptRegisterDefaultOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, dwIndex, pwszDll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterDefaultOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$811.CryptUnregisterDefaultOIDFunction$MH,"CryptUnregisterDefaultOIDFunction");
    }
    public static int CryptUnregisterDefaultOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pwszDll) {
        var mh$ = CryptUnregisterDefaultOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pwszDll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetOIDFunctionValue$MH() {
        return RuntimeHelper.requireNonNull(constants$812.CryptSetOIDFunctionValue$MH,"CryptSetOIDFunctionValue");
    }
    public static int CryptSetOIDFunctionValue ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  Addressable pwszValueName,  int dwValueType,  Addressable pbValueData,  int cbValueData) {
        var mh$ = CryptSetOIDFunctionValue$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, pwszValueName, dwValueType, pbValueData, cbValueData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetOIDFunctionValue$MH() {
        return RuntimeHelper.requireNonNull(constants$812.CryptGetOIDFunctionValue$MH,"CryptGetOIDFunctionValue");
    }
    public static int CryptGetOIDFunctionValue ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  Addressable pwszValueName,  Addressable pdwValueType,  Addressable pbValueData,  Addressable pcbValueData) {
        var mh$ = CryptGetOIDFunctionValue$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, pwszValueName, pdwValueType, pbValueData, pcbValueData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumOIDFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$812.CryptEnumOIDFunction$MH,"CryptEnumOIDFunction");
    }
    public static int CryptEnumOIDFunction ( int dwEncodingType,  Addressable pszFuncName,  Addressable pszOID,  int dwFlags,  Addressable pvArg,  Addressable pfnEnumOIDFunc) {
        var mh$ = CryptEnumOIDFunction$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pszFuncName, pszOID, dwFlags, pvArg, pfnEnumOIDFunc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_OID_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCRYPT_OID_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptFindOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$812.CryptFindOIDInfo$MH,"CryptFindOIDInfo");
    }
    public static MemoryAddress CryptFindOIDInfo ( int dwKeyType,  Addressable pvKey,  int dwGroupId) {
        var mh$ = CryptFindOIDInfo$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwKeyType, pvKey, dwGroupId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRegisterOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$813.CryptRegisterOIDInfo$MH,"CryptRegisterOIDInfo");
    }
    public static int CryptRegisterOIDInfo ( Addressable pInfo,  int dwFlags) {
        var mh$ = CryptRegisterOIDInfo$MH();
        try {
            return (int)mh$.invokeExact(pInfo, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnregisterOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$813.CryptUnregisterOIDInfo$MH,"CryptUnregisterOIDInfo");
    }
    public static int CryptUnregisterOIDInfo ( Addressable pInfo) {
        var mh$ = CryptUnregisterOIDInfo$MH();
        try {
            return (int)mh$.invokeExact(pInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumOIDInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$813.CryptEnumOIDInfo$MH,"CryptEnumOIDInfo");
    }
    public static int CryptEnumOIDInfo ( int dwGroupId,  int dwFlags,  Addressable pvArg,  Addressable pfnEnumOIDInfo) {
        var mh$ = CryptEnumOIDInfo$MH();
        try {
            return (int)mh$.invokeExact(dwGroupId, dwFlags, pvArg, pfnEnumOIDInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFindLocalizedName$MH() {
        return RuntimeHelper.requireNonNull(constants$813.CryptFindLocalizedName$MH,"CryptFindLocalizedName");
    }
    public static MemoryAddress CryptFindLocalizedName ( Addressable pwszCryptName) {
        var mh$ = CryptFindLocalizedName$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pwszCryptName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_STRONG_SIGN_SERIALIZED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_STRONG_SIGN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_STRONG_SIGN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCRYPTMSG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ISSUER_SERIAL_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_SIGNER_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_SIGNED_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_RECIPIENT_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_ENVELOPED_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_RC2_AUX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_SP3_COMPATIBLE_AUX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_RC4_AUX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_HASHED_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_ENCRYPTED_ENCODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_STREAM_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptMsgOpenToEncode$MH() {
        return RuntimeHelper.requireNonNull(constants$814.CryptMsgOpenToEncode$MH,"CryptMsgOpenToEncode");
    }
    public static MemoryAddress CryptMsgOpenToEncode ( int dwMsgEncodingType,  int dwFlags,  int dwMsgType,  Addressable pvMsgEncodeInfo,  Addressable pszInnerContentObjID,  Addressable pStreamInfo) {
        var mh$ = CryptMsgOpenToEncode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, pStreamInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCalculateEncodedLength$MH() {
        return RuntimeHelper.requireNonNull(constants$814.CryptMsgCalculateEncodedLength$MH,"CryptMsgCalculateEncodedLength");
    }
    public static int CryptMsgCalculateEncodedLength ( int dwMsgEncodingType,  int dwFlags,  int dwMsgType,  Addressable pvMsgEncodeInfo,  Addressable pszInnerContentObjID,  int cbData) {
        var mh$ = CryptMsgCalculateEncodedLength$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgOpenToDecode$MH() {
        return RuntimeHelper.requireNonNull(constants$814.CryptMsgOpenToDecode$MH,"CryptMsgOpenToDecode");
    }
    public static MemoryAddress CryptMsgOpenToDecode ( int dwMsgEncodingType,  int dwFlags,  int dwMsgType,  long hCryptProv,  Addressable pRecipientInfo,  Addressable pStreamInfo) {
        var mh$ = CryptMsgOpenToDecode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwMsgEncodingType, dwFlags, dwMsgType, hCryptProv, pRecipientInfo, pStreamInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgDuplicate$MH() {
        return RuntimeHelper.requireNonNull(constants$814.CryptMsgDuplicate$MH,"CryptMsgDuplicate");
    }
    public static MemoryAddress CryptMsgDuplicate ( Addressable hCryptMsg) {
        var mh$ = CryptMsgDuplicate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCryptMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgClose$MH() {
        return RuntimeHelper.requireNonNull(constants$815.CryptMsgClose$MH,"CryptMsgClose");
    }
    public static int CryptMsgClose ( Addressable hCryptMsg) {
        var mh$ = CryptMsgClose$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgUpdate$MH() {
        return RuntimeHelper.requireNonNull(constants$815.CryptMsgUpdate$MH,"CryptMsgUpdate");
    }
    public static int CryptMsgUpdate ( Addressable hCryptMsg,  Addressable pbData,  int cbData,  int fFinal) {
        var mh$ = CryptMsgUpdate$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, pbData, cbData, fFinal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgGetParam$MH() {
        return RuntimeHelper.requireNonNull(constants$815.CryptMsgGetParam$MH,"CryptMsgGetParam");
    }
    public static int CryptMsgGetParam ( Addressable hCryptMsg,  int dwParamType,  int dwIndex,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CryptMsgGetParam$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, dwParamType, dwIndex, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCMSG_SIGNER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CMS_SIGNER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_ATTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_TRANS_RECIPIENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_AGREE_RECIPIENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_MAIL_LIST_RECIPIENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CMS_RECIPIENT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptMsgControl$MH() {
        return RuntimeHelper.requireNonNull(constants$815.CryptMsgControl$MH,"CryptMsgControl");
    }
    public static int CryptMsgControl ( Addressable hCryptMsg,  int dwFlags,  int dwCtrlType,  Addressable pvCtrlPara) {
        var mh$ = CryptMsgControl$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, dwFlags, dwCtrlType, pvCtrlPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_DECRYPT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptMsgVerifyCountersignatureEncoded$MH() {
        return RuntimeHelper.requireNonNull(constants$815.CryptMsgVerifyCountersignatureEncoded$MH,"CryptMsgVerifyCountersignatureEncoded");
    }
    public static int CryptMsgVerifyCountersignatureEncoded ( long hCryptProv,  int dwEncodingType,  Addressable pbSignerInfo,  int cbSignerInfo,  Addressable pbSignerInfoCountersignature,  int cbSignerInfoCountersignature,  Addressable pciCountersigner) {
        var mh$ = CryptMsgVerifyCountersignatureEncoded$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, pciCountersigner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgVerifyCountersignatureEncodedEx$MH() {
        return RuntimeHelper.requireNonNull(constants$815.CryptMsgVerifyCountersignatureEncodedEx$MH,"CryptMsgVerifyCountersignatureEncodedEx");
    }
    public static int CryptMsgVerifyCountersignatureEncodedEx ( long hCryptProv,  int dwEncodingType,  Addressable pbSignerInfo,  int cbSignerInfo,  Addressable pbSignerInfoCountersignature,  int cbSignerInfoCountersignature,  int dwSignerType,  Addressable pvSigner,  int dwFlags,  Addressable pvExtra) {
        var mh$ = CryptMsgVerifyCountersignatureEncodedEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, dwSignerType, pvSigner, dwFlags, pvExtra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCountersign$MH() {
        return RuntimeHelper.requireNonNull(constants$816.CryptMsgCountersign$MH,"CryptMsgCountersign");
    }
    public static int CryptMsgCountersign ( Addressable hCryptMsg,  int dwIndex,  int cCountersigners,  Addressable rgCountersigners) {
        var mh$ = CryptMsgCountersign$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, dwIndex, cCountersigners, rgCountersigners);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgCountersignEncoded$MH() {
        return RuntimeHelper.requireNonNull(constants$816.CryptMsgCountersignEncoded$MH,"CryptMsgCountersignEncoded");
    }
    public static int CryptMsgCountersignEncoded ( int dwEncodingType,  Addressable pbSignerInfo,  int cbSignerInfo,  int cCountersigners,  Addressable rgCountersigners,  Addressable pbCountersignature,  Addressable pcbCountersignature) {
        var mh$ = CryptMsgCountersignEncoded$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, pbSignerInfo, cbSignerInfo, cCountersigners, rgCountersigners, pbCountersignature, pcbCountersignature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCMSG_CONTENT_ENCRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_TRANS_ENCRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_KEY_AGREE_ENCRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_MAIL_LIST_ENCRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCMSG_CNG_CONTENT_DECRYPT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCERTSTORE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRL_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCRL_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCTL_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static int KeyTypeOther() {
        return (int)0L;
    }
    public static int KeyTypeVirtualSmartCard() {
        return (int)1L;
    }
    public static int KeyTypePhysicalSmartCard() {
        return (int)2L;
    }
    public static int KeyTypePassport() {
        return (int)3L;
    }
    public static int KeyTypePassportRemote() {
        return (int)4L;
    }
    public static int KeyTypePassportSmartCard() {
        return (int)5L;
    }
    public static int KeyTypeHardware() {
        return (int)6L;
    }
    public static int KeyTypeSoftware() {
        return (int)7L;
    }
    public static int KeyTypeSelfSigned() {
        return (int)8L;
    }
    public static OfAddress PCRYPT_KEY_PROV_PARAM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_KEY_PROV_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_KEY_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PROOT_INFO_LUID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_SMART_CARD_ROOT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SYSTEM_STORE_RELOCATE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REGISTRY_STORE_CLIENT_GPT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REGISTRY_STORE_ROAMING_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_LDAP_STORE_OPENED_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertOpenStore$MH() {
        return RuntimeHelper.requireNonNull(constants$821.CertOpenStore$MH,"CertOpenStore");
    }
    public static MemoryAddress CertOpenStore ( Addressable lpszStoreProvider,  int dwEncodingType,  long hCryptProv,  int dwFlags,  Addressable pvPara) {
        var mh$ = CertOpenStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(lpszStoreProvider, dwEncodingType, hCryptProv, dwFlags, pvPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCERTSTOREPROV = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_STORE_PROV_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_STORE_PROV_FIND_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_STORE_PROV_FIND_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertDuplicateStore$MH() {
        return RuntimeHelper.requireNonNull(constants$829.CertDuplicateStore$MH,"CertDuplicateStore");
    }
    public static MemoryAddress CertDuplicateStore ( Addressable hCertStore) {
        var mh$ = CertDuplicateStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSaveStore$MH() {
        return RuntimeHelper.requireNonNull(constants$829.CertSaveStore$MH,"CertSaveStore");
    }
    public static int CertSaveStore ( Addressable hCertStore,  int dwEncodingType,  int dwSaveAs,  int dwSaveTo,  Addressable pvSaveToPara,  int dwFlags) {
        var mh$ = CertSaveStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwEncodingType, dwSaveAs, dwSaveTo, pvSaveToPara, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCloseStore$MH() {
        return RuntimeHelper.requireNonNull(constants$829.CertCloseStore$MH,"CertCloseStore");
    }
    public static int CertCloseStore ( Addressable hCertStore,  int dwFlags) {
        var mh$ = CertCloseStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetSubjectCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CertGetSubjectCertificateFromStore$MH,"CertGetSubjectCertificateFromStore");
    }
    public static MemoryAddress CertGetSubjectCertificateFromStore ( Addressable hCertStore,  int dwCertEncodingType,  Addressable pCertId) {
        var mh$ = CertGetSubjectCertificateFromStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, dwCertEncodingType, pCertId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCertificatesInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CertEnumCertificatesInStore$MH,"CertEnumCertificatesInStore");
    }
    public static MemoryAddress CertEnumCertificatesInStore ( Addressable hCertStore,  Addressable pPrevCertContext) {
        var mh$ = CertEnumCertificatesInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, pPrevCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCertificateInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CertFindCertificateInStore$MH,"CertFindCertificateInStore");
    }
    public static MemoryAddress CertFindCertificateInStore ( Addressable hCertStore,  int dwCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevCertContext) {
        var mh$ = CertFindCertificateInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetIssuerCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CertGetIssuerCertificateFromStore$MH,"CertGetIssuerCertificateFromStore");
    }
    public static MemoryAddress CertGetIssuerCertificateFromStore ( Addressable hCertStore,  Addressable pSubjectContext,  Addressable pPrevIssuerContext,  Addressable pdwFlags) {
        var mh$ = CertGetIssuerCertificateFromStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, pSubjectContext, pPrevIssuerContext, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifySubjectCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CertVerifySubjectCertificateContext$MH,"CertVerifySubjectCertificateContext");
    }
    public static int CertVerifySubjectCertificateContext ( Addressable pSubject,  Addressable pIssuer,  Addressable pdwFlags) {
        var mh$ = CertVerifySubjectCertificateContext$MH();
        try {
            return (int)mh$.invokeExact(pSubject, pIssuer, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$830.CertDuplicateCertificateContext$MH,"CertDuplicateCertificateContext");
    }
    public static MemoryAddress CertDuplicateCertificateContext ( Addressable pCertContext) {
        var mh$ = CertDuplicateCertificateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CertCreateCertificateContext$MH,"CertCreateCertificateContext");
    }
    public static MemoryAddress CertCreateCertificateContext ( int dwCertEncodingType,  Addressable pbCertEncoded,  int cbCertEncoded) {
        var mh$ = CertCreateCertificateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwCertEncodingType, pbCertEncoded, cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CertFreeCertificateContext$MH,"CertFreeCertificateContext");
    }
    public static int CertFreeCertificateContext ( Addressable pCertContext) {
        var mh$ = CertFreeCertificateContext$MH();
        try {
            return (int)mh$.invokeExact(pCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCertificateContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CertSetCertificateContextProperty$MH,"CertSetCertificateContextProperty");
    }
    public static int CertSetCertificateContextProperty ( Addressable pCertContext,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = CertSetCertificateContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCertificateContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CertGetCertificateContextProperty$MH,"CertGetCertificateContextProperty");
    }
    public static int CertGetCertificateContextProperty ( Addressable pCertContext,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CertGetCertificateContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCertificateContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CertEnumCertificateContextProperties$MH,"CertEnumCertificateContextProperties");
    }
    public static int CertEnumCertificateContextProperties ( Addressable pCertContext,  int dwPropId) {
        var mh$ = CertEnumCertificateContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCTLEntryFromCertificateContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$831.CertCreateCTLEntryFromCertificateContextProperties$MH,"CertCreateCTLEntryFromCertificateContextProperties");
    }
    public static int CertCreateCTLEntryFromCertificateContextProperties ( Addressable pCertContext,  int cOptAttr,  Addressable rgOptAttr,  int dwFlags,  Addressable pvReserved,  Addressable pCtlEntry,  Addressable pcbCtlEntry) {
        var mh$ = CertCreateCTLEntryFromCertificateContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, cOptAttr, rgOptAttr, dwFlags, pvReserved, pCtlEntry, pcbCtlEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCertificateContextPropertiesFromCTLEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CertSetCertificateContextPropertiesFromCTLEntry$MH,"CertSetCertificateContextPropertiesFromCTLEntry");
    }
    public static int CertSetCertificateContextPropertiesFromCTLEntry ( Addressable pCertContext,  Addressable pCtlEntry,  int dwFlags) {
        var mh$ = CertSetCertificateContextPropertiesFromCTLEntry$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pCtlEntry, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCRLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CertGetCRLFromStore$MH,"CertGetCRLFromStore");
    }
    public static MemoryAddress CertGetCRLFromStore ( Addressable hCertStore,  Addressable pIssuerContext,  Addressable pPrevCrlContext,  Addressable pdwFlags) {
        var mh$ = CertGetCRLFromStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, pIssuerContext, pPrevCrlContext, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCRLsInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CertEnumCRLsInStore$MH,"CertEnumCRLsInStore");
    }
    public static MemoryAddress CertEnumCRLsInStore ( Addressable hCertStore,  Addressable pPrevCrlContext) {
        var mh$ = CertEnumCRLsInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, pPrevCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCRLInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CertFindCRLInStore$MH,"CertFindCRLInStore");
    }
    public static MemoryAddress CertFindCRLInStore ( Addressable hCertStore,  int dwCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevCrlContext) {
        var mh$ = CertFindCRLInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRL_FIND_ISSUED_FOR_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertDuplicateCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CertDuplicateCRLContext$MH,"CertDuplicateCRLContext");
    }
    public static MemoryAddress CertDuplicateCRLContext ( Addressable pCrlContext) {
        var mh$ = CertDuplicateCRLContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$832.CertCreateCRLContext$MH,"CertCreateCRLContext");
    }
    public static MemoryAddress CertCreateCRLContext ( int dwCertEncodingType,  Addressable pbCrlEncoded,  int cbCrlEncoded) {
        var mh$ = CertCreateCRLContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwCertEncodingType, pbCrlEncoded, cbCrlEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCRLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$833.CertFreeCRLContext$MH,"CertFreeCRLContext");
    }
    public static int CertFreeCRLContext ( Addressable pCrlContext) {
        var mh$ = CertFreeCRLContext$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCRLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$833.CertSetCRLContextProperty$MH,"CertSetCRLContextProperty");
    }
    public static int CertSetCRLContextProperty ( Addressable pCrlContext,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = CertSetCRLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCRLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$833.CertGetCRLContextProperty$MH,"CertGetCRLContextProperty");
    }
    public static int CertGetCRLContextProperty ( Addressable pCrlContext,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CertGetCRLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCRLContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$833.CertEnumCRLContextProperties$MH,"CertEnumCRLContextProperties");
    }
    public static int CertEnumCRLContextProperties ( Addressable pCrlContext,  int dwPropId) {
        var mh$ = CertEnumCRLContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindCertificateInCRL$MH() {
        return RuntimeHelper.requireNonNull(constants$833.CertFindCertificateInCRL$MH,"CertFindCertificateInCRL");
    }
    public static int CertFindCertificateInCRL ( Addressable pCert,  Addressable pCrlContext,  int dwFlags,  Addressable pvReserved,  Addressable ppCrlEntry) {
        var mh$ = CertFindCertificateInCRL$MH();
        try {
            return (int)mh$.invokeExact(pCert, pCrlContext, dwFlags, pvReserved, ppCrlEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertIsValidCRLForCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$833.CertIsValidCRLForCertificate$MH,"CertIsValidCRLForCertificate");
    }
    public static int CertIsValidCRLForCertificate ( Addressable pCert,  Addressable pCrl,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CertIsValidCRLForCertificate$MH();
        try {
            return (int)mh$.invokeExact(pCert, pCrl, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$834.CertAddEncodedCertificateToStore$MH,"CertAddEncodedCertificateToStore");
    }
    public static int CertAddEncodedCertificateToStore ( Addressable hCertStore,  int dwCertEncodingType,  Addressable pbCertEncoded,  int cbCertEncoded,  int dwAddDisposition,  Addressable ppCertContext) {
        var mh$ = CertAddEncodedCertificateToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwCertEncodingType, pbCertEncoded, cbCertEncoded, dwAddDisposition, ppCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCertificateContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$834.CertAddCertificateContextToStore$MH,"CertAddCertificateContextToStore");
    }
    public static int CertAddCertificateContextToStore ( Addressable hCertStore,  Addressable pCertContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCertificateContextToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCertContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddSerializedElementToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$834.CertAddSerializedElementToStore$MH,"CertAddSerializedElementToStore");
    }
    public static int CertAddSerializedElementToStore ( Addressable hCertStore,  Addressable pbElement,  int cbElement,  int dwAddDisposition,  int dwFlags,  int dwContextTypeFlags,  Addressable pdwContextType,  Addressable ppvContext) {
        var mh$ = CertAddSerializedElementToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pbElement, cbElement, dwAddDisposition, dwFlags, dwContextTypeFlags, pdwContextType, ppvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCertificateFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$834.CertDeleteCertificateFromStore$MH,"CertDeleteCertificateFromStore");
    }
    public static int CertDeleteCertificateFromStore ( Addressable pCertContext) {
        var mh$ = CertDeleteCertificateFromStore$MH();
        try {
            return (int)mh$.invokeExact(pCertContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCRLToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$834.CertAddEncodedCRLToStore$MH,"CertAddEncodedCRLToStore");
    }
    public static int CertAddEncodedCRLToStore ( Addressable hCertStore,  int dwCertEncodingType,  Addressable pbCrlEncoded,  int cbCrlEncoded,  int dwAddDisposition,  Addressable ppCrlContext) {
        var mh$ = CertAddEncodedCRLToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwCertEncodingType, pbCrlEncoded, cbCrlEncoded, dwAddDisposition, ppCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCRLContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$834.CertAddCRLContextToStore$MH,"CertAddCRLContextToStore");
    }
    public static int CertAddCRLContextToStore ( Addressable hCertStore,  Addressable pCrlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCRLContextToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCrlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCRLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$835.CertDeleteCRLFromStore$MH,"CertDeleteCRLFromStore");
    }
    public static int CertDeleteCRLFromStore ( Addressable pCrlContext) {
        var mh$ = CertDeleteCRLFromStore$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCertificateStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$835.CertSerializeCertificateStoreElement$MH,"CertSerializeCertificateStoreElement");
    }
    public static int CertSerializeCertificateStoreElement ( Addressable pCertContext,  int dwFlags,  Addressable pbElement,  Addressable pcbElement) {
        var mh$ = CertSerializeCertificateStoreElement$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwFlags, pbElement, pcbElement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCRLStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$835.CertSerializeCRLStoreElement$MH,"CertSerializeCRLStoreElement");
    }
    public static int CertSerializeCRLStoreElement ( Addressable pCrlContext,  int dwFlags,  Addressable pbElement,  Addressable pcbElement) {
        var mh$ = CertSerializeCRLStoreElement$MH();
        try {
            return (int)mh$.invokeExact(pCrlContext, dwFlags, pbElement, pcbElement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$835.CertDuplicateCTLContext$MH,"CertDuplicateCTLContext");
    }
    public static MemoryAddress CertDuplicateCTLContext ( Addressable pCtlContext) {
        var mh$ = CertDuplicateCTLContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$835.CertCreateCTLContext$MH,"CertCreateCTLContext");
    }
    public static MemoryAddress CertCreateCTLContext ( int dwMsgAndCertEncodingType,  Addressable pbCtlEncoded,  int cbCtlEncoded) {
        var mh$ = CertCreateCTLContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCTLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$835.CertFreeCTLContext$MH,"CertFreeCTLContext");
    }
    public static int CertFreeCTLContext ( Addressable pCtlContext) {
        var mh$ = CertFreeCTLContext$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetCTLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$836.CertSetCTLContextProperty$MH,"CertSetCTLContextProperty");
    }
    public static int CertSetCTLContextProperty ( Addressable pCtlContext,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = CertSetCTLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetCTLContextProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$836.CertGetCTLContextProperty$MH,"CertGetCTLContextProperty");
    }
    public static int CertGetCTLContextProperty ( Addressable pCtlContext,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CertGetCTLContextProperty$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCTLContextProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$836.CertEnumCTLContextProperties$MH,"CertEnumCTLContextProperties");
    }
    public static int CertEnumCTLContextProperties ( Addressable pCtlContext,  int dwPropId) {
        var mh$ = CertEnumCTLContextProperties$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwPropId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumCTLsInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$836.CertEnumCTLsInStore$MH,"CertEnumCTLsInStore");
    }
    public static MemoryAddress CertEnumCTLsInStore ( Addressable hCertStore,  Addressable pPrevCtlContext) {
        var mh$ = CertEnumCTLsInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, pPrevCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindSubjectInCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$836.CertFindSubjectInCTL$MH,"CertFindSubjectInCTL");
    }
    public static MemoryAddress CertFindSubjectInCTL ( int dwEncodingType,  int dwSubjectType,  Addressable pvSubject,  Addressable pCtlContext,  int dwFlags) {
        var mh$ = CertFindSubjectInCTL$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwEncodingType, dwSubjectType, pvSubject, pCtlContext, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCTL_ANY_SUBJECT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertFindCTLInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$836.CertFindCTLInStore$MH,"CertFindCTLInStore");
    }
    public static MemoryAddress CertFindCTLInStore ( Addressable hCertStore,  int dwMsgAndCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevCtlContext) {
        var mh$ = CertFindCTLInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, dwMsgAndCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCTL_FIND_USAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_FIND_SUBJECT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertAddEncodedCTLToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CertAddEncodedCTLToStore$MH,"CertAddEncodedCTLToStore");
    }
    public static int CertAddEncodedCTLToStore ( Addressable hCertStore,  int dwMsgAndCertEncodingType,  Addressable pbCtlEncoded,  int cbCtlEncoded,  int dwAddDisposition,  Addressable ppCtlContext) {
        var mh$ = CertAddEncodedCTLToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded, dwAddDisposition, ppCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCTLContextToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CertAddCTLContextToStore$MH,"CertAddCTLContextToStore");
    }
    public static int CertAddCTLContextToStore ( Addressable hCertStore,  Addressable pCtlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCTLContextToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCtlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSerializeCTLStoreElement$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CertSerializeCTLStoreElement$MH,"CertSerializeCTLStoreElement");
    }
    public static int CertSerializeCTLStoreElement ( Addressable pCtlContext,  int dwFlags,  Addressable pbElement,  Addressable pcbElement) {
        var mh$ = CertSerializeCTLStoreElement$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, dwFlags, pbElement, pcbElement);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDeleteCTLFromStore$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CertDeleteCTLFromStore$MH,"CertDeleteCTLFromStore");
    }
    public static int CertDeleteCTLFromStore ( Addressable pCtlContext) {
        var mh$ = CertDeleteCTLFromStore$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCertificateLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CertAddCertificateLinkToStore$MH,"CertAddCertificateLinkToStore");
    }
    public static int CertAddCertificateLinkToStore ( Addressable hCertStore,  Addressable pCertContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCertificateLinkToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCertContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCRLLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$837.CertAddCRLLinkToStore$MH,"CertAddCRLLinkToStore");
    }
    public static int CertAddCRLLinkToStore ( Addressable hCertStore,  Addressable pCrlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCRLLinkToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCrlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddCTLLinkToStore$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CertAddCTLLinkToStore$MH,"CertAddCTLLinkToStore");
    }
    public static int CertAddCTLLinkToStore ( Addressable hCertStore,  Addressable pCtlContext,  int dwAddDisposition,  Addressable ppStoreContext) {
        var mh$ = CertAddCTLLinkToStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, pCtlContext, dwAddDisposition, ppStoreContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddStoreToCollection$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CertAddStoreToCollection$MH,"CertAddStoreToCollection");
    }
    public static int CertAddStoreToCollection ( Addressable hCollectionStore,  Addressable hSiblingStore,  int dwUpdateFlags,  int dwPriority) {
        var mh$ = CertAddStoreToCollection$MH();
        try {
            return (int)mh$.invokeExact(hCollectionStore, hSiblingStore, dwUpdateFlags, dwPriority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRemoveStoreFromCollection$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CertRemoveStoreFromCollection$MH,"CertRemoveStoreFromCollection");
    }
    public static void CertRemoveStoreFromCollection ( Addressable hCollectionStore,  Addressable hSiblingStore) {
        var mh$ = CertRemoveStoreFromCollection$MH();
        try {
            mh$.invokeExact(hCollectionStore, hSiblingStore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertControlStore$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CertControlStore$MH,"CertControlStore");
    }
    public static int CertControlStore ( Addressable hCertStore,  int dwFlags,  int dwCtrlType,  Addressable pvCtrlPara) {
        var mh$ = CertControlStore$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwFlags, dwCtrlType, pvCtrlPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetStoreProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CertSetStoreProperty$MH,"CertSetStoreProperty");
    }
    public static int CertSetStoreProperty ( Addressable hCertStore,  int dwPropId,  int dwFlags,  Addressable pvData) {
        var mh$ = CertSetStoreProperty$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwPropId, dwFlags, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetStoreProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$838.CertGetStoreProperty$MH,"CertGetStoreProperty");
    }
    public static int CertGetStoreProperty ( Addressable hCertStore,  int dwPropId,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CertGetStoreProperty$MH();
        try {
            return (int)mh$.invokeExact(hCertStore, dwPropId, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_CREATE_CONTEXT_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$839.CertCreateContext$MH,"CertCreateContext");
    }
    public static MemoryAddress CertCreateContext ( int dwContextType,  int dwEncodingType,  Addressable pbEncoded,  int cbEncoded,  int dwFlags,  Addressable pCreatePara) {
        var mh$ = CertCreateContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwContextType, dwEncodingType, pbEncoded, cbEncoded, dwFlags, pCreatePara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_SYSTEM_STORE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_PHYSICAL_STORE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertRegisterSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$839.CertRegisterSystemStore$MH,"CertRegisterSystemStore");
    }
    public static int CertRegisterSystemStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pStoreInfo,  Addressable pvReserved) {
        var mh$ = CertRegisterSystemStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pStoreInfo, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRegisterPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$839.CertRegisterPhysicalStore$MH,"CertRegisterPhysicalStore");
    }
    public static int CertRegisterPhysicalStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pwszStoreName,  Addressable pStoreInfo,  Addressable pvReserved) {
        var mh$ = CertRegisterPhysicalStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pwszStoreName, pStoreInfo, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertUnregisterSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$839.CertUnregisterSystemStore$MH,"CertUnregisterSystemStore");
    }
    public static int CertUnregisterSystemStore ( Addressable pvSystemStore,  int dwFlags) {
        var mh$ = CertUnregisterSystemStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertUnregisterPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$840.CertUnregisterPhysicalStore$MH,"CertUnregisterPhysicalStore");
    }
    public static int CertUnregisterPhysicalStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pwszStoreName) {
        var mh$ = CertUnregisterPhysicalStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pwszStoreName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSystemStoreLocation$MH() {
        return RuntimeHelper.requireNonNull(constants$841.CertEnumSystemStoreLocation$MH,"CertEnumSystemStoreLocation");
    }
    public static int CertEnumSystemStoreLocation ( int dwFlags,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = CertEnumSystemStoreLocation$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSystemStore$MH() {
        return RuntimeHelper.requireNonNull(constants$841.CertEnumSystemStore$MH,"CertEnumSystemStore");
    }
    public static int CertEnumSystemStore ( int dwFlags,  Addressable pvSystemStoreLocationPara,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = CertEnumSystemStore$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pvSystemStoreLocationPara, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumPhysicalStore$MH() {
        return RuntimeHelper.requireNonNull(constants$841.CertEnumPhysicalStore$MH,"CertEnumPhysicalStore");
    }
    public static int CertEnumPhysicalStore ( Addressable pvSystemStore,  int dwFlags,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = CertEnumPhysicalStore$MH();
        try {
            return (int)mh$.invokeExact(pvSystemStore, dwFlags, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetEnhancedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$841.CertGetEnhancedKeyUsage$MH,"CertGetEnhancedKeyUsage");
    }
    public static int CertGetEnhancedKeyUsage ( Addressable pCertContext,  int dwFlags,  Addressable pUsage,  Addressable pcbUsage) {
        var mh$ = CertGetEnhancedKeyUsage$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwFlags, pUsage, pcbUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertSetEnhancedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$841.CertSetEnhancedKeyUsage$MH,"CertSetEnhancedKeyUsage");
    }
    public static int CertSetEnhancedKeyUsage ( Addressable pCertContext,  Addressable pUsage) {
        var mh$ = CertSetEnhancedKeyUsage$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEnhancedKeyUsageIdentifier$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CertAddEnhancedKeyUsageIdentifier$MH,"CertAddEnhancedKeyUsageIdentifier");
    }
    public static int CertAddEnhancedKeyUsageIdentifier ( Addressable pCertContext,  Addressable pszUsageIdentifier) {
        var mh$ = CertAddEnhancedKeyUsageIdentifier$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pszUsageIdentifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRemoveEnhancedKeyUsageIdentifier$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CertRemoveEnhancedKeyUsageIdentifier$MH,"CertRemoveEnhancedKeyUsageIdentifier");
    }
    public static int CertRemoveEnhancedKeyUsageIdentifier ( Addressable pCertContext,  Addressable pszUsageIdentifier) {
        var mh$ = CertRemoveEnhancedKeyUsageIdentifier$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, pszUsageIdentifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetValidUsages$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CertGetValidUsages$MH,"CertGetValidUsages");
    }
    public static int CertGetValidUsages ( int cCerts,  Addressable rghCerts,  Addressable cNumOIDs,  Addressable rghOIDs,  Addressable pcbOIDs) {
        var mh$ = CertGetValidUsages$MH();
        try {
            return (int)mh$.invokeExact(cCerts, rghCerts, cNumOIDs, rghOIDs, pcbOIDs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgGetAndVerifySigner$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CryptMsgGetAndVerifySigner$MH,"CryptMsgGetAndVerifySigner");
    }
    public static int CryptMsgGetAndVerifySigner ( Addressable hCryptMsg,  int cSignerStore,  Addressable rghSignerStore,  int dwFlags,  Addressable ppSigner,  Addressable pdwSignerIndex) {
        var mh$ = CryptMsgGetAndVerifySigner$MH();
        try {
            return (int)mh$.invokeExact(hCryptMsg, cSignerStore, rghSignerStore, dwFlags, ppSigner, pdwSignerIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgSignCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CryptMsgSignCTL$MH,"CryptMsgSignCTL");
    }
    public static int CryptMsgSignCTL ( int dwMsgEncodingType,  Addressable pbCtlContent,  int cbCtlContent,  Addressable pSignInfo,  int dwFlags,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = CryptMsgSignCTL$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pbCtlContent, cbCtlContent, pSignInfo, dwFlags, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMsgEncodeAndSignCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$842.CryptMsgEncodeAndSignCTL$MH,"CryptMsgEncodeAndSignCTL");
    }
    public static int CryptMsgEncodeAndSignCTL ( int dwMsgEncodingType,  Addressable pCtlInfo,  Addressable pSignInfo,  int dwFlags,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = CryptMsgEncodeAndSignCTL$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pCtlInfo, pSignInfo, dwFlags, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindSubjectInSortedCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CertFindSubjectInSortedCTL$MH,"CertFindSubjectInSortedCTL");
    }
    public static int CertFindSubjectInSortedCTL ( Addressable pSubjectIdentifier,  Addressable pCtlContext,  int dwFlags,  Addressable pvReserved,  Addressable pEncodedAttributes) {
        var mh$ = CertFindSubjectInSortedCTL$MH();
        try {
            return (int)mh$.invokeExact(pSubjectIdentifier, pCtlContext, dwFlags, pvReserved, pEncodedAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertEnumSubjectInSortedCTL$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CertEnumSubjectInSortedCTL$MH,"CertEnumSubjectInSortedCTL");
    }
    public static int CertEnumSubjectInSortedCTL ( Addressable pCtlContext,  Addressable ppvNextSubject,  Addressable pSubjectIdentifier,  Addressable pEncodedAttributes) {
        var mh$ = CertEnumSubjectInSortedCTL$MH();
        try {
            return (int)mh$.invokeExact(pCtlContext, ppvNextSubject, pSubjectIdentifier, pEncodedAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCTL_VERIFY_USAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_VERIFY_USAGE_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertVerifyCTLUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CertVerifyCTLUsage$MH,"CertVerifyCTLUsage");
    }
    public static int CertVerifyCTLUsage ( int dwEncodingType,  int dwSubjectType,  Addressable pvSubject,  Addressable pSubjectUsage,  int dwFlags,  Addressable pVerifyUsagePara,  Addressable pVerifyUsageStatus) {
        var mh$ = CertVerifyCTLUsage$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, dwSubjectType, pvSubject, pSubjectUsage, dwFlags, pVerifyUsagePara, pVerifyUsageStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_REVOCATION_CRL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REVOCATION_CHAIN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REVOCATION_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REVOCATION_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertVerifyRevocation$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CertVerifyRevocation$MH,"CertVerifyRevocation");
    }
    public static int CertVerifyRevocation ( int dwEncodingType,  int dwRevType,  int cContext,  Addressable rgpvContext,  int dwFlags,  Addressable pRevPara,  Addressable pRevStatus) {
        var mh$ = CertVerifyRevocation$MH();
        try {
            return (int)mh$.invokeExact(dwEncodingType, dwRevType, cContext, rgpvContext, dwFlags, pRevPara, pRevStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareIntegerBlob$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CertCompareIntegerBlob$MH,"CertCompareIntegerBlob");
    }
    public static int CertCompareIntegerBlob ( Addressable pInt1,  Addressable pInt2) {
        var mh$ = CertCompareIntegerBlob$MH();
        try {
            return (int)mh$.invokeExact(pInt1, pInt2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$843.CertCompareCertificate$MH,"CertCompareCertificate");
    }
    public static int CertCompareCertificate ( int dwCertEncodingType,  Addressable pCertId1,  Addressable pCertId2) {
        var mh$ = CertCompareCertificate$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertId1, pCertId2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCompareCertificateName$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CertCompareCertificateName$MH,"CertCompareCertificateName");
    }
    public static int CertCompareCertificateName ( int dwCertEncodingType,  Addressable pCertName1,  Addressable pCertName2) {
        var mh$ = CertCompareCertificateName$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertName1, pCertName2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertIsRDNAttrsInCertificateName$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CertIsRDNAttrsInCertificateName$MH,"CertIsRDNAttrsInCertificateName");
    }
    public static int CertIsRDNAttrsInCertificateName ( int dwCertEncodingType,  int dwFlags,  Addressable pCertName,  Addressable pRDN) {
        var mh$ = CertIsRDNAttrsInCertificateName$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, dwFlags, pCertName, pRDN);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertComparePublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CertComparePublicKeyInfo$MH,"CertComparePublicKeyInfo");
    }
    public static int CertComparePublicKeyInfo ( int dwCertEncodingType,  Addressable pPublicKey1,  Addressable pPublicKey2) {
        var mh$ = CertComparePublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pPublicKey1, pPublicKey2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetPublicKeyLength$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CertGetPublicKeyLength$MH,"CertGetPublicKeyLength");
    }
    public static int CertGetPublicKeyLength ( int dwCertEncodingType,  Addressable pPublicKey) {
        var mh$ = CertGetPublicKeyLength$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pPublicKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyCertificateSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CryptVerifyCertificateSignature$MH,"CryptVerifyCertificateSignature");
    }
    public static int CryptVerifyCertificateSignature ( long hCryptProv,  int dwCertEncodingType,  Addressable pbEncoded,  int cbEncoded,  Addressable pPublicKey) {
        var mh$ = CryptVerifyCertificateSignature$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pPublicKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyCertificateSignatureEx$MH() {
        return RuntimeHelper.requireNonNull(constants$844.CryptVerifyCertificateSignatureEx$MH,"CryptVerifyCertificateSignatureEx");
    }
    public static int CryptVerifyCertificateSignatureEx ( long hCryptProv,  int dwCertEncodingType,  int dwSubjectType,  Addressable pvSubject,  int dwIssuerType,  Addressable pvIssuer,  int dwFlags,  Addressable pvExtra) {
        var mh$ = CryptVerifyCertificateSignatureEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, dwSubjectType, pvSubject, dwIssuerType, pvIssuer, dwFlags, pvExtra);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertIsStrongHashToSign$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CertIsStrongHashToSign$MH,"CertIsStrongHashToSign");
    }
    public static int CertIsStrongHashToSign ( Addressable pStrongSignPara,  Addressable pwszCNGHashAlgid,  Addressable pSigningCert) {
        var mh$ = CertIsStrongHashToSign$MH();
        try {
            return (int)mh$.invokeExact(pStrongSignPara, pwszCNGHashAlgid, pSigningCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashToBeSigned$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptHashToBeSigned$MH,"CryptHashToBeSigned");
    }
    public static int CryptHashToBeSigned ( long hCryptProv,  int dwCertEncodingType,  Addressable pbEncoded,  int cbEncoded,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptHashToBeSigned$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptHashCertificate$MH,"CryptHashCertificate");
    }
    public static int CryptHashCertificate ( long hCryptProv,  int Algid,  int dwFlags,  Addressable pbEncoded,  int cbEncoded,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptHashCertificate$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, Algid, dwFlags, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashCertificate2$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptHashCertificate2$MH,"CryptHashCertificate2");
    }
    public static int CryptHashCertificate2 ( Addressable pwszCNGHashAlgid,  int dwFlags,  Addressable pvReserved,  Addressable pbEncoded,  int cbEncoded,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptHashCertificate2$MH();
        try {
            return (int)mh$.invokeExact(pwszCNGHashAlgid, dwFlags, pvReserved, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptSignCertificate$MH,"CryptSignCertificate");
    }
    public static int CryptSignCertificate ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable pbEncodedToBeSigned,  int cbEncodedToBeSigned,  Addressable pSignatureAlgorithm,  Addressable pvHashAuxInfo,  Addressable pbSignature,  Addressable pcbSignature) {
        var mh$ = CryptSignCertificate$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pbEncodedToBeSigned, cbEncodedToBeSigned, pSignatureAlgorithm, pvHashAuxInfo, pbSignature, pcbSignature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignAndEncodeCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$845.CryptSignAndEncodeCertificate$MH,"CryptSignAndEncodeCertificate");
    }
    public static int CryptSignAndEncodeCertificate ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable lpszStructType,  Addressable pvStructInfo,  Addressable pSignatureAlgorithm,  Addressable pvHashAuxInfo,  Addressable pbEncoded,  Addressable pcbEncoded) {
        var mh$ = CryptSignAndEncodeCertificate$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, lpszStructType, pvStructInfo, pSignatureAlgorithm, pvHashAuxInfo, pbEncoded, pcbEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyTimeValidity$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CertVerifyTimeValidity$MH,"CertVerifyTimeValidity");
    }
    public static int CertVerifyTimeValidity ( Addressable pTimeToVerify,  Addressable pCertInfo) {
        var mh$ = CertVerifyTimeValidity$MH();
        try {
            return (int)mh$.invokeExact(pTimeToVerify, pCertInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyCRLTimeValidity$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CertVerifyCRLTimeValidity$MH,"CertVerifyCRLTimeValidity");
    }
    public static int CertVerifyCRLTimeValidity ( Addressable pTimeToVerify,  Addressable pCrlInfo) {
        var mh$ = CertVerifyCRLTimeValidity$MH();
        try {
            return (int)mh$.invokeExact(pTimeToVerify, pCrlInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyValidityNesting$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CertVerifyValidityNesting$MH,"CertVerifyValidityNesting");
    }
    public static int CertVerifyValidityNesting ( Addressable pSubjectInfo,  Addressable pIssuerInfo) {
        var mh$ = CertVerifyValidityNesting$MH();
        try {
            return (int)mh$.invokeExact(pSubjectInfo, pIssuerInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertVerifyCRLRevocation$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CertVerifyCRLRevocation$MH,"CertVerifyCRLRevocation");
    }
    public static int CertVerifyCRLRevocation ( int dwCertEncodingType,  Addressable pCertId,  int cCrlInfo,  Addressable rgpCrlInfo) {
        var mh$ = CertVerifyCRLRevocation$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertId, cCrlInfo, rgpCrlInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAlgIdToOID$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CertAlgIdToOID$MH,"CertAlgIdToOID");
    }
    public static MemoryAddress CertAlgIdToOID ( int dwAlgId) {
        var mh$ = CertAlgIdToOID$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwAlgId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOIDToAlgId$MH() {
        return RuntimeHelper.requireNonNull(constants$847.CertOIDToAlgId$MH,"CertOIDToAlgId");
    }
    public static int CertOIDToAlgId ( Addressable pszObjId) {
        var mh$ = CertOIDToAlgId$MH();
        try {
            return (int)mh$.invokeExact(pszObjId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$848.CertFindExtension$MH,"CertFindExtension");
    }
    public static MemoryAddress CertFindExtension ( Addressable pszObjId,  int cExtensions,  Addressable rgExtensions) {
        var mh$ = CertFindExtension$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszObjId, cExtensions, rgExtensions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$848.CertFindAttribute$MH,"CertFindAttribute");
    }
    public static MemoryAddress CertFindAttribute ( Addressable pszObjId,  int cAttr,  Addressable rgAttr) {
        var mh$ = CertFindAttribute$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszObjId, cAttr, rgAttr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFindRDNAttr$MH() {
        return RuntimeHelper.requireNonNull(constants$848.CertFindRDNAttr$MH,"CertFindRDNAttr");
    }
    public static MemoryAddress CertFindRDNAttr ( Addressable pszObjId,  Addressable pName) {
        var mh$ = CertFindRDNAttr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pszObjId, pName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetIntendedKeyUsage$MH() {
        return RuntimeHelper.requireNonNull(constants$848.CertGetIntendedKeyUsage$MH,"CertGetIntendedKeyUsage");
    }
    public static int CertGetIntendedKeyUsage ( int dwCertEncodingType,  Addressable pCertInfo,  Addressable pbKeyUsage,  int cbKeyUsage) {
        var mh$ = CertGetIntendedKeyUsage$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pCertInfo, pbKeyUsage, cbKeyUsage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCRYPTDEFAULTCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptInstallDefaultContext$MH() {
        return RuntimeHelper.requireNonNull(constants$848.CryptInstallDefaultContext$MH,"CryptInstallDefaultContext");
    }
    public static int CryptInstallDefaultContext ( long hCryptProv,  int dwDefaultType,  Addressable pvDefaultPara,  int dwFlags,  Addressable pvReserved,  Addressable phDefaultContext) {
        var mh$ = CryptInstallDefaultContext$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwDefaultType, pvDefaultPara, dwFlags, pvReserved, phDefaultContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptUninstallDefaultContext$MH() {
        return RuntimeHelper.requireNonNull(constants$848.CryptUninstallDefaultContext$MH,"CryptUninstallDefaultContext");
    }
    public static int CryptUninstallDefaultContext ( Addressable hDefaultContext,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CryptUninstallDefaultContext$MH();
        try {
            return (int)mh$.invokeExact(hDefaultContext, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$849.CryptExportPublicKeyInfo$MH,"CryptExportPublicKeyInfo");
    }
    public static int CryptExportPublicKeyInfo ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable pInfo,  Addressable pcbInfo) {
        var mh$ = CryptExportPublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pInfo, pcbInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$849.CryptExportPublicKeyInfoEx$MH,"CryptExportPublicKeyInfoEx");
    }
    public static int CryptExportPublicKeyInfoEx ( long hCryptProvOrNCryptKey,  int dwKeySpec,  int dwCertEncodingType,  Addressable pszPublicKeyObjId,  int dwFlags,  Addressable pvAuxInfo,  Addressable pInfo,  Addressable pcbInfo) {
        var mh$ = CryptExportPublicKeyInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPublicKeyInfoFromBCryptKeyHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$849.CryptExportPublicKeyInfoFromBCryptKeyHandle$MH,"CryptExportPublicKeyInfoFromBCryptKeyHandle");
    }
    public static int CryptExportPublicKeyInfoFromBCryptKeyHandle ( Addressable hBCryptKey,  int dwCertEncodingType,  Addressable pszPublicKeyObjId,  int dwFlags,  Addressable pvAuxInfo,  Addressable pInfo,  Addressable pcbInfo) {
        var mh$ = CryptExportPublicKeyInfoFromBCryptKeyHandle$MH();
        try {
            return (int)mh$.invokeExact(hBCryptKey, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$850.CryptImportPublicKeyInfo$MH,"CryptImportPublicKeyInfo");
    }
    public static int CryptImportPublicKeyInfo ( long hCryptProv,  int dwCertEncodingType,  Addressable pInfo,  Addressable phKey) {
        var mh$ = CryptImportPublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pInfo, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$850.CryptImportPublicKeyInfoEx$MH,"CryptImportPublicKeyInfoEx");
    }
    public static int CryptImportPublicKeyInfoEx ( long hCryptProv,  int dwCertEncodingType,  Addressable pInfo,  int aiKeyAlg,  int dwFlags,  Addressable pvAuxInfo,  Addressable phKey) {
        var mh$ = CryptImportPublicKeyInfoEx$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwCertEncodingType, pInfo, aiKeyAlg, dwFlags, pvAuxInfo, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPublicKeyInfoEx2$MH() {
        return RuntimeHelper.requireNonNull(constants$850.CryptImportPublicKeyInfoEx2$MH,"CryptImportPublicKeyInfoEx2");
    }
    public static int CryptImportPublicKeyInfoEx2 ( int dwCertEncodingType,  Addressable pInfo,  int dwFlags,  Addressable pvAuxInfo,  Addressable phKey) {
        var mh$ = CryptImportPublicKeyInfoEx2$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pInfo, dwFlags, pvAuxInfo, phKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptAcquireCertificatePrivateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$851.CryptAcquireCertificatePrivateKey$MH,"CryptAcquireCertificatePrivateKey");
    }
    public static int CryptAcquireCertificatePrivateKey ( Addressable pCert,  int dwFlags,  Addressable pvParameters,  Addressable phCryptProvOrNCryptKey,  Addressable pdwKeySpec,  Addressable pfCallerFreeProvOrNCryptKey) {
        var mh$ = CryptAcquireCertificatePrivateKey$MH();
        try {
            return (int)mh$.invokeExact(pCert, dwFlags, pvParameters, phCryptProvOrNCryptKey, pdwKeySpec, pfCallerFreeProvOrNCryptKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFindCertificateKeyProvInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$851.CryptFindCertificateKeyProvInfo$MH,"CryptFindCertificateKeyProvInfo");
    }
    public static int CryptFindCertificateKeyProvInfo ( Addressable pCert,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CryptFindCertificateKeyProvInfo$MH();
        try {
            return (int)mh$.invokeExact(pCert, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptImportPKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$851.CryptImportPKCS8$MH,"CryptImportPKCS8");
    }
    public static int CryptImportPKCS8 ( MemorySegment sPrivateKeyAndParams,  int dwFlags,  Addressable phCryptProv,  Addressable pvAuxInfo) {
        var mh$ = CryptImportPKCS8$MH();
        try {
            return (int)mh$.invokeExact(sPrivateKeyAndParams, dwFlags, phCryptProv, pvAuxInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPKCS8$MH() {
        return RuntimeHelper.requireNonNull(constants$852.CryptExportPKCS8$MH,"CryptExportPKCS8");
    }
    public static int CryptExportPKCS8 ( long hCryptProv,  int dwKeySpec,  Addressable pszPrivateKeyObjId,  int dwFlags,  Addressable pvAuxInfo,  Addressable pbPrivateKeyBlob,  Addressable pcbPrivateKeyBlob) {
        var mh$ = CryptExportPKCS8$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, dwKeySpec, pszPrivateKeyObjId, dwFlags, pvAuxInfo, pbPrivateKeyBlob, pcbPrivateKeyBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptExportPKCS8Ex$MH() {
        return RuntimeHelper.requireNonNull(constants$852.CryptExportPKCS8Ex$MH,"CryptExportPKCS8Ex");
    }
    public static int CryptExportPKCS8Ex ( Addressable psExportParams,  int dwFlags,  Addressable pvAuxInfo,  Addressable pbPrivateKeyBlob,  Addressable pcbPrivateKeyBlob) {
        var mh$ = CryptExportPKCS8Ex$MH();
        try {
            return (int)mh$.invokeExact(psExportParams, dwFlags, pvAuxInfo, pbPrivateKeyBlob, pcbPrivateKeyBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashPublicKeyInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$852.CryptHashPublicKeyInfo$MH,"CryptHashPublicKeyInfo");
    }
    public static int CryptHashPublicKeyInfo ( long hCryptProv,  int Algid,  int dwFlags,  int dwCertEncodingType,  Addressable pInfo,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptHashPublicKeyInfo$MH();
        try {
            return (int)mh$.invokeExact(hCryptProv, Algid, dwFlags, dwCertEncodingType, pInfo, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRDNValueToStrA$MH() {
        return RuntimeHelper.requireNonNull(constants$852.CertRDNValueToStrA$MH,"CertRDNValueToStrA");
    }
    public static int CertRDNValueToStrA ( int dwValueType,  Addressable pValue,  Addressable psz,  int csz) {
        var mh$ = CertRDNValueToStrA$MH();
        try {
            return (int)mh$.invokeExact(dwValueType, pValue, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRDNValueToStrW$MH() {
        return RuntimeHelper.requireNonNull(constants$852.CertRDNValueToStrW$MH,"CertRDNValueToStrW");
    }
    public static int CertRDNValueToStrW ( int dwValueType,  Addressable pValue,  Addressable psz,  int csz) {
        var mh$ = CertRDNValueToStrW$MH();
        try {
            return (int)mh$.invokeExact(dwValueType, pValue, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertNameToStrA$MH() {
        return RuntimeHelper.requireNonNull(constants$853.CertNameToStrA$MH,"CertNameToStrA");
    }
    public static int CertNameToStrA ( int dwCertEncodingType,  Addressable pName,  int dwStrType,  Addressable psz,  int csz) {
        var mh$ = CertNameToStrA$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pName, dwStrType, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertNameToStrW$MH() {
        return RuntimeHelper.requireNonNull(constants$853.CertNameToStrW$MH,"CertNameToStrW");
    }
    public static int CertNameToStrW ( int dwCertEncodingType,  Addressable pName,  int dwStrType,  Addressable psz,  int csz) {
        var mh$ = CertNameToStrW$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pName, dwStrType, psz, csz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertStrToNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$853.CertStrToNameA$MH,"CertStrToNameA");
    }
    public static int CertStrToNameA ( int dwCertEncodingType,  Addressable pszX500,  int dwStrType,  Addressable pvReserved,  Addressable pbEncoded,  Addressable pcbEncoded,  Addressable ppszError) {
        var mh$ = CertStrToNameA$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertStrToNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$853.CertStrToNameW$MH,"CertStrToNameW");
    }
    public static int CertStrToNameW ( int dwCertEncodingType,  Addressable pszX500,  int dwStrType,  Addressable pvReserved,  Addressable pbEncoded,  Addressable pcbEncoded,  Addressable ppszError) {
        var mh$ = CertStrToNameW$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetNameStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$853.CertGetNameStringA$MH,"CertGetNameStringA");
    }
    public static int CertGetNameStringA ( Addressable pCertContext,  int dwType,  int dwFlags,  Addressable pvTypePara,  Addressable pszNameString,  int cchNameString) {
        var mh$ = CertGetNameStringA$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetNameStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$853.CertGetNameStringW$MH,"CertGetNameStringW");
    }
    public static int CertGetNameStringW ( Addressable pCertContext,  int dwType,  int dwFlags,  Addressable pvTypePara,  Addressable pszNameString,  int cchNameString) {
        var mh$ = CertGetNameStringW$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_SIGN_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_VERIFY_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_ENCRYPT_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_DECRYPT_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_HASH_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_KEY_SIGN_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_KEY_VERIFY_MESSAGE_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptSignMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$854.CryptSignMessage$MH,"CryptSignMessage");
    }
    public static int CryptSignMessage ( Addressable pSignPara,  int fDetachedSignature,  int cToBeSigned,  Addressable rgpbToBeSigned,  Addressable rgcbToBeSigned,  Addressable pbSignedBlob,  Addressable pcbSignedBlob) {
        var mh$ = CryptSignMessage$MH();
        try {
            return (int)mh$.invokeExact(pSignPara, fDetachedSignature, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, pbSignedBlob, pcbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$854.CryptVerifyMessageSignature$MH,"CryptVerifyMessageSignature");
    }
    public static int CryptVerifyMessageSignature ( Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbSignedBlob,  int cbSignedBlob,  Addressable pbDecoded,  Addressable pcbDecoded,  Addressable ppSignerCert) {
        var mh$ = CryptVerifyMessageSignature$MH();
        try {
            return (int)mh$.invokeExact(pVerifyPara, dwSignerIndex, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetMessageSignerCount$MH() {
        return RuntimeHelper.requireNonNull(constants$854.CryptGetMessageSignerCount$MH,"CryptGetMessageSignerCount");
    }
    public static int CryptGetMessageSignerCount ( int dwMsgEncodingType,  Addressable pbSignedBlob,  int cbSignedBlob) {
        var mh$ = CryptGetMessageSignerCount$MH();
        try {
            return (int)mh$.invokeExact(dwMsgEncodingType, pbSignedBlob, cbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetMessageCertificates$MH() {
        return RuntimeHelper.requireNonNull(constants$854.CryptGetMessageCertificates$MH,"CryptGetMessageCertificates");
    }
    public static MemoryAddress CryptGetMessageCertificates ( int dwMsgAndCertEncodingType,  long hCryptProv,  int dwFlags,  Addressable pbSignedBlob,  int cbSignedBlob) {
        var mh$ = CryptGetMessageCertificates$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dwMsgAndCertEncodingType, hCryptProv, dwFlags, pbSignedBlob, cbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyDetachedMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$855.CryptVerifyDetachedMessageSignature$MH,"CryptVerifyDetachedMessageSignature");
    }
    public static int CryptVerifyDetachedMessageSignature ( Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbDetachedSignBlob,  int cbDetachedSignBlob,  int cToBeSigned,  Addressable rgpbToBeSigned,  Addressable rgcbToBeSigned,  Addressable ppSignerCert) {
        var mh$ = CryptVerifyDetachedMessageSignature$MH();
        try {
            return (int)mh$.invokeExact(pVerifyPara, dwSignerIndex, pbDetachedSignBlob, cbDetachedSignBlob, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEncryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$855.CryptEncryptMessage$MH,"CryptEncryptMessage");
    }
    public static int CryptEncryptMessage ( Addressable pEncryptPara,  int cRecipientCert,  Addressable rgpRecipientCert,  Addressable pbToBeEncrypted,  int cbToBeEncrypted,  Addressable pbEncryptedBlob,  Addressable pcbEncryptedBlob) {
        var mh$ = CryptEncryptMessage$MH();
        try {
            return (int)mh$.invokeExact(pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeEncrypted, cbToBeEncrypted, pbEncryptedBlob, pcbEncryptedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$855.CryptDecryptMessage$MH,"CryptDecryptMessage");
    }
    public static int CryptDecryptMessage ( Addressable pDecryptPara,  Addressable pbEncryptedBlob,  int cbEncryptedBlob,  Addressable pbDecrypted,  Addressable pcbDecrypted,  Addressable ppXchgCert) {
        var mh$ = CryptDecryptMessage$MH();
        try {
            return (int)mh$.invokeExact(pDecryptPara, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignAndEncryptMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$855.CryptSignAndEncryptMessage$MH,"CryptSignAndEncryptMessage");
    }
    public static int CryptSignAndEncryptMessage ( Addressable pSignPara,  Addressable pEncryptPara,  int cRecipientCert,  Addressable rgpRecipientCert,  Addressable pbToBeSignedAndEncrypted,  int cbToBeSignedAndEncrypted,  Addressable pbSignedAndEncryptedBlob,  Addressable pcbSignedAndEncryptedBlob) {
        var mh$ = CryptSignAndEncryptMessage$MH();
        try {
            return (int)mh$.invokeExact(pSignPara, pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeSignedAndEncrypted, cbToBeSignedAndEncrypted, pbSignedAndEncryptedBlob, pcbSignedAndEncryptedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecryptAndVerifyMessageSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$855.CryptDecryptAndVerifyMessageSignature$MH,"CryptDecryptAndVerifyMessageSignature");
    }
    public static int CryptDecryptAndVerifyMessageSignature ( Addressable pDecryptPara,  Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbEncryptedBlob,  int cbEncryptedBlob,  Addressable pbDecrypted,  Addressable pcbDecrypted,  Addressable ppXchgCert,  Addressable ppSignerCert) {
        var mh$ = CryptDecryptAndVerifyMessageSignature$MH();
        try {
            return (int)mh$.invokeExact(pDecryptPara, pVerifyPara, dwSignerIndex, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptDecodeMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$855.CryptDecodeMessage$MH,"CryptDecodeMessage");
    }
    public static int CryptDecodeMessage ( int dwMsgTypeFlags,  Addressable pDecryptPara,  Addressable pVerifyPara,  int dwSignerIndex,  Addressable pbEncodedBlob,  int cbEncodedBlob,  int dwPrevInnerContentType,  Addressable pdwMsgType,  Addressable pdwInnerContentType,  Addressable pbDecoded,  Addressable pcbDecoded,  Addressable ppXchgCert,  Addressable ppSignerCert) {
        var mh$ = CryptDecodeMessage$MH();
        try {
            return (int)mh$.invokeExact(dwMsgTypeFlags, pDecryptPara, pVerifyPara, dwSignerIndex, pbEncodedBlob, cbEncodedBlob, dwPrevInnerContentType, pdwMsgType, pdwInnerContentType, pbDecoded, pcbDecoded, ppXchgCert, ppSignerCert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptHashMessage$MH() {
        return RuntimeHelper.requireNonNull(constants$856.CryptHashMessage$MH,"CryptHashMessage");
    }
    public static int CryptHashMessage ( Addressable pHashPara,  int fDetachedHash,  int cToBeHashed,  Addressable rgpbToBeHashed,  Addressable rgcbToBeHashed,  Addressable pbHashedBlob,  Addressable pcbHashedBlob,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptHashMessage$MH();
        try {
            return (int)mh$.invokeExact(pHashPara, fDetachedHash, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbHashedBlob, pcbHashedBlob, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageHash$MH() {
        return RuntimeHelper.requireNonNull(constants$856.CryptVerifyMessageHash$MH,"CryptVerifyMessageHash");
    }
    public static int CryptVerifyMessageHash ( Addressable pHashPara,  Addressable pbHashedBlob,  int cbHashedBlob,  Addressable pbToBeHashed,  Addressable pcbToBeHashed,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptVerifyMessageHash$MH();
        try {
            return (int)mh$.invokeExact(pHashPara, pbHashedBlob, cbHashedBlob, pbToBeHashed, pcbToBeHashed, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyDetachedMessageHash$MH() {
        return RuntimeHelper.requireNonNull(constants$856.CryptVerifyDetachedMessageHash$MH,"CryptVerifyDetachedMessageHash");
    }
    public static int CryptVerifyDetachedMessageHash ( Addressable pHashPara,  Addressable pbDetachedHashBlob,  int cbDetachedHashBlob,  int cToBeHashed,  Addressable rgpbToBeHashed,  Addressable rgcbToBeHashed,  Addressable pbComputedHash,  Addressable pcbComputedHash) {
        var mh$ = CryptVerifyDetachedMessageHash$MH();
        try {
            return (int)mh$.invokeExact(pHashPara, pbDetachedHashBlob, cbDetachedHashBlob, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbComputedHash, pcbComputedHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSignMessageWithKey$MH() {
        return RuntimeHelper.requireNonNull(constants$856.CryptSignMessageWithKey$MH,"CryptSignMessageWithKey");
    }
    public static int CryptSignMessageWithKey ( Addressable pSignPara,  Addressable pbToBeSigned,  int cbToBeSigned,  Addressable pbSignedBlob,  Addressable pcbSignedBlob) {
        var mh$ = CryptSignMessageWithKey$MH();
        try {
            return (int)mh$.invokeExact(pSignPara, pbToBeSigned, cbToBeSigned, pbSignedBlob, pcbSignedBlob);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyMessageSignatureWithKey$MH() {
        return RuntimeHelper.requireNonNull(constants$856.CryptVerifyMessageSignatureWithKey$MH,"CryptVerifyMessageSignatureWithKey");
    }
    public static int CryptVerifyMessageSignatureWithKey ( Addressable pVerifyPara,  Addressable pPublicKeyInfo,  Addressable pbSignedBlob,  int cbSignedBlob,  Addressable pbDecoded,  Addressable pcbDecoded) {
        var mh$ = CryptVerifyMessageSignatureWithKey$MH();
        try {
            return (int)mh$.invokeExact(pVerifyPara, pPublicKeyInfo, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOpenSystemStoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$856.CertOpenSystemStoreA$MH,"CertOpenSystemStoreA");
    }
    public static MemoryAddress CertOpenSystemStoreA ( long hProv,  Addressable szSubsystemProtocol) {
        var mh$ = CertOpenSystemStoreA$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProv, szSubsystemProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertOpenSystemStoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$857.CertOpenSystemStoreW$MH,"CertOpenSystemStoreW");
    }
    public static MemoryAddress CertOpenSystemStoreW ( long hProv,  Addressable szSubsystemProtocol) {
        var mh$ = CertOpenSystemStoreW$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hProv, szSubsystemProtocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToSystemStoreA$MH() {
        return RuntimeHelper.requireNonNull(constants$857.CertAddEncodedCertificateToSystemStoreA$MH,"CertAddEncodedCertificateToSystemStoreA");
    }
    public static int CertAddEncodedCertificateToSystemStoreA ( Addressable szCertStoreName,  Addressable pbCertEncoded,  int cbCertEncoded) {
        var mh$ = CertAddEncodedCertificateToSystemStoreA$MH();
        try {
            return (int)mh$.invokeExact(szCertStoreName, pbCertEncoded, cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddEncodedCertificateToSystemStoreW$MH() {
        return RuntimeHelper.requireNonNull(constants$857.CertAddEncodedCertificateToSystemStoreW$MH,"CertAddEncodedCertificateToSystemStoreW");
    }
    public static int CertAddEncodedCertificateToSystemStoreW ( Addressable szCertStoreName,  Addressable pbCertEncoded,  int cbCertEncoded) {
        var mh$ = CertAddEncodedCertificateToSystemStoreW$MH();
        try {
            return (int)mh$.invokeExact(szCertStoreName, pbCertEncoded, cbCertEncoded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_CHAIN = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle FindCertsByIssuer$MH() {
        return RuntimeHelper.requireNonNull(constants$857.FindCertsByIssuer$MH,"FindCertsByIssuer");
    }
    public static int FindCertsByIssuer ( Addressable pCertChains,  Addressable pcbCertChains,  Addressable pcCertChains,  Addressable pbEncodedIssuerName,  int cbEncodedIssuerName,  Addressable pwszPurpose,  int dwKeySpec) {
        var mh$ = FindCertsByIssuer$MH();
        try {
            return (int)mh$.invokeExact(pCertChains, pcbCertChains, pcCertChains, pbEncodedIssuerName, cbEncodedIssuerName, pwszPurpose, dwKeySpec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptQueryObject$MH() {
        return RuntimeHelper.requireNonNull(constants$857.CryptQueryObject$MH,"CryptQueryObject");
    }
    public static int CryptQueryObject ( int dwObjectType,  Addressable pvObject,  int dwExpectedContentTypeFlags,  int dwExpectedFormatTypeFlags,  int dwFlags,  Addressable pdwMsgAndCertEncodingType,  Addressable pdwContentType,  Addressable pdwFormatType,  Addressable phCertStore,  Addressable phMsg,  Addressable ppvContext) {
        var mh$ = CryptQueryObject$MH();
        try {
            return (int)mh$.invokeExact(dwObjectType, pvObject, dwExpectedContentTypeFlags, dwExpectedFormatTypeFlags, dwFlags, pdwMsgAndCertEncodingType, pdwContentType, pdwFormatType, phCertStore, phMsg, ppvContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMemAlloc$MH() {
        return RuntimeHelper.requireNonNull(constants$857.CryptMemAlloc$MH,"CryptMemAlloc");
    }
    public static MemoryAddress CryptMemAlloc ( int cbSize) {
        var mh$ = CryptMemAlloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMemRealloc$MH() {
        return RuntimeHelper.requireNonNull(constants$858.CryptMemRealloc$MH,"CryptMemRealloc");
    }
    public static MemoryAddress CryptMemRealloc ( Addressable pv,  int cbSize) {
        var mh$ = CryptMemRealloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pv, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptMemFree$MH() {
        return RuntimeHelper.requireNonNull(constants$858.CryptMemFree$MH,"CryptMemFree");
    }
    public static void CryptMemFree ( Addressable pv) {
        var mh$ = CryptMemFree$MH();
        try {
            mh$.invokeExact(pv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCRYPTASYNC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHCRYPTASYNC = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptCreateAsyncHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$858.CryptCreateAsyncHandle$MH,"CryptCreateAsyncHandle");
    }
    public static int CryptCreateAsyncHandle ( int dwFlags,  Addressable phAsync) {
        var mh$ = CryptCreateAsyncHandle$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, phAsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetAsyncParam$MH() {
        return RuntimeHelper.requireNonNull(constants$858.CryptSetAsyncParam$MH,"CryptSetAsyncParam");
    }
    public static int CryptSetAsyncParam ( Addressable hAsync,  Addressable pszParamOid,  Addressable pvParam,  Addressable pfnFree) {
        var mh$ = CryptSetAsyncParam$MH();
        try {
            return (int)mh$.invokeExact(hAsync, pszParamOid, pvParam, pfnFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetAsyncParam$MH() {
        return RuntimeHelper.requireNonNull(constants$859.CryptGetAsyncParam$MH,"CryptGetAsyncParam");
    }
    public static int CryptGetAsyncParam ( Addressable hAsync,  Addressable pszParamOid,  Addressable ppvParam,  Addressable ppfnFree) {
        var mh$ = CryptGetAsyncParam$MH();
        try {
            return (int)mh$.invokeExact(hAsync, pszParamOid, ppvParam, ppfnFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCloseAsyncHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$859.CryptCloseAsyncHandle$MH,"CryptCloseAsyncHandle");
    }
    public static int CryptCloseAsyncHandle ( Addressable hAsync) {
        var mh$ = CryptCloseAsyncHandle$MH();
        try {
            return (int)mh$.invokeExact(hAsync);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_BLOB_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_CREDENTIALS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PASSWORD_CREDENTIALSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PASSWORD_CREDENTIALSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_PASSWORD_CREDENTIALS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPTNET_URL_CACHE_PRE_FETCH_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPTNET_URL_CACHE_FLUSH_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPTNET_URL_CACHE_RESPONSE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_RETRIEVE_AUX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptRetrieveObjectByUrlA$MH() {
        return RuntimeHelper.requireNonNull(constants$859.CryptRetrieveObjectByUrlA$MH,"CryptRetrieveObjectByUrlA");
    }
    public static int CryptRetrieveObjectByUrlA ( Addressable pszUrl,  Addressable pszObjectOid,  int dwRetrievalFlags,  int dwTimeout,  Addressable ppvObject,  Addressable hAsyncRetrieve,  Addressable pCredentials,  Addressable pvVerify,  Addressable pAuxInfo) {
        var mh$ = CryptRetrieveObjectByUrlA$MH();
        try {
            return (int)mh$.invokeExact(pszUrl, pszObjectOid, dwRetrievalFlags, dwTimeout, ppvObject, hAsyncRetrieve, pCredentials, pvVerify, pAuxInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptRetrieveObjectByUrlW$MH() {
        return RuntimeHelper.requireNonNull(constants$859.CryptRetrieveObjectByUrlW$MH,"CryptRetrieveObjectByUrlW");
    }
    public static int CryptRetrieveObjectByUrlW ( Addressable pszUrl,  Addressable pszObjectOid,  int dwRetrievalFlags,  int dwTimeout,  Addressable ppvObject,  Addressable hAsyncRetrieve,  Addressable pCredentials,  Addressable pvVerify,  Addressable pAuxInfo) {
        var mh$ = CryptRetrieveObjectByUrlW$MH();
        try {
            return (int)mh$.invokeExact(pszUrl, pszObjectOid, dwRetrievalFlags, dwTimeout, ppvObject, hAsyncRetrieve, pCredentials, pvVerify, pAuxInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptInstallCancelRetrieval$MH() {
        return RuntimeHelper.requireNonNull(constants$860.CryptInstallCancelRetrieval$MH,"CryptInstallCancelRetrieval");
    }
    public static int CryptInstallCancelRetrieval ( Addressable pfnCancel,  Addressable pvArg,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CryptInstallCancelRetrieval$MH();
        try {
            return (int)mh$.invokeExact(pfnCancel, pvArg, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUninstallCancelRetrieval$MH() {
        return RuntimeHelper.requireNonNull(constants$860.CryptUninstallCancelRetrieval$MH,"CryptUninstallCancelRetrieval");
    }
    public static int CryptUninstallCancelRetrieval ( int dwFlags,  Addressable pvReserved) {
        var mh$ = CryptUninstallCancelRetrieval$MH();
        try {
            return (int)mh$.invokeExact(dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCancelAsyncRetrieval$MH() {
        return RuntimeHelper.requireNonNull(constants$860.CryptCancelAsyncRetrieval$MH,"CryptCancelAsyncRetrieval");
    }
    public static int CryptCancelAsyncRetrieval ( Addressable hAsyncRetrieval) {
        var mh$ = CryptCancelAsyncRetrieval$MH();
        try {
            return (int)mh$.invokeExact(hAsyncRetrieval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_ASYNC_RETRIEVAL_COMPLETION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_URL_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_URL_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptGetObjectUrl$MH() {
        return RuntimeHelper.requireNonNull(constants$861.CryptGetObjectUrl$MH,"CryptGetObjectUrl");
    }
    public static int CryptGetObjectUrl ( Addressable pszUrlOid,  Addressable pvPara,  int dwFlags,  Addressable pUrlArray,  Addressable pcbUrlArray,  Addressable pUrlInfo,  Addressable pcbUrlInfo,  Addressable pvReserved) {
        var mh$ = CryptGetObjectUrl$MH();
        try {
            return (int)mh$.invokeExact(pszUrlOid, pvPara, dwFlags, pUrlArray, pcbUrlArray, pUrlInfo, pcbUrlInfo, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_CRL_CONTEXT_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_CRL_CONTEXT_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptGetTimeValidObject$MH() {
        return RuntimeHelper.requireNonNull(constants$861.CryptGetTimeValidObject$MH,"CryptGetTimeValidObject");
    }
    public static int CryptGetTimeValidObject ( Addressable pszTimeValidOid,  Addressable pvPara,  Addressable pIssuer,  Addressable pftValidFor,  int dwFlags,  int dwTimeout,  Addressable ppvObject,  Addressable pCredentials,  Addressable pExtraInfo) {
        var mh$ = CryptGetTimeValidObject$MH();
        try {
            return (int)mh$.invokeExact(pszTimeValidOid, pvPara, pIssuer, pftValidFor, dwFlags, dwTimeout, ppvObject, pCredentials, pExtraInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptFlushTimeValidObject$MH() {
        return RuntimeHelper.requireNonNull(constants$861.CryptFlushTimeValidObject$MH,"CryptFlushTimeValidObject");
    }
    public static int CryptFlushTimeValidObject ( Addressable pszFlushTimeValidOid,  Addressable pvPara,  Addressable pIssuer,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CryptFlushTimeValidObject$MH();
        try {
            return (int)mh$.invokeExact(pszFlushTimeValidOid, pvPara, pIssuer, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCreateSelfSignCertificate$MH() {
        return RuntimeHelper.requireNonNull(constants$862.CertCreateSelfSignCertificate$MH,"CertCreateSelfSignCertificate");
    }
    public static MemoryAddress CertCreateSelfSignCertificate ( long hCryptProvOrNCryptKey,  Addressable pSubjectIssuerBlob,  int dwFlags,  Addressable pKeyProvInfo,  Addressable pSignatureAlgorithm,  Addressable pStartTime,  Addressable pEndTime,  Addressable pExtensions) {
        var mh$ = CertCreateSelfSignCertificate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCryptProvOrNCryptKey, pSubjectIssuerBlob, dwFlags, pKeyProvInfo, pSignatureAlgorithm, pStartTime, pEndTime, pExtensions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptGetKeyIdentifierProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$862.CryptGetKeyIdentifierProperty$MH,"CryptGetKeyIdentifierProperty");
    }
    public static int CryptGetKeyIdentifierProperty ( Addressable pKeyIdentifier,  int dwPropId,  int dwFlags,  Addressable pwszComputerName,  Addressable pvReserved,  Addressable pvData,  Addressable pcbData) {
        var mh$ = CryptGetKeyIdentifierProperty$MH();
        try {
            return (int)mh$.invokeExact(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptSetKeyIdentifierProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$862.CryptSetKeyIdentifierProperty$MH,"CryptSetKeyIdentifierProperty");
    }
    public static int CryptSetKeyIdentifierProperty ( Addressable pKeyIdentifier,  int dwPropId,  int dwFlags,  Addressable pwszComputerName,  Addressable pvReserved,  Addressable pvData) {
        var mh$ = CryptSetKeyIdentifierProperty$MH();
        try {
            return (int)mh$.invokeExact(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptEnumKeyIdentifierProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$862.CryptEnumKeyIdentifierProperties$MH,"CryptEnumKeyIdentifierProperties");
    }
    public static int CryptEnumKeyIdentifierProperties ( Addressable pKeyIdentifier,  int dwPropId,  int dwFlags,  Addressable pwszComputerName,  Addressable pvReserved,  Addressable pvArg,  Addressable pfnEnum) {
        var mh$ = CryptEnumKeyIdentifierProperties$MH();
        try {
            return (int)mh$.invokeExact(pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvArg, pfnEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptCreateKeyIdentifierFromCSP$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CryptCreateKeyIdentifierFromCSP$MH,"CryptCreateKeyIdentifierFromCSP");
    }
    public static int CryptCreateKeyIdentifierFromCSP ( int dwCertEncodingType,  Addressable pszPubKeyOID,  Addressable pPubKeyStruc,  int cbPubKeyStruc,  int dwFlags,  Addressable pvReserved,  Addressable pbHash,  Addressable pcbHash) {
        var mh$ = CryptCreateKeyIdentifierFromCSP$MH();
        try {
            return (int)mh$.invokeExact(dwCertEncodingType, pszPubKeyOID, pPubKeyStruc, cbPubKeyStruc, dwFlags, pvReserved, pbHash, pcbHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCERTCHAINENGINE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_ENGINE_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertCreateCertificateChainEngine$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CertCreateCertificateChainEngine$MH,"CertCreateCertificateChainEngine");
    }
    public static int CertCreateCertificateChainEngine ( Addressable pConfig,  Addressable phChainEngine) {
        var mh$ = CertCreateCertificateChainEngine$MH();
        try {
            return (int)mh$.invokeExact(pConfig, phChainEngine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateChainEngine$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CertFreeCertificateChainEngine$MH,"CertFreeCertificateChainEngine");
    }
    public static void CertFreeCertificateChainEngine ( Addressable hChainEngine) {
        var mh$ = CertFreeCertificateChainEngine$MH();
        try {
            mh$.invokeExact(hChainEngine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertResyncCertificateChainEngine$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CertResyncCertificateChainEngine$MH,"CertResyncCertificateChainEngine");
    }
    public static int CertResyncCertificateChainEngine ( Addressable hChainEngine) {
        var mh$ = CertResyncCertificateChainEngine$MH();
        try {
            return (int)mh$.invokeExact(hChainEngine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_TRUST_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_REVOCATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_TRUST_LIST_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_CHAIN_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SIMPLE_CHAIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_SIMPLE_CHAIN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_CHAIN_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_USAGE_MATCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTL_USAGE_MATCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertGetCertificateChain$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CertGetCertificateChain$MH,"CertGetCertificateChain");
    }
    public static int CertGetCertificateChain ( Addressable hChainEngine,  Addressable pCertContext,  Addressable pTime,  Addressable hAdditionalStore,  Addressable pChainPara,  int dwFlags,  Addressable pvReserved,  Addressable ppChainContext) {
        var mh$ = CertGetCertificateChain$MH();
        try {
            return (int)mh$.invokeExact(hChainEngine, pCertContext, pTime, hAdditionalStore, pChainPara, dwFlags, pvReserved, ppChainContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateChain$MH() {
        return RuntimeHelper.requireNonNull(constants$863.CertFreeCertificateChain$MH,"CertFreeCertificateChain");
    }
    public static void CertFreeCertificateChain ( Addressable pChainContext) {
        var mh$ = CertFreeCertificateChain$MH();
        try {
            mh$.invokeExact(pChainContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertDuplicateCertificateChain$MH() {
        return RuntimeHelper.requireNonNull(constants$864.CertDuplicateCertificateChain$MH,"CertDuplicateCertificateChain");
    }
    public static MemoryAddress CertDuplicateCertificateChain ( Addressable pChainContext) {
        var mh$ = CertDuplicateCertificateChain$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pChainContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRL_REVOCATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertFindChainInStore$MH() {
        return RuntimeHelper.requireNonNull(constants$864.CertFindChainInStore$MH,"CertFindChainInStore");
    }
    public static MemoryAddress CertFindChainInStore ( Addressable hCertStore,  int dwCertEncodingType,  int dwFindFlags,  int dwFindType,  Addressable pvFindPara,  Addressable pPrevChainContext) {
        var mh$ = CertFindChainInStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevChainContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_CHAIN_FIND_ISSUER_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_FIND_BY_ISSUER_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_CHAIN_POLICY_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertVerifyCertificateChainPolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$864.CertVerifyCertificateChainPolicy$MH,"CertVerifyCertificateChainPolicy");
    }
    public static int CertVerifyCertificateChainPolicy ( Addressable pszPolicyOID,  Addressable pChainContext,  Addressable pPolicyPara,  Addressable pPolicyStatus) {
        var mh$ = CertVerifyCertificateChainPolicy$MH();
        try {
            return (int)mh$.invokeExact(pszPolicyOID, pChainContext, pPolicyPara, pPolicyStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHTTPSPolicyCallbackData = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEV_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEV_EXTRA_CERT_CHAIN_POLICY_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptStringToBinaryA$MH() {
        return RuntimeHelper.requireNonNull(constants$864.CryptStringToBinaryA$MH,"CryptStringToBinaryA");
    }
    public static int CryptStringToBinaryA ( Addressable pszString,  int cchString,  int dwFlags,  Addressable pbBinary,  Addressable pcbBinary,  Addressable pdwSkip,  Addressable pdwFlags) {
        var mh$ = CryptStringToBinaryA$MH();
        try {
            return (int)mh$.invokeExact(pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptStringToBinaryW$MH() {
        return RuntimeHelper.requireNonNull(constants$865.CryptStringToBinaryW$MH,"CryptStringToBinaryW");
    }
    public static int CryptStringToBinaryW ( Addressable pszString,  int cchString,  int dwFlags,  Addressable pbBinary,  Addressable pcbBinary,  Addressable pdwSkip,  Addressable pdwFlags) {
        var mh$ = CryptStringToBinaryW$MH();
        try {
            return (int)mh$.invokeExact(pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptBinaryToStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$865.CryptBinaryToStringA$MH,"CryptBinaryToStringA");
    }
    public static int CryptBinaryToStringA ( Addressable pbBinary,  int cbBinary,  int dwFlags,  Addressable pszString,  Addressable pcchString) {
        var mh$ = CryptBinaryToStringA$MH();
        try {
            return (int)mh$.invokeExact(pbBinary, cbBinary, dwFlags, pszString, pcchString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptBinaryToStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$865.CryptBinaryToStringW$MH,"CryptBinaryToStringW");
    }
    public static int CryptBinaryToStringW ( Addressable pbBinary,  int cbBinary,  int dwFlags,  Addressable pszString,  Addressable pcchString) {
        var mh$ = CryptBinaryToStringW$MH();
        try {
            return (int)mh$.invokeExact(pbBinary, cbBinary, dwFlags, pszString, pcchString);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXImportCertStore$MH() {
        return RuntimeHelper.requireNonNull(constants$865.PFXImportCertStore$MH,"PFXImportCertStore");
    }
    public static MemoryAddress PFXImportCertStore ( Addressable pPFX,  Addressable szPassword,  int dwFlags) {
        var mh$ = PFXImportCertStore$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pPFX, szPassword, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXIsPFXBlob$MH() {
        return RuntimeHelper.requireNonNull(constants$865.PFXIsPFXBlob$MH,"PFXIsPFXBlob");
    }
    public static int PFXIsPFXBlob ( Addressable pPFX) {
        var mh$ = PFXIsPFXBlob$MH();
        try {
            return (int)mh$.invokeExact(pPFX);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXVerifyPassword$MH() {
        return RuntimeHelper.requireNonNull(constants$865.PFXVerifyPassword$MH,"PFXVerifyPassword");
    }
    public static int PFXVerifyPassword ( Addressable pPFX,  Addressable szPassword,  int dwFlags) {
        var mh$ = PFXVerifyPassword$MH();
        try {
            return (int)mh$.invokeExact(pPFX, szPassword, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PFXExportCertStoreEx$MH() {
        return RuntimeHelper.requireNonNull(constants$866.PFXExportCertStoreEx$MH,"PFXExportCertStoreEx");
    }
    public static int PFXExportCertStoreEx ( Addressable hStore,  Addressable pPFX,  Addressable szPassword,  Addressable pvPara,  int dwFlags) {
        var mh$ = PFXExportCertStoreEx$MH();
        try {
            return (int)mh$.invokeExact(hStore, pPFX, szPassword, pvPara, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PPKCS12_PBES2_EXPORT_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle PFXExportCertStore$MH() {
        return RuntimeHelper.requireNonNull(constants$866.PFXExportCertStore$MH,"PFXExportCertStore");
    }
    public static int PFXExportCertStore ( Addressable hStore,  Addressable pPFX,  Addressable szPassword,  int dwFlags) {
        var mh$ = PFXExportCertStore$MH();
        try {
            return (int)mh$.invokeExact(hStore, pPFX, szPassword, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HCERT_SERVER_OCSP_RESPONSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SERVER_OCSP_RESPONSE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_SERVER_OCSP_RESPONSE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertOpenServerOcspResponse$MH() {
        return RuntimeHelper.requireNonNull(constants$866.CertOpenServerOcspResponse$MH,"CertOpenServerOcspResponse");
    }
    public static MemoryAddress CertOpenServerOcspResponse ( Addressable pChainContext,  int dwFlags,  Addressable pOpenPara) {
        var mh$ = CertOpenServerOcspResponse$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pChainContext, dwFlags, pOpenPara);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddRefServerOcspResponse$MH() {
        return RuntimeHelper.requireNonNull(constants$866.CertAddRefServerOcspResponse$MH,"CertAddRefServerOcspResponse");
    }
    public static void CertAddRefServerOcspResponse ( Addressable hServerOcspResponse) {
        var mh$ = CertAddRefServerOcspResponse$MH();
        try {
            mh$.invokeExact(hServerOcspResponse);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertCloseServerOcspResponse$MH() {
        return RuntimeHelper.requireNonNull(constants$867.CertCloseServerOcspResponse$MH,"CertCloseServerOcspResponse");
    }
    public static void CertCloseServerOcspResponse ( Addressable hServerOcspResponse,  int dwFlags) {
        var mh$ = CertCloseServerOcspResponse$MH();
        try {
            mh$.invokeExact(hServerOcspResponse, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertGetServerOcspResponseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$867.CertGetServerOcspResponseContext$MH,"CertGetServerOcspResponseContext");
    }
    public static MemoryAddress CertGetServerOcspResponseContext ( Addressable hServerOcspResponse,  int dwFlags,  Addressable pvReserved) {
        var mh$ = CertGetServerOcspResponseContext$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(hServerOcspResponse, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertAddRefServerOcspResponseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$867.CertAddRefServerOcspResponseContext$MH,"CertAddRefServerOcspResponseContext");
    }
    public static void CertAddRefServerOcspResponseContext ( Addressable pServerOcspResponseContext) {
        var mh$ = CertAddRefServerOcspResponseContext$MH();
        try {
            mh$.invokeExact(pServerOcspResponseContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeServerOcspResponseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$867.CertFreeServerOcspResponseContext$MH,"CertFreeServerOcspResponseContext");
    }
    public static void CertFreeServerOcspResponseContext ( Addressable pServerOcspResponseContext) {
        var mh$ = CertFreeServerOcspResponseContext$MH();
        try {
            mh$.invokeExact(pServerOcspResponseContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertRetrieveLogoOrBiometricInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$867.CertRetrieveLogoOrBiometricInfo$MH,"CertRetrieveLogoOrBiometricInfo");
    }
    public static int CertRetrieveLogoOrBiometricInfo ( Addressable pCertContext,  Addressable lpszLogoOrBiometricType,  int dwRetrievalFlags,  int dwTimeout,  int dwFlags,  Addressable pvReserved,  Addressable ppbData,  Addressable pcbData,  Addressable ppwszMimeType) {
        var mh$ = CertRetrieveLogoOrBiometricInfo$MH();
        try {
            return (int)mh$.invokeExact(pCertContext, lpszLogoOrBiometricType, dwRetrievalFlags, dwTimeout, dwFlags, pvReserved, ppbData, pcbData, ppwszMimeType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCERT_SELECT_CHAIN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_SELECT_CHAIN_PARA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCERT_SELECT_CRITERIA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCERT_SELECT_CRITERIA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertSelectCertificateChains$MH() {
        return RuntimeHelper.requireNonNull(constants$867.CertSelectCertificateChains$MH,"CertSelectCertificateChains");
    }
    public static int CertSelectCertificateChains ( Addressable pSelectionContext,  int dwFlags,  Addressable pChainParameters,  int cCriteria,  Addressable rgpCriteria,  Addressable hStore,  Addressable pcSelection,  Addressable pprgpSelection) {
        var mh$ = CertSelectCertificateChains$MH();
        try {
            return (int)mh$.invokeExact(pSelectionContext, dwFlags, pChainParameters, cCriteria, rgpCriteria, hStore, pcSelection, pprgpSelection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CertFreeCertificateChainList$MH() {
        return RuntimeHelper.requireNonNull(constants$868.CertFreeCertificateChainList$MH,"CertFreeCertificateChainList");
    }
    public static void CertFreeCertificateChainList ( Addressable prgpSelection) {
        var mh$ = CertFreeCertificateChainList$MH();
        try {
            mh$.invokeExact(prgpSelection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_TIMESTAMP_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIMESTAMP_RESPONSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIMESTAMP_ACCURACY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIMESTAMP_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIMESTAMP_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRYPT_TIMESTAMP_PARA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptRetrieveTimeStamp$MH() {
        return RuntimeHelper.requireNonNull(constants$868.CryptRetrieveTimeStamp$MH,"CryptRetrieveTimeStamp");
    }
    public static int CryptRetrieveTimeStamp ( Addressable wszUrl,  int dwRetrievalFlags,  int dwTimeout,  Addressable pszHashId,  Addressable pPara,  Addressable pbData,  int cbData,  Addressable ppTsContext,  Addressable ppTsSigner,  Addressable phStore) {
        var mh$ = CryptRetrieveTimeStamp$MH();
        try {
            return (int)mh$.invokeExact(wszUrl, dwRetrievalFlags, dwTimeout, pszHashId, pPara, pbData, cbData, ppTsContext, ppTsSigner, phStore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptVerifyTimeStampSignature$MH() {
        return RuntimeHelper.requireNonNull(constants$868.CryptVerifyTimeStampSignature$MH,"CryptVerifyTimeStampSignature");
    }
    public static int CryptVerifyTimeStampSignature ( Addressable pbTSContentInfo,  int cbTSContentInfo,  Addressable pbData,  int cbData,  Addressable hAdditionalStore,  Addressable ppTsContext,  Addressable ppTsSigner,  Addressable phStore) {
        var mh$ = CryptVerifyTimeStampSignature$MH();
        try {
            return (int)mh$.invokeExact(pbTSContentInfo, cbTSContentInfo, pbData, cbData, hAdditionalStore, ppTsContext, ppTsSigner, phStore);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CertIsWeakHash$MH() {
        return RuntimeHelper.requireNonNull(constants$870.CertIsWeakHash$MH,"CertIsWeakHash");
    }
    public static int CertIsWeakHash ( int dwHashUseType,  Addressable pwszCNGHashAlgid,  int dwChainFlags,  Addressable pSignerChainContext,  Addressable pTimeStamp,  Addressable pwszFileName) {
        var mh$ = CertIsWeakHash$MH();
        try {
            return (int)mh$.invokeExact(dwHashUseType, pwszCNGHashAlgid, dwChainFlags, pSignerChainContext, pTimeStamp, pwszFileName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCRYPTPROTECT_PROMPTSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CryptProtectData$MH() {
        return RuntimeHelper.requireNonNull(constants$871.CryptProtectData$MH,"CryptProtectData");
    }
    public static int CryptProtectData ( Addressable pDataIn,  Addressable szDataDescr,  Addressable pOptionalEntropy,  Addressable pvReserved,  Addressable pPromptStruct,  int dwFlags,  Addressable pDataOut) {
        var mh$ = CryptProtectData$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, szDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pDataOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnprotectData$MH() {
        return RuntimeHelper.requireNonNull(constants$871.CryptUnprotectData$MH,"CryptUnprotectData");
    }
    public static int CryptUnprotectData ( Addressable pDataIn,  Addressable ppszDataDescr,  Addressable pOptionalEntropy,  Addressable pvReserved,  Addressable pPromptStruct,  int dwFlags,  Addressable pDataOut) {
        var mh$ = CryptUnprotectData$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, ppszDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pDataOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptProtectDataNoUI$MH() {
        return RuntimeHelper.requireNonNull(constants$871.CryptProtectDataNoUI$MH,"CryptProtectDataNoUI");
    }
    public static int CryptProtectDataNoUI ( Addressable pDataIn,  Addressable szDataDescr,  Addressable pOptionalEntropy,  Addressable pvReserved,  Addressable pPromptStruct,  int dwFlags,  Addressable pbOptionalPassword,  int cbOptionalPassword,  Addressable pDataOut) {
        var mh$ = CryptProtectDataNoUI$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, szDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pbOptionalPassword, cbOptionalPassword, pDataOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnprotectDataNoUI$MH() {
        return RuntimeHelper.requireNonNull(constants$871.CryptUnprotectDataNoUI$MH,"CryptUnprotectDataNoUI");
    }
    public static int CryptUnprotectDataNoUI ( Addressable pDataIn,  Addressable ppszDataDescr,  Addressable pOptionalEntropy,  Addressable pvReserved,  Addressable pPromptStruct,  int dwFlags,  Addressable pbOptionalPassword,  int cbOptionalPassword,  Addressable pDataOut) {
        var mh$ = CryptUnprotectDataNoUI$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, ppszDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pbOptionalPassword, cbOptionalPassword, pDataOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUpdateProtectedState$MH() {
        return RuntimeHelper.requireNonNull(constants$872.CryptUpdateProtectedState$MH,"CryptUpdateProtectedState");
    }
    public static int CryptUpdateProtectedState ( Addressable pOldSid,  Addressable pwszOldPassword,  int dwFlags,  Addressable pdwSuccessCount,  Addressable pdwFailureCount) {
        var mh$ = CryptUpdateProtectedState$MH();
        try {
            return (int)mh$.invokeExact(pOldSid, pwszOldPassword, dwFlags, pdwSuccessCount, pdwFailureCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptProtectMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$872.CryptProtectMemory$MH,"CryptProtectMemory");
    }
    public static int CryptProtectMemory ( Addressable pDataIn,  int cbDataIn,  int dwFlags) {
        var mh$ = CryptProtectMemory$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, cbDataIn, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CryptUnprotectMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$872.CryptUnprotectMemory$MH,"CryptUnprotectMemory");
    }
    public static int CryptUnprotectMemory ( Addressable pDataIn,  int cbDataIn,  int dwFlags) {
        var mh$ = CryptUnprotectMemory$MH();
        try {
            return (int)mh$.invokeExact(pDataIn, cbDataIn, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PEFS_CERTIFICATE_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_HASH_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_RPC_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_PIN_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_KEY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_COMPATIBILITY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_VERSION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_DECRYPTION_STATUS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEFS_ENCRYPTION_STATUS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_CERTIFICATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_CERTIFICATE_HASH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_CERTIFICATE_HASH_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_CERTIFICATE_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTED_FILE_METADATA_SIGNATURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_PROTECTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCRYPTION_PROTECTOR_LIST = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle QueryUsersOnEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$872.QueryUsersOnEncryptedFile$MH,"QueryUsersOnEncryptedFile");
    }
    public static int QueryUsersOnEncryptedFile ( Addressable lpFileName,  Addressable pUsers) {
        var mh$ = QueryUsersOnEncryptedFile$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pUsers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryRecoveryAgentsOnEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$872.QueryRecoveryAgentsOnEncryptedFile$MH,"QueryRecoveryAgentsOnEncryptedFile");
    }
    public static int QueryRecoveryAgentsOnEncryptedFile ( Addressable lpFileName,  Addressable pRecoveryAgents) {
        var mh$ = QueryRecoveryAgentsOnEncryptedFile$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pRecoveryAgents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RemoveUsersFromEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$872.RemoveUsersFromEncryptedFile$MH,"RemoveUsersFromEncryptedFile");
    }
    public static int RemoveUsersFromEncryptedFile ( Addressable lpFileName,  Addressable pHashes) {
        var mh$ = RemoveUsersFromEncryptedFile$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pHashes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddUsersToEncryptedFile$MH() {
        return RuntimeHelper.requireNonNull(constants$873.AddUsersToEncryptedFile$MH,"AddUsersToEncryptedFile");
    }
    public static int AddUsersToEncryptedFile ( Addressable lpFileName,  Addressable pEncryptionCertificates) {
        var mh$ = AddUsersToEncryptedFile$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pEncryptionCertificates);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserFileEncryptionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$873.SetUserFileEncryptionKey$MH,"SetUserFileEncryptionKey");
    }
    public static int SetUserFileEncryptionKey ( Addressable pEncryptionCertificate) {
        var mh$ = SetUserFileEncryptionKey$MH();
        try {
            return (int)mh$.invokeExact(pEncryptionCertificate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserFileEncryptionKeyEx$MH() {
        return RuntimeHelper.requireNonNull(constants$873.SetUserFileEncryptionKeyEx$MH,"SetUserFileEncryptionKeyEx");
    }
    public static int SetUserFileEncryptionKeyEx ( Addressable pEncryptionCertificate,  int dwCapabilities,  int dwFlags,  Addressable pvReserved) {
        var mh$ = SetUserFileEncryptionKeyEx$MH();
        try {
            return (int)mh$.invokeExact(pEncryptionCertificate, dwCapabilities, dwFlags, pvReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEncryptionCertificateHashList$MH() {
        return RuntimeHelper.requireNonNull(constants$873.FreeEncryptionCertificateHashList$MH,"FreeEncryptionCertificateHashList");
    }
    public static void FreeEncryptionCertificateHashList ( Addressable pUsers) {
        var mh$ = FreeEncryptionCertificateHashList$MH();
        try {
            mh$.invokeExact(pUsers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EncryptionDisable$MH() {
        return RuntimeHelper.requireNonNull(constants$873.EncryptionDisable$MH,"EncryptionDisable");
    }
    public static int EncryptionDisable ( Addressable DirPath,  int Disable) {
        var mh$ = EncryptionDisable$MH();
        try {
            return (int)mh$.invokeExact(DirPath, Disable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DuplicateEncryptionInfoFile$MH() {
        return RuntimeHelper.requireNonNull(constants$873.DuplicateEncryptionInfoFile$MH,"DuplicateEncryptionInfoFile");
    }
    public static int DuplicateEncryptionInfoFile ( Addressable SrcFileName,  Addressable DstFileName,  int dwCreationDistribution,  int dwAttributes,  Addressable lpSecurityAttributes) {
        var mh$ = DuplicateEncryptionInfoFile$MH();
        try {
            return (int)mh$.invokeExact(SrcFileName, DstFileName, dwCreationDistribution, dwAttributes, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetEncryptedFileMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$874.GetEncryptedFileMetadata$MH,"GetEncryptedFileMetadata");
    }
    public static int GetEncryptedFileMetadata ( Addressable lpFileName,  Addressable pcbMetadata,  Addressable ppbMetadata) {
        var mh$ = GetEncryptedFileMetadata$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pcbMetadata, ppbMetadata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEncryptedFileMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$874.SetEncryptedFileMetadata$MH,"SetEncryptedFileMetadata");
    }
    public static int SetEncryptedFileMetadata ( Addressable lpFileName,  Addressable pbOldMetadata,  Addressable pbNewMetadata,  Addressable pOwnerHash,  int dwOperation,  Addressable pCertificatesAdded) {
        var mh$ = SetEncryptedFileMetadata$MH();
        try {
            return (int)mh$.invokeExact(lpFileName, pbOldMetadata, pbNewMetadata, pOwnerHash, dwOperation, pCertificatesAdded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeEncryptedFileMetadata$MH() {
        return RuntimeHelper.requireNonNull(constants$874.FreeEncryptedFileMetadata$MH,"FreeEncryptedFileMetadata");
    }
    public static void FreeEncryptedFileMetadata ( Addressable pbMetadata) {
        var mh$ = FreeEncryptedFileMetadata$MH();
        try {
            mh$.invokeExact(pbMetadata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRPC_IMPORT_CONTEXT_P = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle I_RpcNsGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$874.I_RpcNsGetBuffer$MH,"I_RpcNsGetBuffer");
    }
    public static int I_RpcNsGetBuffer ( Addressable Message) {
        var mh$ = I_RpcNsGetBuffer$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$874.I_RpcNsSendReceive$MH,"I_RpcNsSendReceive");
    }
    public static int I_RpcNsSendReceive ( Addressable Message,  Addressable Handle) {
        var mh$ = I_RpcNsSendReceive$MH();
        try {
            return (int)mh$.invokeExact(Message, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcNsRaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$874.I_RpcNsRaiseException$MH,"I_RpcNsRaiseException");
    }
    public static void I_RpcNsRaiseException ( Addressable Message,  int Status) {
        var mh$ = I_RpcNsRaiseException$MH();
        try {
            mh$.invokeExact(Message, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcReBindBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$875.I_RpcReBindBuffer$MH,"I_RpcReBindBuffer");
    }
    public static int I_RpcReBindBuffer ( Addressable Message) {
        var mh$ = I_RpcReBindBuffer$MH();
        try {
            return (int)mh$.invokeExact(Message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsServerBindSearch$MH() {
        return RuntimeHelper.requireNonNull(constants$875.I_NsServerBindSearch$MH,"I_NsServerBindSearch");
    }
    public static int I_NsServerBindSearch () {
        var mh$ = I_NsServerBindSearch$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsClientBindSearch$MH() {
        return RuntimeHelper.requireNonNull(constants$875.I_NsClientBindSearch$MH,"I_NsClientBindSearch");
    }
    public static int I_NsClientBindSearch () {
        var mh$ = I_NsClientBindSearch$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_NsClientBindDone$MH() {
        return RuntimeHelper.requireNonNull(constants$875.I_NsClientBindDone$MH,"I_NsClientBindDone");
    }
    public static void I_NsClientBindDone () {
        var mh$ = I_NsClientBindDone$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MIDL_user_allocate$MH() {
        return RuntimeHelper.requireNonNull(constants$875.MIDL_user_allocate$MH,"MIDL_user_allocate");
    }
    public static MemoryAddress MIDL_user_allocate ( long size) {
        var mh$ = MIDL_user_allocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MIDL_user_free$MH() {
        return RuntimeHelper.requireNonNull(constants$875.MIDL_user_free$MH,"MIDL_user_free");
    }
    public static void MIDL_user_free ( Addressable x0) {
        var mh$ = MIDL_user_free$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcDefaultAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$876.I_RpcDefaultAllocate$MH,"I_RpcDefaultAllocate");
    }
    public static MemoryAddress I_RpcDefaultAllocate ( Addressable bh,  long size,  Addressable RealAlloc) {
        var mh$ = I_RpcDefaultAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(bh, size, RealAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle I_RpcDefaultFree$MH() {
        return RuntimeHelper.requireNonNull(constants$876.I_RpcDefaultFree$MH,"I_RpcDefaultFree");
    }
    public static void I_RpcDefaultFree ( Addressable bh,  Addressable x1,  Addressable RealFree) {
        var mh$ = I_RpcDefaultFree$MH();
        try {
            mh$.invokeExact(bh, x1, RealFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress NDR_CCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NDR_SCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCONTEXT_QUEUE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NDRCContextBinding$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NDRCContextBinding$MH,"NDRCContextBinding");
    }
    public static MemoryAddress NDRCContextBinding ( Addressable CContext) {
        var mh$ = NDRCContextBinding$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(CContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NDRCContextMarshall$MH,"NDRCContextMarshall");
    }
    public static void NDRCContextMarshall ( Addressable CContext,  Addressable pBuff) {
        var mh$ = NDRCContextMarshall$MH();
        try {
            mh$.invokeExact(CContext, pBuff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NDRCContextUnmarshall$MH,"NDRCContextUnmarshall");
    }
    public static void NDRCContextUnmarshall ( Addressable pCContext,  Addressable hBinding,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRCContextUnmarshall$MH();
        try {
            mh$.invokeExact(pCContext, hBinding, pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRCContextUnmarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NDRCContextUnmarshall2$MH,"NDRCContextUnmarshall2");
    }
    public static void NDRCContextUnmarshall2 ( Addressable pCContext,  Addressable hBinding,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRCContextUnmarshall2$MH();
        try {
            mh$.invokeExact(pCContext, hBinding, pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NDRSContextMarshall$MH,"NDRSContextMarshall");
    }
    public static void NDRSContextMarshall ( Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn) {
        var mh$ = NDRSContextMarshall$MH();
        try {
            mh$.invokeExact(CContext, pBuff, userRunDownIn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$878.NDRSContextUnmarshall$MH,"NDRSContextUnmarshall");
    }
    public static MemoryAddress NDRSContextUnmarshall ( Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRSContextUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshallEx$MH() {
        return RuntimeHelper.requireNonNull(constants$879.NDRSContextMarshallEx$MH,"NDRSContextMarshallEx");
    }
    public static void NDRSContextMarshallEx ( Addressable BindingHandle,  Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn) {
        var mh$ = NDRSContextMarshallEx$MH();
        try {
            mh$.invokeExact(BindingHandle, CContext, pBuff, userRunDownIn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextMarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$879.NDRSContextMarshall2$MH,"NDRSContextMarshall2");
    }
    public static void NDRSContextMarshall2 ( Addressable BindingHandle,  Addressable CContext,  Addressable pBuff,  Addressable userRunDownIn,  Addressable CtxGuard,  int Flags) {
        var mh$ = NDRSContextMarshall2$MH();
        try {
            mh$.invokeExact(BindingHandle, CContext, pBuff, userRunDownIn, CtxGuard, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshallEx$MH() {
        return RuntimeHelper.requireNonNull(constants$879.NDRSContextUnmarshallEx$MH,"NDRSContextUnmarshallEx");
    }
    public static MemoryAddress NDRSContextUnmarshallEx ( Addressable BindingHandle,  Addressable pBuff,  int DataRepresentation) {
        var mh$ = NDRSContextUnmarshallEx$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BindingHandle, pBuff, DataRepresentation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NDRSContextUnmarshall2$MH() {
        return RuntimeHelper.requireNonNull(constants$879.NDRSContextUnmarshall2$MH,"NDRSContextUnmarshall2");
    }
    public static MemoryAddress NDRSContextUnmarshall2 ( Addressable BindingHandle,  Addressable pBuff,  int DataRepresentation,  Addressable CtxGuard,  int Flags) {
        var mh$ = NDRSContextUnmarshall2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(BindingHandle, pBuff, DataRepresentation, CtxGuard, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsDestroyClientContext$MH() {
        return RuntimeHelper.requireNonNull(constants$879.RpcSsDestroyClientContext$MH,"RpcSsDestroyClientContext");
    }
    public static void RpcSsDestroyClientContext ( Addressable ContextHandle) {
        var mh$ = RpcSsDestroyClientContext$MH();
        try {
            mh$.invokeExact(ContextHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress RPC_BUFPTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_STRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PARRAY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNDR_ASYNC_MESSAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNDR_CORRELATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFORMAT_STRING$0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_SYNTAX_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_STUB_MESSAGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_STUB_MESSAGE$1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGENERIC_BINDING_ROUTINE_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGENERIC_BINDING_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXMIT_ROUTINE_QUINTUPLE = Constants$root.C_POINTER$LAYOUT;
    public static int USER_MARSHAL_CB_BUFFER_SIZE() {
        return (int)0L;
    }
    public static int USER_MARSHAL_CB_MARSHALL() {
        return (int)1L;
    }
    public static int USER_MARSHAL_CB_UNMARSHALL() {
        return (int)2L;
    }
    public static int USER_MARSHAL_CB_FREE() {
        return (int)3L;
    }
    public static int IDL_CS_NO_CONVERT() {
        return (int)0L;
    }
    public static int IDL_CS_IN_PLACE_CONVERT() {
        return (int)1L;
    }
    public static int IDL_CS_NEW_BUFFER_CONVERT() {
        return (int)2L;
    }
    public static MethodHandle RpcCsGetTags$MH() {
        return RuntimeHelper.requireNonNull(constants$884.RpcCsGetTags$MH,"RpcCsGetTags");
    }
    public static void RpcCsGetTags ( Addressable hBinding,  int fServerSide,  Addressable pulSendingTag,  Addressable pulDesiredReceivingTag,  Addressable pulReceivingTag,  Addressable pStatus) {
        var mh$ = RpcCsGetTags$MH();
        try {
            mh$.invokeExact(hBinding, fServerSide, pulSendingTag, pulDesiredReceivingTag, pulReceivingTag, pStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMIDL_STUB_DESC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_XMIT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_METHOD_PROPERTY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_METHOD_PROPERTY_MAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_SERVER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_STUBLESS_PROXY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_SYNTAX_INFO$2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PARAM_OFFSETTABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPARAM_OFFSETTABLE = Constants$root.C_POINTER$LAYOUT;
    public static int XLAT_SERVER() {
        return (int)1L;
    }
    public static int XLAT_CLIENT() {
        return (int)2L;
    }
    public static OfAddress PFULL_PTR_XLAT_TABLES = Constants$root.C_POINTER$LAYOUT;
    public static int SYSTEM_HANDLE_FILE() {
        return (int)0L;
    }
    public static int SYSTEM_HANDLE_SEMAPHORE() {
        return (int)1L;
    }
    public static int SYSTEM_HANDLE_EVENT() {
        return (int)2L;
    }
    public static int SYSTEM_HANDLE_MUTEX() {
        return (int)3L;
    }
    public static int SYSTEM_HANDLE_PROCESS() {
        return (int)4L;
    }
    public static int SYSTEM_HANDLE_TOKEN() {
        return (int)5L;
    }
    public static int SYSTEM_HANDLE_SECTION() {
        return (int)6L;
    }
    public static int SYSTEM_HANDLE_REG_KEY() {
        return (int)7L;
    }
    public static int SYSTEM_HANDLE_THREAD() {
        return (int)8L;
    }
    public static int SYSTEM_HANDLE_COMPOSITION_OBJECT() {
        return (int)9L;
    }
    public static int SYSTEM_HANDLE_SOCKET() {
        return (int)10L;
    }
    public static int SYSTEM_HANDLE_JOB() {
        return (int)11L;
    }
    public static int SYSTEM_HANDLE_PIPE() {
        return (int)12L;
    }
    public static int SYSTEM_HANDLE_MAX() {
        return (int)12L;
    }
    public static int SYSTEM_HANDLE_INVALID() {
        return (int)255L;
    }
    public static int MidlInterceptionInfoVersionOne() {
        return (int)1L;
    }
    public static int MidlWinrtTypeSerializationInfoVersionOne() {
        return (int)1L;
    }
    public static OfAddress PMIDL_INTERCEPTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMIDL_WINRT_TYPE_SERIALIZATION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NdrClientGetSupportedSyntaxes$MH() {
        return RuntimeHelper.requireNonNull(constants$885.NdrClientGetSupportedSyntaxes$MH,"NdrClientGetSupportedSyntaxes");
    }
    public static int NdrClientGetSupportedSyntaxes ( Addressable pInf,  Addressable pCount,  Addressable pArr) {
        var mh$ = NdrClientGetSupportedSyntaxes$MH();
        try {
            return (int)mh$.invokeExact(pInf, pCount, pArr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerGetSupportedSyntaxes$MH() {
        return RuntimeHelper.requireNonNull(constants$885.NdrServerGetSupportedSyntaxes$MH,"NdrServerGetSupportedSyntaxes");
    }
    public static int NdrServerGetSupportedSyntaxes ( Addressable pInf,  Addressable pCount,  Addressable pArr,  Addressable pPreferSyntaxIndex) {
        var mh$ = NdrServerGetSupportedSyntaxes$MH();
        try {
            return (int)mh$.invokeExact(pInf, pCount, pArr, pPreferSyntaxIndex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleTypeMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$885.NdrSimpleTypeMarshall$MH,"NdrSimpleTypeMarshall");
    }
    public static void NdrSimpleTypeMarshall ( Addressable pStubMsg,  Addressable pMemory,  byte FormatChar) {
        var mh$ = NdrSimpleTypeMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$885.NdrPointerMarshall$MH,"NdrPointerMarshall");
    }
    public static MemoryAddress NdrPointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrPointerMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$885.NdrCsArrayMarshall$MH,"NdrCsArrayMarshall");
    }
    public static MemoryAddress NdrCsArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$885.NdrCsTagMarshall$MH,"NdrCsTagMarshall");
    }
    public static MemoryAddress NdrCsTagMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsTagMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$886.NdrSimpleStructMarshall$MH,"NdrSimpleStructMarshall");
    }
    public static MemoryAddress NdrSimpleStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrSimpleStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$886.NdrConformantStructMarshall$MH,"NdrConformantStructMarshall");
    }
    public static MemoryAddress NdrConformantStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$886.NdrConformantVaryingStructMarshall$MH,"NdrConformantVaryingStructMarshall");
    }
    public static MemoryAddress NdrConformantVaryingStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$886.NdrComplexStructMarshall$MH,"NdrComplexStructMarshall");
    }
    public static MemoryAddress NdrComplexStructMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexStructMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$886.NdrFixedArrayMarshall$MH,"NdrFixedArrayMarshall");
    }
    public static MemoryAddress NdrFixedArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrFixedArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$886.NdrConformantArrayMarshall$MH,"NdrConformantArrayMarshall");
    }
    public static MemoryAddress NdrConformantArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$887.NdrConformantVaryingArrayMarshall$MH,"NdrConformantVaryingArrayMarshall");
    }
    public static MemoryAddress NdrConformantVaryingArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$887.NdrVaryingArrayMarshall$MH,"NdrVaryingArrayMarshall");
    }
    public static MemoryAddress NdrVaryingArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$887.NdrComplexArrayMarshall$MH,"NdrComplexArrayMarshall");
    }
    public static MemoryAddress NdrComplexArrayMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexArrayMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$887.NdrNonConformantStringMarshall$MH,"NdrNonConformantStringMarshall");
    }
    public static MemoryAddress NdrNonConformantStringMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonConformantStringMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$887.NdrConformantStringMarshall$MH,"NdrConformantStringMarshall");
    }
    public static MemoryAddress NdrConformantStringMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStringMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$887.NdrEncapsulatedUnionMarshall$MH,"NdrEncapsulatedUnionMarshall");
    }
    public static MemoryAddress NdrEncapsulatedUnionMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$888.NdrNonEncapsulatedUnionMarshall$MH,"NdrNonEncapsulatedUnionMarshall");
    }
    public static MemoryAddress NdrNonEncapsulatedUnionMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$888.NdrByteCountPointerMarshall$MH,"NdrByteCountPointerMarshall");
    }
    public static MemoryAddress NdrByteCountPointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrByteCountPointerMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$888.NdrXmitOrRepAsMarshall$MH,"NdrXmitOrRepAsMarshall");
    }
    public static MemoryAddress NdrXmitOrRepAsMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$888.NdrUserMarshalMarshall$MH,"NdrUserMarshalMarshall");
    }
    public static MemoryAddress NdrUserMarshalMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrUserMarshalMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$888.NdrInterfacePointerMarshall$MH,"NdrInterfacePointerMarshall");
    }
    public static MemoryAddress NdrInterfacePointerMarshall ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerMarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$888.NdrClientContextMarshall$MH,"NdrClientContextMarshall");
    }
    public static void NdrClientContextMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  int fCheck) {
        var mh$ = NdrClientContextMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ContextHandle, fCheck);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$889.NdrServerContextMarshall$MH,"NdrServerContextMarshall");
    }
    public static void NdrServerContextMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  Addressable RundownRoutine) {
        var mh$ = NdrServerContextMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ContextHandle, RundownRoutine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextNewMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$889.NdrServerContextNewMarshall$MH,"NdrServerContextNewMarshall");
    }
    public static void NdrServerContextNewMarshall ( Addressable pStubMsg,  Addressable ContextHandle,  Addressable RundownRoutine,  Addressable pFormat) {
        var mh$ = NdrServerContextNewMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ContextHandle, RundownRoutine, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleTypeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$889.NdrSimpleTypeUnmarshall$MH,"NdrSimpleTypeUnmarshall");
    }
    public static void NdrSimpleTypeUnmarshall ( Addressable pStubMsg,  Addressable pMemory,  byte FormatChar) {
        var mh$ = NdrSimpleTypeUnmarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$889.NdrCsArrayUnmarshall$MH,"NdrCsArrayUnmarshall");
    }
    public static MemoryAddress NdrCsArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrCsArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$889.NdrCsTagUnmarshall$MH,"NdrCsTagUnmarshall");
    }
    public static MemoryAddress NdrCsTagUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrCsTagUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRangeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$889.NdrRangeUnmarshall$MH,"NdrRangeUnmarshall");
    }
    public static MemoryAddress NdrRangeUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrRangeUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$890.NdrCorrelationInitialize$MH,"NdrCorrelationInitialize");
    }
    public static void NdrCorrelationInitialize ( Addressable pStubMsg,  Addressable pMemory,  int CacheSize,  int flags) {
        var mh$ = NdrCorrelationInitialize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, CacheSize, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationPass$MH() {
        return RuntimeHelper.requireNonNull(constants$890.NdrCorrelationPass$MH,"NdrCorrelationPass");
    }
    public static void NdrCorrelationPass ( Addressable pStubMsg) {
        var mh$ = NdrCorrelationPass$MH();
        try {
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCorrelationFree$MH() {
        return RuntimeHelper.requireNonNull(constants$890.NdrCorrelationFree$MH,"NdrCorrelationFree");
    }
    public static void NdrCorrelationFree ( Addressable pStubMsg) {
        var mh$ = NdrCorrelationFree$MH();
        try {
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$890.NdrPointerUnmarshall$MH,"NdrPointerUnmarshall");
    }
    public static MemoryAddress NdrPointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrPointerUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$890.NdrSimpleStructUnmarshall$MH,"NdrSimpleStructUnmarshall");
    }
    public static MemoryAddress NdrSimpleStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrSimpleStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$890.NdrConformantStructUnmarshall$MH,"NdrConformantStructUnmarshall");
    }
    public static MemoryAddress NdrConformantStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$891.NdrConformantVaryingStructUnmarshall$MH,"NdrConformantVaryingStructUnmarshall");
    }
    public static MemoryAddress NdrConformantVaryingStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantVaryingStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$891.NdrComplexStructUnmarshall$MH,"NdrComplexStructUnmarshall");
    }
    public static MemoryAddress NdrComplexStructUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrComplexStructUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$891.NdrFixedArrayUnmarshall$MH,"NdrFixedArrayUnmarshall");
    }
    public static MemoryAddress NdrFixedArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrFixedArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$891.NdrConformantArrayUnmarshall$MH,"NdrConformantArrayUnmarshall");
    }
    public static MemoryAddress NdrConformantArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$891.NdrConformantVaryingArrayUnmarshall$MH,"NdrConformantVaryingArrayUnmarshall");
    }
    public static MemoryAddress NdrConformantVaryingArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantVaryingArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$891.NdrVaryingArrayUnmarshall$MH,"NdrVaryingArrayUnmarshall");
    }
    public static MemoryAddress NdrVaryingArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrVaryingArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrComplexArrayUnmarshall$MH,"NdrComplexArrayUnmarshall");
    }
    public static MemoryAddress NdrComplexArrayUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrComplexArrayUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrNonConformantStringUnmarshall$MH,"NdrNonConformantStringUnmarshall");
    }
    public static MemoryAddress NdrNonConformantStringUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrNonConformantStringUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrConformantStringUnmarshall$MH,"NdrConformantStringUnmarshall");
    }
    public static MemoryAddress NdrConformantStringUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrConformantStringUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrEncapsulatedUnionUnmarshall$MH,"NdrEncapsulatedUnionUnmarshall");
    }
    public static MemoryAddress NdrEncapsulatedUnionUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrEncapsulatedUnionUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrNonEncapsulatedUnionUnmarshall$MH,"NdrNonEncapsulatedUnionUnmarshall");
    }
    public static MemoryAddress NdrNonEncapsulatedUnionUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrNonEncapsulatedUnionUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$892.NdrByteCountPointerUnmarshall$MH,"NdrByteCountPointerUnmarshall");
    }
    public static MemoryAddress NdrByteCountPointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrByteCountPointerUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrXmitOrRepAsUnmarshall$MH,"NdrXmitOrRepAsUnmarshall");
    }
    public static MemoryAddress NdrXmitOrRepAsUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrXmitOrRepAsUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrUserMarshalUnmarshall$MH,"NdrUserMarshalUnmarshall");
    }
    public static MemoryAddress NdrUserMarshalUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrUserMarshalUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrInterfacePointerUnmarshall$MH,"NdrInterfacePointerUnmarshall");
    }
    public static MemoryAddress NdrInterfacePointerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat,  byte fMustAlloc) {
        var mh$ = NdrInterfacePointerUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, ppMemory, pFormat, fMustAlloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrClientContextUnmarshall$MH,"NdrClientContextUnmarshall");
    }
    public static void NdrClientContextUnmarshall ( Addressable pStubMsg,  Addressable pContextHandle,  Addressable BindHandle) {
        var mh$ = NdrClientContextUnmarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pContextHandle, BindHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrServerContextUnmarshall$MH,"NdrServerContextUnmarshall");
    }
    public static MemoryAddress NdrServerContextUnmarshall ( Addressable pStubMsg) {
        var mh$ = NdrServerContextUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$893.NdrContextHandleInitialize$MH,"NdrContextHandleInitialize");
    }
    public static MemoryAddress NdrContextHandleInitialize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrContextHandleInitialize$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerContextNewUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$894.NdrServerContextNewUnmarshall$MH,"NdrServerContextNewUnmarshall");
    }
    public static MemoryAddress NdrServerContextNewUnmarshall ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrServerContextNewUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$894.NdrPointerBufferSize$MH,"NdrPointerBufferSize");
    }
    public static void NdrPointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrPointerBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$894.NdrCsArrayBufferSize$MH,"NdrCsArrayBufferSize");
    }
    public static void NdrCsArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$894.NdrCsTagBufferSize$MH,"NdrCsTagBufferSize");
    }
    public static void NdrCsTagBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsTagBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$894.NdrSimpleStructBufferSize$MH,"NdrSimpleStructBufferSize");
    }
    public static void NdrSimpleStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrSimpleStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$894.NdrConformantStructBufferSize$MH,"NdrConformantStructBufferSize");
    }
    public static void NdrConformantStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$895.NdrConformantVaryingStructBufferSize$MH,"NdrConformantVaryingStructBufferSize");
    }
    public static void NdrConformantVaryingStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$895.NdrComplexStructBufferSize$MH,"NdrComplexStructBufferSize");
    }
    public static void NdrComplexStructBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexStructBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$895.NdrFixedArrayBufferSize$MH,"NdrFixedArrayBufferSize");
    }
    public static void NdrFixedArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrFixedArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$895.NdrConformantArrayBufferSize$MH,"NdrConformantArrayBufferSize");
    }
    public static void NdrConformantArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$895.NdrConformantVaryingArrayBufferSize$MH,"NdrConformantVaryingArrayBufferSize");
    }
    public static void NdrConformantVaryingArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$895.NdrVaryingArrayBufferSize$MH,"NdrVaryingArrayBufferSize");
    }
    public static void NdrVaryingArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrComplexArrayBufferSize$MH,"NdrComplexArrayBufferSize");
    }
    public static void NdrComplexArrayBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexArrayBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrConformantStringBufferSize$MH,"NdrConformantStringBufferSize");
    }
    public static void NdrConformantStringBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStringBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrNonConformantStringBufferSize$MH,"NdrNonConformantStringBufferSize");
    }
    public static void NdrNonConformantStringBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonConformantStringBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrEncapsulatedUnionBufferSize$MH,"NdrEncapsulatedUnionBufferSize");
    }
    public static void NdrEncapsulatedUnionBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrNonEncapsulatedUnionBufferSize$MH,"NdrNonEncapsulatedUnionBufferSize");
    }
    public static void NdrNonEncapsulatedUnionBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$896.NdrByteCountPointerBufferSize$MH,"NdrByteCountPointerBufferSize");
    }
    public static void NdrByteCountPointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrByteCountPointerBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$897.NdrXmitOrRepAsBufferSize$MH,"NdrXmitOrRepAsBufferSize");
    }
    public static void NdrXmitOrRepAsBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$897.NdrUserMarshalBufferSize$MH,"NdrUserMarshalBufferSize");
    }
    public static void NdrUserMarshalBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrUserMarshalBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$897.NdrInterfacePointerBufferSize$MH,"NdrInterfacePointerBufferSize");
    }
    public static void NdrInterfacePointerBufferSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleSize$MH() {
        return RuntimeHelper.requireNonNull(constants$897.NdrContextHandleSize$MH,"NdrContextHandleSize");
    }
    public static void NdrContextHandleSize ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrContextHandleSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$897.NdrPointerMemorySize$MH,"NdrPointerMemorySize");
    }
    public static int NdrPointerMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrPointerMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrContextHandleMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$897.NdrContextHandleMemorySize$MH,"NdrContextHandleMemorySize");
    }
    public static int NdrContextHandleMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrContextHandleMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$898.NdrCsArrayMemorySize$MH,"NdrCsArrayMemorySize");
    }
    public static int NdrCsArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrCsArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsTagMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$898.NdrCsTagMemorySize$MH,"NdrCsTagMemorySize");
    }
    public static int NdrCsTagMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrCsTagMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$898.NdrSimpleStructMemorySize$MH,"NdrSimpleStructMemorySize");
    }
    public static int NdrSimpleStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrSimpleStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$898.NdrConformantStructMemorySize$MH,"NdrConformantStructMemorySize");
    }
    public static int NdrConformantStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$898.NdrConformantVaryingStructMemorySize$MH,"NdrConformantVaryingStructMemorySize");
    }
    public static int NdrConformantVaryingStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$898.NdrComplexStructMemorySize$MH,"NdrComplexStructMemorySize");
    }
    public static int NdrComplexStructMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrComplexStructMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$899.NdrFixedArrayMemorySize$MH,"NdrFixedArrayMemorySize");
    }
    public static int NdrFixedArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrFixedArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$899.NdrConformantArrayMemorySize$MH,"NdrConformantArrayMemorySize");
    }
    public static int NdrConformantArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$899.NdrConformantVaryingArrayMemorySize$MH,"NdrConformantVaryingArrayMemorySize");
    }
    public static int NdrConformantVaryingArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$899.NdrVaryingArrayMemorySize$MH,"NdrVaryingArrayMemorySize");
    }
    public static int NdrVaryingArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$899.NdrComplexArrayMemorySize$MH,"NdrComplexArrayMemorySize");
    }
    public static int NdrComplexArrayMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrComplexArrayMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStringMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$899.NdrConformantStringMemorySize$MH,"NdrConformantStringMemorySize");
    }
    public static int NdrConformantStringMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConformantStringMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonConformantStringMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$900.NdrNonConformantStringMemorySize$MH,"NdrNonConformantStringMemorySize");
    }
    public static int NdrNonConformantStringMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrNonConformantStringMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$900.NdrEncapsulatedUnionMemorySize$MH,"NdrEncapsulatedUnionMemorySize");
    }
    public static int NdrEncapsulatedUnionMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$900.NdrNonEncapsulatedUnionMemorySize$MH,"NdrNonEncapsulatedUnionMemorySize");
    }
    public static int NdrNonEncapsulatedUnionMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$900.NdrXmitOrRepAsMemorySize$MH,"NdrXmitOrRepAsMemorySize");
    }
    public static int NdrXmitOrRepAsMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$900.NdrUserMarshalMemorySize$MH,"NdrUserMarshalMemorySize");
    }
    public static int NdrUserMarshalMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrUserMarshalMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerMemorySize$MH() {
        return RuntimeHelper.requireNonNull(constants$900.NdrInterfacePointerMemorySize$MH,"NdrInterfacePointerMemorySize");
    }
    public static int NdrInterfacePointerMemorySize ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerMemorySize$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$901.NdrPointerFree$MH,"NdrPointerFree");
    }
    public static void NdrPointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrPointerFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCsArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$901.NdrCsArrayFree$MH,"NdrCsArrayFree");
    }
    public static void NdrCsArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrCsArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSimpleStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$901.NdrSimpleStructFree$MH,"NdrSimpleStructFree");
    }
    public static void NdrSimpleStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrSimpleStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$901.NdrConformantStructFree$MH,"NdrConformantStructFree");
    }
    public static void NdrConformantStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$901.NdrConformantVaryingStructFree$MH,"NdrConformantVaryingStructFree");
    }
    public static void NdrConformantVaryingStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexStructFree$MH() {
        return RuntimeHelper.requireNonNull(constants$901.NdrComplexStructFree$MH,"NdrComplexStructFree");
    }
    public static void NdrComplexStructFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexStructFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFixedArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$902.NdrFixedArrayFree$MH,"NdrFixedArrayFree");
    }
    public static void NdrFixedArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrFixedArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$902.NdrConformantArrayFree$MH,"NdrConformantArrayFree");
    }
    public static void NdrConformantArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConformantVaryingArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$902.NdrConformantVaryingArrayFree$MH,"NdrConformantVaryingArrayFree");
    }
    public static void NdrConformantVaryingArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrConformantVaryingArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrVaryingArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$902.NdrVaryingArrayFree$MH,"NdrVaryingArrayFree");
    }
    public static void NdrVaryingArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrVaryingArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrComplexArrayFree$MH() {
        return RuntimeHelper.requireNonNull(constants$902.NdrComplexArrayFree$MH,"NdrComplexArrayFree");
    }
    public static void NdrComplexArrayFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrComplexArrayFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrEncapsulatedUnionFree$MH() {
        return RuntimeHelper.requireNonNull(constants$902.NdrEncapsulatedUnionFree$MH,"NdrEncapsulatedUnionFree");
    }
    public static void NdrEncapsulatedUnionFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrEncapsulatedUnionFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNonEncapsulatedUnionFree$MH() {
        return RuntimeHelper.requireNonNull(constants$903.NdrNonEncapsulatedUnionFree$MH,"NdrNonEncapsulatedUnionFree");
    }
    public static void NdrNonEncapsulatedUnionFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrNonEncapsulatedUnionFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrByteCountPointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$903.NdrByteCountPointerFree$MH,"NdrByteCountPointerFree");
    }
    public static void NdrByteCountPointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrByteCountPointerFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrXmitOrRepAsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$903.NdrXmitOrRepAsFree$MH,"NdrXmitOrRepAsFree");
    }
    public static void NdrXmitOrRepAsFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrXmitOrRepAsFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalFree$MH() {
        return RuntimeHelper.requireNonNull(constants$903.NdrUserMarshalFree$MH,"NdrUserMarshalFree");
    }
    public static void NdrUserMarshalFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrUserMarshalFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrInterfacePointerFree$MH() {
        return RuntimeHelper.requireNonNull(constants$903.NdrInterfacePointerFree$MH,"NdrInterfacePointerFree");
    }
    public static void NdrInterfacePointerFree ( Addressable pStubMsg,  Addressable pMemory,  Addressable pFormat) {
        var mh$ = NdrInterfacePointerFree$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConvert2$MH() {
        return RuntimeHelper.requireNonNull(constants$903.NdrConvert2$MH,"NdrConvert2");
    }
    public static void NdrConvert2 ( Addressable pStubMsg,  Addressable pFormat,  int NumberParams) {
        var mh$ = NdrConvert2$MH();
        try {
            mh$.invokeExact(pStubMsg, pFormat, NumberParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$904.NdrConvert$MH,"NdrConvert");
    }
    public static void NdrConvert ( Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrConvert$MH();
        try {
            mh$.invokeExact(pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrUserMarshalSimpleTypeConvert$MH() {
        return RuntimeHelper.requireNonNull(constants$904.NdrUserMarshalSimpleTypeConvert$MH,"NdrUserMarshalSimpleTypeConvert");
    }
    public static MemoryAddress NdrUserMarshalSimpleTypeConvert ( Addressable pFlags,  Addressable pBuffer,  byte FormatChar) {
        var mh$ = NdrUserMarshalSimpleTypeConvert$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pFlags, pBuffer, FormatChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientInitializeNew$MH() {
        return RuntimeHelper.requireNonNull(constants$904.NdrClientInitializeNew$MH,"NdrClientInitializeNew");
    }
    public static void NdrClientInitializeNew ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int ProcNum) {
        var mh$ = NdrClientInitializeNew$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, ProcNum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeNew$MH() {
        return RuntimeHelper.requireNonNull(constants$904.NdrServerInitializeNew$MH,"NdrServerInitializeNew");
    }
    public static MemoryAddress NdrServerInitializeNew ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor) {
        var mh$ = NdrServerInitializeNew$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializePartial$MH() {
        return RuntimeHelper.requireNonNull(constants$904.NdrServerInitializePartial$MH,"NdrServerInitializePartial");
    }
    public static void NdrServerInitializePartial ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int RequestedBufferSize) {
        var mh$ = NdrServerInitializePartial$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, RequestedBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$904.NdrClientInitialize$MH,"NdrClientInitialize");
    }
    public static void NdrClientInitialize ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  int ProcNum) {
        var mh$ = NdrClientInitialize$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor, ProcNum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$905.NdrServerInitialize$MH,"NdrServerInitialize");
    }
    public static MemoryAddress NdrServerInitialize ( Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor) {
        var mh$ = NdrServerInitialize$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pRpcMsg, pStubMsg, pStubDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$905.NdrServerInitializeUnmarshall$MH,"NdrServerInitializeUnmarshall");
    }
    public static MemoryAddress NdrServerInitializeUnmarshall ( Addressable pStubMsg,  Addressable pStubDescriptor,  Addressable pRpcMsg) {
        var mh$ = NdrServerInitializeUnmarshall$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pStubDescriptor, pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerInitializeMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$905.NdrServerInitializeMarshall$MH,"NdrServerInitializeMarshall");
    }
    public static void NdrServerInitializeMarshall ( Addressable pRpcMsg,  Addressable pStubMsg) {
        var mh$ = NdrServerInitializeMarshall$MH();
        try {
            mh$.invokeExact(pRpcMsg, pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$905.NdrGetBuffer$MH,"NdrGetBuffer");
    }
    public static MemoryAddress NdrGetBuffer ( Addressable pStubMsg,  int BufferLength,  Addressable Handle) {
        var mh$ = NdrGetBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, BufferLength, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNsGetBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$905.NdrNsGetBuffer$MH,"NdrNsGetBuffer");
    }
    public static MemoryAddress NdrNsGetBuffer ( Addressable pStubMsg,  int BufferLength,  Addressable Handle) {
        var mh$ = NdrNsGetBuffer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, BufferLength, Handle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$905.NdrSendReceive$MH,"NdrSendReceive");
    }
    public static MemoryAddress NdrSendReceive ( Addressable pStubMsg,  Addressable pBufferEnd) {
        var mh$ = NdrSendReceive$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pBufferEnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrNsSendReceive$MH() {
        return RuntimeHelper.requireNonNull(constants$906.NdrNsSendReceive$MH,"NdrNsSendReceive");
    }
    public static MemoryAddress NdrNsSendReceive ( Addressable pStubMsg,  Addressable pBufferEnd,  Addressable pAutoHandle) {
        var mh$ = NdrNsSendReceive$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, pBufferEnd, pAutoHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFreeBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$906.NdrFreeBuffer$MH,"NdrFreeBuffer");
    }
    public static void NdrFreeBuffer ( Addressable pStubMsg) {
        var mh$ = NdrFreeBuffer$MH();
        try {
            mh$.invokeExact(pStubMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetDcomProtocolVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$906.NdrGetDcomProtocolVersion$MH,"NdrGetDcomProtocolVersion");
    }
    public static int NdrGetDcomProtocolVersion ( Addressable pStubMsg,  Addressable pVersion) {
        var mh$ = NdrGetDcomProtocolVersion$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pVersion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$906.NdrClientCall2$MH,"NdrClientCall2");
    }
    public static MemorySegment NdrClientCall2 ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrClientCall2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$906.NdrClientCall$MH,"NdrClientCall");
    }
    public static MemorySegment NdrClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$906.NdrAsyncClientCall$MH,"NdrAsyncClientCall");
    }
    public static MemorySegment NdrAsyncClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrAsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrDcomAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$907.NdrDcomAsyncClientCall$MH,"NdrDcomAsyncClientCall");
    }
    public static MemorySegment NdrDcomAsyncClientCall ( SegmentAllocator allocator,  Addressable pStubDescriptor,  Addressable pFormat, Object... x3) {
        var mh$ = NdrDcomAsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pStubDescriptor, pFormat, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int STUB_UNMARSHAL() {
        return (int)0L;
    }
    public static int STUB_CALL_SERVER() {
        return (int)1L;
    }
    public static int STUB_MARSHAL() {
        return (int)2L;
    }
    public static int STUB_CALL_SERVER_NO_HRESULT() {
        return (int)3L;
    }
    public static int PROXY_CALCSIZE() {
        return (int)0L;
    }
    public static int PROXY_GETBUFFER() {
        return (int)1L;
    }
    public static int PROXY_MARSHAL() {
        return (int)2L;
    }
    public static int PROXY_SENDRECEIVE() {
        return (int)3L;
    }
    public static int PROXY_UNMARSHAL() {
        return (int)4L;
    }
    public static MethodHandle NdrAsyncServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$907.NdrAsyncServerCall$MH,"NdrAsyncServerCall");
    }
    public static void NdrAsyncServerCall ( Addressable pRpcMsg) {
        var mh$ = NdrAsyncServerCall$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$907.NdrAsyncStubCall$MH,"NdrAsyncStubCall");
    }
    public static int NdrAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrAsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrDcomAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$907.NdrDcomAsyncStubCall$MH,"NdrDcomAsyncStubCall");
    }
    public static int NdrDcomAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrDcomAsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$907.NdrStubCall2$MH,"NdrStubCall2");
    }
    public static int NdrStubCall2 ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrStubCall2$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall2$MH() {
        return RuntimeHelper.requireNonNull(constants$907.NdrServerCall2$MH,"NdrServerCall2");
    }
    public static void NdrServerCall2 ( Addressable pRpcMsg) {
        var mh$ = NdrServerCall2$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$908.NdrStubCall$MH,"NdrStubCall");
    }
    public static int NdrStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$908.NdrServerCall$MH,"NdrServerCall");
    }
    public static void NdrServerCall ( Addressable pRpcMsg) {
        var mh$ = NdrServerCall$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$908.NdrServerUnmarshall$MH,"NdrServerUnmarshall");
    }
    public static int NdrServerUnmarshall ( Addressable pChannel,  Addressable pRpcMsg,  Addressable pStubMsg,  Addressable pStubDescriptor,  Addressable pFormat,  Addressable pParamList) {
        var mh$ = NdrServerUnmarshall$MH();
        try {
            return (int)mh$.invokeExact(pChannel, pRpcMsg, pStubMsg, pStubDescriptor, pFormat, pParamList);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$908.NdrServerMarshall$MH,"NdrServerMarshall");
    }
    public static void NdrServerMarshall ( Addressable pThis,  Addressable pChannel,  Addressable pStubMsg,  Addressable pFormat) {
        var mh$ = NdrServerMarshall$MH();
        try {
            mh$.invokeExact(pThis, pChannel, pStubMsg, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrMapCommAndFaultStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$908.NdrMapCommAndFaultStatus$MH,"NdrMapCommAndFaultStatus");
    }
    public static int NdrMapCommAndFaultStatus ( Addressable pStubMsg,  Addressable pCommStatus,  Addressable pFaultStatus,  int Status) {
        var mh$ = NdrMapCommAndFaultStatus$MH();
        try {
            return (int)mh$.invokeExact(pStubMsg, pCommStatus, pFaultStatus, Status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress RPC_SS_THREAD_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RpcSsAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$909.RpcSsAllocate$MH,"RpcSsAllocate");
    }
    public static MemoryAddress RpcSsAllocate ( long Size) {
        var mh$ = RpcSsAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$909.RpcSsDisableAllocate$MH,"RpcSsDisableAllocate");
    }
    public static void RpcSsDisableAllocate () {
        var mh$ = RpcSsDisableAllocate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$909.RpcSsEnableAllocate$MH,"RpcSsEnableAllocate");
    }
    public static void RpcSsEnableAllocate () {
        var mh$ = RpcSsEnableAllocate$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsFree$MH() {
        return RuntimeHelper.requireNonNull(constants$910.RpcSsFree$MH,"RpcSsFree");
    }
    public static void RpcSsFree ( Addressable NodeToFree) {
        var mh$ = RpcSsFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsGetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$910.RpcSsGetThreadHandle$MH,"RpcSsGetThreadHandle");
    }
    public static MemoryAddress RpcSsGetThreadHandle () {
        var mh$ = RpcSsGetThreadHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSetClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$911.RpcSsSetClientAllocFree$MH,"RpcSsSetClientAllocFree");
    }
    public static void RpcSsSetClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree) {
        var mh$ = RpcSsSetClientAllocFree$MH();
        try {
            mh$.invokeExact(ClientAlloc, ClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$911.RpcSsSetThreadHandle$MH,"RpcSsSetThreadHandle");
    }
    public static void RpcSsSetThreadHandle ( Addressable Id) {
        var mh$ = RpcSsSetThreadHandle$MH();
        try {
            mh$.invokeExact(Id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSsSwapClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$912.RpcSsSwapClientAllocFree$MH,"RpcSsSwapClientAllocFree");
    }
    public static void RpcSsSwapClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree,  Addressable OldClientAlloc,  Addressable OldClientFree) {
        var mh$ = RpcSsSwapClientAllocFree$MH();
        try {
            mh$.invokeExact(ClientAlloc, ClientFree, OldClientAlloc, OldClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$912.RpcSmAllocate$MH,"RpcSmAllocate");
    }
    public static MemoryAddress RpcSmAllocate ( long Size,  Addressable pStatus) {
        var mh$ = RpcSmAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size, pStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmClientFree$MH() {
        return RuntimeHelper.requireNonNull(constants$913.RpcSmClientFree$MH,"RpcSmClientFree");
    }
    public static int RpcSmClientFree ( Addressable pNodeToFree) {
        var mh$ = RpcSmClientFree$MH();
        try {
            return (int)mh$.invokeExact(pNodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmDestroyClientContext$MH() {
        return RuntimeHelper.requireNonNull(constants$913.RpcSmDestroyClientContext$MH,"RpcSmDestroyClientContext");
    }
    public static int RpcSmDestroyClientContext ( Addressable ContextHandle) {
        var mh$ = RpcSmDestroyClientContext$MH();
        try {
            return (int)mh$.invokeExact(ContextHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$913.RpcSmDisableAllocate$MH,"RpcSmDisableAllocate");
    }
    public static int RpcSmDisableAllocate () {
        var mh$ = RpcSmDisableAllocate$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$913.RpcSmEnableAllocate$MH,"RpcSmEnableAllocate");
    }
    public static int RpcSmEnableAllocate () {
        var mh$ = RpcSmEnableAllocate$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmFree$MH() {
        return RuntimeHelper.requireNonNull(constants$913.RpcSmFree$MH,"RpcSmFree");
    }
    public static int RpcSmFree ( Addressable NodeToFree) {
        var mh$ = RpcSmFree$MH();
        try {
            return (int)mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmGetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$913.RpcSmGetThreadHandle$MH,"RpcSmGetThreadHandle");
    }
    public static MemoryAddress RpcSmGetThreadHandle ( Addressable pStatus) {
        var mh$ = RpcSmGetThreadHandle$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSetClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$914.RpcSmSetClientAllocFree$MH,"RpcSmSetClientAllocFree");
    }
    public static int RpcSmSetClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree) {
        var mh$ = RpcSmSetClientAllocFree$MH();
        try {
            return (int)mh$.invokeExact(ClientAlloc, ClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSetThreadHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$914.RpcSmSetThreadHandle$MH,"RpcSmSetThreadHandle");
    }
    public static int RpcSmSetThreadHandle ( Addressable Id) {
        var mh$ = RpcSmSetThreadHandle$MH();
        try {
            return (int)mh$.invokeExact(Id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcSmSwapClientAllocFree$MH() {
        return RuntimeHelper.requireNonNull(constants$916.RpcSmSwapClientAllocFree$MH,"RpcSmSwapClientAllocFree");
    }
    public static int RpcSmSwapClientAllocFree ( Addressable ClientAlloc,  Addressable ClientFree,  Addressable OldClientAlloc,  Addressable OldClientFree) {
        var mh$ = RpcSmSwapClientAllocFree$MH();
        try {
            return (int)mh$.invokeExact(ClientAlloc, ClientFree, OldClientAlloc, OldClientFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsEnableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$916.NdrRpcSsEnableAllocate$MH,"NdrRpcSsEnableAllocate");
    }
    public static void NdrRpcSsEnableAllocate ( Addressable pMessage) {
        var mh$ = NdrRpcSsEnableAllocate$MH();
        try {
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDisableAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$916.NdrRpcSsDisableAllocate$MH,"NdrRpcSsDisableAllocate");
    }
    public static void NdrRpcSsDisableAllocate ( Addressable pMessage) {
        var mh$ = NdrRpcSsDisableAllocate$MH();
        try {
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmSetClientToOsf$MH() {
        return RuntimeHelper.requireNonNull(constants$916.NdrRpcSmSetClientToOsf$MH,"NdrRpcSmSetClientToOsf");
    }
    public static void NdrRpcSmSetClientToOsf ( Addressable pMessage) {
        var mh$ = NdrRpcSmSetClientToOsf$MH();
        try {
            mh$.invokeExact(pMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmClientAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$917.NdrRpcSmClientAllocate$MH,"NdrRpcSmClientAllocate");
    }
    public static MemoryAddress NdrRpcSmClientAllocate ( long Size) {
        var mh$ = NdrRpcSmClientAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSmClientFree$MH() {
        return RuntimeHelper.requireNonNull(constants$917.NdrRpcSmClientFree$MH,"NdrRpcSmClientFree");
    }
    public static void NdrRpcSmClientFree ( Addressable NodeToFree) {
        var mh$ = NdrRpcSmClientFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDefaultAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$917.NdrRpcSsDefaultAllocate$MH,"NdrRpcSsDefaultAllocate");
    }
    public static MemoryAddress NdrRpcSsDefaultAllocate ( long Size) {
        var mh$ = NdrRpcSsDefaultAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrRpcSsDefaultFree$MH() {
        return RuntimeHelper.requireNonNull(constants$917.NdrRpcSsDefaultFree$MH,"NdrRpcSsDefaultFree");
    }
    public static void NdrRpcSsDefaultFree ( Addressable NodeToFree) {
        var mh$ = NdrRpcSsDefaultFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerXlatInit$MH() {
        return RuntimeHelper.requireNonNull(constants$917.NdrFullPointerXlatInit$MH,"NdrFullPointerXlatInit");
    }
    public static MemoryAddress NdrFullPointerXlatInit ( int NumberOfPointers,  int XlatSide) {
        var mh$ = NdrFullPointerXlatInit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(NumberOfPointers, XlatSide);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrFullPointerXlatFree$MH() {
        return RuntimeHelper.requireNonNull(constants$917.NdrFullPointerXlatFree$MH,"NdrFullPointerXlatFree");
    }
    public static void NdrFullPointerXlatFree ( Addressable pXlatTables) {
        var mh$ = NdrFullPointerXlatFree$MH();
        try {
            mh$.invokeExact(pXlatTables);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$918.NdrAllocate$MH,"NdrAllocate");
    }
    public static MemoryAddress NdrAllocate ( Addressable pStubMsg,  long Len) {
        var mh$ = NdrAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pStubMsg, Len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClearOutParameters$MH() {
        return RuntimeHelper.requireNonNull(constants$918.NdrClearOutParameters$MH,"NdrClearOutParameters");
    }
    public static void NdrClearOutParameters ( Addressable pStubMsg,  Addressable pFormat,  Addressable ArgAddr) {
        var mh$ = NdrClearOutParameters$MH();
        try {
            mh$.invokeExact(pStubMsg, pFormat, ArgAddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrOleAllocate$MH() {
        return RuntimeHelper.requireNonNull(constants$918.NdrOleAllocate$MH,"NdrOleAllocate");
    }
    public static MemoryAddress NdrOleAllocate ( long Size) {
        var mh$ = NdrOleAllocate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrOleFree$MH() {
        return RuntimeHelper.requireNonNull(constants$918.NdrOleFree$MH,"NdrOleFree");
    }
    public static void NdrOleFree ( Addressable NodeToFree) {
        var mh$ = NdrOleFree$MH();
        try {
            mh$.invokeExact(NodeToFree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrGetUserMarshalInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$918.NdrGetUserMarshalInfo$MH,"NdrGetUserMarshalInfo");
    }
    public static int NdrGetUserMarshalInfo ( Addressable pFlags,  int InformationLevel,  Addressable pMarshalInfo) {
        var mh$ = NdrGetUserMarshalInfo$MH();
        try {
            return (int)mh$.invokeExact(pFlags, InformationLevel, pMarshalInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrCreateServerInterfaceFromStub$MH() {
        return RuntimeHelper.requireNonNull(constants$918.NdrCreateServerInterfaceFromStub$MH,"NdrCreateServerInterfaceFromStub");
    }
    public static int NdrCreateServerInterfaceFromStub ( Addressable pStub,  Addressable pServerIf) {
        var mh$ = NdrCreateServerInterfaceFromStub$MH();
        try {
            return (int)mh$.invokeExact(pStub, pServerIf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrClientCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$919.NdrClientCall3$MH,"NdrClientCall3");
    }
    public static MemorySegment NdrClientCall3 ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = NdrClientCall3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$919.Ndr64AsyncClientCall$MH,"Ndr64AsyncClientCall");
    }
    public static MemorySegment Ndr64AsyncClientCall ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = Ndr64AsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64DcomAsyncClientCall$MH() {
        return RuntimeHelper.requireNonNull(constants$919.Ndr64DcomAsyncClientCall$MH,"Ndr64DcomAsyncClientCall");
    }
    public static MemorySegment Ndr64DcomAsyncClientCall ( SegmentAllocator allocator,  Addressable pProxyInfo,  int nProcNum,  Addressable pReturnValue, Object... x4) {
        var mh$ = Ndr64DcomAsyncClientCall$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, pProxyInfo, nProcNum, pReturnValue, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCall$MH() {
        return RuntimeHelper.requireNonNull(constants$919.Ndr64AsyncServerCall$MH,"Ndr64AsyncServerCall");
    }
    public static void Ndr64AsyncServerCall ( Addressable pRpcMsg) {
        var mh$ = Ndr64AsyncServerCall$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCall64$MH() {
        return RuntimeHelper.requireNonNull(constants$919.Ndr64AsyncServerCall64$MH,"Ndr64AsyncServerCall64");
    }
    public static void Ndr64AsyncServerCall64 ( Addressable pRpcMsg) {
        var mh$ = Ndr64AsyncServerCall64$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncServerCallAll$MH() {
        return RuntimeHelper.requireNonNull(constants$919.Ndr64AsyncServerCallAll$MH,"Ndr64AsyncServerCallAll");
    }
    public static void Ndr64AsyncServerCallAll ( Addressable pRpcMsg) {
        var mh$ = Ndr64AsyncServerCallAll$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64AsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$920.Ndr64AsyncStubCall$MH,"Ndr64AsyncStubCall");
    }
    public static int Ndr64AsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = Ndr64AsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ndr64DcomAsyncStubCall$MH() {
        return RuntimeHelper.requireNonNull(constants$920.Ndr64DcomAsyncStubCall$MH,"Ndr64DcomAsyncStubCall");
    }
    public static int Ndr64DcomAsyncStubCall ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = Ndr64DcomAsyncStubCall$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrStubCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$920.NdrStubCall3$MH,"NdrStubCall3");
    }
    public static int NdrStubCall3 ( Addressable pThis,  Addressable pChannel,  Addressable pRpcMsg,  Addressable pdwStubPhase) {
        var mh$ = NdrStubCall3$MH();
        try {
            return (int)mh$.invokeExact(pThis, pChannel, pRpcMsg, pdwStubPhase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCallAll$MH() {
        return RuntimeHelper.requireNonNull(constants$920.NdrServerCallAll$MH,"NdrServerCallAll");
    }
    public static void NdrServerCallAll ( Addressable pRpcMsg) {
        var mh$ = NdrServerCallAll$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCallNdr64$MH() {
        return RuntimeHelper.requireNonNull(constants$920.NdrServerCallNdr64$MH,"NdrServerCallNdr64");
    }
    public static void NdrServerCallNdr64 ( Addressable pRpcMsg) {
        var mh$ = NdrServerCallNdr64$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrServerCall3$MH() {
        return RuntimeHelper.requireNonNull(constants$920.NdrServerCall3$MH,"NdrServerCall3");
    }
    public static void NdrServerCall3 ( Addressable pRpcMsg) {
        var mh$ = NdrServerCall3$MH();
        try {
            mh$.invokeExact(pRpcMsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreClientMarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$921.NdrPartialIgnoreClientMarshall$MH,"NdrPartialIgnoreClientMarshall");
    }
    public static void NdrPartialIgnoreClientMarshall ( Addressable pStubMsg,  Addressable pMemory) {
        var mh$ = NdrPartialIgnoreClientMarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreServerUnmarshall$MH() {
        return RuntimeHelper.requireNonNull(constants$921.NdrPartialIgnoreServerUnmarshall$MH,"NdrPartialIgnoreServerUnmarshall");
    }
    public static void NdrPartialIgnoreServerUnmarshall ( Addressable pStubMsg,  Addressable ppMemory) {
        var mh$ = NdrPartialIgnoreServerUnmarshall$MH();
        try {
            mh$.invokeExact(pStubMsg, ppMemory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreClientBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$921.NdrPartialIgnoreClientBufferSize$MH,"NdrPartialIgnoreClientBufferSize");
    }
    public static void NdrPartialIgnoreClientBufferSize ( Addressable pStubMsg,  Addressable pMemory) {
        var mh$ = NdrPartialIgnoreClientBufferSize$MH();
        try {
            mh$.invokeExact(pStubMsg, pMemory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NdrPartialIgnoreServerInitialize$MH() {
        return RuntimeHelper.requireNonNull(constants$921.NdrPartialIgnoreServerInitialize$MH,"NdrPartialIgnoreServerInitialize");
    }
    public static void NdrPartialIgnoreServerInitialize ( Addressable pStubMsg,  Addressable ppMemory,  Addressable pFormat) {
        var mh$ = NdrPartialIgnoreServerInitialize$MH();
        try {
            mh$.invokeExact(pStubMsg, ppMemory, pFormat);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RpcUserFree$MH() {
        return RuntimeHelper.requireNonNull(constants$921.RpcUserFree$MH,"RpcUserFree");
    }
    public static void RpcUserFree ( Addressable AsyncHandle,  Addressable pBuffer) {
        var mh$ = RpcUserFree$MH();
        try {
            mh$.invokeExact(AsyncHandle, pBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT() {
        return constants$921.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH() {
        return constants$921.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$921.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$921.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$921.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$set( MemoryAddress x) {
        constants$921.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$921.__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec"), x);
    }
    public static MemoryLayout __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT() {
        return constants$922.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$LAYOUT;
    }
    public static VarHandle __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH() {
        return constants$922.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH;
    }
    public static MemorySegment __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT,"__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec");
    }
    public static MemoryAddress __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$get() {
        return (java.lang.foreign.MemoryAddress) constants$922.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH.get(RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec"));
    }
    public static void __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$set( MemoryAddress x) {
        constants$922.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$VH.set(RuntimeHelper.requireNonNull(constants$922.__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec$SEGMENT, "__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec"), x);
    }
    public static OfAddress LPOLESTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOLESTR = Constants$root.C_POINTER$LAYOUT;
    public static OfShort SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfDouble DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfInt SCODE = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PSCODE = Constants$root.C_POINTER$LAYOUT;
    public static int MEMCTX_TASK() {
        return (int)1L;
    }
    public static int MEMCTX_SHARED() {
        return (int)2L;
    }
    public static int MEMCTX_MACSYSTEM() {
        return (int)3L;
    }
    public static int MEMCTX_UNKNOWN() {
        return (int)-1L;
    }
    public static int MEMCTX_SAME() {
        return (int)-2L;
    }
    public static int CLSCTX_INPROC_SERVER() {
        return (int)1L;
    }
    public static int CLSCTX_INPROC_HANDLER() {
        return (int)2L;
    }
    public static int CLSCTX_LOCAL_SERVER() {
        return (int)4L;
    }
    public static int CLSCTX_INPROC_SERVER16() {
        return (int)8L;
    }
    public static int CLSCTX_REMOTE_SERVER() {
        return (int)16L;
    }
    public static int CLSCTX_INPROC_HANDLER16() {
        return (int)32L;
    }
    public static int CLSCTX_RESERVED1() {
        return (int)64L;
    }
    public static int CLSCTX_RESERVED2() {
        return (int)128L;
    }
    public static int CLSCTX_RESERVED3() {
        return (int)256L;
    }
    public static int CLSCTX_RESERVED4() {
        return (int)512L;
    }
    public static int CLSCTX_NO_CODE_DOWNLOAD() {
        return (int)1024L;
    }
    public static int CLSCTX_RESERVED5() {
        return (int)2048L;
    }
    public static int CLSCTX_NO_CUSTOM_MARSHAL() {
        return (int)4096L;
    }
    public static int CLSCTX_ENABLE_CODE_DOWNLOAD() {
        return (int)8192L;
    }
    public static int CLSCTX_NO_FAILURE_LOG() {
        return (int)16384L;
    }
    public static int CLSCTX_DISABLE_AAA() {
        return (int)32768L;
    }
    public static int CLSCTX_ENABLE_AAA() {
        return (int)65536L;
    }
    public static int CLSCTX_FROM_DEFAULT_CONTEXT() {
        return (int)131072L;
    }
    public static int CLSCTX_ACTIVATE_X86_SERVER() {
        return (int)262144L;
    }
    public static int CLSCTX_ACTIVATE_32_BIT_SERVER() {
        return (int)262144L;
    }
    public static int CLSCTX_ACTIVATE_64_BIT_SERVER() {
        return (int)524288L;
    }
    public static int CLSCTX_ENABLE_CLOAKING() {
        return (int)1048576L;
    }
    public static int CLSCTX_APPCONTAINER() {
        return (int)4194304L;
    }
    public static int CLSCTX_ACTIVATE_AAA_AS_IU() {
        return (int)8388608L;
    }
    public static int CLSCTX_RESERVED6() {
        return (int)16777216L;
    }
    public static int CLSCTX_ACTIVATE_ARM32_SERVER() {
        return (int)33554432L;
    }
    public static int CLSCTX_PS_DLL() {
        return (int)-2147483648L;
    }
    public static int MSHLFLAGS_NORMAL() {
        return (int)0L;
    }
    public static int MSHLFLAGS_TABLESTRONG() {
        return (int)1L;
    }
    public static int MSHLFLAGS_TABLEWEAK() {
        return (int)2L;
    }
    public static int MSHLFLAGS_NOPING() {
        return (int)4L;
    }
    public static int MSHLFLAGS_RESERVED1() {
        return (int)8L;
    }
    public static int MSHLFLAGS_RESERVED2() {
        return (int)16L;
    }
    public static int MSHLFLAGS_RESERVED3() {
        return (int)32L;
    }
}


