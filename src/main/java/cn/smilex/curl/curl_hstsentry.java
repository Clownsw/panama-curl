// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class curl_hstsentry {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("namelen"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(1).withName("includeSubDomains"),
            MemoryLayout.paddingLayout(31)
        ),
        MemoryLayout.sequenceLayout(18, Constants$root.C_CHAR$LAYOUT).withName("expire"),
        MemoryLayout.paddingLayout(16)
    ).withName("curl_hstsentry");
    public static MemoryLayout $LAYOUT() {
        return curl_hstsentry.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return curl_hstsentry.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_hstsentry.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        curl_hstsentry.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_hstsentry.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_hstsentry.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle namelen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("namelen"));
    public static VarHandle namelen$VH() {
        return curl_hstsentry.namelen$VH;
    }
    public static long namelen$get(MemorySegment seg) {
        return (long)curl_hstsentry.namelen$VH.get(seg);
    }
    public static void namelen$set( MemorySegment seg, long x) {
        curl_hstsentry.namelen$VH.set(seg, x);
    }
    public static long namelen$get(MemorySegment seg, long index) {
        return (long)curl_hstsentry.namelen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void namelen$set(MemorySegment seg, long index, long x) {
        curl_hstsentry.namelen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment expire$slice(MemorySegment seg) {
        return seg.asSlice(20, 18);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


