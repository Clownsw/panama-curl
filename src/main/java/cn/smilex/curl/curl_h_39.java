// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class curl_h_39 extends curl_h_38 {

    public static MemorySegment CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME() {
        return constants$1646.CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME() {
        return constants$1646.CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_OCSP_VALIDITY_SECONDS_DEFAULT() {
        return (int)43200L;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME() {
        return constants$1646.CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME() {
        return constants$1647.CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME() {
        return constants$1647.CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME() {
        return constants$1647.CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE() {
        return (int)4294967295L;
    }
    public static MemorySegment CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME() {
        return constants$1647.CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME() {
        return constants$1647.CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME() {
        return constants$1647.CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE() {
        return (int)4294967295L;
    }
    public static MemorySegment CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME() {
        return constants$1648.CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME$SEGMENT;
    }
    public static long CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_DEFAULT() {
        return 129067776000000000L;
    }
    public static MemorySegment CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME() {
        return constants$1648.CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_DEFAULT_CONFIG_SUBDIR() {
        return constants$1648.CERT_CHAIN_DEFAULT_CONFIG_SUBDIR$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_PREFIX_NAME() {
        return constants$1648.CERT_CHAIN_WEAK_PREFIX_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME() {
        return constants$1648.CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_ALL_CONFIG_NAME() {
        return constants$1648.CERT_CHAIN_WEAK_ALL_CONFIG_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_FLAGS_NAME() {
        return constants$1649.CERT_CHAIN_WEAK_FLAGS_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_HYGIENE_NAME() {
        return constants$1649.CERT_CHAIN_WEAK_HYGIENE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_AFTER_TIME_NAME() {
        return constants$1649.CERT_CHAIN_WEAK_AFTER_TIME_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME() {
        return constants$1649.CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME() {
        return constants$1649.CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME() {
        return constants$1649.CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_WEAK_SHA256_ALLOW_NAME() {
        return constants$1650.CERT_CHAIN_WEAK_SHA256_ALLOW_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE() {
        return (int)4294967295L;
    }
    public static int CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG() {
        return (int)2147483648L;
    }
    public static int CERT_CHAIN_DISABLE_WEAK_FLAGS() {
        return (int)215285760L;
    }
    public static int CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAGS() {
        return (int)12288L;
    }
    public static int CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAGS() {
        return (int)49152L;
    }
    public static int CERT_CHAIN_ENABLE_HYGIENE_FLAGS() {
        return (int)857866240L;
    }
    public static int CERT_CHAIN_MOTW_WEAK_FLAGS() {
        return (int)1786773504L;
    }
    public static int CERT_CHAIN_OPT_IN_WEAK_FLAGS() {
        return (int)262144L;
    }
    public static MemorySegment CERT_CHAIN_AUTO_FLAGS_VALUE_NAME() {
        return constants$1650.CERT_CHAIN_AUTO_FLAGS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_AUTO_LOG_FLAGS() {
        return (int)14L;
    }
    public static MemorySegment CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME() {
        return constants$1650.CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME() {
        return constants$1650.CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_DEFAULT() {
        return (int)1800L;
    }
    public static MemorySegment CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME() {
        return constants$1650.CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME() {
        return constants$1650.CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME() {
        return constants$1651.CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_DEFAULT() {
        return (int)600L;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME() {
        return constants$1651.CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT() {
        return (int)15000L;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$1651.CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)14400L;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$1651.CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)120L;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$1651.CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)60L;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME() {
        return constants$1651.CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME() {
        return constants$1652.CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_DEFAULT() {
        return (int)3600L;
    }
    public static MemorySegment CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME() {
        return constants$1652.CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_OCSP_AFTER_CRL_DISABLE() {
        return (int)4294967295L;
    }
    public static MemorySegment CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME() {
        return constants$1652.CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_DEFAULT() {
        return (int)2419200L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME() {
        return constants$1652.CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_DEFAULT() {
        return (int)3600L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME() {
        return constants$1652.CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_DEFAULT() {
        return (int)1209600L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME() {
        return constants$1652.CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_DEFAULT() {
        return (int)1209600L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME() {
        return constants$1653.CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME() {
        return constants$1653.CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME() {
        return constants$1653.CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT() {
        return (int)3600L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME() {
        return constants$1653.CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME() {
        return constants$1653.CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT() {
        return (int)14400L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME() {
        return constants$1653.CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT() {
        return (int)1800L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME() {
        return constants$1654.CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_DEFAULT() {
        return (int)1800L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME() {
        return constants$1654.CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_DEFAULT() {
        return (int)600L;
    }
    public static int CRYPTNET_PRE_FETCH_TRIGGER_DISABLE() {
        return (int)4294967295L;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME() {
        return constants$1654.CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME() {
        return constants$1654.CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_CONFIG_REGPATH() {
        return constants$1654.CRYPTNET_CRL_PRE_FETCH_CONFIG_REGPATH$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME() {
        return constants$1654.CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME() {
        return constants$1655.CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME() {
        return constants$1655.CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME() {
        return constants$1655.CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME() {
        return constants$1655.CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME() {
        return constants$1655.CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_DEFAULT() {
        return (int)7200L;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_MIN() {
        return (int)300L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$1655.CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)3600L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME() {
        return constants$1656.CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$1656.CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME() {
        return constants$1656.CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT() {
        return (int)300L;
    }
    public static MemorySegment CERT_GROUP_POLICY_CHAIN_CONFIG_REGPATH() {
        return constants$1656.CERT_GROUP_POLICY_CHAIN_CONFIG_REGPATH$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME() {
        return constants$1656.CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT() {
        return (int)15000L;
    }
    public static MemorySegment CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME() {
        return constants$1656.CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT() {
        return (int)20000L;
    }
    public static MemorySegment CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME() {
        return constants$1657.CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME() {
        return constants$1657.CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_RETR_BEHAVIOR_FILE_VALUE_NAME() {
        return constants$1657.CERT_RETR_BEHAVIOR_FILE_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME() {
        return constants$1657.CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME() {
        return constants$1657.CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME$SEGMENT;
    }
    public static int CRYPTNET_CRL_BEFORE_OCSP_ENABLE() {
        return (int)4294967295L;
    }
    public static MemorySegment CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME() {
        return constants$1657.CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_OPTIONS_VALUE_NAME() {
        return constants$1658.CERT_CHAIN_OPTIONS_VALUE_NAME$SEGMENT;
    }
    public static MemorySegment CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME() {
        return constants$1658.CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME$SEGMENT;
    }
    public static int CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_DEFAULT() {
        return (int)168L;
    }
    public static MemorySegment CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME() {
        return constants$1658.CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME$SEGMENT;
    }
    public static MemoryAddress HCCE_CURRENT_USER() {
        return constants$1658.HCCE_CURRENT_USER$ADDR;
    }
    public static MemoryAddress HCCE_LOCAL_MACHINE() {
        return constants$1658.HCCE_LOCAL_MACHINE$ADDR;
    }
    public static MemoryAddress HCCE_SERIAL_LOCAL_MACHINE() {
        return constants$1658.HCCE_SERIAL_LOCAL_MACHINE$ADDR;
    }
    public static int CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY() {
        return (int)2147483648L;
    }
    public static MemoryAddress REVOCATION_OID_CRL_REVOCATION() {
        return constants$1659.REVOCATION_OID_CRL_REVOCATION$ADDR;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS() {
        return (int)7L;
    }
    public static int CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS() {
        return (int)3840L;
    }
    public static MemorySegment CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC() {
        return constants$1659.CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC$SEGMENT;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_BASE() {
        return constants$1659.CERT_CHAIN_POLICY_BASE$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_AUTHENTICODE() {
        return constants$1659.CERT_CHAIN_POLICY_AUTHENTICODE$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_AUTHENTICODE_TS() {
        return constants$1659.CERT_CHAIN_POLICY_AUTHENTICODE_TS$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_SSL() {
        return constants$1659.CERT_CHAIN_POLICY_SSL$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_BASIC_CONSTRAINTS() {
        return constants$1660.CERT_CHAIN_POLICY_BASIC_CONSTRAINTS$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_NT_AUTH() {
        return constants$1660.CERT_CHAIN_POLICY_NT_AUTH$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_MICROSOFT_ROOT() {
        return constants$1660.CERT_CHAIN_POLICY_MICROSOFT_ROOT$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_EV() {
        return constants$1660.CERT_CHAIN_POLICY_EV$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_SSL_F12() {
        return constants$1660.CERT_CHAIN_POLICY_SSL_F12$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_SSL_HPKP_HEADER() {
        return constants$1660.CERT_CHAIN_POLICY_SSL_HPKP_HEADER$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_THIRD_PARTY_ROOT() {
        return constants$1661.CERT_CHAIN_POLICY_THIRD_PARTY_ROOT$ADDR;
    }
    public static MemoryAddress CERT_CHAIN_POLICY_SSL_KEY_PIN() {
        return constants$1661.CERT_CHAIN_POLICY_SSL_KEY_PIN$ADDR;
    }
    public static int BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG() {
        return (int)2147483648L;
    }
    public static int CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR() {
        return (int)-2L;
    }
    public static int CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR() {
        return (int)-1L;
    }
    public static int CRYPT_STRING_NOCR() {
        return (int)2147483648L;
    }
    public static MemorySegment szOID_PKCS_12_PbeIds() {
        return constants$1661.szOID_PKCS_12_PbeIds$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And128BitRC4() {
        return constants$1661.szOID_PKCS_12_pbeWithSHA1And128BitRC4$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And40BitRC4() {
        return constants$1661.szOID_PKCS_12_pbeWithSHA1And40BitRC4$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES() {
        return constants$1661.szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES() {
        return constants$1662.szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And128BitRC2() {
        return constants$1662.szOID_PKCS_12_pbeWithSHA1And128BitRC2$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_12_pbeWithSHA1And40BitRC2() {
        return constants$1662.szOID_PKCS_12_pbeWithSHA1And40BitRC2$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_5_PBKDF2() {
        return constants$1662.szOID_PKCS_5_PBKDF2$SEGMENT;
    }
    public static MemorySegment szOID_PKCS_5_PBES2() {
        return constants$1662.szOID_PKCS_5_PBES2$SEGMENT;
    }
    public static int PKCS12_IMPORT_RESERVED_MASK() {
        return (int)4294901760L;
    }
    public static int PKCS12_OBJECT_LOCATOR_ALL_IMPORT_FLAGS() {
        return (int)33360L;
    }
    public static MemorySegment PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME() {
        return constants$1662.PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME$SEGMENT;
    }
    public static MemorySegment PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME() {
        return constants$1663.PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME$SEGMENT;
    }
    public static int PKCS12_EXPORT_RESERVED_MASK() {
        return (int)4294901760L;
    }
    public static MemorySegment PKCS12_PBKDF2_ID_HMAC_SHA1() {
        return constants$1663.PKCS12_PBKDF2_ID_HMAC_SHA1$SEGMENT;
    }
    public static MemorySegment PKCS12_PBKDF2_ID_HMAC_SHA256() {
        return constants$1663.PKCS12_PBKDF2_ID_HMAC_SHA256$SEGMENT;
    }
    public static MemorySegment PKCS12_PBKDF2_ID_HMAC_SHA384() {
        return constants$1663.PKCS12_PBKDF2_ID_HMAC_SHA384$SEGMENT;
    }
    public static MemorySegment PKCS12_PBKDF2_ID_HMAC_SHA512() {
        return constants$1663.PKCS12_PBKDF2_ID_HMAC_SHA512$SEGMENT;
    }
    public static MemorySegment PKCS12_PBES2_ALG_AES256_SHA256() {
        return constants$1663.PKCS12_PBES2_ALG_AES256_SHA256$SEGMENT;
    }
    public static MemorySegment PKCS12_CONFIG_REGPATH() {
        return constants$1664.PKCS12_CONFIG_REGPATH$SEGMENT;
    }
    public static MemorySegment PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME() {
        return constants$1664.PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME$SEGMENT;
    }
    public static MemoryAddress CERT_RETRIEVE_ISSUER_LOGO() {
        return constants$1664.CERT_RETRIEVE_ISSUER_LOGO$ADDR;
    }
    public static MemoryAddress CERT_RETRIEVE_SUBJECT_LOGO() {
        return constants$1664.CERT_RETRIEVE_SUBJECT_LOGO$ADDR;
    }
    public static MemoryAddress CERT_RETRIEVE_COMMUNITY_LOGO() {
        return constants$1664.CERT_RETRIEVE_COMMUNITY_LOGO$ADDR;
    }
    public static MemoryAddress CERT_RETRIEVE_BIOMETRIC_PREDEFINED_BASE_TYPE() {
        return constants$1664.CERT_RETRIEVE_BIOMETRIC_PREDEFINED_BASE_TYPE$ADDR;
    }
    public static MemoryAddress CERT_RETRIEVE_BIOMETRIC_PICTURE_TYPE() {
        return constants$1665.CERT_RETRIEVE_BIOMETRIC_PICTURE_TYPE$ADDR;
    }
    public static MemoryAddress CERT_RETRIEVE_BIOMETRIC_SIGNATURE_TYPE() {
        return constants$1665.CERT_RETRIEVE_BIOMETRIC_SIGNATURE_TYPE$ADDR;
    }
    public static int CERT_SELECT_LAST() {
        return (int)11L;
    }
    public static int CERT_SELECT_MAX() {
        return (int)33L;
    }
    public static MemorySegment SSL_OBJECT_LOCATOR_PFX_FUNC() {
        return constants$1665.SSL_OBJECT_LOCATOR_PFX_FUNC$SEGMENT;
    }
    public static MemorySegment SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC() {
        return constants$1665.SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC$SEGMENT;
    }
    public static MemorySegment SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC() {
        return constants$1665.SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC$SEGMENT;
    }
    public static MemorySegment szFORCE_KEY_PROTECTION() {
        return constants$1665.szFORCE_KEY_PROTECTION$SEGMENT;
    }
    public static int CRYPTPROTECT_LAST_RESERVED_FLAGVAL() {
        return (int)4294967295L;
    }
    public static int __RPCNDR_H_VERSION__() {
        return (int)500L;
    }
    public static int __RPCSAL_H_VERSION__() {
        return (int)100L;
    }
    public static int NDR_CHAR_REP_MASK() {
        return (int)15L;
    }
    public static int NDR_INT_REP_MASK() {
        return (int)240L;
    }
    public static int NDR_FLOAT_REP_MASK() {
        return (int)65280L;
    }
    public static int NDR_LITTLE_ENDIAN() {
        return (int)16L;
    }
    public static int NDR_BIG_ENDIAN() {
        return (int)0L;
    }
    public static int NDR_IEEE_FLOAT() {
        return (int)0L;
    }
    public static int NDR_VAX_FLOAT() {
        return (int)256L;
    }
    public static int NDR_IBM_FLOAT() {
        return (int)768L;
    }
    public static int NDR_ASCII_CHAR() {
        return (int)0L;
    }
    public static int NDR_EBCDIC_CHAR() {
        return (int)1L;
    }
    public static int NDR_LOCAL_DATA_REPRESENTATION() {
        return (int)16L;
    }
    public static int NDR_LOCAL_ENDIAN() {
        return (int)16L;
    }
    public static int USER_MARSHAL_CB_SIGNATURE() {
        return (int)1431523907L;
    }
    public static int MIDL_WINRT_TYPE_SERIALIZATION_INFO_CURRENT_VERSION() {
        return (int)1L;
    }
    public static int CLSCTX_VALID_MASK() {
        return (int)-2082474977L;
    }
    public static int WDT_INPROC_CALL() {
        return (int)1215587415L;
    }
    public static int WDT_REMOTE_CALL() {
        return (int)1383359575L;
    }
    public static int WDT_INPROC64_CALL() {
        return (int)1349805143L;
    }
    public static byte DECIMAL_NEG() {
        return (byte)128L;
    }
    public static short VARIANT_TRUE() {
        return (short)-1L;
    }
    public static short VARIANT_FALSE() {
        return (short)0L;
    }
    public static int METHOD_DIRECT_TO_HARDWARE() {
        return (int)1L;
    }
    public static int METHOD_DIRECT_FROM_HARDWARE() {
        return (int)2L;
    }
    public static int FILE_SPECIAL_ACCESS() {
        return (int)0L;
    }
    public static int FILE_READ_ACCESS() {
        return (int)1L;
    }
    public static int FILE_WRITE_ACCESS() {
        return (int)2L;
    }
    public static int IOCTL_STORAGE_BASE() {
        return (int)45L;
    }
    public static int IOCTL_STORAGE_CHECK_VERIFY() {
        return (int)2967552L;
    }
    public static int IOCTL_STORAGE_CHECK_VERIFY2() {
        return (int)2951168L;
    }
    public static int IOCTL_STORAGE_MEDIA_REMOVAL() {
        return (int)2967556L;
    }
    public static int IOCTL_STORAGE_EJECT_MEDIA() {
        return (int)2967560L;
    }
    public static int IOCTL_STORAGE_LOAD_MEDIA() {
        return (int)2967564L;
    }
    public static int IOCTL_STORAGE_LOAD_MEDIA2() {
        return (int)2951180L;
    }
    public static int IOCTL_STORAGE_RESERVE() {
        return (int)2967568L;
    }
    public static int IOCTL_STORAGE_RELEASE() {
        return (int)2967572L;
    }
    public static int IOCTL_STORAGE_FIND_NEW_DEVICES() {
        return (int)2967576L;
    }
    public static int IOCTL_STORAGE_EJECTION_CONTROL() {
        return (int)2951488L;
    }
    public static int IOCTL_STORAGE_MCN_CONTROL() {
        return (int)2951492L;
    }
    public static int IOCTL_STORAGE_GET_MEDIA_TYPES() {
        return (int)2952192L;
    }
    public static int IOCTL_STORAGE_GET_MEDIA_TYPES_EX() {
        return (int)2952196L;
    }
    public static int IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER() {
        return (int)2952208L;
    }
    public static int IOCTL_STORAGE_GET_HOTPLUG_INFO() {
        return (int)2952212L;
    }
    public static int IOCTL_STORAGE_SET_HOTPLUG_INFO() {
        return (int)3001368L;
    }
    public static int IOCTL_STORAGE_RESET_BUS() {
        return (int)2969600L;
    }
    public static int IOCTL_STORAGE_RESET_DEVICE() {
        return (int)2969604L;
    }
    public static int IOCTL_STORAGE_BREAK_RESERVATION() {
        return (int)2969620L;
    }
    public static int IOCTL_STORAGE_PERSISTENT_RESERVE_IN() {
        return (int)2969624L;
    }
    public static int IOCTL_STORAGE_PERSISTENT_RESERVE_OUT() {
        return (int)3002396L;
    }
    public static int IOCTL_STORAGE_GET_DEVICE_NUMBER() {
        return (int)2953344L;
    }
    public static int IOCTL_STORAGE_GET_DEVICE_NUMBER_EX() {
        return (int)2953348L;
    }
    public static int IOCTL_STORAGE_PREDICT_FAILURE() {
        return (int)2953472L;
    }
    public static int IOCTL_STORAGE_FAILURE_PREDICTION_CONFIG() {
        return (int)2953476L;
    }
    public static int IOCTL_STORAGE_GET_COUNTERS() {
        return (int)2953480L;
    }
    public static int IOCTL_STORAGE_READ_CAPACITY() {
        return (int)2969920L;
    }
    public static int IOCTL_STORAGE_GET_DEVICE_TELEMETRY() {
        return (int)3002816L;
    }
    public static int IOCTL_STORAGE_DEVICE_TELEMETRY_NOTIFY() {
        return (int)3002820L;
    }
    public static int IOCTL_STORAGE_DEVICE_TELEMETRY_QUERY_CAPS() {
        return (int)3002824L;
    }
    public static int IOCTL_STORAGE_GET_DEVICE_TELEMETRY_RAW() {
        return (int)3002828L;
    }
    public static int IOCTL_STORAGE_SET_TEMPERATURE_THRESHOLD() {
        return (int)3002880L;
    }
    public static int IOCTL_STORAGE_PROTOCOL_COMMAND() {
        return (int)3003328L;
    }
    public static int IOCTL_STORAGE_QUERY_PROPERTY() {
        return (int)2954240L;
    }
    public static int IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES() {
        return (int)2987012L;
    }
    public static int IOCTL_STORAGE_GET_LB_PROVISIONING_MAP_RESOURCES() {
        return (int)2970632L;
    }
    public static int IOCTL_STORAGE_SET_PROPERTY() {
        return (int)2987020L;
    }
    public static int IOCTL_STORAGE_REINITIALIZE_MEDIA() {
        return (int)2987584L;
    }
    public static int IOCTL_STORAGE_GET_BC_PROPERTIES() {
        return (int)2971648L;
    }
    public static int IOCTL_STORAGE_ALLOCATE_BC_STREAM() {
        return (int)3004420L;
    }
    public static int IOCTL_STORAGE_FREE_BC_STREAM() {
        return (int)3004424L;
    }
    public static int IOCTL_STORAGE_CHECK_PRIORITY_HINT_SUPPORT() {
        return (int)2955392L;
    }
    public static int IOCTL_STORAGE_START_DATA_INTEGRITY_CHECK() {
        return (int)3004548L;
    }
    public static int IOCTL_STORAGE_STOP_DATA_INTEGRITY_CHECK() {
        return (int)3004552L;
    }
    public static int OBSOLETE_IOCTL_STORAGE_RESET_BUS() {
        return (int)3002368L;
    }
    public static int OBSOLETE_IOCTL_STORAGE_RESET_DEVICE() {
        return (int)3002372L;
    }
    public static int IOCTL_STORAGE_FIRMWARE_GET_INFO() {
        return (int)2956288L;
    }
    public static int IOCTL_STORAGE_FIRMWARE_DOWNLOAD() {
        return (int)3005444L;
    }
    public static int IOCTL_STORAGE_FIRMWARE_ACTIVATE() {
        return (int)3005448L;
    }
    public static int IOCTL_STORAGE_ENABLE_IDLE_POWER() {
        return (int)2956416L;
    }
    public static int IOCTL_STORAGE_GET_IDLE_POWERUP_REASON() {
        return (int)2956420L;
    }
    public static int IOCTL_STORAGE_POWER_ACTIVE() {
        return (int)2956424L;
    }
    public static int IOCTL_STORAGE_POWER_IDLE() {
        return (int)2956428L;
    }
    public static int IOCTL_STORAGE_EVENT_NOTIFICATION() {
        return (int)2956432L;
    }
    public static int IOCTL_STORAGE_DEVICE_POWER_CAP() {
        return (int)2956436L;
    }
    public static int IOCTL_STORAGE_RPMB_COMMAND() {
        return (int)2956440L;
    }
    public static int IOCTL_STORAGE_ATTRIBUTE_MANAGEMENT() {
        return (int)3005596L;
    }
    public static int IOCTL_STORAGE_DIAGNOSTIC() {
        return (int)2956448L;
    }
    public static int IOCTL_STORAGE_GET_PHYSICAL_ELEMENT_STATUS() {
        return (int)2956452L;
    }
    public static int IOCTL_STORAGE_REMOVE_ELEMENT_AND_TRUNCATE() {
        return (int)2956480L;
    }
    public static int IOCTL_STORAGE_GET_DEVICE_INTERNAL_LOG() {
        return (int)2956484L;
    }
    public static int TAPE_RETURN_STATISTICS() {
        return (int)0L;
    }
    public static int TAPE_RETURN_ENV_INFO() {
        return (int)1L;
    }
    public static int TAPE_RESET_STATISTICS() {
        return (int)2L;
    }
    public static int MEDIA_CURRENTLY_MOUNTED() {
        return (int)2147483648L;
    }
    public static int NO_SRBTYPE_ADAPTER_DESCRIPTOR_SIZE() {
        return (int)30L;
    }
    public static long STORAGE_MINIPORT_DESCRIPTOR_V1_SIZE() {
        return 16L;
    }
    public static int StorageIdTypeNAA() {
        return (int)3L;
    }
    public static long DEVICE_LB_PROVISIONING_DESCRIPTOR_V1_SIZE() {
        return 32L;
    }
    public static int STORAGE_TIER_NAME_LENGTH() {
        return (int)256L;
    }
    public static int STORAGE_TIER_DESCRIPTION_LENGTH() {
        return (int)512L;
    }
    public static int STORAGE_TIER_FLAG_NO_SEEK_PENALTY() {
        return (int)131072L;
    }
    public static int STORAGE_TIER_FLAG_WRITE_BACK_CACHE() {
        return (int)2097152L;
    }
    public static int STORAGE_TIER_FLAG_READ_CACHE() {
        return (int)4194304L;
    }
    public static int STORAGE_TIER_FLAG_PARITY() {
        return (int)8388608L;
    }
    public static int STORAGE_TIER_FLAG_SMR() {
        return (int)16777216L;
    }
    public static int STORAGE_ADAPTER_SERIAL_NUMBER_V1_MAX_LENGTH() {
        return (int)128L;
    }
    public static long STORAGE_ADAPTER_SERIAL_NUMBER_V1_VERSION() {
        return 264L;
    }
    public static long STORAGE_ADAPTER_SERIAL_NUMBER_V1_SIZE() {
        return 264L;
    }
    public static int STORAGE_DEVICE_NUMA_NODE_UNKNOWN() {
        return (int)4294967295L;
    }
    public static int DeviceDsmActionFlag_NonDestructive() {
        return (int)2147483648L;
    }
    public static int DeviceDsmAction_None() {
        return (int)0L;
    }
    public static int DeviceDsmAction_Trim() {
        return (int)1L;
    }
    public static int DeviceDsmAction_Notification() {
        return (int)2147483650L;
    }
    public static int DeviceDsmAction_OffloadRead() {
        return (int)2147483651L;
    }
    public static int DeviceDsmAction_OffloadWrite() {
        return (int)4L;
    }
    public static int DeviceDsmAction_Allocation() {
        return (int)2147483653L;
    }
    public static int DeviceDsmAction_Repair() {
        return (int)2147483654L;
    }
    public static int DeviceDsmAction_Scrub() {
        return (int)2147483655L;
    }
    public static int DeviceDsmAction_DrtQuery() {
        return (int)2147483656L;
    }
    public static int DeviceDsmAction_DrtClear() {
        return (int)2147483657L;
    }
    public static int DeviceDsmAction_DrtDisable() {
        return (int)2147483658L;
    }
    public static int DeviceDsmAction_TieringQuery() {
        return (int)2147483659L;
    }
    public static int DeviceDsmAction_Map() {
        return (int)2147483660L;
    }
    public static int DeviceDsmAction_RegenerateParity() {
        return (int)2147483661L;
    }
    public static int DeviceDsmAction_NvCache_Change_Priority() {
        return (int)2147483662L;
    }
    public static int DeviceDsmAction_NvCache_Evict() {
        return (int)2147483663L;
    }
    public static int DeviceDsmAction_TopologyIdQuery() {
        return (int)2147483664L;
    }
    public static int DeviceDsmAction_GetPhysicalAddresses() {
        return (int)2147483665L;
    }
    public static int DeviceDsmAction_ScopeRegen() {
        return (int)2147483666L;
    }
    public static int DeviceDsmAction_ReportZones() {
        return (int)2147483667L;
    }
    public static int DeviceDsmAction_OpenZone() {
        return (int)2147483668L;
    }
    public static int DeviceDsmAction_FinishZone() {
        return (int)2147483669L;
    }
    public static int DeviceDsmAction_CloseZone() {
        return (int)2147483670L;
    }
    public static int DeviceDsmAction_ResetWritePointer() {
        return (int)23L;
    }
    public static int DeviceDsmAction_GetRangeErrorInfo() {
        return (int)2147483672L;
    }
    public static int DeviceDsmAction_WriteZeroes() {
        return (int)25L;
    }
    public static int DeviceDsmAction_LostQuery() {
        return (int)2147483674L;
    }
    public static int DeviceDsmAction_GetFreeSpace() {
        return (int)2147483675L;
    }
    public static int DeviceDsmAction_ConversionQuery() {
        return (int)2147483676L;
    }
    public static int DeviceDsmAction_VdtSet() {
        return (int)29L;
    }
    public static int DEVICE_DSM_FLAG_TRIM_NOT_FS_ALLOCATED() {
        return (int)2147483648L;
    }
    public static int STORAGE_OFFLOAD_TOKEN_TYPE_ZERO_DATA() {
        return (int)4294901761L;
    }
    public static int DEVICE_DATA_SET_LBP_STATE_PARAMETERS_VERSION_V1() {
        return (int)1L;
    }
    public static long DEVICE_DSM_ALLOCATION_OUTPUT_V1() {
        return 32L;
    }
    public static long DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V1() {
        return 32L;
    }
    public static long DEVICE_DSM_ALLOCATION_OUTPUT_V2() {
        return 40L;
    }
    public static long DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V2() {
        return 40L;
    }
    public static long DEVICE_DSM_PHYSICAL_ADDRESS_HAS_MEMORY_ERROR() {
        return -1L;
    }
    public static int DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_VERSION_V1() {
        return (int)1L;
    }
    public static int DEVICE_DSM_RANGE_ERROR_INFO_VERSION_V1() {
        return (int)1L;
    }
    public static MemorySegment STORAGE_CRASH_TELEMETRY_REGKEY() {
        return constants$1666.STORAGE_CRASH_TELEMETRY_REGKEY$SEGMENT;
    }
    public static MemorySegment STORAGE_DEVICE_TELEMETRY_REGKEY() {
        return constants$1666.STORAGE_DEVICE_TELEMETRY_REGKEY$SEGMENT;
    }
    public static int FW_ISSUEID_UNKNOWN() {
        return (int)4294967295L;
    }
    public static MemorySegment TC_PUBLIC_DATA_TYPE_ATAGP() {
        return constants$1666.TC_PUBLIC_DATA_TYPE_ATAGP$SEGMENT;
    }
    public static MemorySegment TC_PUBLIC_DATA_TYPE_ATASMART() {
        return constants$1666.TC_PUBLIC_DATA_TYPE_ATASMART$SEGMENT;
    }
    public static int STORAGE_EVENT_ALL() {
        return (int)7L;
    }
    public static long STORAGE_COUNTERS_VERSION_V1() {
        return 32L;
    }
    public static int STORAGE_HW_FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE() {
        return (int)2147483648L;
    }
    public static int STORAGE_PROTOCOL_COMMAND_FLAG_ADAPTER_REQUEST() {
        return (int)2147483648L;
    }
    public static int IOCTL_SCMBUS_BASE() {
        return (int)89L;
    }
    public static int IOCTL_SCM_BUS_GET_LOGICAL_DEVICES() {
        return (int)5832704L;
    }
    public static int IOCTL_SCM_BUS_GET_PHYSICAL_DEVICES() {
        return (int)5832708L;
    }
    public static int IOCTL_SCM_BUS_GET_REGIONS() {
        return (int)5832712L;
    }
    public static int IOCTL_SCM_LD_GET_INTERLEAVE_SET() {
        return (int)5835776L;
    }
    public static int IOCTL_SCM_PD_QUERY_PROPERTY() {
        return (int)5838848L;
    }
    public static int IOCTL_SCM_PD_FIRMWARE_DOWNLOAD() {
        return (int)5871620L;
    }
    public static int IOCTL_SCM_PD_FIRMWARE_ACTIVATE() {
        return (int)5871624L;
    }
    public static int IOCTL_SCM_PD_PASSTHROUGH() {
        return (int)5888012L;
    }
    public static int IOCTL_SCM_PD_UPDATE_MANAGEMENT_STATUS() {
        return (int)5838864L;
    }
    public static int IOCTL_SCM_PD_REINITIALIZE_MEDIA() {
        return (int)5871636L;
    }
    public static long SCM_REGION_SPA_UNKNOWN() {
        return -1L;
    }
    public static long SCM_PD_MEMORY_SIZE_UNKNOWN() {
        return -1L;
    }
    public static int IOCTL_DISK_BASE() {
        return (int)7L;
    }
    public static int IOCTL_DISK_GET_DRIVE_GEOMETRY() {
        return (int)458752L;
    }
    public static int IOCTL_DISK_GET_PARTITION_INFO() {
        return (int)475140L;
    }
    public static int IOCTL_DISK_SET_PARTITION_INFO() {
        return (int)507912L;
    }
    public static int IOCTL_DISK_GET_DRIVE_LAYOUT() {
        return (int)475148L;
    }
    public static int IOCTL_DISK_SET_DRIVE_LAYOUT() {
        return (int)507920L;
    }
    public static int IOCTL_DISK_VERIFY() {
        return (int)458772L;
    }
    public static int IOCTL_DISK_FORMAT_TRACKS() {
        return (int)507928L;
    }
    public static int IOCTL_DISK_REASSIGN_BLOCKS() {
        return (int)507932L;
    }
    public static int IOCTL_DISK_PERFORMANCE() {
        return (int)458784L;
    }
    public static int IOCTL_DISK_IS_WRITABLE() {
        return (int)458788L;
    }
    public static int IOCTL_DISK_LOGGING() {
        return (int)458792L;
    }
    public static int IOCTL_DISK_FORMAT_TRACKS_EX() {
        return (int)507948L;
    }
    public static int IOCTL_DISK_HISTOGRAM_STRUCTURE() {
        return (int)458800L;
    }
    public static int IOCTL_DISK_HISTOGRAM_DATA() {
        return (int)458804L;
    }
    public static int IOCTL_DISK_HISTOGRAM_RESET() {
        return (int)458808L;
    }
    public static int IOCTL_DISK_REQUEST_STRUCTURE() {
        return (int)458812L;
    }
    public static int IOCTL_DISK_REQUEST_DATA() {
        return (int)458816L;
    }
    public static int IOCTL_DISK_PERFORMANCE_OFF() {
        return (int)458848L;
    }
    public static int IOCTL_DISK_CONTROLLER_NUMBER() {
        return (int)458820L;
    }
    public static int SMART_GET_VERSION() {
        return (int)475264L;
    }
    public static int SMART_SEND_DRIVE_COMMAND() {
        return (int)508036L;
    }
    public static int SMART_RCV_DRIVE_DATA() {
        return (int)508040L;
    }
    public static int IOCTL_DISK_GET_PARTITION_INFO_EX() {
        return (int)458824L;
    }
    public static int IOCTL_DISK_SET_PARTITION_INFO_EX() {
        return (int)507980L;
    }
    public static int IOCTL_DISK_GET_DRIVE_LAYOUT_EX() {
        return (int)458832L;
    }
    public static int IOCTL_DISK_SET_DRIVE_LAYOUT_EX() {
        return (int)507988L;
    }
    public static int IOCTL_DISK_CREATE_DISK() {
        return (int)507992L;
    }
    public static int IOCTL_DISK_GET_LENGTH_INFO() {
        return (int)475228L;
    }
    public static int IOCTL_DISK_GET_DRIVE_GEOMETRY_EX() {
        return (int)458912L;
    }
    public static int IOCTL_DISK_REASSIGN_BLOCKS_EX() {
        return (int)508068L;
    }
    public static int IOCTL_DISK_UPDATE_DRIVE_SIZE() {
        return (int)508104L;
    }
    public static int IOCTL_DISK_GROW_PARTITION() {
        return (int)508112L;
    }
    public static int IOCTL_DISK_GET_CACHE_INFORMATION() {
        return (int)475348L;
    }
    public static int IOCTL_DISK_SET_CACHE_INFORMATION() {
        return (int)508120L;
    }
    public static int OBSOLETE_DISK_GET_WRITE_CACHE_STATE() {
        return (int)475356L;
    }
    public static int IOCTL_DISK_DELETE_DRIVE_LAYOUT() {
        return (int)508160L;
    }
    public static int IOCTL_DISK_UPDATE_PROPERTIES() {
        return (int)459072L;
    }
    public static int IOCTL_DISK_FORMAT_DRIVE() {
        return (int)508876L;
    }
    public static int IOCTL_DISK_SENSE_DEVICE() {
        return (int)459744L;
    }
    public static int IOCTL_DISK_CHECK_VERIFY() {
        return (int)477184L;
    }
    public static int IOCTL_DISK_MEDIA_REMOVAL() {
        return (int)477188L;
    }
    public static int IOCTL_DISK_EJECT_MEDIA() {
        return (int)477192L;
    }
    public static int IOCTL_DISK_LOAD_MEDIA() {
        return (int)477196L;
    }
    public static int IOCTL_DISK_RESERVE() {
        return (int)477200L;
    }
    public static int IOCTL_DISK_RELEASE() {
        return (int)477204L;
    }
    public static int IOCTL_DISK_FIND_NEW_DEVICES() {
        return (int)477208L;
    }
    public static int IOCTL_DISK_GET_MEDIA_TYPES() {
        return (int)461824L;
    }
    public static int GPT_ATTRIBUTE_PLATFORM_REQUIRED() {
        return (int)1L;
    }
    public static int GPT_ATTRIBUTE_NO_BLOCK_IO_PROTOCOL() {
        return (int)2L;
    }
    public static int GPT_ATTRIBUTE_LEGACY_BIOS_BOOTABLE() {
        return (int)4L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER() {
        return -9223372036854775808L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_HIDDEN() {
        return 4611686018427387904L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY() {
        return 2305843009213693952L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY() {
        return 1152921504606846976L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_OFFLINE() {
        return 576460752303423488L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_DAX() {
        return 288230376151711744L;
    }
    public static long GPT_BASIC_DATA_ATTRIBUTE_SERVICE() {
        return 144115188075855872L;
    }
    public static long GPT_SPACES_ATTRIBUTE_NO_METADATA() {
        return -9223372036854775808L;
    }
    public static long HISTOGRAM_BUCKET_SIZE() {
        return 8L;
    }
    public static long DISK_HISTOGRAM_SIZE() {
        return 72L;
    }
    public static int IOCTL_DISK_GET_DISK_ATTRIBUTES() {
        return (int)458992L;
    }
    public static int IOCTL_DISK_SET_DISK_ATTRIBUTES() {
        return (int)508148L;
    }
    public static int IOCTL_DISK_RESET_SNAPSHOT_INFO() {
        return (int)508432L;
    }
    public static int IOCTL_CHANGER_BASE() {
        return (int)48L;
    }
    public static int IOCTL_CHANGER_GET_PARAMETERS() {
        return (int)3162112L;
    }
    public static int IOCTL_CHANGER_GET_STATUS() {
        return (int)3162116L;
    }
    public static int IOCTL_CHANGER_GET_PRODUCT_DATA() {
        return (int)3162120L;
    }
    public static int IOCTL_CHANGER_SET_ACCESS() {
        return (int)3194896L;
    }
    public static int IOCTL_CHANGER_GET_ELEMENT_STATUS() {
        return (int)3194900L;
    }
    public static int IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS() {
        return (int)3162136L;
    }
    public static int IOCTL_CHANGER_SET_POSITION() {
        return (int)3162140L;
    }
    public static int IOCTL_CHANGER_EXCHANGE_MEDIUM() {
        return (int)3162144L;
    }
    public static int IOCTL_CHANGER_MOVE_MEDIUM() {
        return (int)3162148L;
    }
    public static int IOCTL_CHANGER_REINITIALIZE_TRANSPORT() {
        return (int)3162152L;
    }
    public static int IOCTL_CHANGER_QUERY_VOLUME_TAGS() {
        return (int)3194924L;
    }
    public static int CHANGER_RESERVED_BIT() {
        return (int)2147483648L;
    }
    public static int CHANGER_PREDISMOUNT_ALIGN_TO_SLOT() {
        return (int)2147483649L;
    }
    public static int CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE() {
        return (int)2147483650L;
    }
    public static int CHANGER_CLEANER_AUTODISMOUNT() {
        return (int)2147483652L;
    }
    public static int CHANGER_TRUE_EXCHANGE_CAPABLE() {
        return (int)2147483656L;
    }
    public static int CHANGER_SLOTS_USE_TRAYS() {
        return (int)2147483664L;
    }
    public static int CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR() {
        return (int)2147483680L;
    }
    public static int CHANGER_CLEANER_OPS_NOT_SUPPORTED() {
        return (int)2147483712L;
    }
    public static int CHANGER_IEPORT_USER_CONTROL_OPEN() {
        return (int)2147483776L;
    }
    public static int CHANGER_IEPORT_USER_CONTROL_CLOSE() {
        return (int)2147483904L;
    }
    public static int CHANGER_MOVE_EXTENDS_IEPORT() {
        return (int)2147484160L;
    }
    public static int CHANGER_MOVE_RETRACTS_IEPORT() {
        return (int)2147484672L;
    }
    public static int ERROR_UNHANDLED_ERROR() {
        return (int)4294967295L;
    }
    public static int IOCTL_SERIAL_LSRMST_INSERT() {
        return (int)1769596L;
    }
    public static int IOCTL_SERENUM_EXPOSE_HARDWARE() {
        return (int)3604992L;
    }
    public static int IOCTL_SERENUM_REMOVE_HARDWARE() {
        return (int)3604996L;
    }
    public static int IOCTL_SERENUM_PORT_DESC() {
        return (int)3605000L;
    }
    public static int IOCTL_SERENUM_GET_PORT_NAME() {
        return (int)3605004L;
    }
    public static byte SERIAL_LSRMST_ESCAPE() {
        return (byte)0L;
    }
    public static byte SERIAL_LSRMST_LSR_DATA() {
        return (byte)1L;
    }
    public static byte SERIAL_LSRMST_LSR_NODATA() {
        return (byte)2L;
    }
    public static byte SERIAL_LSRMST_MST() {
        return (byte)3L;
    }
    public static int SERIAL_IOC_FCR_FIFO_ENABLE() {
        return (int)1L;
    }
    public static int SERIAL_IOC_FCR_RCVR_RESET() {
        return (int)2L;
    }
    public static int SERIAL_IOC_FCR_XMIT_RESET() {
        return (int)4L;
    }
    public static int SERIAL_IOC_FCR_DMA_MODE() {
        return (int)8L;
    }
    public static int SERIAL_IOC_FCR_RES1() {
        return (int)16L;
    }
    public static int SERIAL_IOC_FCR_RES2() {
        return (int)32L;
    }
    public static int SERIAL_IOC_FCR_RCVR_TRIGGER_LSB() {
        return (int)64L;
    }
    public static int SERIAL_IOC_FCR_RCVR_TRIGGER_MSB() {
        return (int)128L;
    }
    public static int SERIAL_IOC_MCR_DTR() {
        return (int)1L;
    }
    public static int SERIAL_IOC_MCR_RTS() {
        return (int)2L;
    }
    public static int SERIAL_IOC_MCR_OUT1() {
        return (int)4L;
    }
    public static int SERIAL_IOC_MCR_OUT2() {
        return (int)8L;
    }
    public static int SERIAL_IOC_MCR_LOOP() {
        return (int)16L;
    }
    public static int FSCTL_REQUEST_OPLOCK_LEVEL_1() {
        return (int)589824L;
    }
    public static int FSCTL_REQUEST_OPLOCK_LEVEL_2() {
        return (int)589828L;
    }
    public static int FSCTL_REQUEST_BATCH_OPLOCK() {
        return (int)589832L;
    }
    public static int FSCTL_OPLOCK_BREAK_ACKNOWLEDGE() {
        return (int)589836L;
    }
    public static int FSCTL_OPBATCH_ACK_CLOSE_PENDING() {
        return (int)589840L;
    }
    public static int FSCTL_OPLOCK_BREAK_NOTIFY() {
        return (int)589844L;
    }
    public static int FSCTL_LOCK_VOLUME() {
        return (int)589848L;
    }
    public static int FSCTL_UNLOCK_VOLUME() {
        return (int)589852L;
    }
    public static int FSCTL_DISMOUNT_VOLUME() {
        return (int)589856L;
    }
    public static int FSCTL_IS_VOLUME_MOUNTED() {
        return (int)589864L;
    }
    public static int FSCTL_IS_PATHNAME_VALID() {
        return (int)589868L;
    }
    public static int FSCTL_MARK_VOLUME_DIRTY() {
        return (int)589872L;
    }
    public static int FSCTL_QUERY_RETRIEVAL_POINTERS() {
        return (int)589883L;
    }
    public static int FSCTL_GET_COMPRESSION() {
        return (int)589884L;
    }
    public static int FSCTL_SET_COMPRESSION() {
        return (int)639040L;
    }
    public static int FSCTL_SET_BOOTLOADER_ACCESSED() {
        return (int)589903L;
    }
    public static int FSCTL_MARK_AS_SYSTEM_HIVE() {
        return (int)589903L;
    }
    public static int FSCTL_OPLOCK_BREAK_ACK_NO_2() {
        return (int)589904L;
    }
    public static int FSCTL_INVALIDATE_VOLUMES() {
        return (int)589908L;
    }
    public static int FSCTL_QUERY_FAT_BPB() {
        return (int)589912L;
    }
    public static int FSCTL_REQUEST_FILTER_OPLOCK() {
        return (int)589916L;
    }
    public static int FSCTL_FILESYSTEM_GET_STATISTICS() {
        return (int)589920L;
    }
    public static int FSCTL_GET_NTFS_VOLUME_DATA() {
        return (int)589924L;
    }
    public static int FSCTL_GET_NTFS_FILE_RECORD() {
        return (int)589928L;
    }
    public static int FSCTL_GET_VOLUME_BITMAP() {
        return (int)589935L;
    }
    public static int FSCTL_GET_RETRIEVAL_POINTERS() {
        return (int)589939L;
    }
    public static int FSCTL_MOVE_FILE() {
        return (int)589940L;
    }
    public static int FSCTL_IS_VOLUME_DIRTY() {
        return (int)589944L;
    }
    public static int FSCTL_ALLOW_EXTENDED_DASD_IO() {
        return (int)589955L;
    }
    public static int FSCTL_FIND_FILES_BY_SID() {
        return (int)589967L;
    }
    public static int FSCTL_SET_OBJECT_ID() {
        return (int)589976L;
    }
    public static int FSCTL_GET_OBJECT_ID() {
        return (int)589980L;
    }
    public static int FSCTL_DELETE_OBJECT_ID() {
        return (int)589984L;
    }
    public static int FSCTL_SET_REPARSE_POINT() {
        return (int)589988L;
    }
    public static int FSCTL_GET_REPARSE_POINT() {
        return (int)589992L;
    }
    public static int FSCTL_DELETE_REPARSE_POINT() {
        return (int)589996L;
    }
    public static int FSCTL_ENUM_USN_DATA() {
        return (int)590003L;
    }
    public static int FSCTL_SECURITY_ID_CHECK() {
        return (int)606391L;
    }
    public static int FSCTL_READ_USN_JOURNAL() {
        return (int)590011L;
    }
    public static int FSCTL_SET_OBJECT_ID_EXTENDED() {
        return (int)590012L;
    }
    public static int FSCTL_CREATE_OR_GET_OBJECT_ID() {
        return (int)590016L;
    }
    public static int FSCTL_SET_SPARSE() {
        return (int)590020L;
    }
    public static int FSCTL_SET_ZERO_DATA() {
        return (int)622792L;
    }
    public static int FSCTL_QUERY_ALLOCATED_RANGES() {
        return (int)606415L;
    }
    public static int FSCTL_ENABLE_UPGRADE() {
        return (int)622800L;
    }
    public static int FSCTL_SET_ENCRYPTION() {
        return (int)590039L;
    }
    public static int FSCTL_ENCRYPTION_FSCTL_IO() {
        return (int)590043L;
    }
    public static int FSCTL_WRITE_RAW_ENCRYPTED() {
        return (int)590047L;
    }
    public static int FSCTL_READ_RAW_ENCRYPTED() {
        return (int)590051L;
    }
    public static int FSCTL_CREATE_USN_JOURNAL() {
        return (int)590055L;
    }
    public static int FSCTL_READ_FILE_USN_DATA() {
        return (int)590059L;
    }
    public static int FSCTL_WRITE_USN_CLOSE_RECORD() {
        return (int)590063L;
    }
    public static int FSCTL_EXTEND_VOLUME() {
        return (int)590064L;
    }
    public static int FSCTL_QUERY_USN_JOURNAL() {
        return (int)590068L;
    }
    public static int FSCTL_DELETE_USN_JOURNAL() {
        return (int)590072L;
    }
    public static int FSCTL_MARK_HANDLE() {
        return (int)590076L;
    }
    public static int FSCTL_SIS_COPYFILE() {
        return (int)590080L;
    }
    public static int FSCTL_SIS_LINK_FILES() {
        return (int)639236L;
    }
    public static int FSCTL_RECALL_FILE() {
        return (int)590103L;
    }
    public static int FSCTL_READ_FROM_PLEX() {
        return (int)606494L;
    }
    public static int FSCTL_FILE_PREFETCH() {
        return (int)590112L;
    }
    public static int FSCTL_MAKE_MEDIA_COMPATIBLE() {
        return (int)622896L;
    }
    public static int FSCTL_SET_DEFECT_MANAGEMENT() {
        return (int)622900L;
    }
    public static int FSCTL_QUERY_SPARING_INFO() {
        return (int)590136L;
    }
    public static int FSCTL_QUERY_ON_DISK_VOLUME_INFO() {
        return (int)590140L;
    }
    public static int FSCTL_SET_VOLUME_COMPRESSION_STATE() {
        return (int)590144L;
    }
    public static int FSCTL_TXFS_MODIFY_RM() {
        return (int)622916L;
    }
    public static int FSCTL_TXFS_QUERY_RM_INFORMATION() {
        return (int)606536L;
    }
    public static int FSCTL_TXFS_ROLLFORWARD_REDO() {
        return (int)622928L;
    }
    public static int FSCTL_TXFS_ROLLFORWARD_UNDO() {
        return (int)622932L;
    }
    public static int FSCTL_TXFS_START_RM() {
        return (int)622936L;
    }
    public static int FSCTL_TXFS_SHUTDOWN_RM() {
        return (int)622940L;
    }
    public static int FSCTL_TXFS_READ_BACKUP_INFORMATION() {
        return (int)606560L;
    }
    public static int FSCTL_TXFS_WRITE_BACKUP_INFORMATION() {
        return (int)622948L;
    }
    public static int FSCTL_TXFS_CREATE_SECONDARY_RM() {
        return (int)622952L;
    }
    public static int FSCTL_TXFS_GET_METADATA_INFO() {
        return (int)606572L;
    }
    public static int FSCTL_TXFS_GET_TRANSACTED_VERSION() {
        return (int)606576L;
    }
    public static int FSCTL_TXFS_SAVEPOINT_INFORMATION() {
        return (int)622968L;
    }
    public static int FSCTL_TXFS_CREATE_MINIVERSION() {
        return (int)622972L;
    }
    public static int FSCTL_TXFS_TRANSACTION_ACTIVE() {
        return (int)606604L;
    }
    public static int FSCTL_SET_ZERO_ON_DEALLOCATION() {
        return (int)590228L;
    }
    public static int FSCTL_SET_REPAIR() {
        return (int)590232L;
    }
    public static int FSCTL_GET_REPAIR() {
        return (int)590236L;
    }
    public static int FSCTL_WAIT_FOR_REPAIR() {
        return (int)590240L;
    }
    public static int FSCTL_INITIATE_REPAIR() {
        return (int)590248L;
    }
    public static int FSCTL_CSC_INTERNAL() {
        return (int)590255L;
    }
    public static int FSCTL_SHRINK_VOLUME() {
        return (int)590256L;
    }
    public static int FSCTL_SET_SHORT_NAME_BEHAVIOR() {
        return (int)590260L;
    }
    public static int FSCTL_DFSR_SET_GHOST_HANDLE_STATE() {
        return (int)590264L;
    }
    public static int FSCTL_TXFS_LIST_TRANSACTION_LOCKED_FILES() {
        return (int)606688L;
    }
    public static int FSCTL_TXFS_LIST_TRANSACTIONS() {
        return (int)606692L;
    }
    public static int FSCTL_QUERY_PAGEFILE_ENCRYPTION() {
        return (int)590312L;
    }
    public static int FSCTL_RESET_VOLUME_ALLOCATION_HINTS() {
        return (int)590316L;
    }
    public static int FSCTL_QUERY_DEPENDENT_VOLUME() {
        return (int)590320L;
    }
    public static int FSCTL_SD_GLOBAL_CHANGE() {
        return (int)590324L;
    }
    public static int FSCTL_TXFS_READ_BACKUP_INFORMATION2() {
        return (int)590328L;
    }
    public static int FSCTL_LOOKUP_STREAM_FROM_CLUSTER() {
        return (int)590332L;
    }
    public static int FSCTL_TXFS_WRITE_BACKUP_INFORMATION2() {
        return (int)590336L;
    }
    public static int FSCTL_FILE_TYPE_NOTIFICATION() {
        return (int)590340L;
    }
    public static int FSCTL_FILE_LEVEL_TRIM() {
        return (int)623112L;
    }
    public static int FSCTL_GET_BOOT_AREA_INFO() {
        return (int)590384L;
    }
    public static int FSCTL_GET_RETRIEVAL_POINTER_BASE() {
        return (int)590388L;
    }
    public static int FSCTL_SET_PERSISTENT_VOLUME_STATE() {
        return (int)590392L;
    }
    public static int FSCTL_QUERY_PERSISTENT_VOLUME_STATE() {
        return (int)590396L;
    }
    public static int FSCTL_REQUEST_OPLOCK() {
        return (int)590400L;
    }
    public static int FSCTL_CSV_TUNNEL_REQUEST() {
        return (int)590404L;
    }
    public static int FSCTL_IS_CSV_FILE() {
        return (int)590408L;
    }
    public static int FSCTL_QUERY_FILE_SYSTEM_RECOGNITION() {
        return (int)590412L;
    }
    public static int FSCTL_CSV_GET_VOLUME_PATH_NAME() {
        return (int)590416L;
    }
    public static int FSCTL_CSV_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT() {
        return (int)590420L;
    }
    public static int FSCTL_CSV_GET_VOLUME_PATH_NAMES_FOR_VOLUME_NAME() {
        return (int)590424L;
    }
    public static int FSCTL_IS_FILE_ON_CSV_VOLUME() {
        return (int)590428L;
    }
    public static int FSCTL_CORRUPTION_HANDLING() {
        return (int)590432L;
    }
    public static int FSCTL_OFFLOAD_READ() {
        return (int)606820L;
    }
    public static int FSCTL_OFFLOAD_WRITE() {
        return (int)623208L;
    }
    public static int FSCTL_CSV_INTERNAL() {
        return (int)590444L;
    }
    public static int FSCTL_SET_PURGE_FAILURE_MODE() {
        return (int)590448L;
    }
    public static int FSCTL_QUERY_FILE_LAYOUT() {
        return (int)590455L;
    }
    public static int FSCTL_IS_VOLUME_OWNED_BYCSVFS() {
        return (int)590456L;
    }
    public static int FSCTL_GET_INTEGRITY_INFORMATION() {
        return (int)590460L;
    }
    public static int FSCTL_SET_INTEGRITY_INFORMATION() {
        return (int)639616L;
    }
    public static int FSCTL_QUERY_FILE_REGIONS() {
        return (int)590468L;
    }
    public static int FSCTL_RKF_INTERNAL() {
        return (int)590511L;
    }
    public static int FSCTL_SCRUB_DATA() {
        return (int)590512L;
    }
    public static int FSCTL_REPAIR_COPIES() {
        return (int)639668L;
    }
    public static int FSCTL_DISABLE_LOCAL_BUFFERING() {
        return (int)590520L;
    }
    public static int FSCTL_CSV_MGMT_LOCK() {
        return (int)590524L;
    }
    public static int FSCTL_CSV_QUERY_DOWN_LEVEL_FILE_SYSTEM_CHARACTERISTICS() {
        return (int)590528L;
    }
    public static int FSCTL_ADVANCE_FILE_ID() {
        return (int)590532L;
    }
    public static int FSCTL_CSV_SYNC_TUNNEL_REQUEST() {
        return (int)590536L;
    }
    public static int FSCTL_CSV_QUERY_VETO_FILE_DIRECT_IO() {
        return (int)590540L;
    }
    public static int FSCTL_WRITE_USN_REASON() {
        return (int)590544L;
    }
    public static int FSCTL_CSV_CONTROL() {
        return (int)590548L;
    }
    public static int FSCTL_GET_REFS_VOLUME_DATA() {
        return (int)590552L;
    }
    public static int FSCTL_CSV_H_BREAKING_SYNC_TUNNEL_REQUEST() {
        return (int)590564L;
    }
    public static int FSCTL_QUERY_STORAGE_CLASSES() {
        return (int)590572L;
    }
    public static int FSCTL_QUERY_REGION_INFO() {
        return (int)590576L;
    }
    public static int FSCTL_USN_TRACK_MODIFIED_RANGES() {
        return (int)590580L;
    }
    public static int FSCTL_QUERY_SHARED_VIRTUAL_DISK_SUPPORT() {
        return (int)590592L;
    }
    public static int FSCTL_SVHDX_SYNC_TUNNEL_REQUEST() {
        return (int)590596L;
    }
    public static int FSCTL_SVHDX_SET_INITIATOR_INFORMATION() {
        return (int)590600L;
    }
    public static int FSCTL_SET_EXTERNAL_BACKING() {
        return (int)590604L;
    }
    public static int FSCTL_GET_EXTERNAL_BACKING() {
        return (int)590608L;
    }
    public static int FSCTL_DELETE_EXTERNAL_BACKING() {
        return (int)590612L;
    }
    public static int FSCTL_ENUM_EXTERNAL_BACKING() {
        return (int)590616L;
    }
    public static int FSCTL_ENUM_OVERLAY() {
        return (int)590623L;
    }
    public static int FSCTL_ADD_OVERLAY() {
        return (int)623408L;
    }
    public static int FSCTL_REMOVE_OVERLAY() {
        return (int)623412L;
    }
    public static int FSCTL_UPDATE_OVERLAY() {
        return (int)623416L;
    }
    public static int FSCTL_SHUFFLE_FILE() {
        return (int)639808L;
    }
    public static int FSCTL_DUPLICATE_EXTENTS_TO_FILE() {
        return (int)623428L;
    }
    public static int FSCTL_SPARSE_OVERALLOCATE() {
        return (int)590668L;
    }
    public static int FSCTL_STORAGE_QOS_CONTROL() {
        return (int)590672L;
    }
    public static int FSCTL_INITIATE_FILE_METADATA_OPTIMIZATION() {
        return (int)590684L;
    }
    public static int FSCTL_QUERY_FILE_METADATA_OPTIMIZATION() {
        return (int)590688L;
    }
    public static int FSCTL_SVHDX_ASYNC_TUNNEL_REQUEST() {
        return (int)590692L;
    }
    public static int FSCTL_GET_WOF_VERSION() {
        return (int)590696L;
    }
    public static int FSCTL_HCS_SYNC_TUNNEL_REQUEST() {
        return (int)590700L;
    }
    public static int FSCTL_HCS_ASYNC_TUNNEL_REQUEST() {
        return (int)590704L;
    }
    public static int FSCTL_QUERY_EXTENT_READ_CACHE_INFO() {
        return (int)590711L;
    }
    public static int FSCTL_QUERY_REFS_VOLUME_COUNTER_INFO() {
        return (int)590715L;
    }
    public static int FSCTL_CLEAN_VOLUME_METADATA() {
        return (int)590716L;
    }
    public static int FSCTL_SET_INTEGRITY_INFORMATION_EX() {
        return (int)590720L;
    }
    public static int FSCTL_SUSPEND_OVERLAY() {
        return (int)590724L;
    }
    public static int FSCTL_VIRTUAL_STORAGE_QUERY_PROPERTY() {
        return (int)590728L;
    }
    public static int FSCTL_FILESYSTEM_GET_STATISTICS_EX() {
        return (int)590732L;
    }
    public static int FSCTL_QUERY_VOLUME_CONTAINER_STATE() {
        return (int)590736L;
    }
    public static int FSCTL_SET_LAYER_ROOT() {
        return (int)590740L;
    }
    public static int FSCTL_QUERY_DIRECT_ACCESS_EXTENTS() {
        return (int)590747L;
    }
    public static int FSCTL_NOTIFY_STORAGE_SPACE_ALLOCATION() {
        return (int)590748L;
    }
    public static int FSCTL_SSDI_STORAGE_REQUEST() {
        return (int)590752L;
    }
    public static int FSCTL_QUERY_DIRECT_IMAGE_ORIGINAL_BASE() {
        return (int)590756L;
    }
    public static int FSCTL_READ_UNPRIVILEGED_USN_JOURNAL() {
        return (int)590763L;
    }
    public static int FSCTL_GHOST_FILE_EXTENTS() {
        return (int)623532L;
    }
    public static int FSCTL_QUERY_GHOSTED_FILE_EXTENTS() {
        return (int)590768L;
    }
    public static int FSCTL_UNMAP_SPACE() {
        return (int)590772L;
    }
    public static int FSCTL_HCS_SYNC_NO_WRITE_TUNNEL_REQUEST() {
        return (int)590776L;
    }
    public static int FSCTL_STREAMS_QUERY_PARAMETERS() {
        return (int)590788L;
    }
    public static int FSCTL_STREAMS_ASSOCIATE_ID() {
        return (int)590792L;
    }
    public static int FSCTL_STREAMS_QUERY_ID() {
        return (int)590796L;
    }
    public static int FSCTL_GET_RETRIEVAL_POINTERS_AND_REFCOUNT() {
        return (int)590803L;
    }
    public static int FSCTL_QUERY_VOLUME_NUMA_INFO() {
        return (int)590804L;
    }
    public static int FSCTL_REFS_DEALLOCATE_RANGES() {
        return (int)590808L;
    }
    public static int FSCTL_QUERY_REFS_SMR_VOLUME_INFO() {
        return (int)590812L;
    }
    public static int FSCTL_SET_REFS_SMR_VOLUME_GC_PARAMETERS() {
        return (int)590816L;
    }
    public static int FSCTL_SET_REFS_FILE_STRICTLY_SEQUENTIAL() {
        return (int)590820L;
    }
    public static int FSCTL_DUPLICATE_EXTENTS_TO_FILE_EX() {
        return (int)623592L;
    }
    public static int FSCTL_QUERY_BAD_RANGES() {
        return (int)590828L;
    }
    public static int FSCTL_SET_DAX_ALLOC_ALIGNMENT_HINT() {
        return (int)590832L;
    }
    public static int FSCTL_DELETE_CORRUPTED_REFS_CONTAINER() {
        return (int)590836L;
    }
    public static int FSCTL_SCRUB_UNDISCOVERABLE_ID() {
        return (int)590840L;
    }
    public static int FSCTL_NOTIFY_DATA_CHANGE() {
        return (int)590844L;
    }
    public static int FSCTL_START_VIRTUALIZATION_INSTANCE_EX() {
        return (int)590848L;
    }
    public static int FSCTL_ENCRYPTION_KEY_CONTROL() {
        return (int)590852L;
    }
    public static int FSCTL_VIRTUAL_STORAGE_SET_BEHAVIOR() {
        return (int)590856L;
    }
    public static int FSCTL_SET_REPARSE_POINT_EX() {
        return (int)590860L;
    }
    public static int FSCTL_REARRANGE_FILE() {
        return (int)640032L;
    }
    public static int FSCTL_VIRTUAL_STORAGE_PASSTHROUGH() {
        return (int)590884L;
    }
    public static int FSCTL_GET_RETRIEVAL_POINTER_COUNT() {
        return (int)590891L;
    }
    public static int FSCTL_ENABLE_PER_IO_FLAGS() {
        return (int)590892L;
    }
    public static int USN_PAGE_SIZE() {
        return (int)4096L;
    }
    public static int USN_REASON_DATA_OVERWRITE() {
        return (int)1L;
    }
    public static int USN_REASON_DATA_EXTEND() {
        return (int)2L;
    }
    public static int USN_REASON_DATA_TRUNCATION() {
        return (int)4L;
    }
    public static int USN_REASON_NAMED_DATA_OVERWRITE() {
        return (int)16L;
    }
    public static int USN_REASON_NAMED_DATA_EXTEND() {
        return (int)32L;
    }
    public static int USN_REASON_NAMED_DATA_TRUNCATION() {
        return (int)64L;
    }
    public static int USN_REASON_FILE_CREATE() {
        return (int)256L;
    }
    public static int USN_REASON_FILE_DELETE() {
        return (int)512L;
    }
    public static int USN_REASON_EA_CHANGE() {
        return (int)1024L;
    }
    public static int USN_REASON_SECURITY_CHANGE() {
        return (int)2048L;
    }
    public static int USN_REASON_RENAME_OLD_NAME() {
        return (int)4096L;
    }
    public static int USN_REASON_RENAME_NEW_NAME() {
        return (int)8192L;
    }
    public static int USN_REASON_INDEXABLE_CHANGE() {
        return (int)16384L;
    }
    public static int USN_REASON_BASIC_INFO_CHANGE() {
        return (int)32768L;
    }
    public static int USN_REASON_HARD_LINK_CHANGE() {
        return (int)65536L;
    }
    public static int USN_REASON_COMPRESSION_CHANGE() {
        return (int)131072L;
    }
    public static int USN_REASON_ENCRYPTION_CHANGE() {
        return (int)262144L;
    }
    public static int USN_REASON_OBJECT_ID_CHANGE() {
        return (int)524288L;
    }
    public static int USN_REASON_REPARSE_POINT_CHANGE() {
        return (int)1048576L;
    }
    public static int USN_REASON_STREAM_CHANGE() {
        return (int)2097152L;
    }
    public static int USN_REASON_TRANSACTED_CHANGE() {
        return (int)4194304L;
    }
    public static int USN_REASON_INTEGRITY_CHANGE() {
        return (int)8388608L;
    }
    public static int USN_REASON_DESIRED_STORAGE_CLASS_CHANGE() {
        return (int)16777216L;
    }
    public static int USN_REASON_CLOSE() {
        return (int)2147483648L;
    }
    public static int USN_DELETE_FLAG_DELETE() {
        return (int)1L;
    }
    public static int USN_DELETE_FLAG_NOTIFY() {
        return (int)2L;
    }
    public static int USN_DELETE_VALID_FLAGS() {
        return (int)3L;
    }
    public static int USN_SOURCE_DATA_MANAGEMENT() {
        return (int)1L;
    }
    public static int USN_SOURCE_AUXILIARY_DATA() {
        return (int)2L;
    }
    public static int USN_SOURCE_REPLICATION_MANAGEMENT() {
        return (int)4L;
    }
    public static int USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT() {
        return (int)8L;
    }
    public static int USN_SOURCE_VALID_FLAGS() {
        return (int)15L;
    }
    public static int MARK_HANDLE_PROTECT_CLUSTERS() {
        return (int)1L;
    }
    public static int MARK_HANDLE_TXF_SYSTEM_LOG() {
        return (int)4L;
    }
    public static int MARK_HANDLE_NOT_TXF_SYSTEM_LOG() {
        return (int)8L;
    }
    public static int MARK_HANDLE_REALTIME() {
        return (int)32L;
    }
    public static int MARK_HANDLE_NOT_REALTIME() {
        return (int)64L;
    }
    public static int MARK_HANDLE_FILTER_METADATA() {
        return (int)512L;
    }
    public static int MARK_HANDLE_CLOUD_SYNC() {
        return (int)2048L;
    }
    public static int MARK_HANDLE_READ_COPY() {
        return (int)128L;
    }
    public static int MARK_HANDLE_NOT_READ_COPY() {
        return (int)256L;
    }
    public static int MARK_HANDLE_RETURN_PURGE_FAILURE() {
        return (int)1024L;
    }
    public static int MARK_HANDLE_DISABLE_FILE_METADATA_OPTIMIZATION() {
        return (int)4096L;
    }
    public static int MARK_HANDLE_ENABLE_USN_SOURCE_ON_PAGING_IO() {
        return (int)8192L;
    }
    public static int MARK_HANDLE_SKIP_COHERENCY_SYNC_DISALLOW_WRITES() {
        return (int)16384L;
    }
    public static int MARK_HANDLE_ENABLE_CPU_CACHE() {
        return (int)268435456L;
    }
    public static int VOLUME_IS_DIRTY() {
        return (int)1L;
    }
    public static int VOLUME_UPGRADE_SCHEDULED() {
        return (int)2L;
    }
    public static int VOLUME_SESSION_OPEN() {
        return (int)4L;
    }
    public static int FILE_ZERO_DATA_INFORMATION_FLAG_PRESERVE_CACHED_DATA() {
        return (int)1L;
    }
    public static int ENCRYPTION_FORMAT_DEFAULT() {
        return (int)1L;
    }
    public static int SET_REPAIR_ENABLED() {
        return (int)1L;
    }
    public static int SET_REPAIR_WARN_ABOUT_DATA_LOSS() {
        return (int)8L;
    }
    public static int SET_REPAIR_DISABLED_AND_BUGCHECK_ON_CORRUPT() {
        return (int)16L;
    }
    public static int SET_REPAIR_VALID_MASK() {
        return (int)25L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_IN_USE() {
        return (int)1L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_REUSED() {
        return (int)2L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_EXIST() {
        return (int)4L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_BASE_RECORD() {
        return (int)8L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_SYSTEM_FILE() {
        return (int)16L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_NOT_IMPLEMENTED() {
        return (int)32L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_UNABLE_TO_REPAIR() {
        return (int)64L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_REPAIR_DISABLED() {
        return (int)128L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_RECURSIVELY_CORRUPTED() {
        return (int)256L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_ORPHAN_GENERATED() {
        return (int)512L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_REPAIRED() {
        return (int)1024L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_NOTHING_WRONG() {
        return (int)2048L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NOT_FOUND() {
        return (int)4096L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_POTENTIAL_CROSSLINK() {
        return (int)8192L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_STALE_INFORMATION() {
        return (int)16384L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_CLUSTERS_ALREADY_IN_USE() {
        return (int)32768L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_LCN_NOT_EXIST() {
        return (int)65536L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_INVALID_RUN_LENGTH() {
        return (int)131072L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_ORPHAN() {
        return (int)262144L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_IS_BASE_RECORD() {
        return (int)524288L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_INVALID_ARRAY_LENGTH_COUNT() {
        return (int)1048576L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_SID_VALID() {
        return (int)2097152L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_SID_MISMATCH() {
        return (int)4194304L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_INVALID_PARENT() {
        return (int)8388608L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_IN_USE() {
        return (int)16777216L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_REUSED() {
        return (int)33554432L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_EXIST() {
        return (int)67108864L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_BASE_RECORD() {
        return (int)134217728L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_INDEX() {
        return (int)268435456L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_VALID_INDEX_ENTRY() {
        return (int)536870912L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_OUT_OF_GENERIC_NAMES() {
        return (int)1073741824L;
    }
    public static int FILE_INITIATE_REPAIR_HINT1_OUT_OF_RESOURCE() {
        return (int)2147483648L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_INVALID_LCN() {
        return 4294967296L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_INVALID_VCN() {
        return 8589934592L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_NAME_CONFLICT() {
        return 17179869184L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_ORPHAN() {
        return 34359738368L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_TOO_SMALL() {
        return 68719476736L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NON_RESIDENT() {
        return 137438953472L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_DENY_DEFRAG() {
        return 274877906944L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_PREVIOUS_PARENT_STILL_VALID() {
        return 549755813888L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_INDEX_ENTRY_MISMATCH() {
        return 1099511627776L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_INVALID_ORPHAN_RECOVERY_NAME() {
        return 2199023255552L;
    }
    public static long FILE_INITIATE_REPAIR_HINT1_MULTIPLE_FILE_NAME_ATTRIBUTES() {
        return 4398046511104L;
    }
    public static int TXFS_LOGGING_MODE_SIMPLE() {
        return (int)1L;
    }
    public static int TXFS_LOGGING_MODE_FULL() {
        return (int)2L;
    }
    public static int TXFS_MODIFY_RM_VALID_FLAGS() {
        return (int)261631L;
    }
    public static int TXFS_QUERY_RM_INFORMATION_VALID_FLAGS() {
        return (int)246192L;
    }
    public static int TXFS_ROLLFORWARD_REDO_VALID_FLAGS() {
        return (int)3L;
    }
    public static int TXFS_START_RM_VALID_FLAGS() {
        return (int)15999L;
    }
    public static int TXFS_TRANSACTED_VERSION_NONTRANSACTED() {
        return (int)4294967294L;
    }
    public static int TXFS_TRANSACTED_VERSION_UNCOMMITTED() {
        return (int)4294967295L;
    }
    public static int PERSISTENT_VOLUME_STATE_SHORT_NAME_CREATION_DISABLED() {
        return (int)1L;
    }
    public static int PERSISTENT_VOLUME_STATE_VOLUME_SCRUB_DISABLED() {
        return (int)2L;
    }
    public static int PERSISTENT_VOLUME_STATE_GLOBAL_METADATA_NO_SEEK_PENALTY() {
        return (int)4L;
    }
    public static int PERSISTENT_VOLUME_STATE_LOCAL_METADATA_NO_SEEK_PENALTY() {
        return (int)8L;
    }
    public static int PERSISTENT_VOLUME_STATE_NO_HEAT_GATHERING() {
        return (int)16L;
    }
    public static int PERSISTENT_VOLUME_STATE_CONTAINS_BACKING_WIM() {
        return (int)32L;
    }
    public static int PERSISTENT_VOLUME_STATE_BACKED_BY_WIM() {
        return (int)64L;
    }
    public static int PERSISTENT_VOLUME_STATE_NO_WRITE_AUTO_TIERING() {
        return (int)128L;
    }
    public static int PERSISTENT_VOLUME_STATE_TXF_DISABLED() {
        return (int)256L;
    }
    public static int PERSISTENT_VOLUME_STATE_REALLOCATE_ALL_DATA_WRITES() {
        return (int)512L;
    }
    public static int PERSISTENT_VOLUME_STATE_CHKDSK_RAN_ONCE() {
        return (int)1024L;
    }
    public static int PERSISTENT_VOLUME_STATE_MODIFIED_BY_CHKDSK() {
        return (int)2048L;
    }
    public static int PERSISTENT_VOLUME_STATE_DAX_FORMATTED() {
        return (int)4096L;
    }
    public static int OPLOCK_LEVEL_CACHE_READ() {
        return (int)1L;
    }
    public static int OPLOCK_LEVEL_CACHE_HANDLE() {
        return (int)2L;
    }
    public static int OPLOCK_LEVEL_CACHE_WRITE() {
        return (int)4L;
    }
    public static int REQUEST_OPLOCK_INPUT_FLAG_REQUEST() {
        return (int)1L;
    }
    public static int REQUEST_OPLOCK_INPUT_FLAG_ACK() {
        return (int)2L;
    }
    public static int REQUEST_OPLOCK_INPUT_FLAG_COMPLETE_ACK_ON_CLOSE() {
        return (int)4L;
    }
    public static int REQUEST_OPLOCK_OUTPUT_FLAG_ACK_REQUIRED() {
        return (int)1L;
    }
    public static int REQUEST_OPLOCK_OUTPUT_FLAG_MODES_PROVIDED() {
        return (int)2L;
    }
    public static int SD_GLOBAL_CHANGE_TYPE_QUERY_STATS() {
        return (int)65536L;
    }
    public static int SD_GLOBAL_CHANGE_TYPE_ENUM_SDS() {
        return (int)131072L;
    }
    public static int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_MASK() {
        return (int)4278190080L;
    }
    public static long CSV_NAMESPACE_INFO_V1() {
        return 24L;
    }
    public static int CSV_INVALID_DEVICE_NUMBER() {
        return (int)4294967295L;
    }
    public static int QUERY_FILE_LAYOUT_RESTART() {
        return (int)1L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_NAMES() {
        return (int)2L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_STREAMS() {
        return (int)4L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_EXTENTS() {
        return (int)8L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_EXTRA_INFO() {
        return (int)16L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_STREAMS_WITH_NO_CLUSTERS_ALLOCATED() {
        return (int)32L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_FULL_PATH_IN_NAMES() {
        return (int)64L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION() {
        return (int)128L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DSC_ATTRIBUTE() {
        return (int)256L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_TXF_ATTRIBUTE() {
        return (int)512L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EFS_ATTRIBUTE() {
        return (int)1024L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_ONLY_FILES_WITH_SPECIFIC_ATTRIBUTES() {
        return (int)2048L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_FILES_WITH_DSC_ATTRIBUTE() {
        return (int)4096L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DATA_ATTRIBUTE() {
        return (int)8192L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_REPARSE_ATTRIBUTE() {
        return (int)16384L;
    }
    public static int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EA_ATTRIBUTE() {
        return (int)32768L;
    }
    public static int QUERY_FILE_LAYOUT_SINGLE_INSTANCED() {
        return (int)1L;
    }
    public static int FILE_LAYOUT_NAME_ENTRY_PRIMARY() {
        return (int)1L;
    }
    public static int FILE_LAYOUT_NAME_ENTRY_DOS() {
        return (int)2L;
    }
    public static int STREAM_LAYOUT_ENTRY_IMMOVABLE() {
        return (int)1L;
    }
    public static int STREAM_LAYOUT_ENTRY_PINNED() {
        return (int)2L;
    }
    public static int STREAM_LAYOUT_ENTRY_RESIDENT() {
        return (int)4L;
    }
    public static int STREAM_LAYOUT_ENTRY_NO_CLUSTERS_ALLOCATED() {
        return (int)8L;
    }
    public static int STREAM_LAYOUT_ENTRY_HAS_INFORMATION() {
        return (int)16L;
    }
    public static int STREAM_EXTENT_ENTRY_AS_RETRIEVAL_POINTERS() {
        return (int)1L;
    }
    public static int STREAM_EXTENT_ENTRY_ALL_EXTENTS() {
        return (int)2L;
    }
    public static int CHECKSUM_TYPE_UNCHANGED() {
        return (int)-1L;
    }
    public static int CHECKSUM_TYPE_NONE() {
        return (int)0L;
    }
    public static int CHECKSUM_TYPE_CRC32() {
        return (int)1L;
    }
    public static int CHECKSUM_TYPE_CRC64() {
        return (int)2L;
    }
    public static int CHECKSUM_TYPE_ECC() {
        return (int)3L;
    }
    public static int CHECKSUM_TYPE_FIRST_UNUSED_TYPE() {
        return (int)4L;
    }
    public static int FSCTL_INTEGRITY_FLAG_CHECKSUM_ENFORCEMENT_OFF() {
        return (int)1L;
    }
    public static int OFFLOAD_READ_FLAG_ALL_ZERO_BEYOND_CURRENT_RANGE() {
        return (int)1L;
    }
    public static int FILE_REGION_USAGE_QUERY_ALIGNMENT() {
        return (int)24L;
    }
    public static int VALID_WRITE_USN_REASON_MASK() {
        return (int)2147483649L;
    }
    public static int FILE_STORAGE_TIER_NAME_LENGTH() {
        return (int)256L;
    }
    public static int FILE_STORAGE_TIER_DESCRIPTION_LENGTH() {
        return (int)512L;
    }
    public static int FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY() {
        return (int)131072L;
    }
    public static int FILE_STORAGE_TIER_FLAG_WRITE_BACK_CACHE() {
        return (int)2097152L;
    }
    public static int FILE_STORAGE_TIER_FLAG_READ_CACHE() {
        return (int)4194304L;
    }
    public static int FILE_STORAGE_TIER_FLAG_PARITY() {
        return (int)8388608L;
    }
    public static int FILE_STORAGE_TIER_FLAG_SMR() {
        return (int)16777216L;
    }
    public static int QUERY_STORAGE_CLASSES_FLAGS_MEASURE_WRITE() {
        return (int)2147483648L;
    }
    public static long FSCTL_QUERY_STORAGE_CLASSES_OUTPUT_VERSION() {
        return 1088L;
    }
    public static int QUERY_FILE_LAYOUT_REPARSE_DATA_INVALID() {
        return (int)1L;
    }
    public static int QUERY_FILE_LAYOUT_REPARSE_TAG_INVALID() {
        return (int)2L;
    }
    public static long FSCTL_QUERY_REGION_INFO_INPUT_VERSION() {
        return 32L;
    }
    public static long FSCTL_QUERY_REGION_INFO_OUTPUT_VERSION() {
        return 64L;
    }
    public static int STREAMS_INVALID_ID() {
        return (int)0L;
    }
    public static int STREAMS_MAX_ID() {
        return (int)65535L;
    }
    public static int STREAMS_ASSOCIATE_ID_CLEAR() {
        return (int)1L;
    }
    public static int STREAMS_ASSOCIATE_ID_SET() {
        return (int)2L;
    }
    public static int DAX_ALLOC_ALIGNMENT_FLAG_MANDATORY() {
        return (int)1L;
    }
    public static int DAX_ALLOC_ALIGNMENT_FLAG_FALLBACK_SPECIFIED() {
        return (int)2L;
    }
    public static int WOF_CURRENT_VERSION() {
        return (int)1L;
    }
    public static int WOF_PROVIDER_WIM() {
        return (int)1L;
    }
    public static int WOF_PROVIDER_FILE() {
        return (int)2L;
    }
    public static int WOF_PROVIDER_CLOUD() {
        return (int)3L;
    }
    public static int WIM_PROVIDER_CURRENT_VERSION() {
        return (int)1L;
    }
    public static int WIM_PROVIDER_EXTERNAL_FLAG_NOT_ACTIVE() {
        return (int)1L;
    }
    public static int WIM_PROVIDER_EXTERNAL_FLAG_SUSPENDED() {
        return (int)2L;
    }
    public static int WIM_BOOT_OS_WIM() {
        return (int)1L;
    }
    public static int WIM_BOOT_NOT_OS_WIM() {
        return (int)0L;
    }
    public static int FILE_PROVIDER_CURRENT_VERSION() {
        return (int)1L;
    }
    public static int FILE_PROVIDER_SINGLE_FILE() {
        return (int)1L;
    }
    public static int FILE_PROVIDER_COMPRESSION_XPRESS4K() {
        return (int)0L;
    }
    public static int FILE_PROVIDER_COMPRESSION_LZX() {
        return (int)1L;
    }
    public static int FILE_PROVIDER_COMPRESSION_XPRESS8K() {
        return (int)2L;
    }
    public static int FILE_PROVIDER_COMPRESSION_XPRESS16K() {
        return (int)3L;
    }
    public static int FILE_PROVIDER_COMPRESSION_MAXIMUM() {
        return (int)4L;
    }
    public static int FILE_PROVIDER_FLAG_COMPRESS_ON_WRITE() {
        return (int)1L;
    }
    public static int CONTAINER_VOLUME_STATE_HOSTING_CONTAINER() {
        return (int)1L;
    }
    public static int CONTAINER_ROOT_INFO_FLAG_SCRATCH_ROOT() {
        return (int)1L;
    }
    public static int CONTAINER_ROOT_INFO_FLAG_LAYER_ROOT() {
        return (int)2L;
    }
    public static int CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_ROOT() {
        return (int)4L;
    }
    public static int CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_TARGET_ROOT() {
        return (int)8L;
    }
    public static int CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_EXCEPTION_ROOT() {
        return (int)16L;
    }
    public static int CONTAINER_ROOT_INFO_FLAG_BIND_ROOT() {
        return (int)32L;
    }
    public static int CONTAINER_ROOT_INFO_FLAG_BIND_TARGET_ROOT() {
        return (int)64L;
    }
    public static int CONTAINER_ROOT_INFO_FLAG_BIND_EXCEPTION_ROOT() {
        return (int)128L;
    }
    public static int CONTAINER_ROOT_INFO_FLAG_BIND_DO_NOT_MAP_NAME() {
        return (int)256L;
    }
    public static int CONTAINER_ROOT_INFO_VALID_FLAGS() {
        return (int)511L;
    }
    public static int IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS() {
        return (int)5636096L;
    }
    public static int IOCTL_VOLUME_ONLINE() {
        return (int)5685256L;
    }
    public static int IOCTL_VOLUME_OFFLINE() {
        return (int)5685260L;
    }
    public static int IOCTL_VOLUME_IS_CLUSTERED() {
        return (int)5636144L;
    }
    public static int IOCTL_VOLUME_GET_GPT_ATTRIBUTES() {
        return (int)5636152L;
    }
    public static int IRP_EXT_TRACK_OFFSET_HEADER_VALIDATION_VALUE() {
        return (int)21583L;
    }
    public static int SCARD_PROTOCOL_Tx() {
        return (int)3L;
    }
    public static int SCARD_PROTOCOL_DEFAULT() {
        return (int)2147483648L;
    }
    public static int IOCTL_SMARTCARD_POWER() {
        return (int)3211268L;
    }
    public static int IOCTL_SMARTCARD_GET_ATTRIBUTE() {
        return (int)3211272L;
    }
    public static int IOCTL_SMARTCARD_SET_ATTRIBUTE() {
        return (int)3211276L;
    }
    public static int IOCTL_SMARTCARD_CONFISCATE() {
        return (int)3211280L;
    }
    public static int IOCTL_SMARTCARD_TRANSMIT() {
        return (int)3211284L;
    }
    public static int IOCTL_SMARTCARD_EJECT() {
        return (int)3211288L;
    }
    public static int IOCTL_SMARTCARD_SWALLOW() {
        return (int)3211292L;
    }
    public static int IOCTL_SMARTCARD_IS_PRESENT() {
        return (int)3211304L;
    }
    public static int IOCTL_SMARTCARD_IS_ABSENT() {
        return (int)3211308L;
    }
    public static int IOCTL_SMARTCARD_SET_PROTOCOL() {
        return (int)3211312L;
    }
    public static int IOCTL_SMARTCARD_GET_STATE() {
        return (int)3211320L;
    }
    public static int IOCTL_SMARTCARD_GET_LAST_ERROR() {
        return (int)3211324L;
    }
    public static int IOCTL_SMARTCARD_GET_PERF_CNTR() {
        return (int)3211328L;
    }
    public static int IOCTL_SMARTCARD_GET_FEATURE_REQUEST() {
        return (int)3224864L;
    }
    public static int SCARD_ATTR_VENDOR_NAME() {
        return (int)65792L;
    }
    public static int SCARD_ATTR_VENDOR_IFD_TYPE() {
        return (int)65793L;
    }
    public static int SCARD_ATTR_VENDOR_IFD_VERSION() {
        return (int)65794L;
    }
    public static int SCARD_ATTR_VENDOR_IFD_SERIAL_NO() {
        return (int)65795L;
    }
    public static int SCARD_ATTR_CHANNEL_ID() {
        return (int)131344L;
    }
    public static int SCARD_ATTR_PROTOCOL_TYPES() {
        return (int)196896L;
    }
    public static int SCARD_ATTR_DEFAULT_CLK() {
        return (int)196897L;
    }
    public static int SCARD_ATTR_MAX_CLK() {
        return (int)196898L;
    }
    public static int SCARD_ATTR_DEFAULT_DATA_RATE() {
        return (int)196899L;
    }
    public static int SCARD_ATTR_MAX_DATA_RATE() {
        return (int)196900L;
    }
    public static int SCARD_ATTR_MAX_IFSD() {
        return (int)196901L;
    }
    public static int SCARD_ATTR_POWER_MGMT_SUPPORT() {
        return (int)262449L;
    }
    public static int SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE() {
        return (int)328000L;
    }
    public static int SCARD_ATTR_USER_AUTH_INPUT_DEVICE() {
        return (int)328002L;
    }
    public static int SCARD_ATTR_CHARACTERISTICS() {
        return (int)393552L;
    }
    public static int SCARD_ATTR_CURRENT_PROTOCOL_TYPE() {
        return (int)524801L;
    }
    public static int SCARD_ATTR_CURRENT_CLK() {
        return (int)524802L;
    }
    public static int SCARD_ATTR_CURRENT_F() {
        return (int)524803L;
    }
    public static int SCARD_ATTR_CURRENT_D() {
        return (int)524804L;
    }
    public static int SCARD_ATTR_CURRENT_N() {
        return (int)524805L;
    }
    public static int SCARD_ATTR_CURRENT_W() {
        return (int)524806L;
    }
    public static int SCARD_ATTR_CURRENT_IFSC() {
        return (int)524807L;
    }
    public static int SCARD_ATTR_CURRENT_IFSD() {
        return (int)524808L;
    }
    public static int SCARD_ATTR_CURRENT_BWT() {
        return (int)524809L;
    }
    public static int SCARD_ATTR_CURRENT_CWT() {
        return (int)524810L;
    }
    public static int SCARD_ATTR_CURRENT_EBC_ENCODING() {
        return (int)524811L;
    }
    public static int SCARD_ATTR_EXTENDED_BWT() {
        return (int)524812L;
    }
    public static int SCARD_ATTR_ICC_PRESENCE() {
        return (int)590592L;
    }
    public static int SCARD_ATTR_ICC_INTERFACE_STATUS() {
        return (int)590593L;
    }
    public static int SCARD_ATTR_CURRENT_IO_STATE() {
        return (int)590594L;
    }
    public static int SCARD_ATTR_ATR_STRING() {
        return (int)590595L;
    }
    public static int SCARD_ATTR_ICC_TYPE_PER_ATR() {
        return (int)590596L;
    }
    public static int SCARD_ATTR_ESC_RESET() {
        return (int)499712L;
    }
    public static int SCARD_ATTR_ESC_CANCEL() {
        return (int)499715L;
    }
    public static int SCARD_ATTR_ESC_AUTHREQUEST() {
        return (int)499717L;
    }
    public static int SCARD_ATTR_MAXINPUT() {
        return (int)499719L;
    }
    public static int SCARD_ATTR_VENDOR_SPECIFIC_INFO() {
        return (int)499720L;
    }
    public static int SCARD_ATTR_DEVICE_UNIT() {
        return (int)2147418113L;
    }
    public static int SCARD_ATTR_DEVICE_IN_USE() {
        return (int)2147418114L;
    }
    public static int SCARD_ATTR_DEVICE_FRIENDLY_NAME_A() {
        return (int)2147418115L;
    }
    public static int SCARD_ATTR_DEVICE_SYSTEM_NAME_A() {
        return (int)2147418116L;
    }
    public static int SCARD_ATTR_DEVICE_FRIENDLY_NAME_W() {
        return (int)2147418117L;
    }
    public static int SCARD_ATTR_DEVICE_SYSTEM_NAME_W() {
        return (int)2147418118L;
    }
    public static int SCARD_ATTR_SUPRESS_T1_IFS_REQUEST() {
        return (int)2147418119L;
    }
    public static int SCARD_PERF_NUM_TRANSMISSIONS() {
        return (int)2147352577L;
    }
    public static int SCARD_PERF_BYTES_TRANSMITTED() {
        return (int)2147352578L;
    }
    public static int SCARD_PERF_TRANSMISSION_TIME() {
        return (int)2147352579L;
    }
    public static int SCARD_ATTR_DEVICE_FRIENDLY_NAME() {
        return (int)2147418115L;
    }
    public static int SCARD_ATTR_DEVICE_SYSTEM_NAME() {
        return (int)2147418116L;
    }
    public static int SCARD_AUTOALLOCATE() {
        return (int)4294967295L;
    }
    public static MemorySegment SCARD_ALL_READERS() {
        return constants$1666.SCARD_ALL_READERS$SEGMENT;
    }
    public static MemorySegment SCARD_DEFAULT_READERS() {
        return constants$1666.SCARD_DEFAULT_READERS$SEGMENT;
    }
    public static MemorySegment SCARD_LOCAL_READERS() {
        return constants$1667.SCARD_LOCAL_READERS$SEGMENT;
    }
    public static MemorySegment SCARD_SYSTEM_READERS() {
        return constants$1667.SCARD_SYSTEM_READERS$SEGMENT;
    }
    public static int SCARD_READER_SEL_AUTH_PACKAGE() {
        return (int)4294966667L;
    }
    public static long PROPSHEETPAGEA_V1_SIZE() {
        return 72L;
    }
    public static long PROPSHEETPAGEW_V1_SIZE() {
        return 72L;
    }
    public static long PROPSHEETPAGEA_V2_SIZE() {
        return 88L;
    }
    public static long PROPSHEETPAGEW_V2_SIZE() {
        return 88L;
    }
    public static long PROPSHEETPAGEA_V3_SIZE() {
        return 96L;
    }
    public static long PROPSHEETPAGEW_V3_SIZE() {
        return 96L;
    }
    public static long PROPSHEETPAGEA_V4_SIZE() {
        return 104L;
    }
    public static long PROPSHEETPAGEW_V4_SIZE() {
        return 104L;
    }
    public static long PROPSHEETPAGE_V1_SIZE() {
        return 72L;
    }
    public static long PROPSHEETPAGE_V2_SIZE() {
        return 88L;
    }
    public static long PROPSHEETHEADERA_V1_SIZE() {
        return 72L;
    }
    public static long PROPSHEETHEADERW_V1_SIZE() {
        return 72L;
    }
    public static long PROPSHEETHEADERA_V2_SIZE() {
        return 96L;
    }
    public static long PROPSHEETHEADERW_V2_SIZE() {
        return 96L;
    }
    public static long PROPSHEETHEADER_V1_SIZE() {
        return 72L;
    }
    public static long PROPSHEETHEADER_V2_SIZE() {
        return 96L;
    }
    public static int PSN_FIRST() {
        return (int)4294967096L;
    }
    public static int PSN_LAST() {
        return (int)4294966997L;
    }
    public static int PSN_SETACTIVE() {
        return (int)4294967096L;
    }
    public static int PSN_KILLACTIVE() {
        return (int)4294967095L;
    }
    public static int PSN_APPLY() {
        return (int)4294967094L;
    }
    public static int PSN_RESET() {
        return (int)4294967093L;
    }
    public static int PSN_HELP() {
        return (int)4294967091L;
    }
    public static int PSN_WIZBACK() {
        return (int)4294967090L;
    }
    public static int PSN_WIZNEXT() {
        return (int)4294967089L;
    }
    public static int PSN_WIZFINISH() {
        return (int)4294967088L;
    }
    public static int PSN_QUERYCANCEL() {
        return (int)4294967087L;
    }
    public static int PSN_GETOBJECT() {
        return (int)4294967086L;
    }
    public static int PSN_TRANSLATEACCELERATOR() {
        return (int)4294967084L;
    }
    public static int PSN_QUERYINITIALFOCUS() {
        return (int)4294967083L;
    }
    public static int PSM_SETCURSEL() {
        return (int)1125L;
    }
    public static int PSM_REMOVEPAGE() {
        return (int)1126L;
    }
    public static int PSM_ADDPAGE() {
        return (int)1127L;
    }
    public static int PSM_CHANGED() {
        return (int)1128L;
    }
    public static int PSM_RESTARTWINDOWS() {
        return (int)1129L;
    }
    public static int PSM_REBOOTSYSTEM() {
        return (int)1130L;
    }
    public static int PSM_CANCELTOCLOSE() {
        return (int)1131L;
    }
    public static int PSM_QUERYSIBLINGS() {
        return (int)1132L;
    }
    public static int PSM_UNCHANGED() {
        return (int)1133L;
    }
    public static int PSM_APPLY() {
        return (int)1134L;
    }
    public static int PSM_SETTITLEA() {
        return (int)1135L;
    }
    public static int PSM_SETTITLEW() {
        return (int)1144L;
    }
    public static int PSM_SETTITLE() {
        return (int)1135L;
    }
    public static int PSM_SETWIZBUTTONS() {
        return (int)1136L;
    }
    public static int PSM_PRESSBUTTON() {
        return (int)1137L;
    }
    public static int PSM_SETCURSELID() {
        return (int)1138L;
    }
    public static int PSM_SETFINISHTEXTA() {
        return (int)1139L;
    }
    public static int PSM_SETFINISHTEXTW() {
        return (int)1145L;
    }
    public static int PSM_SETFINISHTEXT() {
        return (int)1139L;
    }
    public static int PSM_GETTABCONTROL() {
        return (int)1140L;
    }
}


