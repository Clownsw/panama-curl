// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class curl_fileinfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("filename"),
        Constants$root.C_LONG$LAYOUT.withName("filetype"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("time"),
        Constants$root.C_LONG$LAYOUT.withName("perm"),
        Constants$root.C_LONG$LAYOUT.withName("uid"),
        Constants$root.C_LONG$LAYOUT.withName("gid"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("size"),
        Constants$root.C_LONG$LAYOUT.withName("hardlinks"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("time"),
            Constants$root.C_POINTER$LAYOUT.withName("perm"),
            Constants$root.C_POINTER$LAYOUT.withName("user"),
            Constants$root.C_POINTER$LAYOUT.withName("group"),
            Constants$root.C_POINTER$LAYOUT.withName("target")
        ).withName("strings"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("b_data"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("b_size"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("b_used")
    ).withName("curl_fileinfo");
    public static MemoryLayout $LAYOUT() {
        return curl_fileinfo.$struct$LAYOUT;
    }
    static final VarHandle filename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("filename"));
    public static VarHandle filename$VH() {
        return curl_fileinfo.filename$VH;
    }
    public static MemoryAddress filename$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_fileinfo.filename$VH.get(seg);
    }
    public static void filename$set( MemorySegment seg, MemoryAddress x) {
        curl_fileinfo.filename$VH.set(seg, x);
    }
    public static MemoryAddress filename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_fileinfo.filename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filename$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_fileinfo.filename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle filetype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("filetype"));
    public static VarHandle filetype$VH() {
        return curl_fileinfo.filetype$VH;
    }
    public static int filetype$get(MemorySegment seg) {
        return (int)curl_fileinfo.filetype$VH.get(seg);
    }
    public static void filetype$set( MemorySegment seg, int x) {
        curl_fileinfo.filetype$VH.set(seg, x);
    }
    public static int filetype$get(MemorySegment seg, long index) {
        return (int)curl_fileinfo.filetype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filetype$set(MemorySegment seg, long index, int x) {
        curl_fileinfo.filetype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("time"));
    public static VarHandle time$VH() {
        return curl_fileinfo.time$VH;
    }
    public static long time$get(MemorySegment seg) {
        return (long)curl_fileinfo.time$VH.get(seg);
    }
    public static void time$set( MemorySegment seg, long x) {
        curl_fileinfo.time$VH.set(seg, x);
    }
    public static long time$get(MemorySegment seg, long index) {
        return (long)curl_fileinfo.time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void time$set(MemorySegment seg, long index, long x) {
        curl_fileinfo.time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle perm$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("perm"));
    public static VarHandle perm$VH() {
        return curl_fileinfo.perm$VH;
    }
    public static int perm$get(MemorySegment seg) {
        return (int)curl_fileinfo.perm$VH.get(seg);
    }
    public static void perm$set( MemorySegment seg, int x) {
        curl_fileinfo.perm$VH.set(seg, x);
    }
    public static int perm$get(MemorySegment seg, long index) {
        return (int)curl_fileinfo.perm$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void perm$set(MemorySegment seg, long index, int x) {
        curl_fileinfo.perm$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle uid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("uid"));
    public static VarHandle uid$VH() {
        return curl_fileinfo.uid$VH;
    }
    public static int uid$get(MemorySegment seg) {
        return (int)curl_fileinfo.uid$VH.get(seg);
    }
    public static void uid$set( MemorySegment seg, int x) {
        curl_fileinfo.uid$VH.set(seg, x);
    }
    public static int uid$get(MemorySegment seg, long index) {
        return (int)curl_fileinfo.uid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uid$set(MemorySegment seg, long index, int x) {
        curl_fileinfo.uid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gid"));
    public static VarHandle gid$VH() {
        return curl_fileinfo.gid$VH;
    }
    public static int gid$get(MemorySegment seg) {
        return (int)curl_fileinfo.gid$VH.get(seg);
    }
    public static void gid$set( MemorySegment seg, int x) {
        curl_fileinfo.gid$VH.set(seg, x);
    }
    public static int gid$get(MemorySegment seg, long index) {
        return (int)curl_fileinfo.gid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gid$set(MemorySegment seg, long index, int x) {
        curl_fileinfo.gid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));
    public static VarHandle size$VH() {
        return curl_fileinfo.size$VH;
    }
    public static long size$get(MemorySegment seg) {
        return (long)curl_fileinfo.size$VH.get(seg);
    }
    public static void size$set( MemorySegment seg, long x) {
        curl_fileinfo.size$VH.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)curl_fileinfo.size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        curl_fileinfo.size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hardlinks$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hardlinks"));
    public static VarHandle hardlinks$VH() {
        return curl_fileinfo.hardlinks$VH;
    }
    public static int hardlinks$get(MemorySegment seg) {
        return (int)curl_fileinfo.hardlinks$VH.get(seg);
    }
    public static void hardlinks$set( MemorySegment seg, int x) {
        curl_fileinfo.hardlinks$VH.set(seg, x);
    }
    public static int hardlinks$get(MemorySegment seg, long index) {
        return (int)curl_fileinfo.hardlinks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hardlinks$set(MemorySegment seg, long index, int x) {
        curl_fileinfo.hardlinks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class strings {

        static final  GroupLayout strings$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("time"),
            Constants$root.C_POINTER$LAYOUT.withName("perm"),
            Constants$root.C_POINTER$LAYOUT.withName("user"),
            Constants$root.C_POINTER$LAYOUT.withName("group"),
            Constants$root.C_POINTER$LAYOUT.withName("target")
        );
        public static MemoryLayout $LAYOUT() {
            return strings.strings$struct$LAYOUT;
        }
        static final VarHandle time$VH = strings$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("time"));
        public static VarHandle time$VH() {
            return strings.time$VH;
        }
        public static MemoryAddress time$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)strings.time$VH.get(seg);
        }
        public static void time$set( MemorySegment seg, MemoryAddress x) {
            strings.time$VH.set(seg, x);
        }
        public static MemoryAddress time$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)strings.time$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void time$set(MemorySegment seg, long index, MemoryAddress x) {
            strings.time$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle perm$VH = strings$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("perm"));
        public static VarHandle perm$VH() {
            return strings.perm$VH;
        }
        public static MemoryAddress perm$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)strings.perm$VH.get(seg);
        }
        public static void perm$set( MemorySegment seg, MemoryAddress x) {
            strings.perm$VH.set(seg, x);
        }
        public static MemoryAddress perm$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)strings.perm$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void perm$set(MemorySegment seg, long index, MemoryAddress x) {
            strings.perm$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle user$VH = strings$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user"));
        public static VarHandle user$VH() {
            return strings.user$VH;
        }
        public static MemoryAddress user$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)strings.user$VH.get(seg);
        }
        public static void user$set( MemorySegment seg, MemoryAddress x) {
            strings.user$VH.set(seg, x);
        }
        public static MemoryAddress user$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)strings.user$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void user$set(MemorySegment seg, long index, MemoryAddress x) {
            strings.user$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle group$VH = strings$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("group"));
        public static VarHandle group$VH() {
            return strings.group$VH;
        }
        public static MemoryAddress group$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)strings.group$VH.get(seg);
        }
        public static void group$set( MemorySegment seg, MemoryAddress x) {
            strings.group$VH.set(seg, x);
        }
        public static MemoryAddress group$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)strings.group$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void group$set(MemorySegment seg, long index, MemoryAddress x) {
            strings.group$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle target$VH = strings$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("target"));
        public static VarHandle target$VH() {
            return strings.target$VH;
        }
        public static MemoryAddress target$get(MemorySegment seg) {
            return (java.lang.foreign.MemoryAddress)strings.target$VH.get(seg);
        }
        public static void target$set( MemorySegment seg, MemoryAddress x) {
            strings.target$VH.set(seg, x);
        }
        public static MemoryAddress target$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemoryAddress)strings.target$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void target$set(MemorySegment seg, long index, MemoryAddress x) {
            strings.target$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment strings$slice(MemorySegment seg) {
        return seg.asSlice(56, 40);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return curl_fileinfo.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)curl_fileinfo.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        curl_fileinfo.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)curl_fileinfo.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        curl_fileinfo.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle b_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("b_data"));
    public static VarHandle b_data$VH() {
        return curl_fileinfo.b_data$VH;
    }
    public static MemoryAddress b_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)curl_fileinfo.b_data$VH.get(seg);
    }
    public static void b_data$set( MemorySegment seg, MemoryAddress x) {
        curl_fileinfo.b_data$VH.set(seg, x);
    }
    public static MemoryAddress b_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)curl_fileinfo.b_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void b_data$set(MemorySegment seg, long index, MemoryAddress x) {
        curl_fileinfo.b_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle b_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("b_size"));
    public static VarHandle b_size$VH() {
        return curl_fileinfo.b_size$VH;
    }
    public static long b_size$get(MemorySegment seg) {
        return (long)curl_fileinfo.b_size$VH.get(seg);
    }
    public static void b_size$set( MemorySegment seg, long x) {
        curl_fileinfo.b_size$VH.set(seg, x);
    }
    public static long b_size$get(MemorySegment seg, long index) {
        return (long)curl_fileinfo.b_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void b_size$set(MemorySegment seg, long index, long x) {
        curl_fileinfo.b_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle b_used$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("b_used"));
    public static VarHandle b_used$VH() {
        return curl_fileinfo.b_used$VH;
    }
    public static long b_used$get(MemorySegment seg) {
        return (long)curl_fileinfo.b_used$VH.get(seg);
    }
    public static void b_used$set( MemorySegment seg, long x) {
        curl_fileinfo.b_used$VH.set(seg, x);
    }
    public static long b_used$get(MemorySegment seg, long index) {
        return (long)curl_fileinfo.b_used$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void b_used$set(MemorySegment seg, long index, long x) {
        curl_fileinfo.b_used$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


