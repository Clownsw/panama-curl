// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class in_recverr {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("protocol"),
        Constants$root.C_LONG$LAYOUT.withName("info"),
        Constants$root.C_CHAR$LAYOUT.withName("type"),
        Constants$root.C_CHAR$LAYOUT.withName("code"),
        MemoryLayout.paddingLayout(16)
    ).withName("in_recverr");
    public static MemoryLayout $LAYOUT() {
        return in_recverr.$struct$LAYOUT;
    }
    static final VarHandle protocol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("protocol"));
    public static VarHandle protocol$VH() {
        return in_recverr.protocol$VH;
    }
    public static int protocol$get(MemorySegment seg) {
        return (int)in_recverr.protocol$VH.get(seg);
    }
    public static void protocol$set( MemorySegment seg, int x) {
        in_recverr.protocol$VH.set(seg, x);
    }
    public static int protocol$get(MemorySegment seg, long index) {
        return (int)in_recverr.protocol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void protocol$set(MemorySegment seg, long index, int x) {
        in_recverr.protocol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle info$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("info"));
    public static VarHandle info$VH() {
        return in_recverr.info$VH;
    }
    public static int info$get(MemorySegment seg) {
        return (int)in_recverr.info$VH.get(seg);
    }
    public static void info$set( MemorySegment seg, int x) {
        in_recverr.info$VH.set(seg, x);
    }
    public static int info$get(MemorySegment seg, long index) {
        return (int)in_recverr.info$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void info$set(MemorySegment seg, long index, int x) {
        in_recverr.info$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return in_recverr.type$VH;
    }
    public static byte type$get(MemorySegment seg) {
        return (byte)in_recverr.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, byte x) {
        in_recverr.type$VH.set(seg, x);
    }
    public static byte type$get(MemorySegment seg, long index) {
        return (byte)in_recverr.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, byte x) {
        in_recverr.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle code$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("code"));
    public static VarHandle code$VH() {
        return in_recverr.code$VH;
    }
    public static byte code$get(MemorySegment seg) {
        return (byte)in_recverr.code$VH.get(seg);
    }
    public static void code$set( MemorySegment seg, byte x) {
        in_recverr.code$VH.set(seg, x);
    }
    public static byte code$get(MemorySegment seg, long index) {
        return (byte)in_recverr.code$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void code$set(MemorySegment seg, long index, byte x) {
        in_recverr.code$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


