// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class curl_ws_frame {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("age"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("offset"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("bytesleft")
    ).withName("curl_ws_frame");
    public static MemoryLayout $LAYOUT() {
        return curl_ws_frame.$struct$LAYOUT;
    }
    static final VarHandle age$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("age"));
    public static VarHandle age$VH() {
        return curl_ws_frame.age$VH;
    }
    public static int age$get(MemorySegment seg) {
        return (int)curl_ws_frame.age$VH.get(seg);
    }
    public static void age$set( MemorySegment seg, int x) {
        curl_ws_frame.age$VH.set(seg, x);
    }
    public static int age$get(MemorySegment seg, long index) {
        return (int)curl_ws_frame.age$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void age$set(MemorySegment seg, long index, int x) {
        curl_ws_frame.age$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return curl_ws_frame.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)curl_ws_frame.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        curl_ws_frame.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)curl_ws_frame.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        curl_ws_frame.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("offset"));
    public static VarHandle offset$VH() {
        return curl_ws_frame.offset$VH;
    }
    public static long offset$get(MemorySegment seg) {
        return (long)curl_ws_frame.offset$VH.get(seg);
    }
    public static void offset$set( MemorySegment seg, long x) {
        curl_ws_frame.offset$VH.set(seg, x);
    }
    public static long offset$get(MemorySegment seg, long index) {
        return (long)curl_ws_frame.offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, long x) {
        curl_ws_frame.offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bytesleft$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bytesleft"));
    public static VarHandle bytesleft$VH() {
        return curl_ws_frame.bytesleft$VH;
    }
    public static long bytesleft$get(MemorySegment seg) {
        return (long)curl_ws_frame.bytesleft$VH.get(seg);
    }
    public static void bytesleft$set( MemorySegment seg, long x) {
        curl_ws_frame.bytesleft$VH.set(seg, x);
    }
    public static long bytesleft$get(MemorySegment seg, long index) {
        return (long)curl_ws_frame.bytesleft$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bytesleft$set(MemorySegment seg, long index, long x) {
        curl_ws_frame.bytesleft$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


