// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$84 {

    static final FunctionDescriptor _rotl$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle _rotl$MH = RuntimeHelper.downcallHandle(
        "_rotl",
        constants$84._rotl$FUNC
    );
    static final FunctionDescriptor _rotl64$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle _rotl64$MH = RuntimeHelper.downcallHandle(
        "_rotl64",
        constants$84._rotl64$FUNC
    );
    static final FunctionDescriptor _rotr$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle _rotr$MH = RuntimeHelper.downcallHandle(
        "_rotr",
        constants$84._rotr$FUNC
    );
    static final FunctionDescriptor _rotr64$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle _rotr64$MH = RuntimeHelper.downcallHandle(
        "_rotr64",
        constants$84._rotr64$FUNC
    );
    static final FunctionDescriptor _errno$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle _errno$MH = RuntimeHelper.downcallHandle(
        "_errno",
        constants$84._errno$FUNC
    );
    static final FunctionDescriptor _set_errno$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle _set_errno$MH = RuntimeHelper.downcallHandle(
        "_set_errno",
        constants$84._set_errno$FUNC
    );
}


