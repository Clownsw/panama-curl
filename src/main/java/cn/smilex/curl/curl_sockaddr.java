// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class curl_sockaddr {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("family"),
        Constants$root.C_LONG$LAYOUT.withName("socktype"),
        Constants$root.C_LONG$LAYOUT.withName("protocol"),
        Constants$root.C_LONG$LAYOUT.withName("addrlen"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("sa_family"),
            MemoryLayout.sequenceLayout(14, Constants$root.C_CHAR$LAYOUT).withName("sa_data")
        ).withName("addr")
    ).withName("curl_sockaddr");
    public static MemoryLayout $LAYOUT() {
        return curl_sockaddr.$struct$LAYOUT;
    }
    static final VarHandle family$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("family"));
    public static VarHandle family$VH() {
        return curl_sockaddr.family$VH;
    }
    public static int family$get(MemorySegment seg) {
        return (int)curl_sockaddr.family$VH.get(seg);
    }
    public static void family$set( MemorySegment seg, int x) {
        curl_sockaddr.family$VH.set(seg, x);
    }
    public static int family$get(MemorySegment seg, long index) {
        return (int)curl_sockaddr.family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void family$set(MemorySegment seg, long index, int x) {
        curl_sockaddr.family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle socktype$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("socktype"));
    public static VarHandle socktype$VH() {
        return curl_sockaddr.socktype$VH;
    }
    public static int socktype$get(MemorySegment seg) {
        return (int)curl_sockaddr.socktype$VH.get(seg);
    }
    public static void socktype$set( MemorySegment seg, int x) {
        curl_sockaddr.socktype$VH.set(seg, x);
    }
    public static int socktype$get(MemorySegment seg, long index) {
        return (int)curl_sockaddr.socktype$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void socktype$set(MemorySegment seg, long index, int x) {
        curl_sockaddr.socktype$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle protocol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("protocol"));
    public static VarHandle protocol$VH() {
        return curl_sockaddr.protocol$VH;
    }
    public static int protocol$get(MemorySegment seg) {
        return (int)curl_sockaddr.protocol$VH.get(seg);
    }
    public static void protocol$set( MemorySegment seg, int x) {
        curl_sockaddr.protocol$VH.set(seg, x);
    }
    public static int protocol$get(MemorySegment seg, long index) {
        return (int)curl_sockaddr.protocol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void protocol$set(MemorySegment seg, long index, int x) {
        curl_sockaddr.protocol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle addrlen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("addrlen"));
    public static VarHandle addrlen$VH() {
        return curl_sockaddr.addrlen$VH;
    }
    public static int addrlen$get(MemorySegment seg) {
        return (int)curl_sockaddr.addrlen$VH.get(seg);
    }
    public static void addrlen$set( MemorySegment seg, int x) {
        curl_sockaddr.addrlen$VH.set(seg, x);
    }
    public static int addrlen$get(MemorySegment seg, long index) {
        return (int)curl_sockaddr.addrlen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void addrlen$set(MemorySegment seg, long index, int x) {
        curl_sockaddr.addrlen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment addr$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


