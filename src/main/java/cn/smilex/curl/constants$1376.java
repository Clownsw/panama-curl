// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$1376 {

    static final FunctionDescriptor GetAddrInfoExW$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAddrInfoExW$MH = RuntimeHelper.downcallHandle(
        "GetAddrInfoExW",
        constants$1376.GetAddrInfoExW$FUNC
    );
    static final FunctionDescriptor GetAddrInfoExCancel$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAddrInfoExCancel$MH = RuntimeHelper.downcallHandle(
        "GetAddrInfoExCancel",
        constants$1376.GetAddrInfoExCancel$FUNC
    );
    static final FunctionDescriptor GetAddrInfoExOverlappedResult$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetAddrInfoExOverlappedResult$MH = RuntimeHelper.downcallHandle(
        "GetAddrInfoExOverlappedResult",
        constants$1376.GetAddrInfoExOverlappedResult$FUNC
    );
    static final FunctionDescriptor SetAddrInfoExA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetAddrInfoExA$MH = RuntimeHelper.downcallHandle(
        "SetAddrInfoExA",
        constants$1376.SetAddrInfoExA$FUNC
    );
    static final FunctionDescriptor SetAddrInfoExW$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SetAddrInfoExW$MH = RuntimeHelper.downcallHandle(
        "SetAddrInfoExW",
        constants$1376.SetAddrInfoExW$FUNC
    );
    static final FunctionDescriptor freeaddrinfo$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle freeaddrinfo$MH = RuntimeHelper.downcallHandle(
        "freeaddrinfo",
        constants$1376.freeaddrinfo$FUNC
    );
}


