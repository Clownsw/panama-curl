// Generated by jextract

package cn.smilex;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$768 {

    static final FunctionDescriptor RPCNOTIFICATION_ROUTINE$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RPCNOTIFICATION_ROUTINE$MH = RuntimeHelper.downcallHandle(
        constants$768.RPCNOTIFICATION_ROUTINE$FUNC
    );
    static final FunctionDescriptor PFN_RPCNOTIFICATION_ROUTINE$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle PFN_RPCNOTIFICATION_ROUTINE$MH = RuntimeHelper.downcallHandle(
        constants$768.PFN_RPCNOTIFICATION_ROUTINE$FUNC
    );
    static final FunctionDescriptor RpcAsyncRegisterInfo$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcAsyncRegisterInfo$MH = RuntimeHelper.downcallHandle(
        "RpcAsyncRegisterInfo",
        constants$768.RpcAsyncRegisterInfo$FUNC
    );
    static final FunctionDescriptor RpcAsyncInitializeHandle$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle RpcAsyncInitializeHandle$MH = RuntimeHelper.downcallHandle(
        "RpcAsyncInitializeHandle",
        constants$768.RpcAsyncInitializeHandle$FUNC
    );
    static final FunctionDescriptor RpcAsyncGetCallStatus$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RpcAsyncGetCallStatus$MH = RuntimeHelper.downcallHandle(
        "RpcAsyncGetCallStatus",
        constants$768.RpcAsyncGetCallStatus$FUNC
    );
}


